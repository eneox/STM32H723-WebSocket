
h723zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016058  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003020  08016328  08016328  00026328  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019348  08019348  00029348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08019350  08019350  00029350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08019354  08019354  00029354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000310  24000000  08019358  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000310  08019668  00030310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000370  080196c8  00030370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033c4  240003d0  08019728  000303d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24003794  08019728  00033794  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303fe  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002354b  00000000  00000000  00030441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300d  00000000  00000000  0005398c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001920  00000000  00000000  000569a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001492  00000000  00000000  000582c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003528a  00000000  00000000  00059752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d749  00000000  00000000  0008e9dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014d581  00000000  00000000  000ac125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007d50  00000000  00000000  001f96a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  002013f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240003d0 	.word	0x240003d0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08016310 	.word	0x08016310

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240003d4 	.word	0x240003d4
 800030c:	08016310 	.word	0x08016310

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_ldivmod>:
 8000758:	b97b      	cbnz	r3, 800077a <__aeabi_ldivmod+0x22>
 800075a:	b972      	cbnz	r2, 800077a <__aeabi_ldivmod+0x22>
 800075c:	2900      	cmp	r1, #0
 800075e:	bfbe      	ittt	lt
 8000760:	2000      	movlt	r0, #0
 8000762:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000766:	e006      	blt.n	8000776 <__aeabi_ldivmod+0x1e>
 8000768:	bf08      	it	eq
 800076a:	2800      	cmpeq	r0, #0
 800076c:	bf1c      	itt	ne
 800076e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000772:	f04f 30ff 	movne.w	r0, #4294967295
 8000776:	f000 b9f3 	b.w	8000b60 <__aeabi_idiv0>
 800077a:	f1ad 0c08 	sub.w	ip, sp, #8
 800077e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000782:	2900      	cmp	r1, #0
 8000784:	db09      	blt.n	800079a <__aeabi_ldivmod+0x42>
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <__aeabi_ldivmod+0x68>
 800078a:	f000 f885 	bl	8000898 <__udivmoddi4>
 800078e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr
 800079a:	4240      	negs	r0, r0
 800079c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db1b      	blt.n	80007dc <__aeabi_ldivmod+0x84>
 80007a4:	f000 f878 	bl	8000898 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	4770      	bx	lr
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	f000 f867 	bl	8000898 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4240      	negs	r0, r0
 80007d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007da:	4770      	bx	lr
 80007dc:	4252      	negs	r2, r2
 80007de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e2:	f000 f859 	bl	8000898 <__udivmoddi4>
 80007e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ee:	b004      	add	sp, #16
 80007f0:	4252      	negs	r2, r2
 80007f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b9a8 	b.w	8000b60 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f83e 	bl	8000898 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__aeabi_d2lz>:
 8000828:	b508      	push	{r3, lr}
 800082a:	4602      	mov	r2, r0
 800082c:	460b      	mov	r3, r1
 800082e:	ec43 2b17 	vmov	d7, r2, r3
 8000832:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d403      	bmi.n	8000844 <__aeabi_d2lz+0x1c>
 800083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000840:	f000 b80a 	b.w	8000858 <__aeabi_d2ulz>
 8000844:	eeb1 7b47 	vneg.f64	d7, d7
 8000848:	ec51 0b17 	vmov	r0, r1, d7
 800084c:	f000 f804 	bl	8000858 <__aeabi_d2ulz>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	bd08      	pop	{r3, pc}

08000858 <__aeabi_d2ulz>:
 8000858:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000888 <__aeabi_d2ulz+0x30>
 800085c:	ec41 0b17 	vmov	d7, r0, r1
 8000860:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000890 <__aeabi_d2ulz+0x38>
 8000864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000868:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800086c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000870:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000878:	ee16 1a10 	vmov	r1, s12
 800087c:	ee17 0a90 	vmov	r0, s15
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	3df00000 	.word	0x3df00000
 8000890:	00000000 	.word	0x00000000
 8000894:	41f00000 	.word	0x41f00000

08000898 <__udivmoddi4>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	9e08      	ldr	r6, [sp, #32]
 800089e:	460d      	mov	r5, r1
 80008a0:	4604      	mov	r4, r0
 80008a2:	460f      	mov	r7, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14a      	bne.n	800093e <__udivmoddi4+0xa6>
 80008a8:	428a      	cmp	r2, r1
 80008aa:	4694      	mov	ip, r2
 80008ac:	d965      	bls.n	800097a <__udivmoddi4+0xe2>
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	b143      	cbz	r3, 80008c6 <__udivmoddi4+0x2e>
 80008b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008b8:	f1c3 0220 	rsb	r2, r3, #32
 80008bc:	409f      	lsls	r7, r3
 80008be:	fa20 f202 	lsr.w	r2, r0, r2
 80008c2:	4317      	orrs	r7, r2
 80008c4:	409c      	lsls	r4, r3
 80008c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ca:	fa1f f58c 	uxth.w	r5, ip
 80008ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80008d2:	0c22      	lsrs	r2, r4, #16
 80008d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80008d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008dc:	fb01 f005 	mul.w	r0, r1, r5
 80008e0:	4290      	cmp	r0, r2
 80008e2:	d90a      	bls.n	80008fa <__udivmoddi4+0x62>
 80008e4:	eb1c 0202 	adds.w	r2, ip, r2
 80008e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80008ec:	f080 811c 	bcs.w	8000b28 <__udivmoddi4+0x290>
 80008f0:	4290      	cmp	r0, r2
 80008f2:	f240 8119 	bls.w	8000b28 <__udivmoddi4+0x290>
 80008f6:	3902      	subs	r1, #2
 80008f8:	4462      	add	r2, ip
 80008fa:	1a12      	subs	r2, r2, r0
 80008fc:	b2a4      	uxth	r4, r4
 80008fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000902:	fb0e 2210 	mls	r2, lr, r0, r2
 8000906:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090a:	fb00 f505 	mul.w	r5, r0, r5
 800090e:	42a5      	cmp	r5, r4
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x90>
 8000912:	eb1c 0404 	adds.w	r4, ip, r4
 8000916:	f100 32ff 	add.w	r2, r0, #4294967295
 800091a:	f080 8107 	bcs.w	8000b2c <__udivmoddi4+0x294>
 800091e:	42a5      	cmp	r5, r4
 8000920:	f240 8104 	bls.w	8000b2c <__udivmoddi4+0x294>
 8000924:	4464      	add	r4, ip
 8000926:	3802      	subs	r0, #2
 8000928:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800092c:	1b64      	subs	r4, r4, r5
 800092e:	2100      	movs	r1, #0
 8000930:	b11e      	cbz	r6, 800093a <__udivmoddi4+0xa2>
 8000932:	40dc      	lsrs	r4, r3
 8000934:	2300      	movs	r3, #0
 8000936:	e9c6 4300 	strd	r4, r3, [r6]
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	428b      	cmp	r3, r1
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0xbc>
 8000942:	2e00      	cmp	r6, #0
 8000944:	f000 80ed 	beq.w	8000b22 <__udivmoddi4+0x28a>
 8000948:	2100      	movs	r1, #0
 800094a:	e9c6 0500 	strd	r0, r5, [r6]
 800094e:	4608      	mov	r0, r1
 8000950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000954:	fab3 f183 	clz	r1, r3
 8000958:	2900      	cmp	r1, #0
 800095a:	d149      	bne.n	80009f0 <__udivmoddi4+0x158>
 800095c:	42ab      	cmp	r3, r5
 800095e:	d302      	bcc.n	8000966 <__udivmoddi4+0xce>
 8000960:	4282      	cmp	r2, r0
 8000962:	f200 80f8 	bhi.w	8000b56 <__udivmoddi4+0x2be>
 8000966:	1a84      	subs	r4, r0, r2
 8000968:	eb65 0203 	sbc.w	r2, r5, r3
 800096c:	2001      	movs	r0, #1
 800096e:	4617      	mov	r7, r2
 8000970:	2e00      	cmp	r6, #0
 8000972:	d0e2      	beq.n	800093a <__udivmoddi4+0xa2>
 8000974:	e9c6 4700 	strd	r4, r7, [r6]
 8000978:	e7df      	b.n	800093a <__udivmoddi4+0xa2>
 800097a:	b902      	cbnz	r2, 800097e <__udivmoddi4+0xe6>
 800097c:	deff      	udf	#255	; 0xff
 800097e:	fab2 f382 	clz	r3, r2
 8000982:	2b00      	cmp	r3, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x210>
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	2101      	movs	r1, #1
 8000994:	fbb2 f5f7 	udiv	r5, r2, r7
 8000998:	fb07 2015 	mls	r0, r7, r5, r2
 800099c:	0c22      	lsrs	r2, r4, #16
 800099e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009a2:	fb0e f005 	mul.w	r0, lr, r5
 80009a6:	4290      	cmp	r0, r2
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x124>
 80009aa:	eb1c 0202 	adds.w	r2, ip, r2
 80009ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b2:	d202      	bcs.n	80009ba <__udivmoddi4+0x122>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f200 80cb 	bhi.w	8000b50 <__udivmoddi4+0x2b8>
 80009ba:	4645      	mov	r5, r8
 80009bc:	1a12      	subs	r2, r2, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80009c4:	fb07 2210 	mls	r2, r7, r0, r2
 80009c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009cc:	fb0e fe00 	mul.w	lr, lr, r0
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x14e>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009dc:	d202      	bcs.n	80009e4 <__udivmoddi4+0x14c>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	f200 80bb 	bhi.w	8000b5a <__udivmoddi4+0x2c2>
 80009e4:	4610      	mov	r0, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ee:	e79f      	b.n	8000930 <__udivmoddi4+0x98>
 80009f0:	f1c1 0720 	rsb	r7, r1, #32
 80009f4:	408b      	lsls	r3, r1
 80009f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80009fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000a02:	fa20 f307 	lsr.w	r3, r0, r7
 8000a06:	40fd      	lsrs	r5, r7
 8000a08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	fb09 5518 	mls	r5, r9, r8, r5
 8000a1a:	0c1c      	lsrs	r4, r3, #16
 8000a1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a20:	fb08 f50e 	mul.w	r5, r8, lr
 8000a24:	42a5      	cmp	r5, r4
 8000a26:	fa02 f201 	lsl.w	r2, r2, r1
 8000a2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000a2e:	d90b      	bls.n	8000a48 <__udivmoddi4+0x1b0>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a38:	f080 8088 	bcs.w	8000b4c <__udivmoddi4+0x2b4>
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	f240 8085 	bls.w	8000b4c <__udivmoddi4+0x2b4>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	4464      	add	r4, ip
 8000a48:	1b64      	subs	r4, r4, r5
 8000a4a:	b29d      	uxth	r5, r3
 8000a4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a50:	fb09 4413 	mls	r4, r9, r3, r4
 8000a54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x1da>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a68:	d26c      	bcs.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	d96a      	bls.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6e:	3b02      	subs	r3, #2
 8000a70:	4464      	add	r4, ip
 8000a72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a76:	fba3 9502 	umull	r9, r5, r3, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	42ac      	cmp	r4, r5
 8000a80:	46c8      	mov	r8, r9
 8000a82:	46ae      	mov	lr, r5
 8000a84:	d356      	bcc.n	8000b34 <__udivmoddi4+0x29c>
 8000a86:	d053      	beq.n	8000b30 <__udivmoddi4+0x298>
 8000a88:	b156      	cbz	r6, 8000aa0 <__udivmoddi4+0x208>
 8000a8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000a8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000a92:	fa04 f707 	lsl.w	r7, r4, r7
 8000a96:	40ca      	lsrs	r2, r1
 8000a98:	40cc      	lsrs	r4, r1
 8000a9a:	4317      	orrs	r7, r2
 8000a9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	f1c3 0120 	rsb	r1, r3, #32
 8000aac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ab4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ab8:	409d      	lsls	r5, r3
 8000aba:	432a      	orrs	r2, r5
 8000abc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac0:	fa1f fe8c 	uxth.w	lr, ip
 8000ac4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac8:	fb07 1510 	mls	r5, r7, r0, r1
 8000acc:	0c11      	lsrs	r1, r2, #16
 8000ace:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ad2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ad6:	428d      	cmp	r5, r1
 8000ad8:	fa04 f403 	lsl.w	r4, r4, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x258>
 8000ade:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ae6:	d22f      	bcs.n	8000b48 <__udivmoddi4+0x2b0>
 8000ae8:	428d      	cmp	r5, r1
 8000aea:	d92d      	bls.n	8000b48 <__udivmoddi4+0x2b0>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	1b49      	subs	r1, r1, r5
 8000af2:	b292      	uxth	r2, r2
 8000af4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000af8:	fb07 1115 	mls	r1, r7, r5, r1
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	fb05 f10e 	mul.w	r1, r5, lr
 8000b04:	4291      	cmp	r1, r2
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x282>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b10:	d216      	bcs.n	8000b40 <__udivmoddi4+0x2a8>
 8000b12:	4291      	cmp	r1, r2
 8000b14:	d914      	bls.n	8000b40 <__udivmoddi4+0x2a8>
 8000b16:	3d02      	subs	r5, #2
 8000b18:	4462      	add	r2, ip
 8000b1a:	1a52      	subs	r2, r2, r1
 8000b1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b20:	e738      	b.n	8000994 <__udivmoddi4+0xfc>
 8000b22:	4631      	mov	r1, r6
 8000b24:	4630      	mov	r0, r6
 8000b26:	e708      	b.n	800093a <__udivmoddi4+0xa2>
 8000b28:	4639      	mov	r1, r7
 8000b2a:	e6e6      	b.n	80008fa <__udivmoddi4+0x62>
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	e6fb      	b.n	8000928 <__udivmoddi4+0x90>
 8000b30:	4548      	cmp	r0, r9
 8000b32:	d2a9      	bcs.n	8000a88 <__udivmoddi4+0x1f0>
 8000b34:	ebb9 0802 	subs.w	r8, r9, r2
 8000b38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	e7a3      	b.n	8000a88 <__udivmoddi4+0x1f0>
 8000b40:	4645      	mov	r5, r8
 8000b42:	e7ea      	b.n	8000b1a <__udivmoddi4+0x282>
 8000b44:	462b      	mov	r3, r5
 8000b46:	e794      	b.n	8000a72 <__udivmoddi4+0x1da>
 8000b48:	4640      	mov	r0, r8
 8000b4a:	e7d1      	b.n	8000af0 <__udivmoddi4+0x258>
 8000b4c:	46d0      	mov	r8, sl
 8000b4e:	e77b      	b.n	8000a48 <__udivmoddi4+0x1b0>
 8000b50:	3d02      	subs	r5, #2
 8000b52:	4462      	add	r2, ip
 8000b54:	e732      	b.n	80009bc <__udivmoddi4+0x124>
 8000b56:	4608      	mov	r0, r1
 8000b58:	e70a      	b.n	8000970 <__udivmoddi4+0xd8>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e742      	b.n	80009e6 <__udivmoddi4+0x14e>

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <chiprev>:

#pragma once

#include <stm32h723xx.h>

static inline char chiprev(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  uint16_t rev = (uint16_t) (((uint32_t) DBGMCU->IDCODE) >> 16);
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <chiprev+0x38>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	0c1b      	lsrs	r3, r3, #16
 8000b70:	80fb      	strh	r3, [r7, #6]
  if (rev == 0x1003) return 'Y';
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	f241 0203 	movw	r2, #4099	; 0x1003
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d101      	bne.n	8000b80 <chiprev+0x1c>
 8000b7c:	2359      	movs	r3, #89	; 0x59
 8000b7e:	e007      	b.n	8000b90 <chiprev+0x2c>
  if (rev == 0x2003) return 'V';
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	f242 0203 	movw	r2, #8195	; 0x2003
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <chiprev+0x2a>
 8000b8a:	2356      	movs	r3, #86	; 0x56
 8000b8c:	e000      	b.n	8000b90 <chiprev+0x2c>
  return '?';
 8000b8e:	233f      	movs	r3, #63	; 0x3f
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	5c001000 	.word	0x5c001000

08000ba0 <mg_millis>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t mg_millis(void) {  // Let Mongoose use our uptime function
 8000ba0:	b5b0      	push	{r4, r5, r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  return (uint64_t)HAL_GetTick();     // Return number of milliseconds since boot
 8000ba4:	f00f f984 	bl	800feb0 <HAL_GetTick>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2200      	movs	r2, #0
 8000bac:	461c      	mov	r4, r3
 8000bae:	4615      	mov	r5, r2
 8000bb0:	4622      	mov	r2, r4
 8000bb2:	462b      	mov	r3, r5
}
 8000bb4:	4610      	mov	r0, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000bbc <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e01a      	b.n	8000c02 <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4810      	ldr	r0, [pc, #64]	; (8000c14 <mg_random+0x58>)
 8000bd4:	f012 fea2 	bl	801391c <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	18d0      	adds	r0, r2, r3
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	3304      	adds	r3, #4
 8000be2:	683a      	ldr	r2, [r7, #0]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d203      	bcs.n	8000bf0 <mg_random+0x34>
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	e000      	b.n	8000bf2 <mg_random+0x36>
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	f107 0108 	add.w	r1, r7, #8
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	f014 fe14 	bl	8015824 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fa      	ldr	r2, [r7, #12]
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	429a      	cmp	r2, r3
 8000c08:	d3e0      	bcc.n	8000bcc <mg_random+0x10>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	240004d4 	.word	0x240004d4

08000c18 <timer_fn>:

static void timer_fn(void *arg) {
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b08a      	sub	sp, #40	; 0x28
 8000c1c:	af04      	add	r7, sp, #16
 8000c1e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);   // Blink On-board yellow LED
 8000c20:	2102      	movs	r1, #2
 8000c22:	481a      	ldr	r0, [pc, #104]	; (8000c8c <timer_fn+0x74>)
 8000c24:	f010 f859 	bl	8010cda <HAL_GPIO_TogglePin>
  struct mg_tcpip_if *ifp = arg;                  // And show
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	617b      	str	r3, [r7, #20]
  const char *names[] = {"down", "up", "ready"};  // network stats
 8000c2c:	4a18      	ldr	r2, [pc, #96]	; (8000c90 <timer_fn+0x78>)
 8000c2e:	f107 0308 	add.w	r3, r7, #8
 8000c32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 8000c38:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <timer_fn+0x7c>)
 8000c3a:	226d      	movs	r2, #109	; 0x6d
 8000c3c:	4916      	ldr	r1, [pc, #88]	; (8000c98 <timer_fn+0x80>)
 8000c3e:	2002      	movs	r0, #2
 8000c40:	f006 facc 	bl	80071dc <mg_log_prefix>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d01c      	beq.n	8000c84 <timer_fn+0x6c>
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	3318      	adds	r3, #24
 8000c54:	443b      	add	r3, r7
 8000c56:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	f103 0508 	add.w	r5, r3, #8
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000c68:	6979      	ldr	r1, [r7, #20]
 8000c6a:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8000c70:	9003      	str	r0, [sp, #12]
 8000c72:	9102      	str	r1, [sp, #8]
 8000c74:	9201      	str	r2, [sp, #4]
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	462b      	mov	r3, r5
 8000c7a:	4a08      	ldr	r2, [pc, #32]	; (8000c9c <timer_fn+0x84>)
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	4808      	ldr	r0, [pc, #32]	; (8000ca0 <timer_fn+0x88>)
 8000c80:	f006 fb06 	bl	8007290 <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c8c:	58021000 	.word	0x58021000
 8000c90:	0801639c 	.word	0x0801639c
 8000c94:	0801837c 	.word	0x0801837c
 8000c98:	08016340 	.word	0x08016340
 8000c9c:	08007f99 	.word	0x08007f99
 8000ca0:	08016354 	.word	0x08016354

08000ca4 <mg_event_handler>:


static void mg_event_handler(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	; 0x30
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
 8000cb0:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_OPEN) {
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d032      	beq.n	8000d1e <mg_event_handler+0x7a>
  } else if (ev == MG_EV_HTTP_MSG) {
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b0a      	cmp	r3, #10
 8000cbc:	d122      	bne.n	8000d04 <mg_event_handler+0x60>
    struct mg_http_message *hm = (struct mg_http_message *)ev_data;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (mg_http_match_uri(hm, "/websocket")) {
 8000cc2:	4919      	ldr	r1, [pc, #100]	; (8000d28 <mg_event_handler+0x84>)
 8000cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000cc6:	f004 ff2a 	bl	8005b1e <mg_http_match_uri>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d005      	beq.n	8000cdc <mg_event_handler+0x38>
      mg_ws_upgrade(c, hm, NULL);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000cd4:	68f8      	ldr	r0, [r7, #12]
 8000cd6:	f00a fc6d 	bl	800b5b4 <mg_ws_upgrade>
  } else if (ev == MG_EV_WS_MSG) {
    struct mg_ws_message *wm = (struct mg_ws_message *)ev_data;
    mg_ws_send(c, wm->data.ptr, wm->data.len, WEBSOCKET_OP_TEXT);
  }
  (void)fn_data;
}
 8000cda:	e020      	b.n	8000d1e <mg_event_handler+0x7a>
      struct mg_http_serve_opts opts = {.root_dir = s_web_root};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <mg_event_handler+0x88>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	613b      	str	r3, [r7, #16]
      mg_http_serve_dir(c, ev_data, &opts);
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	68f8      	ldr	r0, [r7, #12]
 8000cfe:	f004 fcdf 	bl	80056c0 <mg_http_serve_dir>
}
 8000d02:	e00c      	b.n	8000d1e <mg_event_handler+0x7a>
  } else if (ev == MG_EV_WS_MSG) {
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	2b0d      	cmp	r3, #13
 8000d08:	d109      	bne.n	8000d1e <mg_event_handler+0x7a>
    struct mg_ws_message *wm = (struct mg_ws_message *)ev_data;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    mg_ws_send(c, wm->data.ptr, wm->data.len, WEBSOCKET_OP_TEXT);
 8000d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	2301      	movs	r3, #1
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f00a fa29 	bl	800b170 <mg_ws_send>
}
 8000d1e:	bf00      	nop
 8000d20:	3730      	adds	r7, #48	; 0x30
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	080163a8 	.word	0x080163a8
 8000d2c:	24000004 	.word	0x24000004

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b0b5      	sub	sp, #212	; 0xd4
 8000d34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f00f f835 	bl	800fda4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f8d9 	bl	8000ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 f9fd 	bl	800113c <MX_GPIO_Init>
  MX_ETH_Init();
 8000d42:	f000 f945 	bl	8000fd0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d46:	f000 f9a5 	bl	8001094 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d4a:	f000 f9ef 	bl	800112c <MX_USB_OTG_HS_USB_Init>
  MX_RNG_Init();
 8000d4e:	f000 f98b 	bl	8001068 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  test_init();  // for internal testing purposes only
    MG_INFO(("Chip revision: %c, max cpu clock: %u MHz", chiprev(),
 8000d52:	4b59      	ldr	r3, [pc, #356]	; (8000eb8 <main+0x188>)
 8000d54:	22a7      	movs	r2, #167	; 0xa7
 8000d56:	4959      	ldr	r1, [pc, #356]	; (8000ebc <main+0x18c>)
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f006 fa3f 	bl	80071dc <mg_log_prefix>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d012      	beq.n	8000d8a <main+0x5a>
 8000d64:	f7ff fefe 	bl	8000b64 <chiprev>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	f7ff fefa 	bl	8000b64 <chiprev>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b56      	cmp	r3, #86	; 0x56
 8000d74:	d102      	bne.n	8000d7c <main+0x4c>
 8000d76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d7a:	e001      	b.n	8000d80 <main+0x50>
 8000d7c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d80:	461a      	mov	r2, r3
 8000d82:	4621      	mov	r1, r4
 8000d84:	484e      	ldr	r0, [pc, #312]	; (8000ec0 <main+0x190>)
 8000d86:	f006 fa83 	bl	8007290 <mg_log>
             (chiprev() == 'V') ? 480 : 400));
    MG_INFO(("Starting, CPU freq %g MHz", (double) SystemCoreClock / 1000000));
 8000d8a:	4b4b      	ldr	r3, [pc, #300]	; (8000eb8 <main+0x188>)
 8000d8c:	22a9      	movs	r2, #169	; 0xa9
 8000d8e:	494b      	ldr	r1, [pc, #300]	; (8000ebc <main+0x18c>)
 8000d90:	2002      	movs	r0, #2
 8000d92:	f006 fa23 	bl	80071dc <mg_log_prefix>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00e      	beq.n	8000dba <main+0x8a>
 8000d9c:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <main+0x194>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000da8:	ed9f 6b41 	vldr	d6, [pc, #260]	; 8000eb0 <main+0x180>
 8000dac:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000db0:	ec53 2b15 	vmov	r2, r3, d5
 8000db4:	4844      	ldr	r0, [pc, #272]	; (8000ec8 <main+0x198>)
 8000db6:	f006 fa6b 	bl	8007290 <mg_log>

    struct mg_mgr mgr;        // Initialise
    mg_mgr_init(&mgr);        // Mongoose event manager
 8000dba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 ff90 	bl	8007ce4 <mg_mgr_init>
    mg_log_set(MG_LL_DEBUG);  // Set log level
 8000dc4:	2003      	movs	r0, #3
 8000dc6:	f006 f9e7 	bl	8007198 <mg_log_set>

    // Initialise Mongoose network stack
    struct mg_tcpip_driver_stm32h_data driver_data = {.mdc_cr = 4};
 8000dca:	2304      	movs	r3, #4
 8000dcc:	67bb      	str	r3, [r7, #120]	; 0x78
    struct mg_tcpip_if mif = {.mac = {0xaa,0xbb,0xcc,1,2,3},
 8000dce:	463b      	mov	r3, r7
 8000dd0:	2278      	movs	r2, #120	; 0x78
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f014 fc3e 	bl	8015656 <memset>
 8000dda:	4a3c      	ldr	r2, [pc, #240]	; (8000ecc <main+0x19c>)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000de2:	6018      	str	r0, [r3, #0]
 8000de4:	3304      	adds	r3, #4
 8000de6:	8019      	strh	r1, [r3, #0]
 8000de8:	4b39      	ldr	r3, [pc, #228]	; (8000ed0 <main+0x1a0>)
 8000dea:	623b      	str	r3, [r7, #32]
 8000dec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
                              //.ip = mg_htonl(MG_U32(192, 168, 1, 25)),
                              //.mask = mg_htonl(MG_U32(255, 255, 255, 0)),
                              //.gw = mg_htonl(MG_U32(192, 168, 1, 1)),
                              .driver = &mg_tcpip_driver_stm32h,
                              .driver_data = &driver_data};
    mg_tcpip_init(&mgr, &mif);
 8000df2:	463a      	mov	r2, r7
 8000df4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000df8:	4611      	mov	r1, r2
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f00d fb16 	bl	800e42c <mg_tcpip_init>
    mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 8000e00:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000e04:	463b      	mov	r3, r7
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <main+0x1a4>)
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	4608      	mov	r0, r1
 8000e1a:	f006 ff39 	bl	8007c90 <mg_timer_add>
    mg_http_listen(&mgr, s_listen_on, mg_event_handler, NULL);
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <main+0x1a8>)
 8000e20:	6819      	ldr	r1, [r3, #0]
 8000e22:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000e26:	2300      	movs	r3, #0
 8000e28:	4a2c      	ldr	r2, [pc, #176]	; (8000edc <main+0x1ac>)
 8000e2a:	f005 f997 	bl	800615c <mg_http_listen>
    MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <main+0x188>)
 8000e30:	22bb      	movs	r2, #187	; 0xbb
 8000e32:	4922      	ldr	r1, [pc, #136]	; (8000ebc <main+0x18c>)
 8000e34:	2002      	movs	r0, #2
 8000e36:	f006 f9d1 	bl	80071dc <mg_log_prefix>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00c      	beq.n	8000e5a <main+0x12a>
 8000e40:	463b      	mov	r3, r7
 8000e42:	461a      	mov	r2, r3
 8000e44:	4926      	ldr	r1, [pc, #152]	; (8000ee0 <main+0x1b0>)
 8000e46:	4827      	ldr	r0, [pc, #156]	; (8000ee4 <main+0x1b4>)
 8000e48:	f006 fa22 	bl	8007290 <mg_log>
    while (mif.state != MG_TCPIP_STATE_READY) {
 8000e4c:	e005      	b.n	8000e5a <main+0x12a>
      mg_mgr_poll(&mgr, 0);
 8000e4e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e52:	2100      	movs	r1, #0
 8000e54:	4618      	mov	r0, r3
 8000e56:	f00d fdab 	bl	800e9b0 <mg_mgr_poll>
    while (mif.state != MG_TCPIP_STATE_READY) {
 8000e5a:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000e5e:	2b03      	cmp	r3, #3
 8000e60:	d1f5      	bne.n	8000e4e <main+0x11e>
    }

    MG_INFO(("Initialising application..."));
 8000e62:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <main+0x188>)
 8000e64:	22c0      	movs	r2, #192	; 0xc0
 8000e66:	4915      	ldr	r1, [pc, #84]	; (8000ebc <main+0x18c>)
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f006 f9b7 	bl	80071dc <mg_log_prefix>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d002      	beq.n	8000e7a <main+0x14a>
 8000e74:	481c      	ldr	r0, [pc, #112]	; (8000ee8 <main+0x1b8>)
 8000e76:	f006 fa0b 	bl	8007290 <mg_log>
    web_init(&mgr);
 8000e7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00e fbd4 	bl	800f62c <web_init>

    MG_INFO(("Starting event loop"));
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <main+0x188>)
 8000e86:	22c3      	movs	r2, #195	; 0xc3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <main+0x18c>)
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f006 f9a6 	bl	80071dc <mg_log_prefix>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d002      	beq.n	8000e9c <main+0x16c>
 8000e96:	4815      	ldr	r0, [pc, #84]	; (8000eec <main+0x1bc>)
 8000e98:	f006 f9fa 	bl	8007290 <mg_log>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mg_mgr_poll(&mgr, 0);
 8000e9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f00d fd84 	bl	800e9b0 <mg_mgr_poll>
 8000ea8:	e7f8      	b.n	8000e9c <main+0x16c>
 8000eaa:	bf00      	nop
 8000eac:	f3af 8000 	nop.w
 8000eb0:	00000000 	.word	0x00000000
 8000eb4:	412e8480 	.word	0x412e8480
 8000eb8:	08018388 	.word	0x08018388
 8000ebc:	08016340 	.word	0x08016340
 8000ec0:	080163b4 	.word	0x080163b4
 8000ec4:	240002a4 	.word	0x240002a4
 8000ec8:	080163e0 	.word	0x080163e0
 8000ecc:	08016448 	.word	0x08016448
 8000ed0:	24000248 	.word	0x24000248
 8000ed4:	08000c19 	.word	0x08000c19
 8000ed8:	24000000 	.word	0x24000000
 8000edc:	08000ca5 	.word	0x08000ca5
 8000ee0:	0800805d 	.word	0x0800805d
 8000ee4:	080163fc 	.word	0x080163fc
 8000ee8:	08016418 	.word	0x08016418
 8000eec:	08016434 	.word	0x08016434

08000ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09c      	sub	sp, #112	; 0x70
 8000ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	224c      	movs	r2, #76	; 0x4c
 8000efc:	2100      	movs	r1, #0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f014 fba9 	bl	8015656 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	2220      	movs	r2, #32
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f014 fba3 	bl	8015656 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f10:	2002      	movs	r0, #2
 8000f12:	f00f fefd 	bl	8010d10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f16:	2300      	movs	r3, #0
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	4a2b      	ldr	r2, [pc, #172]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f20:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f24:	6193      	str	r3, [r2, #24]
 8000f26:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f2e:	603b      	str	r3, [r7, #0]
 8000f30:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f32:	bf00      	nop
 8000f34:	4b25      	ldr	r3, [pc, #148]	; (8000fcc <SystemClock_Config+0xdc>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f40:	d1f8      	bne.n	8000f34 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f42:	2321      	movs	r3, #33	; 0x21
 8000f44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f46:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f54:	2302      	movs	r3, #2
 8000f56:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000f5c:	f240 1313 	movw	r3, #275	; 0x113
 8000f60:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f62:	2301      	movs	r3, #1
 8000f64:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f66:	2304      	movs	r3, #4
 8000f68:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000f6e:	2304      	movs	r3, #4
 8000f70:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f72:	2300      	movs	r3, #0
 8000f74:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f00f ff00 	bl	8010d84 <HAL_RCC_OscConfig>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000f8a:	f000 f9d3 	bl	8001334 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f8e:	233f      	movs	r3, #63	; 0x3f
 8000f90:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f92:	2303      	movs	r3, #3
 8000f94:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000f9a:	2308      	movs	r3, #8
 8000f9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f9e:	2340      	movs	r3, #64	; 0x40
 8000fa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fa2:	2340      	movs	r3, #64	; 0x40
 8000fa4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000faa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fac:	2340      	movs	r3, #64	; 0x40
 8000fae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f010 fabf 	bl	8011538 <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fc0:	f000 f9b8 	bl	8001334 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3770      	adds	r7, #112	; 0x70
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	58024800 	.word	0x58024800

08000fd0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_ETH_Init+0x80>)
 8000fd6:	4a1f      	ldr	r2, [pc, #124]	; (8001054 <MX_ETH_Init+0x84>)
 8000fd8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000fda:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_ETH_Init+0x88>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000fe0:	4b1d      	ldr	r3, [pc, #116]	; (8001058 <MX_ETH_Init+0x88>)
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <MX_ETH_Init+0x88>)
 8000fe8:	22e1      	movs	r2, #225	; 0xe1
 8000fea:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000fec:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_ETH_Init+0x88>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000ff2:	4b19      	ldr	r3, [pc, #100]	; (8001058 <MX_ETH_Init+0x88>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_ETH_Init+0x88>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ETH_Init+0x80>)
 8001000:	4a15      	ldr	r2, [pc, #84]	; (8001058 <MX_ETH_Init+0x88>)
 8001002:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_ETH_Init+0x80>)
 8001006:	2201      	movs	r2, #1
 8001008:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_ETH_Init+0x80>)
 800100c:	4a13      	ldr	r2, [pc, #76]	; (800105c <MX_ETH_Init+0x8c>)
 800100e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_ETH_Init+0x80>)
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <MX_ETH_Init+0x90>)
 8001014:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_ETH_Init+0x80>)
 8001018:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800101c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800101e:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_ETH_Init+0x80>)
 8001020:	f00f f876 	bl	8010110 <HAL_ETH_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800102a:	f000 f983 	bl	8001334 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800102e:	2238      	movs	r2, #56	; 0x38
 8001030:	2100      	movs	r1, #0
 8001032:	480c      	ldr	r0, [pc, #48]	; (8001064 <MX_ETH_Init+0x94>)
 8001034:	f014 fb0f 	bl	8015656 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_ETH_Init+0x94>)
 800103a:	2221      	movs	r2, #33	; 0x21
 800103c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_ETH_Init+0x94>)
 8001040:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001044:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_ETH_Init+0x94>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	24000424 	.word	0x24000424
 8001054:	40028000 	.word	0x40028000
 8001058:	2400057c 	.word	0x2400057c
 800105c:	24000370 	.word	0x24000370
 8001060:	24000310 	.word	0x24000310
 8001064:	240003ec 	.word	0x240003ec

08001068 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800106c:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_RNG_Init+0x24>)
 800106e:	4a08      	ldr	r2, [pc, #32]	; (8001090 <MX_RNG_Init+0x28>)
 8001070:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_RNG_Init+0x24>)
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001078:	4804      	ldr	r0, [pc, #16]	; (800108c <MX_RNG_Init+0x24>)
 800107a:	f012 fbab 	bl	80137d4 <HAL_RNG_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8001084:	f000 f956 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	240004d4 	.word	0x240004d4
 8001090:	48021800 	.word	0x48021800

08001094 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001098:	4b22      	ldr	r3, [pc, #136]	; (8001124 <MX_USART3_UART_Init+0x90>)
 800109a:	4a23      	ldr	r2, [pc, #140]	; (8001128 <MX_USART3_UART_Init+0x94>)
 800109c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ca:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d6:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010dc:	4811      	ldr	r0, [pc, #68]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010de:	f012 fd27 	bl	8013b30 <HAL_UART_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80010e8:	f000 f924 	bl	8001334 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ec:	2100      	movs	r1, #0
 80010ee:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_USART3_UART_Init+0x90>)
 80010f0:	f013 febb 	bl	8014e6a <HAL_UARTEx_SetTxFifoThreshold>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80010fa:	f000 f91b 	bl	8001334 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	4808      	ldr	r0, [pc, #32]	; (8001124 <MX_USART3_UART_Init+0x90>)
 8001102:	f013 fef0 	bl	8014ee6 <HAL_UARTEx_SetRxFifoThreshold>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800110c:	f000 f912 	bl	8001334 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <MX_USART3_UART_Init+0x90>)
 8001112:	f013 fe71 	bl	8014df8 <HAL_UARTEx_DisableFifoMode>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800111c:	f000 f90a 	bl	8001334 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	240004e8 	.word	0x240004e8
 8001128:	40004800 	.word	0x40004800

0800112c <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b08c      	sub	sp, #48	; 0x30
 8001140:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	f107 031c 	add.w	r3, r7, #28
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	4b71      	ldr	r3, [pc, #452]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	4a6f      	ldr	r2, [pc, #444]	; (8001318 <MX_GPIO_Init+0x1dc>)
 800115a:	f043 0304 	orr.w	r3, r3, #4
 800115e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001162:	4b6d      	ldr	r3, [pc, #436]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	61bb      	str	r3, [r7, #24]
 800116e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001170:	4b69      	ldr	r3, [pc, #420]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	4a68      	ldr	r2, [pc, #416]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001178:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800117c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001180:	4b65      	ldr	r3, [pc, #404]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800118e:	4b62      	ldr	r3, [pc, #392]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	4a60      	ldr	r2, [pc, #384]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800119e:	4b5e      	ldr	r3, [pc, #376]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a4:	f003 0301 	and.w	r3, r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ac:	4b5a      	ldr	r3, [pc, #360]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	4a59      	ldr	r2, [pc, #356]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011b4:	f043 0302 	orr.w	r3, r3, #2
 80011b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011bc:	4b56      	ldr	r3, [pc, #344]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ca:	4b53      	ldr	r3, [pc, #332]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	4a51      	ldr	r2, [pc, #324]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011da:	4b4f      	ldr	r3, [pc, #316]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	f003 0308 	and.w	r3, r3, #8
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011e8:	4b4b      	ldr	r3, [pc, #300]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	4a4a      	ldr	r2, [pc, #296]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011f8:	4b47      	ldr	r3, [pc, #284]	; (8001318 <MX_GPIO_Init+0x1dc>)
 80011fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001206:	4b44      	ldr	r3, [pc, #272]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a42      	ldr	r2, [pc, #264]	; (8001318 <MX_GPIO_Init+0x1dc>)
 800120e:	f043 0310 	orr.w	r3, r3, #16
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b40      	ldr	r3, [pc, #256]	; (8001318 <MX_GPIO_Init+0x1dc>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0310 	and.w	r3, r3, #16
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001224:	2200      	movs	r2, #0
 8001226:	f244 0101 	movw	r1, #16385	; 0x4001
 800122a:	483c      	ldr	r0, [pc, #240]	; (800131c <MX_GPIO_Init+0x1e0>)
 800122c:	f00f fd3c 	bl	8010ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001236:	483a      	ldr	r0, [pc, #232]	; (8001320 <MX_GPIO_Init+0x1e4>)
 8001238:	f00f fd36 	bl	8010ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2102      	movs	r1, #2
 8001240:	4838      	ldr	r0, [pc, #224]	; (8001324 <MX_GPIO_Init+0x1e8>)
 8001242:	f00f fd31 	bl	8010ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001246:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001254:	f107 031c 	add.w	r3, r7, #28
 8001258:	4619      	mov	r1, r3
 800125a:	4833      	ldr	r0, [pc, #204]	; (8001328 <MX_GPIO_Init+0x1ec>)
 800125c:	f00f fb7c 	bl	8010958 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001260:	f244 0301 	movw	r3, #16385	; 0x4001
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001266:	2301      	movs	r3, #1
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4828      	ldr	r0, [pc, #160]	; (800131c <MX_GPIO_Init+0x1e0>)
 800127a:	f00f fb6d 	bl	8010958 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800127e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	4619      	mov	r1, r3
 8001296:	4822      	ldr	r0, [pc, #136]	; (8001320 <MX_GPIO_Init+0x1e4>)
 8001298:	f00f fb5e 	bl	8010958 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	481e      	ldr	r0, [pc, #120]	; (800132c <MX_GPIO_Init+0x1f0>)
 80012b2:	f00f fb51 	bl	8010958 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012bc:	2300      	movs	r3, #0
 80012be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 031c 	add.w	r3, r7, #28
 80012c8:	4619      	mov	r1, r3
 80012ca:	4819      	ldr	r0, [pc, #100]	; (8001330 <MX_GPIO_Init+0x1f4>)
 80012cc:	f00f fb44 	bl	8010958 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80012e2:	230a      	movs	r3, #10
 80012e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4810      	ldr	r0, [pc, #64]	; (8001330 <MX_GPIO_Init+0x1f4>)
 80012ee:	f00f fb33 	bl	8010958 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 80012f2:	2302      	movs	r3, #2
 80012f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fe:	2300      	movs	r3, #0
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_GPIO_Init+0x1e8>)
 800130a:	f00f fb25 	bl	8010958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	58024400 	.word	0x58024400
 800131c:	58020400 	.word	0x58020400
 8001320:	58020c00 	.word	0x58020c00
 8001324:	58021000 	.word	0x58021000
 8001328:	58020800 	.word	0x58020800
 800132c:	58021800 	.word	0x58021800
 8001330:	58020000 	.word	0x58020000

08001334 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001338:	b672      	cpsid	i
}
 800133a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800133c:	e7fe      	b.n	800133c <Error_Handler+0x8>

0800133e <mg_b64idx>:
#line 1 "src/base64.c"
#endif



static int mg_b64idx(int c) {
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  if (c < 26) {
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2b19      	cmp	r3, #25
 800134a:	dc02      	bgt.n	8001352 <mg_b64idx+0x14>
    return c + 'A';
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3341      	adds	r3, #65	; 0x41
 8001350:	e011      	b.n	8001376 <mg_b64idx+0x38>
  } else if (c < 52) {
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b33      	cmp	r3, #51	; 0x33
 8001356:	dc02      	bgt.n	800135e <mg_b64idx+0x20>
    return c - 26 + 'a';
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3347      	adds	r3, #71	; 0x47
 800135c:	e00b      	b.n	8001376 <mg_b64idx+0x38>
  } else if (c < 62) {
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2b3d      	cmp	r3, #61	; 0x3d
 8001362:	dc02      	bgt.n	800136a <mg_b64idx+0x2c>
    return c - 52 + '0';
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3b04      	subs	r3, #4
 8001368:	e005      	b.n	8001376 <mg_b64idx+0x38>
  } else {
    return c == 62 ? '+' : '/';
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b3e      	cmp	r3, #62	; 0x3e
 800136e:	d101      	bne.n	8001374 <mg_b64idx+0x36>
 8001370:	232b      	movs	r3, #43	; 0x2b
 8001372:	e000      	b.n	8001376 <mg_b64idx+0x38>
 8001374:	232f      	movs	r3, #47	; 0x2f
  }
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <mg_b64rev>:

static int mg_b64rev(int c) {
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b40      	cmp	r3, #64	; 0x40
 800138e:	dd05      	ble.n	800139c <mg_b64rev+0x1a>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b5a      	cmp	r3, #90	; 0x5a
 8001394:	dc02      	bgt.n	800139c <mg_b64rev+0x1a>
    return c - 'A';
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3b41      	subs	r3, #65	; 0x41
 800139a:	e022      	b.n	80013e2 <mg_b64rev+0x60>
  } else if (c >= 'a' && c <= 'z') {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b60      	cmp	r3, #96	; 0x60
 80013a0:	dd05      	ble.n	80013ae <mg_b64rev+0x2c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b7a      	cmp	r3, #122	; 0x7a
 80013a6:	dc02      	bgt.n	80013ae <mg_b64rev+0x2c>
    return c + 26 - 'a';
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	3b47      	subs	r3, #71	; 0x47
 80013ac:	e019      	b.n	80013e2 <mg_b64rev+0x60>
  } else if (c >= '0' && c <= '9') {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b2f      	cmp	r3, #47	; 0x2f
 80013b2:	dd05      	ble.n	80013c0 <mg_b64rev+0x3e>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b39      	cmp	r3, #57	; 0x39
 80013b8:	dc02      	bgt.n	80013c0 <mg_b64rev+0x3e>
    return c + 52 - '0';
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3304      	adds	r3, #4
 80013be:	e010      	b.n	80013e2 <mg_b64rev+0x60>
  } else if (c == '+') {
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2b2b      	cmp	r3, #43	; 0x2b
 80013c4:	d101      	bne.n	80013ca <mg_b64rev+0x48>
    return 62;
 80013c6:	233e      	movs	r3, #62	; 0x3e
 80013c8:	e00b      	b.n	80013e2 <mg_b64rev+0x60>
  } else if (c == '/') {
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2b2f      	cmp	r3, #47	; 0x2f
 80013ce:	d101      	bne.n	80013d4 <mg_b64rev+0x52>
    return 63;
 80013d0:	233f      	movs	r3, #63	; 0x3f
 80013d2:	e006      	b.n	80013e2 <mg_b64rev+0x60>
  } else if (c == '=') {
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2b3d      	cmp	r3, #61	; 0x3d
 80013d8:	d101      	bne.n	80013de <mg_b64rev+0x5c>
    return 64;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	e001      	b.n	80013e2 <mg_b64rev+0x60>
  } else {
    return -1;
 80013de:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <mg_base64_update>:

int mg_base64_update(unsigned char ch, char *to, int n) {
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	73fb      	strb	r3, [r7, #15]
  int rem = (n & 3) % 3;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f003 0203 	and.w	r2, r3, #3
 8001404:	4b39      	ldr	r3, [pc, #228]	; (80014ec <mg_base64_update+0xfc>)
 8001406:	fb83 3102 	smull	r3, r1, r3, r2
 800140a:	17d3      	asrs	r3, r2, #31
 800140c:	1ac9      	subs	r1, r1, r3
 800140e:	460b      	mov	r3, r1
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	440b      	add	r3, r1
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	617b      	str	r3, [r7, #20]
  if (rem == 0) {
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d119      	bne.n	8001452 <mg_base64_update+0x62>
    to[n] = (char) mg_b64idx(ch >> 2);
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff8a 	bl	800133e <mg_b64idx>
 800142a:	4601      	mov	r1, r0
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	4413      	add	r3, r2
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 3) << 4);
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	b2da      	uxtb	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3301      	adds	r3, #1
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68b9      	ldr	r1, [r7, #8]
 8001446:	440b      	add	r3, r1
 8001448:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	e046      	b.n	80014e0 <mg_base64_update+0xf0>
  } else if (rem == 1) {
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d11f      	bne.n	8001498 <mg_base64_update+0xa8>
    to[n] = (char) mg_b64idx(to[n] | (ch >> 4));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	4413      	add	r3, r2
 800145e:	781a      	ldrb	r2, [r3, #0]
 8001460:	7bfb      	ldrb	r3, [r7, #15]
 8001462:	091b      	lsrs	r3, r3, #4
 8001464:	b2db      	uxtb	r3, r3
 8001466:	4313      	orrs	r3, r2
 8001468:	b2db      	uxtb	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff ff67 	bl	800133e <mg_b64idx>
 8001470:	4601      	mov	r1, r0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68ba      	ldr	r2, [r7, #8]
 8001476:	4413      	add	r3, r2
 8001478:	b2ca      	uxtb	r2, r1
 800147a:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) ((ch & 15) << 2);
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	b2da      	uxtb	r2, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3301      	adds	r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	440b      	add	r3, r1
 800148e:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]
 8001496:	e023      	b.n	80014e0 <mg_base64_update+0xf0>
  } else {
    to[n] = (char) mg_b64idx(to[n] | (ch >> 6));
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	4413      	add	r3, r2
 800149e:	781a      	ldrb	r2, [r3, #0]
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	099b      	lsrs	r3, r3, #6
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff ff47 	bl	800133e <mg_b64idx>
 80014b0:	4601      	mov	r1, r0
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	4413      	add	r3, r2
 80014b8:	b2ca      	uxtb	r2, r1
 80014ba:	701a      	strb	r2, [r3, #0]
    to[++n] = (char) mg_b64idx(ch & 63);
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff3b 	bl	800133e <mg_b64idx>
 80014c8:	4601      	mov	r1, r0
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	b2ca      	uxtb	r2, r1
 80014d8:	701a      	strb	r2, [r3, #0]
    n++;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3301      	adds	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
  }
  return n;
 80014e0:	687b      	ldr	r3, [r7, #4]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	55555556 	.word	0x55555556

080014f0 <mg_base64_final>:

int mg_base64_final(char *to, int n) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  int saved = n;
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	60fb      	str	r3, [r7, #12]
  // printf("---[%.*s]\n", n, to);
  if (n & 3) n = mg_base64_update(0, to, n);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <mg_base64_final+0x24>
 8001508:	683a      	ldr	r2, [r7, #0]
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	2000      	movs	r0, #0
 800150e:	f7ff ff6f 	bl	80013f0 <mg_base64_update>
 8001512:	6038      	str	r0, [r7, #0]
  if ((saved & 3) == 2) n--;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d10b      	bne.n	8001536 <mg_base64_final+0x46>
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	3b01      	subs	r3, #1
 8001522:	603b      	str	r3, [r7, #0]
  // printf("    %d[%.*s]\n", n, n, to);
  while (n & 3) to[n++] = '=';
 8001524:	e007      	b.n	8001536 <mg_base64_final+0x46>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	1c5a      	adds	r2, r3, #1
 800152a:	603a      	str	r2, [r7, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	223d      	movs	r2, #61	; 0x3d
 8001534:	701a      	strb	r2, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f2      	bne.n	8001526 <mg_base64_final+0x36>
  to[n] = '\0';
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
  return n;
 800154a:	683b      	ldr	r3, [r7, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <mg_base64_encode>:

int mg_base64_encode(const unsigned char *p, int n, char *to) {
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  int i, len = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	e00c      	b.n	8001584 <mg_base64_encode+0x30>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	6879      	ldr	r1, [r7, #4]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff ff3a 	bl	80013f0 <mg_base64_update>
 800157c:	6138      	str	r0, [r7, #16]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3301      	adds	r3, #1
 8001582:	617b      	str	r3, [r7, #20]
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	429a      	cmp	r2, r3
 800158a:	dbee      	blt.n	800156a <mg_base64_encode+0x16>
  len = mg_base64_final(to, len);
 800158c:	6939      	ldr	r1, [r7, #16]
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ffae 	bl	80014f0 <mg_base64_final>
 8001594:	6138      	str	r0, [r7, #16]
  return len;
 8001596:	693b      	ldr	r3, [r7, #16]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <mg_base64_decode>:

int mg_base64_decode(const char *src, int n, char *dst) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <mg_base64_decode+0x1a>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	68fa      	ldr	r2, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	e000      	b.n	80015bc <mg_base64_decode+0x1c>
 80015ba:	2300      	movs	r3, #0
 80015bc:	623b      	str	r3, [r7, #32]
  int len = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  while (src != NULL && src + 3 < end) {
 80015c2:	e06a      	b.n	800169a <mg_base64_decode+0xfa>
    int a = mg_b64rev(src[0]), b = mg_b64rev(src[1]), c = mg_b64rev(src[2]),
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff feda 	bl	8001382 <mg_b64rev>
 80015ce:	61f8      	str	r0, [r7, #28]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3301      	adds	r3, #1
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7ff fed3 	bl	8001382 <mg_b64rev>
 80015dc:	61b8      	str	r0, [r7, #24]
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	3302      	adds	r3, #2
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff fecc 	bl	8001382 <mg_b64rev>
 80015ea:	6178      	str	r0, [r7, #20]
        d = mg_b64rev(src[3]);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3303      	adds	r3, #3
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fec5 	bl	8001382 <mg_b64rev>
 80015f8:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) return 0;
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	2b40      	cmp	r3, #64	; 0x40
 80015fe:	d00e      	beq.n	800161e <mg_base64_decode+0x7e>
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	2b00      	cmp	r3, #0
 8001604:	db0b      	blt.n	800161e <mg_base64_decode+0x7e>
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	2b40      	cmp	r3, #64	; 0x40
 800160a:	d008      	beq.n	800161e <mg_base64_decode+0x7e>
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	db05      	blt.n	800161e <mg_base64_decode+0x7e>
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db02      	blt.n	800161e <mg_base64_decode+0x7e>
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	2b00      	cmp	r3, #0
 800161c:	da01      	bge.n	8001622 <mg_base64_decode+0x82>
 800161e:	2300      	movs	r3, #0
 8001620:	e049      	b.n	80016b6 <mg_base64_decode+0x116>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	b25a      	sxtb	r2, r3
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	111b      	asrs	r3, r3, #4
 800162c:	b25b      	sxtb	r3, r3
 800162e:	4313      	orrs	r3, r2
 8001630:	b259      	sxtb	r1, r3
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	1c5a      	adds	r2, r3, #1
 8001636:	627a      	str	r2, [r7, #36]	; 0x24
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3302      	adds	r3, #2
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b3d      	cmp	r3, #61	; 0x3d
 800164a:	d023      	beq.n	8001694 <mg_base64_decode+0xf4>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	b25a      	sxtb	r2, r3
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	109b      	asrs	r3, r3, #2
 8001656:	b25b      	sxtb	r3, r3
 8001658:	4313      	orrs	r3, r2
 800165a:	b259      	sxtb	r1, r3
 800165c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165e:	1c5a      	adds	r2, r3, #1
 8001660:	627a      	str	r2, [r7, #36]	; 0x24
 8001662:	461a      	mov	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4413      	add	r3, r2
 8001668:	b2ca      	uxtb	r2, r1
 800166a:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3303      	adds	r3, #3
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b3d      	cmp	r3, #61	; 0x3d
 8001674:	d00e      	beq.n	8001694 <mg_base64_decode+0xf4>
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	b25a      	sxtb	r2, r3
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	b25b      	sxtb	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b259      	sxtb	r1, r3
 8001684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	627a      	str	r2, [r7, #36]	; 0x24
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4413      	add	r3, r2
 8001690:	b2ca      	uxtb	r2, r1
 8001692:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	3304      	adds	r3, #4
 8001698:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <mg_base64_decode+0x10a>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	3303      	adds	r3, #3
 80016a4:	6a3a      	ldr	r2, [r7, #32]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d88c      	bhi.n	80015c4 <mg_base64_decode+0x24>
  }
  dst[len] = '\0';
 80016aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	2200      	movs	r2, #0
 80016b2:	701a      	strb	r2, [r3, #0]
  return len;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3728      	adds	r7, #40	; 0x28
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 80016be:	b580      	push	{r7, lr}
 80016c0:	b084      	sub	sp, #16
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	3330      	adds	r3, #48	; 0x30
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	e002      	b.n	80016d8 <mg_dns_free+0x1a>
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d1f7      	bne.n	80016d2 <mg_dns_free+0x14>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 80016ea:	6838      	ldr	r0, [r7, #0]
 80016ec:	f013 fcd0 	bl	8015090 <free>
}
 80016f0:	bf00      	nop
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 8001708:	e00d      	b.n	8001726 <mg_resolve_cancel+0x2e>
    tmp = d->next;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	d103      	bne.n	8001722 <mg_resolve_cancel+0x2a>
 800171a:	68f9      	ldr	r1, [r7, #12]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff ffce 	bl	80016be <mg_dns_free>
  for (; d != NULL; d = tmp) {
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1ee      	bne.n	800170a <mg_resolve_cancel+0x12>
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3710      	adds	r7, #16
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8001736:	b580      	push	{r7, lr}
 8001738:	b08c      	sub	sp, #48	; 0x30
 800173a:	af04      	add	r7, sp, #16
 800173c:	60f8      	str	r0, [r7, #12]
 800173e:	60b9      	str	r1, [r7, #8]
 8001740:	607a      	str	r2, [r7, #4]
 8001742:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 8001748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800174a:	2b00      	cmp	r3, #0
 800174c:	d005      	beq.n	800175a <mg_dns_parse_name_depth+0x24>
 800174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <mg_dns_parse_name_depth+0x24>
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	2200      	movs	r2, #0
 8001758:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 800175a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800175c:	2b05      	cmp	r3, #5
 800175e:	f340 8084 	ble.w	800186a <mg_dns_parse_name_depth+0x134>
 8001762:	2300      	movs	r3, #0
 8001764:	e093      	b.n	800188e <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	4413      	add	r3, r2
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 8001774:	69bb      	ldr	r3, [r7, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d103      	bne.n	8001782 <mg_dns_parse_name_depth+0x4c>
      i++;
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
      break;
 8001780:	e07b      	b.n	800187a <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02f      	beq.n	80017ec <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	021b      	lsls	r3, r3, #8
 8001790:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001794:	6879      	ldr	r1, [r7, #4]
 8001796:	69fa      	ldr	r2, [r7, #28]
 8001798:	440a      	add	r2, r1
 800179a:	3201      	adds	r2, #1
 800179c:	68f9      	ldr	r1, [r7, #12]
 800179e:	440a      	add	r2, r1
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	3301      	adds	r3, #1
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d919      	bls.n	80017e4 <mg_dns_parse_name_depth+0xae>
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	4413      	add	r3, r2
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80017c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80017c2:	3301      	adds	r3, #1
 80017c4:	9302      	str	r3, [sp, #8]
 80017c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	68b9      	ldr	r1, [r7, #8]
 80017d4:	68f8      	ldr	r0, [r7, #12]
 80017d6:	f7ff ffae 	bl	8001736 <mg_dns_parse_name_depth>
 80017da:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <mg_dns_parse_name_depth+0xae>
        return 0;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e054      	b.n	800188e <mg_dns_parse_name_depth+0x158>
      i += 2;
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	3302      	adds	r3, #2
 80017e8:	61fb      	str	r3, [r7, #28]
      break;
 80017ea:	e046      	b.n	800187a <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	441a      	add	r2, r3
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	4413      	add	r3, r2
 80017f6:	3301      	adds	r3, #1
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d801      	bhi.n	8001802 <mg_dns_parse_name_depth+0xcc>
 80017fe:	2300      	movs	r3, #0
 8001800:	e045      	b.n	800188e <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8001802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 8001808:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800180a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180c:	429a      	cmp	r2, r3
 800180e:	d204      	bcs.n	800181a <mg_dns_parse_name_depth+0xe4>
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001814:	4413      	add	r3, r2
 8001816:	222e      	movs	r2, #46	; 0x2e
 8001818:	701a      	strb	r2, [r3, #0]
      j++;
 800181a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800181c:	3301      	adds	r3, #1
 800181e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8001820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001822:	69bb      	ldr	r3, [r7, #24]
 8001824:	4413      	add	r3, r2
 8001826:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001828:	429a      	cmp	r2, r3
 800182a:	d90c      	bls.n	8001846 <mg_dns_parse_name_depth+0x110>
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001830:	18d0      	adds	r0, r2, r3
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	4413      	add	r3, r2
 8001838:	3301      	adds	r3, #1
 800183a:	68fa      	ldr	r2, [r7, #12]
 800183c:	4413      	add	r3, r2
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4619      	mov	r1, r3
 8001842:	f013 ffef 	bl	8015824 <memcpy>
    j += n;
 8001846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	4413      	add	r3, r2
 800184c:	62fb      	str	r3, [r7, #44]	; 0x2c
    i += n + 1;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	4413      	add	r3, r2
 8001854:	3301      	adds	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 8001858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800185a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800185c:	429a      	cmp	r2, r3
 800185e:	d204      	bcs.n	800186a <mg_dns_parse_name_depth+0x134>
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001864:	4413      	add	r3, r2
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	4413      	add	r3, r2
 8001870:	3301      	adds	r3, #1
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	429a      	cmp	r2, r3
 8001876:	f63f af76 	bhi.w	8001766 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 800187a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <mg_dns_parse_name_depth+0x156>
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	3b01      	subs	r3, #1
 8001884:	683a      	ldr	r2, [r7, #0]
 8001886:	4413      	add	r3, r2
 8001888:	2200      	movs	r2, #0
 800188a:	701a      	strb	r2, [r3, #0]
  return i;
 800188c:	69fb      	ldr	r3, [r7, #28]
}
 800188e:	4618      	mov	r0, r3
 8001890:	3720      	adds	r7, #32
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 8001896:	b580      	push	{r7, lr}
 8001898:	b088      	sub	sp, #32
 800189a:	af04      	add	r7, sp, #16
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 80018a4:	2300      	movs	r3, #0
 80018a6:	9302      	str	r3, [sp, #8]
 80018a8:	2300      	movs	r3, #0
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	68b9      	ldr	r1, [r7, #8]
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff ff3d 	bl	8001736 <mg_dns_parse_name_depth>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b088      	sub	sp, #32
 80018ca:	af02      	add	r7, sp, #8
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
 80018d2:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	4413      	add	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 80018e4:	2208      	movs	r2, #8
 80018e6:	2100      	movs	r1, #0
 80018e8:	6a38      	ldr	r0, [r7, #32]
 80018ea:	f013 feb4 	bl	8015656 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b0b      	cmp	r3, #11
 80018f2:	d801      	bhi.n	80018f8 <mg_dns_parse_rr+0x32>
 80018f4:	2300      	movs	r3, #0
 80018f6:	e074      	b.n	80019e2 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018fe:	d901      	bls.n	8001904 <mg_dns_parse_rr+0x3e>
 8001900:	2300      	movs	r3, #0
 8001902:	e06e      	b.n	80019e2 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	429a      	cmp	r2, r3
 800190a:	d301      	bcc.n	8001910 <mg_dns_parse_rr+0x4a>
 800190c:	2300      	movs	r3, #0
 800190e:	e068      	b.n	80019e2 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8001910:	2300      	movs	r3, #0
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2300      	movs	r3, #0
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	68b9      	ldr	r1, [r7, #8]
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f7ff ffbb 	bl	8001896 <mg_dns_parse_name>
 8001920:	4603      	mov	r3, r0
 8001922:	b29a      	uxth	r2, r3
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	801a      	strh	r2, [r3, #0]
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	881b      	ldrh	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <mg_dns_parse_rr+0x6e>
    return 0;
 8001930:	2300      	movs	r3, #0
 8001932:	e056      	b.n	80019e2 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	881b      	ldrh	r3, [r3, #0]
 8001938:	3304      	adds	r3, #4
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4413      	add	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d901      	bls.n	800194c <mg_dns_parse_rr+0x86>
 8001948:	2300      	movs	r3, #0
 800194a:	e04a      	b.n	80019e2 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3b04      	subs	r3, #4
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	021b      	lsls	r3, r3, #8
 8001954:	b21a      	sxth	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	3b03      	subs	r3, #3
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b21b      	sxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b21b      	sxth	r3, r3
 8001962:	b29a      	uxth	r2, r3
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3b02      	subs	r3, #2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	b21a      	sxth	r2, r3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3b01      	subs	r3, #1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b21b      	sxth	r3, r3
 800197a:	4313      	orrs	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	b29a      	uxth	r2, r3
 8001980:	6a3b      	ldr	r3, [r7, #32]
 8001982:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <mg_dns_parse_rr+0xcc>
 800198a:	6a3b      	ldr	r3, [r7, #32]
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	3304      	adds	r3, #4
 8001990:	e027      	b.n	80019e2 <mg_dns_parse_rr+0x11c>

  s += 6;
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3306      	adds	r3, #6
 8001996:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d901      	bls.n	80019a4 <mg_dns_parse_rr+0xde>
 80019a0:	2300      	movs	r3, #0
 80019a2:	e01e      	b.n	80019e2 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	3b02      	subs	r3, #2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b21a      	sxth	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	3b01      	subs	r3, #1
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	4313      	orrs	r3, r2
 80019b8:	b21b      	sxth	r3, r3
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	88db      	ldrh	r3, [r3, #6]
 80019c4:	461a      	mov	r2, r3
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d201      	bcs.n	80019d4 <mg_dns_parse_rr+0x10e>
 80019d0:	2300      	movs	r3, #0
 80019d2:	e006      	b.n	80019e2 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	88db      	ldrh	r3, [r3, #6]
 80019de:	4413      	add	r3, r2
 80019e0:	330a      	adds	r3, #10
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b08c      	sub	sp, #48	; 0x30
 80019ee:	af02      	add	r7, sp, #8
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	61fb      	str	r3, [r7, #28]
  struct mg_dns_rr rr;
  size_t i, n, ofs = sizeof(*h);
 80019fa:	230c      	movs	r3, #12
 80019fc:	623b      	str	r3, [r7, #32]
  memset(dm, 0, sizeof(*dm));
 80019fe:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001a02:	2100      	movs	r1, #0
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f013 fe26 	bl	8015656 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b0b      	cmp	r3, #11
 8001a0e:	d801      	bhi.n	8001a14 <mg_dns_parse+0x2a>
 8001a10:	2300      	movs	r3, #0
 8001a12:	e09f      	b.n	8001b54 <mg_dns_parse+0x16a>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	889b      	ldrh	r3, [r3, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f009 f982 	bl	800ad22 <mg_ntohs>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d901      	bls.n	8001a28 <mg_dns_parse+0x3e>
 8001a24:	2300      	movs	r3, #0
 8001a26:	e095      	b.n	8001b54 <mg_dns_parse+0x16a>
  if (mg_ntohs(h->num_answers) > 10) return 0;   // Sanity
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	88db      	ldrh	r3, [r3, #6]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f009 f978 	bl	800ad22 <mg_ntohs>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b0a      	cmp	r3, #10
 8001a36:	d901      	bls.n	8001a3c <mg_dns_parse+0x52>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	e08b      	b.n	8001b54 <mg_dns_parse+0x16a>
  dm->txnid = mg_ntohs(h->txnid);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	881b      	ldrh	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f009 f96e 	bl	800ad22 <mg_ntohs>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001a4e:	2300      	movs	r3, #0
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e015      	b.n	8001a80 <mg_dns_parse+0x96>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	9300      	str	r3, [sp, #0]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	6a3a      	ldr	r2, [r7, #32]
 8001a5e:	68b9      	ldr	r1, [r7, #8]
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	f7ff ff30 	bl	80018c6 <mg_dns_parse_rr>
 8001a66:	61b8      	str	r0, [r7, #24]
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <mg_dns_parse+0x88>
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e070      	b.n	8001b54 <mg_dns_parse+0x16a>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 8001a72:	6a3a      	ldr	r2, [r7, #32]
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	4413      	add	r3, r2
 8001a78:	623b      	str	r3, [r7, #32]
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	889b      	ldrh	r3, [r3, #4]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f009 f94c 	bl	800ad22 <mg_ntohs>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d3df      	bcc.n	8001a54 <mg_dns_parse+0x6a>
  }
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
 8001a98:	e051      	b.n	8001b3e <mg_dns_parse+0x154>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 8001a9a:	f107 0310 	add.w	r3, r7, #16
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6a3a      	ldr	r2, [r7, #32]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f7ff ff0d 	bl	80018c6 <mg_dns_parse_rr>
 8001aac:	61b8      	str	r0, [r7, #24]
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d101      	bne.n	8001ab8 <mg_dns_parse+0xce>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	e04d      	b.n	8001b54 <mg_dns_parse+0x16a>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3318      	adds	r3, #24
 8001abc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac0:	9200      	str	r2, [sp, #0]
 8001ac2:	6a3a      	ldr	r2, [r7, #32]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff fee5 	bl	8001896 <mg_dns_parse_name>
    ofs += n;
 8001acc:	6a3a      	ldr	r2, [r7, #32]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	623b      	str	r3, [r7, #32]

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8001ad4:	8afb      	ldrh	r3, [r7, #22]
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d114      	bne.n	8001b04 <mg_dns_parse+0x11a>
 8001ada:	8a7b      	ldrh	r3, [r7, #18]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d111      	bne.n	8001b04 <mg_dns_parse+0x11a>
 8001ae0:	8abb      	ldrh	r3, [r7, #20]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d10e      	bne.n	8001b04 <mg_dns_parse+0x11a>
      dm->addr.is_ip6 = false;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	759a      	strb	r2, [r3, #22]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3304      	adds	r3, #4
 8001af0:	6a3a      	ldr	r2, [r7, #32]
 8001af2:	3a04      	subs	r2, #4
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	440a      	add	r2, r1
 8001af8:	6812      	ldr	r2, [r2, #0]
 8001afa:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001b02:	e026      	b.n	8001b52 <mg_dns_parse+0x168>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8001b04:	8afb      	ldrh	r3, [r7, #22]
 8001b06:	2b10      	cmp	r3, #16
 8001b08:	d116      	bne.n	8001b38 <mg_dns_parse+0x14e>
 8001b0a:	8a7b      	ldrh	r3, [r7, #18]
 8001b0c:	2b1c      	cmp	r3, #28
 8001b0e:	d113      	bne.n	8001b38 <mg_dns_parse+0x14e>
 8001b10:	8abb      	ldrh	r3, [r7, #20]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d110      	bne.n	8001b38 <mg_dns_parse+0x14e>
      dm->addr.is_ip6 = true;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	759a      	strb	r2, [r3, #22]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1d18      	adds	r0, r3, #4
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	3b10      	subs	r3, #16
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	2210      	movs	r2, #16
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f013 fe7a 	bl	8015824 <memcpy>
      dm->resolved = true;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2201      	movs	r2, #1
 8001b34:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001b36:	e00c      	b.n	8001b52 <mg_dns_parse+0x168>
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	88db      	ldrh	r3, [r3, #6]
 8001b42:	4618      	mov	r0, r3
 8001b44:	f009 f8ed 	bl	800ad22 <mg_ntohs>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d3a3      	bcc.n	8001a9a <mg_dns_parse+0xb0>
    }
  }
  return true;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3728      	adds	r7, #40	; 0x28
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data,
                   void *fn_data) {
 8001b5c:	b5b0      	push	{r4, r5, r7, lr}
 8001b5e:	b0d2      	sub	sp, #328	; 0x148
 8001b60:	af02      	add	r7, sp, #8
 8001b62:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 8001b66:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 8001b6a:	6020      	str	r0, [r4, #0]
 8001b6c:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8001b70:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8001b74:	6001      	str	r1, [r0, #0]
 8001b76:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8001b7a:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8001b7e:	600a      	str	r2, [r1, #0]
 8001b80:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8001b84:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 8001b88:	6013      	str	r3, [r2, #0]
  struct dns_data *d, *tmp;
  if (ev == MG_EV_POLL) {
 8001b8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d131      	bne.n	8001bfc <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 8001b98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001baa:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001bae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001bbc:	e019      	b.n	8001bf2 <dns_cb+0x96>
         d = tmp) {
      tmp = d->next;
 8001bbe:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 8001bc8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bcc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001bd0:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001bd4:	4290      	cmp	r0, r2
 8001bd6:	eb71 0303 	sbcs.w	r3, r1, r3
 8001bda:	d206      	bcs.n	8001bea <dns_cb+0x8e>
 8001bdc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	4997      	ldr	r1, [pc, #604]	; (8001e40 <dns_cb+0x2e4>)
 8001be4:	4618      	mov	r0, r3
 8001be6:	f000 fb3d 	bl	8002264 <mg_error>
         d = tmp) {
 8001bea:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bee:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001bf2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1e1      	bne.n	8001bbe <dns_cb+0x62>
      mg_error(d->c, "DNS error");
      mg_dns_free(c, d);
    }
  }
  (void) fn_data;
}
 8001bfa:	e11c      	b.n	8001e36 <dns_cb+0x2da>
  } else if (ev == MG_EV_READ) {
 8001bfc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c00:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b07      	cmp	r3, #7
 8001c08:	f040 80e7 	bne.w	8001dda <dns_cb+0x27e>
    int resolved = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8001c12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c16:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c22:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f107 0210 	add.w	r2, r7, #16
 8001c2e:	4619      	mov	r1, r3
 8001c30:	f7ff fedb 	bl	80019ea <mg_dns_parse>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f083 0301 	eor.w	r3, r3, #1
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d01d      	beq.n	8001c7c <dns_cb+0x120>
      MG_ERROR(("Unexpected DNS response:"));
 8001c40:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <dns_cb+0x2e8>)
 8001c42:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001c46:	4980      	ldr	r1, [pc, #512]	; (8001e48 <dns_cb+0x2ec>)
 8001c48:	2001      	movs	r0, #1
 8001c4a:	f005 fac7 	bl	80071dc <mg_log_prefix>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <dns_cb+0xfe>
 8001c54:	487d      	ldr	r0, [pc, #500]	; (8001e4c <dns_cb+0x2f0>)
 8001c56:	f005 fb1b 	bl	8007290 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8001c5a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c5e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c6a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4619      	mov	r1, r3
 8001c74:	4610      	mov	r0, r2
 8001c76:	f005 fb3f 	bl	80072f8 <mg_hexdump>
 8001c7a:	e095      	b.n	8001da8 <dns_cb+0x24c>
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001c7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c80:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001c8e:	e086      	b.n	8001d9e <dns_cb+0x242>
        tmp = d->next;
 8001c90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        if (dm.txnid != d->txnid) continue;
 8001c9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ca8:	8a1b      	ldrh	r3, [r3, #16]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d172      	bne.n	8001d94 <dns_cb+0x238>
        if (d->c->is_resolving) {
 8001cae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001cb8:	f003 0308 	and.w	r3, r3, #8
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d049      	beq.n	8001d56 <dns_cb+0x1fa>
          if (dm.resolved) {
 8001cc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cca:	789b      	ldrb	r3, [r3, #2]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d037      	beq.n	8001d40 <dns_cb+0x1e4>
            dm.addr.port = d->c->rem.port;  // Save port
 8001cd0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001cd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ce0:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8001ce2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001cec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001cf0:	f102 041c 	add.w	r4, r2, #28
 8001cf4:	1d1d      	adds	r5, r3, #4
 8001cf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cfa:	682b      	ldr	r3, [r5, #0]
 8001cfc:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8001cfe:	4b51      	ldr	r3, [pc, #324]	; (8001e44 <dns_cb+0x2e8>)
 8001d00:	f240 1215 	movw	r2, #277	; 0x115
 8001d04:	4950      	ldr	r1, [pc, #320]	; (8001e48 <dns_cb+0x2ec>)
 8001d06:	2003      	movs	r0, #3
 8001d08:	f005 fa68 	bl	80071dc <mg_log_prefix>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00f      	beq.n	8001d32 <dns_cb+0x1d6>
 8001d12:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d1a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	331c      	adds	r3, #28
 8001d22:	f107 0210 	add.w	r2, r7, #16
 8001d26:	3218      	adds	r2, #24
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	4b49      	ldr	r3, [pc, #292]	; (8001e50 <dns_cb+0x2f4>)
 8001d2c:	4849      	ldr	r0, [pc, #292]	; (8001e54 <dns_cb+0x2f8>)
 8001d2e:	f005 faaf 	bl	8007290 <mg_log>
            mg_connect_resolved(d->c);
 8001d32:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00c fc7d 	bl	800e638 <mg_connect_resolved>
 8001d3e:	e01c      	b.n	8001d7a <dns_cb+0x21e>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8001d40:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d44:	6858      	ldr	r0, [r3, #4]
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	3318      	adds	r3, #24
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4942      	ldr	r1, [pc, #264]	; (8001e58 <dns_cb+0x2fc>)
 8001d50:	f000 fa88 	bl	8002264 <mg_error>
 8001d54:	e011      	b.n	8001d7a <dns_cb+0x21e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8001d56:	4b3b      	ldr	r3, [pc, #236]	; (8001e44 <dns_cb+0x2e8>)
 8001d58:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001d5c:	493a      	ldr	r1, [pc, #232]	; (8001e48 <dns_cb+0x2ec>)
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f005 fa3c 	bl	80071dc <mg_log_prefix>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <dns_cb+0x21e>
 8001d6a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d72:	4619      	mov	r1, r3
 8001d74:	4839      	ldr	r0, [pc, #228]	; (8001e5c <dns_cb+0x300>)
 8001d76:	f005 fa8b 	bl	8007290 <mg_log>
        mg_dns_free(c, d);
 8001d7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001d7e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001d82:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	f7ff fc99 	bl	80016be <mg_dns_free>
        resolved = 1;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001d92:	e000      	b.n	8001d96 <dns_cb+0x23a>
        if (dm.txnid != d->txnid) continue;
 8001d94:	bf00      	nop
           d = tmp) {
 8001d96:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d9a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001d9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f47f af74 	bne.w	8001c90 <dns_cb+0x134>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8001da8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d10c      	bne.n	8001dca <dns_cb+0x26e>
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <dns_cb+0x2e8>)
 8001db2:	f44f 7294 	mov.w	r2, #296	; 0x128
 8001db6:	4924      	ldr	r1, [pc, #144]	; (8001e48 <dns_cb+0x2ec>)
 8001db8:	2001      	movs	r0, #1
 8001dba:	f005 fa0f 	bl	80071dc <mg_log_prefix>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <dns_cb+0x26e>
 8001dc4:	4826      	ldr	r0, [pc, #152]	; (8001e60 <dns_cb+0x304>)
 8001dc6:	f005 fa63 	bl	8007290 <mg_log>
    c->recv.len = 0;
 8001dca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001dce:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dd8:	e02d      	b.n	8001e36 <dns_cb+0x2da>
  } else if (ev == MG_EV_CLOSE) {
 8001dda:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001dde:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b09      	cmp	r3, #9
 8001de6:	d126      	bne.n	8001e36 <dns_cb+0x2da>
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001de8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001dec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001dfa:	e018      	b.n	8001e2e <dns_cb+0x2d2>
      tmp = d->next;
 8001dfc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      mg_error(d->c, "DNS error");
 8001e06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	4915      	ldr	r1, [pc, #84]	; (8001e64 <dns_cb+0x308>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f000 fa28 	bl	8002264 <mg_error>
      mg_dns_free(c, d);
 8001e14:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001e18:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001e1c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001e20:	6818      	ldr	r0, [r3, #0]
 8001e22:	f7ff fc4c 	bl	80016be <mg_dns_free>
         d = tmp) {
 8001e26:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001e2a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001e2e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1e2      	bne.n	8001dfc <dns_cb+0x2a0>
}
 8001e36:	bf00      	nop
 8001e38:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e40:	08016450 	.word	0x08016450
 8001e44:	08018398 	.word	0x08018398
 8001e48:	0801645c 	.word	0x0801645c
 8001e4c:	08016474 	.word	0x08016474
 8001e50:	08007fc7 	.word	0x08007fc7
 8001e54:	08016490 	.word	0x08016490
 8001e58:	080164a0 	.word	0x080164a0
 8001e5c:	080164b8 	.word	0x080164b8
 8001e60:	080164d0 	.word	0x080164d0
 8001e64:	080164e0 	.word	0x080164e0

08001e68 <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b0cb      	sub	sp, #300	; 0x12c
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001e72:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001e76:	6020      	str	r0, [r4, #0]
 8001e78:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001e7c:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8001e80:	6001      	str	r1, [r0, #0]
 8001e82:	4619      	mov	r1, r3
 8001e84:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e88:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001e8c:	801a      	strh	r2, [r3, #0]
 8001e8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e92:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 8001e96:	460a      	mov	r2, r1
 8001e98:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8001e9a:	f107 0314 	add.w	r3, r7, #20
 8001e9e:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f013 fbd6 	bl	8015656 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8001eaa:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001eae:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f008 ff34 	bl	800ad22 <mg_ntohs>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ec2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ec6:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8001ec8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001ecc:	f008 ff29 	bl	800ad22 <mg_ntohs>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ed8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001edc:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f008 ff1f 	bl	800ad22 <mg_ntohs>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001eec:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001ef0:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ef8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001efc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f00:	e054      	b.n	8001fac <mg_dns_send+0x144>
    if (name->ptr[i] == '.' || i >= name->len) {
 8001f02:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f06:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f12:	4413      	add	r3, r2
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b2e      	cmp	r3, #46	; 0x2e
 8001f18:	d009      	beq.n	8001f2e <mg_dns_send+0xc6>
 8001f1a:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f1e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d32f      	bcc.n	8001f8e <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8001f2e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	b2d9      	uxtb	r1, r3
 8001f3e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f42:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001f46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f4a:	4413      	add	r3, r2
 8001f4c:	330c      	adds	r3, #12
 8001f4e:	460a      	mov	r2, r1
 8001f50:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->ptr + n, i - n);
 8001f52:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f56:	3301      	adds	r3, #1
 8001f58:	f107 0214 	add.w	r2, r7, #20
 8001f5c:	3308      	adds	r3, #8
 8001f5e:	4413      	add	r3, r2
 8001f60:	1d18      	adds	r0, r3, #4
 8001f62:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f66:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f72:	18d1      	adds	r1, r2, r3
 8001f74:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	f013 fc50 	bl	8015824 <memcpy>
      n = i + 1;
 8001f84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }
    if (i >= name->len) break;
 8001f8e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001f92:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d209      	bcs.n	8001fb6 <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001fa2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001fac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001fb0:	2bfa      	cmp	r3, #250	; 0xfa
 8001fb2:	d9a6      	bls.n	8001f02 <mg_dns_send+0x9a>
 8001fb4:	e000      	b.n	8001fb8 <mg_dns_send+0x150>
    if (i >= name->len) break;
 8001fb6:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8001fb8:	f107 0214 	add.w	r2, r7, #20
 8001fbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fc0:	3308      	adds	r3, #8
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	4916      	ldr	r1, [pc, #88]	; (8002024 <mg_dns_send+0x1bc>)
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f013 fc2a 	bl	8015824 <memcpy>
  n += 5;
 8001fd0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fd4:	3305      	adds	r3, #5
 8001fd6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8001fda:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001fde:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 8001fe2:	781b      	ldrb	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <mg_dns_send+0x194>
 8001fe8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fec:	3b03      	subs	r3, #3
 8001fee:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001ff2:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001ff6:	4413      	add	r3, r2
 8001ff8:	221c      	movs	r2, #28
 8001ffa:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8001ffc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002000:	f103 020c 	add.w	r2, r3, #12
 8002004:	f107 0114 	add.w	r1, r7, #20
 8002008:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800200c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	f00c fd85 	bl	800eb20 <mg_send>
 8002016:	4603      	mov	r3, r0
}
 8002018:	4618      	mov	r0, r3
 800201a:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800201e:	46bd      	mov	sp, r7
 8002020:	bd90      	pop	{r4, r7, pc}
 8002022:	bf00      	nop
 8002024:	080164ec 	.word	0x080164ec

08002028 <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8002028:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800202c:	b088      	sub	sp, #32
 800202e:	af02      	add	r7, sp, #8
 8002030:	60f8      	str	r0, [r7, #12]
 8002032:	60b9      	str	r1, [r7, #8]
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d104      	bne.n	800204e <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8002044:	494c      	ldr	r1, [pc, #304]	; (8002178 <mg_sendnsreq+0x150>)
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f000 f90c 	bl	8002264 <mg_error>
 800204c:	e016      	b.n	800207c <mg_sendnsreq+0x54>
  } else if (dnsc->c == NULL) {
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d112      	bne.n	800207c <mg_sendnsreq+0x54>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6858      	ldr	r0, [r3, #4]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6819      	ldr	r1, [r3, #0]
 800205e:	2300      	movs	r3, #0
 8002060:	2200      	movs	r2, #0
 8002062:	f005 fcfb 	bl	8007a5c <mg_connect>
 8002066:	4602      	mov	r2, r0
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d003      	beq.n	800207c <mg_sendnsreq+0x54>
      dnsc->c->pfn = dns_cb;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a40      	ldr	r2, [pc, #256]	; (800217c <mg_sendnsreq+0x154>)
 800207a:	661a      	str	r2, [r3, #96]	; 0x60
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d104      	bne.n	800208e <mg_sendnsreq+0x66>
    mg_error(c, "resolver");
 8002084:	493e      	ldr	r1, [pc, #248]	; (8002180 <mg_sendnsreq+0x158>)
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f8ec 	bl	8002264 <mg_error>
                name->ptr, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 800208c:	e06f      	b.n	800216e <mg_sendnsreq+0x146>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 800208e:	2118      	movs	r1, #24
 8002090:	2001      	movs	r0, #1
 8002092:	f012 ffd7 	bl	8015044 <calloc>
 8002096:	4603      	mov	r3, r0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d104      	bne.n	80020aa <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 80020a0:	4938      	ldr	r1, [pc, #224]	; (8002184 <mg_sendnsreq+0x15c>)
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f8de 	bl	8002264 <mg_error>
}
 80020a8:	e061      	b.n	800216e <mg_sendnsreq+0x146>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d004      	beq.n	80020c2 <mg_sendnsreq+0x9a>
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	8a1b      	ldrh	r3, [r3, #16]
 80020bc:	3301      	adds	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	e000      	b.n	80020c4 <mg_sendnsreq+0x9c>
 80020c2:	2201      	movs	r2, #1
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 80020da:	f7fe fd61 	bl	8000ba0 <mg_millis>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	17c8      	asrs	r0, r1, #31
 80020e6:	460c      	mov	r4, r1
 80020e8:	4605      	mov	r5, r0
 80020ea:	eb12 0804 	adds.w	r8, r2, r4
 80020ee:	eb43 0905 	adc.w	r9, r3, r5
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 800210c:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <mg_sendnsreq+0x160>)
 800210e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8002112:	491e      	ldr	r1, [pc, #120]	; (800218c <mg_sendnsreq+0x164>)
 8002114:	2004      	movs	r0, #4
 8002116:	f005 f861 	bl	80071dc <mg_log_prefix>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d011      	beq.n	8002144 <mg_sendnsreq+0x11c>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	461c      	mov	r4, r3
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	697a      	ldr	r2, [r7, #20]
 8002134:	8a12      	ldrh	r2, [r2, #16]
 8002136:	9201      	str	r2, [sp, #4]
 8002138:	9300      	str	r3, [sp, #0]
 800213a:	4603      	mov	r3, r0
 800213c:	4622      	mov	r2, r4
 800213e:	4814      	ldr	r0, [pc, #80]	; (8002190 <mg_sendnsreq+0x168>)
 8002140:	f005 f8a6 	bl	8007290 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	6858      	ldr	r0, [r3, #4]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	8a1a      	ldrh	r2, [r3, #16]
 800214c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	f7ff fe89 	bl	8001e68 <mg_dns_send>
 8002156:	4603      	mov	r3, r0
 8002158:	f083 0301 	eor.w	r3, r3, #1
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <mg_sendnsreq+0x146>
      mg_error(dnsc->c, "DNS send");
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	490b      	ldr	r1, [pc, #44]	; (8002194 <mg_sendnsreq+0x16c>)
 8002168:	4618      	mov	r0, r3
 800216a:	f000 f87b 	bl	8002264 <mg_error>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002178:	080164f4 	.word	0x080164f4
 800217c:	08001b5d 	.word	0x08001b5d
 8002180:	08016520 	.word	0x08016520
 8002184:	0801652c 	.word	0x0801652c
 8002188:	080183a0 	.word	0x080183a0
 800218c:	0801645c 	.word	0x0801645c
 8002190:	08016538 	.word	0x08016538
 8002194:	0801655c 	.word	0x0801655c

08002198 <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f008 fd0a 	bl	800abc2 <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 80021ae:	6838      	ldr	r0, [r7, #0]
 80021b0:	f008 fd3a 	bl	800ac28 <mg_url_port>
 80021b4:	4603      	mov	r3, r0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f008 fdb3 	bl	800ad22 <mg_ntohs>
 80021bc:	4603      	mov	r3, r0
 80021be:	461a      	mov	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (mg_aton(host, &c->rem)) {
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	331c      	adds	r3, #28
 80021c8:	461a      	mov	r2, r3
 80021ca:	f107 030c 	add.w	r3, r7, #12
 80021ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80021d2:	f005 fb7d 	bl	80078d0 <mg_aton>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f00c fa2b 	bl	800e638 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 80021e2:	e019      	b.n	8002218 <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	7e1b      	ldrb	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <mg_resolve+0x5e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	330c      	adds	r3, #12
 80021f4:	e002      	b.n	80021fc <mg_resolve+0x64>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	3304      	adds	r3, #4
 80021fc:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	7e1b      	ldrb	r3, [r3, #24]
 800220a:	f107 010c 	add.w	r1, r7, #12
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7ff ff08 	bl	8002028 <mg_sendnsreq>
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8002220:	b590      	push	{r4, r7, lr}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002230:	2b00      	cmp	r3, #0
 8002232:	d007      	beq.n	8002244 <mg_call+0x24>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68b9      	ldr	r1, [r7, #8]
 8002240:	68f8      	ldr	r0, [r7, #12]
 8002242:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <mg_call+0x3c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	47a0      	blx	r4
}
 800225c:	bf00      	nop
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	bd90      	pop	{r4, r7, pc}

08002264 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8002264:	b40e      	push	{r1, r2, r3}
 8002266:	b580      	push	{r7, lr}
 8002268:	b095      	sub	sp, #84	; 0x54
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 800226e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002272:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 8002274:	f107 030c 	add.w	r3, r7, #12
 8002278:	f107 0010 	add.w	r0, r7, #16
 800227c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	f005 fdb8 	bl	8007df4 <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <mg_error+0x70>)
 8002286:	f240 1293 	movw	r2, #403	; 0x193
 800228a:	4913      	ldr	r1, [pc, #76]	; (80022d8 <mg_error+0x74>)
 800228c:	2001      	movs	r0, #1
 800228e:	f004 ffa5 	bl	80071dc <mg_log_prefix>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <mg_error+0x46>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	480d      	ldr	r0, [pc, #52]	; (80022dc <mg_error+0x78>)
 80022a6:	f004 fff3 	bl	8007290 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80022b0:	f043 0320 	orr.w	r3, r3, #32
 80022b4:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	461a      	mov	r2, r3
 80022be:	2100      	movs	r1, #0
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f7ff ffad 	bl	8002220 <mg_call>
}
 80022c6:	bf00      	nop
 80022c8:	3754      	adds	r7, #84	; 0x54
 80022ca:	46bd      	mov	sp, r7
 80022cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d0:	b003      	add	sp, #12
 80022d2:	4770      	bx	lr
 80022d4:	080183b0 	.word	0x080183b0
 80022d8:	0801645c 	.word	0x0801645c
 80022dc:	08016568 	.word	0x08016568

080022e0 <is_digit>:
#endif




static bool is_digit(int c) {
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b2f      	cmp	r3, #47	; 0x2f
 80022ec:	dd04      	ble.n	80022f8 <is_digit+0x18>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b39      	cmp	r3, #57	; 0x39
 80022f2:	dc01      	bgt.n	80022f8 <is_digit+0x18>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <is_digit+0x1a>
 80022f8:	2300      	movs	r3, #0
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	b2db      	uxtb	r3, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <addexp>:

static int addexp(char *buf, int e, int sign) {
 800230c:	b480      	push	{r7}
 800230e:	b087      	sub	sp, #28
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
  int n = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	617a      	str	r2, [r7, #20]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	2265      	movs	r2, #101	; 0x65
 800232a:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	617a      	str	r2, [r7, #20]
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4413      	add	r3, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002344:	dd01      	ble.n	800234a <addexp+0x3e>
 8002346:	2300      	movs	r3, #0
 8002348:	e057      	b.n	80023fa <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	2b09      	cmp	r3, #9
 800234e:	dc07      	bgt.n	8002360 <addexp+0x54>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	617a      	str	r2, [r7, #20]
 8002356:	461a      	mov	r2, r3
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	4413      	add	r3, r2
 800235c:	2230      	movs	r2, #48	; 0x30
 800235e:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b63      	cmp	r3, #99	; 0x63
 8002364:	dd1c      	ble.n	80023a0 <addexp+0x94>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	4a27      	ldr	r2, [pc, #156]	; (8002408 <addexp+0xfc>)
 800236a:	fb82 1203 	smull	r1, r2, r2, r3
 800236e:	1152      	asrs	r2, r2, #5
 8002370:	17db      	asrs	r3, r3, #31
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	b2da      	uxtb	r2, r3
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	1c59      	adds	r1, r3, #1
 800237a:	6179      	str	r1, [r7, #20]
 800237c:	4619      	mov	r1, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	440b      	add	r3, r1
 8002382:	3230      	adds	r2, #48	; 0x30
 8002384:	b2d2      	uxtb	r2, r2
 8002386:	701a      	strb	r2, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <addexp+0xfc>)
 800238c:	fb82 1203 	smull	r1, r2, r2, r3
 8002390:	1151      	asrs	r1, r2, #5
 8002392:	17da      	asrs	r2, r3, #31
 8002394:	1a8a      	subs	r2, r1, r2
 8002396:	2164      	movs	r1, #100	; 0x64
 8002398:	fb01 f202 	mul.w	r2, r1, r2
 800239c:	1a9b      	subs	r3, r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b09      	cmp	r3, #9
 80023a4:	dd1d      	ble.n	80023e2 <addexp+0xd6>
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	4a18      	ldr	r2, [pc, #96]	; (800240c <addexp+0x100>)
 80023aa:	fb82 1203 	smull	r1, r2, r2, r3
 80023ae:	1092      	asrs	r2, r2, #2
 80023b0:	17db      	asrs	r3, r3, #31
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	1c59      	adds	r1, r3, #1
 80023ba:	6179      	str	r1, [r7, #20]
 80023bc:	4619      	mov	r1, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	440b      	add	r3, r1
 80023c2:	3230      	adds	r2, #48	; 0x30
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	701a      	strb	r2, [r3, #0]
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	4b10      	ldr	r3, [pc, #64]	; (800240c <addexp+0x100>)
 80023cc:	fb83 1302 	smull	r1, r3, r3, r2
 80023d0:	1099      	asrs	r1, r3, #2
 80023d2:	17d3      	asrs	r3, r2, #31
 80023d4:	1ac9      	subs	r1, r1, r3
 80023d6:	460b      	mov	r3, r1
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	1c59      	adds	r1, r3, #1
 80023ea:	6179      	str	r1, [r7, #20]
 80023ec:	4619      	mov	r1, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	440b      	add	r3, r1
 80023f2:	3230      	adds	r2, #48	; 0x30
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
  return n;
 80023f8:	697b      	ldr	r3, [r7, #20]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	371c      	adds	r7, #28
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	51eb851f 	.word	0x51eb851f
 800240c:	66666667 	.word	0x66666667

08002410 <xisinf>:

static int xisinf(double x) {
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800241a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800241e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002422:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	000a      	movs	r2, r1
 8002430:	2300      	movs	r3, #0
 8002432:	4613      	mov	r3, r2
 8002434:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <xisinf+0x4c>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d106      	bne.n	800244c <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 800243e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002442:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <xisinf+0x3c>
 8002448:	2301      	movs	r3, #1
 800244a:	e000      	b.n	800244e <xisinf+0x3e>
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr
 800245a:	bf00      	nop
 800245c:	7ff00000 	.word	0x7ff00000

08002460 <xisnan>:

static int xisnan(double x) {
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800246a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800246e:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	000a      	movs	r2, r1
 8002480:	2300      	movs	r3, #0
 8002482:	4613      	mov	r3, r2
 8002484:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 8002488:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800248c:	4613      	mov	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	bf14      	ite	ne
 8002492:	2301      	movne	r3, #1
 8002494:	2300      	moveq	r3, #0
 8002496:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 8002498:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 800249a:	4a06      	ldr	r2, [pc, #24]	; (80024b4 <xisnan+0x54>)
 800249c:	4293      	cmp	r3, r2
 800249e:	bf8c      	ite	hi
 80024a0:	2301      	movhi	r3, #1
 80024a2:	2300      	movls	r3, #0
 80024a4:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	7ff00000 	.word	0x7ff00000

080024b8 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b09e      	sub	sp, #120	; 0x78
 80024bc:	af02      	add	r7, sp, #8
 80024be:	6178      	str	r0, [r7, #20]
 80024c0:	6139      	str	r1, [r7, #16]
 80024c2:	ed87 0b02 	vstr	d0, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80024ce:	2300      	movs	r3, #0
 80024d0:	667b      	str	r3, [r7, #100]	; 0x64
 80024d2:	2300      	movs	r3, #0
 80024d4:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 80024d6:	ed97 7b02 	vldr	d7, [r7, #8]
 80024da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80024de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e2:	d107      	bne.n	80024f4 <mg_dtoa+0x3c>
 80024e4:	4bb1      	ldr	r3, [pc, #708]	; (80027ac <mg_dtoa+0x2f4>)
 80024e6:	4ab2      	ldr	r2, [pc, #712]	; (80027b0 <mg_dtoa+0x2f8>)
 80024e8:	6939      	ldr	r1, [r7, #16]
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f005 fcaa 	bl	8007e44 <mg_snprintf>
 80024f0:	4603      	mov	r3, r0
 80024f2:	e266      	b.n	80029c2 <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 80024f4:	ed97 0b02 	vldr	d0, [r7, #8]
 80024f8:	f7ff ff8a 	bl	8002410 <xisinf>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d010      	beq.n	8002524 <mg_dtoa+0x6c>
 8002502:	ed97 7b02 	vldr	d7, [r7, #8]
 8002506:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800250a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250e:	dd01      	ble.n	8002514 <mg_dtoa+0x5c>
 8002510:	4ba8      	ldr	r3, [pc, #672]	; (80027b4 <mg_dtoa+0x2fc>)
 8002512:	e000      	b.n	8002516 <mg_dtoa+0x5e>
 8002514:	4ba8      	ldr	r3, [pc, #672]	; (80027b8 <mg_dtoa+0x300>)
 8002516:	4aa6      	ldr	r2, [pc, #664]	; (80027b0 <mg_dtoa+0x2f8>)
 8002518:	6939      	ldr	r1, [r7, #16]
 800251a:	6978      	ldr	r0, [r7, #20]
 800251c:	f005 fc92 	bl	8007e44 <mg_snprintf>
 8002520:	4603      	mov	r3, r0
 8002522:	e24e      	b.n	80029c2 <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 8002524:	ed97 0b02 	vldr	d0, [r7, #8]
 8002528:	f7ff ff9a 	bl	8002460 <xisnan>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d007      	beq.n	8002542 <mg_dtoa+0x8a>
 8002532:	4ba2      	ldr	r3, [pc, #648]	; (80027bc <mg_dtoa+0x304>)
 8002534:	4a9e      	ldr	r2, [pc, #632]	; (80027b0 <mg_dtoa+0x2f8>)
 8002536:	6939      	ldr	r1, [r7, #16]
 8002538:	6978      	ldr	r0, [r7, #20]
 800253a:	f005 fc83 	bl	8007e44 <mg_snprintf>
 800253e:	4603      	mov	r3, r0
 8002540:	e23f      	b.n	80029c2 <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 8002542:	ed97 7b02 	vldr	d7, [r7, #8]
 8002546:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800254a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254e:	d50d      	bpl.n	800256c <mg_dtoa+0xb4>
 8002550:	ed97 7b02 	vldr	d7, [r7, #8]
 8002554:	eeb1 7b47 	vneg.f64	d7, d7
 8002558:	ed87 7b02 	vstr	d7, [r7, #8]
 800255c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	66ba      	str	r2, [r7, #104]	; 0x68
 8002562:	3370      	adds	r3, #112	; 0x70
 8002564:	443b      	add	r3, r7
 8002566:	222d      	movs	r2, #45	; 0x2d
 8002568:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 800256c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002570:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	4b91      	ldr	r3, [pc, #580]	; (80027c0 <mg_dtoa+0x308>)
 800257a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 800257e:	e007      	b.n	8002590 <mg_dtoa+0xd8>
 8002580:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002584:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002588:	ee27 7b06 	vmul.f64	d7, d7, d6
 800258c:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 8002590:	ed97 7b02 	vldr	d7, [r7, #8]
 8002594:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002598:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	db0c      	blt.n	80025bc <mg_dtoa+0x104>
 80025a2:	ed97 5b02 	vldr	d5, [r7, #8]
 80025a6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80025aa:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025ae:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80025b2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80025b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ba:	dae1      	bge.n	8002580 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80025bc:	e007      	b.n	80025ce <mg_dtoa+0x116>
 80025be:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80025c2:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80025c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80025ca:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 80025ce:	ed97 7b02 	vldr	d7, [r7, #8]
 80025d2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80025d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80025da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025de:	d80c      	bhi.n	80025fa <mg_dtoa+0x142>
 80025e0:	ed97 5b02 	vldr	d5, [r7, #8]
 80025e4:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80025e8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80025ec:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80025f0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80025f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025f8:	d9e1      	bls.n	80025be <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 80025fa:	2300      	movs	r3, #0
 80025fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025fe:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002602:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8002606:	ee27 7b06 	vmul.f64	d7, d7, d6
 800260a:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 800260e:	e00a      	b.n	8002626 <mg_dtoa+0x16e>
 8002610:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002614:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002618:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800261c:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 8002620:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002622:	3301      	adds	r3, #1
 8002624:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002626:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	429a      	cmp	r2, r3
 800262c:	dbf0      	blt.n	8002610 <mg_dtoa+0x158>
  d += t;
 800262e:	ed97 6b02 	vldr	d6, [r7, #8]
 8002632:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002636:	ee36 7b07 	vadd.f64	d7, d6, d7
 800263a:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	4b5f      	ldr	r3, [pc, #380]	; (80027c0 <mg_dtoa+0x308>)
 8002644:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8002648:	e00a      	b.n	8002660 <mg_dtoa+0x1a8>
 800264a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800264e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002652:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002656:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 800265a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800265c:	3301      	adds	r3, #1
 800265e:	663b      	str	r3, [r7, #96]	; 0x60
 8002660:	ed97 7b02 	vldr	d7, [r7, #8]
 8002664:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002668:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	db0c      	blt.n	800268c <mg_dtoa+0x1d4>
 8002672:	ed97 5b02 	vldr	d5, [r7, #8]
 8002676:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 800267a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800267e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8002682:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268a:	dade      	bge.n	800264a <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 800268c:	e00a      	b.n	80026a4 <mg_dtoa+0x1ec>
 800268e:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8002692:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002696:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800269a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 800269e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026a0:	3b01      	subs	r3, #1
 80026a2:	663b      	str	r3, [r7, #96]	; 0x60
 80026a4:	ed97 7b02 	vldr	d7, [r7, #8]
 80026a8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80026ac:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80026b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b4:	d50c      	bpl.n	80026d0 <mg_dtoa+0x218>
 80026b6:	ed97 5b02 	vldr	d5, [r7, #8]
 80026ba:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80026be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80026c2:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80026c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80026ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ce:	d4de      	bmi.n	800268e <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 80026d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	db2d      	blt.n	8002734 <mg_dtoa+0x27c>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	dd2a      	ble.n	8002734 <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 80026de:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 80026e2:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80026e6:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80026ea:	78fb      	ldrb	r3, [r7, #3]
 80026ec:	f107 0018 	add.w	r0, r7, #24
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	eeb0 0b45 	vmov.f64	d0, d5
 80026f6:	2128      	movs	r1, #40	; 0x28
 80026f8:	f7ff fede 	bl	80024b8 <mg_dtoa>
 80026fc:	4603      	mov	r3, r0
 80026fe:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8002700:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002704:	4413      	add	r3, r2
 8002706:	f107 0218 	add.w	r2, r7, #24
 800270a:	4413      	add	r3, r2
 800270c:	222b      	movs	r2, #43	; 0x2b
 800270e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff fdfb 	bl	800230c <addexp>
 8002716:	4602      	mov	r2, r0
 8002718:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800271a:	4413      	add	r3, r2
 800271c:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 800271e:	f107 0318 	add.w	r3, r7, #24
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002726:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <mg_dtoa+0x30c>)
 8002728:	6939      	ldr	r1, [r7, #16]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f005 fb8a 	bl	8007e44 <mg_snprintf>
 8002730:	4603      	mov	r3, r0
 8002732:	e146      	b.n	80029c2 <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	425b      	negs	r3, r3
 8002738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800273a:	429a      	cmp	r2, r3
 800273c:	dc2e      	bgt.n	800279c <mg_dtoa+0x2e4>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	dd2b      	ble.n	800279c <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002744:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8002748:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800274c:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002750:	78fb      	ldrb	r3, [r7, #3]
 8002752:	f107 0018 	add.w	r0, r7, #24
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	eeb0 0b45 	vmov.f64	d0, d5
 800275c:	2128      	movs	r1, #40	; 0x28
 800275e:	f7ff feab 	bl	80024b8 <mg_dtoa>
 8002762:	4603      	mov	r3, r0
 8002764:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 8002766:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002768:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800276a:	4413      	add	r3, r2
 800276c:	f107 0218 	add.w	r2, r7, #24
 8002770:	18d0      	adds	r0, r2, r3
 8002772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002774:	425b      	negs	r3, r3
 8002776:	222d      	movs	r2, #45	; 0x2d
 8002778:	4619      	mov	r1, r3
 800277a:	f7ff fdc7 	bl	800230c <addexp>
 800277e:	4602      	mov	r2, r0
 8002780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002782:	4413      	add	r3, r2
 8002784:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002786:	f107 0318 	add.w	r3, r7, #24
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800278e:	4a0d      	ldr	r2, [pc, #52]	; (80027c4 <mg_dtoa+0x30c>)
 8002790:	6939      	ldr	r1, [r7, #16]
 8002792:	6978      	ldr	r0, [r7, #20]
 8002794:	f005 fb56 	bl	8007e44 <mg_snprintf>
 8002798:	4603      	mov	r3, r0
 800279a:	e112      	b.n	80029c2 <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800279c:	2300      	movs	r3, #0
 800279e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80027a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027a4:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80027a8:	e046      	b.n	8002838 <mg_dtoa+0x380>
 80027aa:	bf00      	nop
 80027ac:	08016574 	.word	0x08016574
 80027b0:	08016578 	.word	0x08016578
 80027b4:	0801657c 	.word	0x0801657c
 80027b8:	08016580 	.word	0x08016580
 80027bc:	08016588 	.word	0x08016588
 80027c0:	3ff00000 	.word	0x3ff00000
 80027c4:	0801658c 	.word	0x0801658c
      int ch = (int) (d / t);
 80027c8:	ed97 5b02 	vldr	d5, [r7, #8]
 80027cc:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80027d0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80027d4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80027d8:	ee17 3a90 	vmov	r3, s15
 80027dc:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 80027de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	dc02      	bgt.n	80027ea <mg_dtoa+0x332>
 80027e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	dd0c      	ble.n	8002804 <mg_dtoa+0x34c>
 80027ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027f0:	1c59      	adds	r1, r3, #1
 80027f2:	6679      	str	r1, [r7, #100]	; 0x64
 80027f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027f6:	440b      	add	r3, r1
 80027f8:	3230      	adds	r2, #48	; 0x30
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	3370      	adds	r3, #112	; 0x70
 80027fe:	443b      	add	r3, r7
 8002800:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800280e:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002812:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002816:	ed97 6b02 	vldr	d6, [r7, #8]
 800281a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800281e:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002822:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002826:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800282a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800282e:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 8002832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002834:	3301      	adds	r3, #1
 8002836:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002838:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800283c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002840:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002848:	db04      	blt.n	8002854 <mg_dtoa+0x39c>
 800284a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800284c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800284e:	4413      	add	r3, r2
 8002850:	2b27      	cmp	r3, #39	; 0x27
 8002852:	ddb9      	ble.n	80027c8 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 8002854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002856:	2b00      	cmp	r3, #0
 8002858:	d118      	bne.n	800288c <mg_dtoa+0x3d4>
 800285a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	66ba      	str	r2, [r7, #104]	; 0x68
 8002860:	3370      	adds	r3, #112	; 0x70
 8002862:	443b      	add	r3, r7
 8002864:	2230      	movs	r2, #48	; 0x30
 8002866:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 800286a:	e00f      	b.n	800288c <mg_dtoa+0x3d4>
 800286c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	667a      	str	r2, [r7, #100]	; 0x64
 8002872:	3370      	adds	r3, #112	; 0x70
 8002874:	443b      	add	r3, r7
 8002876:	2230      	movs	r2, #48	; 0x30
 8002878:	f803 2c58 	strb.w	r2, [r3, #-88]
 800287c:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002880:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002884:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002888:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 800288c:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002890:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002894:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800289c:	db04      	blt.n	80028a8 <mg_dtoa+0x3f0>
 800289e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028a2:	4413      	add	r3, r2
 80028a4:	2b27      	cmp	r3, #39	; 0x27
 80028a6:	dde1      	ble.n	800286c <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80028a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80028aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028ac:	4413      	add	r3, r2
 80028ae:	2b27      	cmp	r3, #39	; 0x27
 80028b0:	dc09      	bgt.n	80028c6 <mg_dtoa+0x40e>
 80028b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b4:	1c5a      	adds	r2, r3, #1
 80028b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80028b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80028ba:	4413      	add	r3, r2
 80028bc:	3370      	adds	r3, #112	; 0x70
 80028be:	443b      	add	r3, r7
 80028c0:	222e      	movs	r2, #46	; 0x2e
 80028c2:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80028c6:	2300      	movs	r3, #0
 80028c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028ca:	a342      	add	r3, pc, #264	; (adr r3, 80029d4 <mg_dtoa+0x51c>)
 80028cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d0:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80028d4:	e031      	b.n	800293a <mg_dtoa+0x482>
      int ch = (int) (d / t);
 80028d6:	ed97 5b02 	vldr	d5, [r7, #8]
 80028da:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80028de:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80028e2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80028e6:	ee17 3a90 	vmov	r3, s15
 80028ea:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 80028ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028f2:	1c59      	adds	r1, r3, #1
 80028f4:	6679      	str	r1, [r7, #100]	; 0x64
 80028f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80028f8:	440b      	add	r3, r1
 80028fa:	3230      	adds	r2, #48	; 0x30
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	3370      	adds	r3, #112	; 0x70
 8002900:	443b      	add	r3, r7
 8002902:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 8002906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002908:	ee07 3a90 	vmov	s15, r3
 800290c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002910:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002914:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002918:	ed97 6b02 	vldr	d6, [r7, #8]
 800291c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002920:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 8002924:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002928:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 800292c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002930:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 8002934:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002936:	3301      	adds	r3, #1
 8002938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800293a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800293c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800293e:	4413      	add	r3, r2
 8002940:	2b27      	cmp	r3, #39	; 0x27
 8002942:	dc07      	bgt.n	8002954 <mg_dtoa+0x49c>
 8002944:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	429a      	cmp	r2, r3
 800294a:	dbc4      	blt.n	80028d6 <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 800294c:	e002      	b.n	8002954 <mg_dtoa+0x49c>
 800294e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002950:	3b01      	subs	r3, #1
 8002952:	667b      	str	r3, [r7, #100]	; 0x64
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d00c      	beq.n	8002974 <mg_dtoa+0x4bc>
 800295a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800295c:	2b00      	cmp	r3, #0
 800295e:	dd09      	ble.n	8002974 <mg_dtoa+0x4bc>
 8002960:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002964:	4413      	add	r3, r2
 8002966:	3b01      	subs	r3, #1
 8002968:	3370      	adds	r3, #112	; 0x70
 800296a:	443b      	add	r3, r7
 800296c:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 8002970:	2b30      	cmp	r3, #48	; 0x30
 8002972:	d0ec      	beq.n	800294e <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 8002974:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002976:	2b00      	cmp	r3, #0
 8002978:	dd0c      	ble.n	8002994 <mg_dtoa+0x4dc>
 800297a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800297c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800297e:	4413      	add	r3, r2
 8002980:	3b01      	subs	r3, #1
 8002982:	3370      	adds	r3, #112	; 0x70
 8002984:	443b      	add	r3, r7
 8002986:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 800298a:	2b2e      	cmp	r3, #46	; 0x2e
 800298c:	d102      	bne.n	8002994 <mg_dtoa+0x4dc>
 800298e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002990:	3b01      	subs	r3, #1
 8002992:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 8002994:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002998:	4413      	add	r3, r2
 800299a:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 800299c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800299e:	2b27      	cmp	r3, #39	; 0x27
 80029a0:	dd01      	ble.n	80029a6 <mg_dtoa+0x4ee>
 80029a2:	2327      	movs	r3, #39	; 0x27
 80029a4:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 80029a6:	f107 0218 	add.w	r2, r7, #24
 80029aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029ac:	4413      	add	r3, r2
 80029ae:	2200      	movs	r2, #0
 80029b0:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80029b2:	f107 0318 	add.w	r3, r7, #24
 80029b6:	4a06      	ldr	r2, [pc, #24]	; (80029d0 <mg_dtoa+0x518>)
 80029b8:	6939      	ldr	r1, [r7, #16]
 80029ba:	6978      	ldr	r0, [r7, #20]
 80029bc:	f005 fa42 	bl	8007e44 <mg_snprintf>
 80029c0:	4603      	mov	r3, r0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3770      	adds	r7, #112	; 0x70
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	f3af 8000 	nop.w
 80029d0:	08016578 	.word	0x08016578
 80029d4:	9999999a 	.word	0x9999999a
 80029d8:	3fb99999 	.word	0x3fb99999

080029dc <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 80029dc:	b5b0      	push	{r4, r5, r7, lr}
 80029de:	b08c      	sub	sp, #48	; 0x30
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <mg_lld+0x15c>)
 80029ea:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 80029ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 80029f4:	2300      	movs	r3, #0
 80029f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 80029f8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d012      	beq.n	8002a26 <mg_lld+0x4a>
 8002a00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	da0e      	bge.n	8002a26 <mg_lld+0x4a>
 8002a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4413      	add	r3, r2
 8002a12:	222d      	movs	r2, #45	; 0x2d
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4254      	negs	r4, r2
 8002a1e:	eb61 0503 	sbc.w	r5, r1, r3
 8002a22:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 8002a26:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d021      	beq.n	8002a72 <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8002a2e:	2300      	movs	r3, #0
 8002a30:	623b      	str	r3, [r7, #32]
 8002a32:	e019      	b.n	8002a68 <mg_lld+0x8c>
 8002a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	441a      	add	r2, r3
 8002a3e:	6a3b      	ldr	r3, [r7, #32]
 8002a40:	1c59      	adds	r1, r3, #1
 8002a42:	6239      	str	r1, [r7, #32]
 8002a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a46:	440b      	add	r3, r1
 8002a48:	68f9      	ldr	r1, [r7, #12]
 8002a4a:	440b      	add	r3, r1
 8002a4c:	7812      	ldrb	r2, [r2, #0]
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	0902      	lsrs	r2, r0, #4
 8002a5e:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 8002a62:	090b      	lsrs	r3, r1, #4
 8002a64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002a68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	d1e1      	bne.n	8002a34 <mg_lld+0x58>
 8002a70:	e025      	b.n	8002abe <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 8002a72:	2300      	movs	r3, #0
 8002a74:	623b      	str	r3, [r7, #32]
 8002a76:	e01e      	b.n	8002ab6 <mg_lld+0xda>
 8002a78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a7c:	f04f 020a 	mov.w	r2, #10
 8002a80:	f04f 0300 	mov.w	r3, #0
 8002a84:	f7fd feb8 	bl	80007f8 <__aeabi_uldivmod>
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	441a      	add	r2, r3
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	1c59      	adds	r1, r3, #1
 8002a90:	6239      	str	r1, [r7, #32]
 8002a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a94:	440b      	add	r3, r1
 8002a96:	68f9      	ldr	r1, [r7, #12]
 8002a98:	440b      	add	r3, r1
 8002a9a:	7812      	ldrb	r2, [r2, #0]
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002aa2:	f04f 020a 	mov.w	r2, #10
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	f7fd fea5 	bl	80007f8 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002ab6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002aba:	4313      	orrs	r3, r2
 8002abc:	d1dc      	bne.n	8002a78 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	e022      	b.n	8002b0a <mg_lld+0x12e>
    char t = buf[s + i];
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 8002ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	441a      	add	r2, r3
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	3b01      	subs	r3, #1
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	441a      	add	r2, r3
 8002ae2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	440b      	add	r3, r1
 8002ae8:	68f9      	ldr	r1, [r7, #12]
 8002aea:	440b      	add	r3, r1
 8002aec:	7812      	ldrb	r2, [r2, #0]
 8002aee:	701a      	strb	r2, [r3, #0]
 8002af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	441a      	add	r2, r3
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	68fa      	ldr	r2, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	7dfa      	ldrb	r2, [r7, #23]
 8002b02:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	6a3b      	ldr	r3, [r7, #32]
 8002b0c:	085b      	lsrs	r3, r3, #1
 8002b0e:	69fa      	ldr	r2, [r7, #28]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d3d7      	bcc.n	8002ac4 <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 8002b14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	d106      	bne.n	8002b2a <mg_lld+0x14e>
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	623a      	str	r2, [r7, #32]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	2230      	movs	r2, #48	; 0x30
 8002b28:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002b2a:	6a3a      	ldr	r2, [r7, #32]
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2e:	4413      	add	r3, r2
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3730      	adds	r7, #48	; 0x30
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bdb0      	pop	{r4, r5, r7, pc}
 8002b38:	08016594 	.word	0x08016594

08002b3c <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8002b4e:	e009      	b.n	8002b64 <scpy+0x28>
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	617a      	str	r2, [r7, #20]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4413      	add	r3, r2
 8002b5a:	781a      	ldrb	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4610      	mov	r0, r2
 8002b62:	4798      	blx	r3
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d205      	bcs.n	8002b78 <scpy+0x3c>
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	4413      	add	r3, r2
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1eb      	bne.n	8002b50 <scpy+0x14>
  return i;
 8002b78:	697b      	ldr	r3, [r7, #20]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 8002b82:	b40c      	push	{r2, r3}
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 8002b92:	f107 031c 	add.w	r3, r7, #28
 8002b96:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 8002b98:	f107 0308 	add.w	r3, r7, #8
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	6839      	ldr	r1, [r7, #0]
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f809 	bl	8002bb8 <mg_vxprintf>
 8002ba6:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bb4:	b002      	add	sp, #8
 8002bb6:	4770      	bx	lr

08002bb8 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 8002bb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bbc:	b0a6      	sub	sp, #152	; 0x98
 8002bbe:	af02      	add	r7, sp, #8
 8002bc0:	60f8      	str	r0, [r7, #12]
 8002bc2:	60b9      	str	r1, [r7, #8]
 8002bc4:	607a      	str	r2, [r7, #4]
 8002bc6:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8002bd4:	e383      	b.n	80032de <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bdc:	4413      	add	r3, r2
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b25      	cmp	r3, #37	; 0x25
 8002be2:	f040 8369 	bne.w	80032b8 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8002be6:	2300      	movs	r3, #0
 8002be8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bea:	2300      	movs	r3, #0
 8002bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bee:	2300      	movs	r3, #0
 8002bf0:	677b      	str	r3, [r7, #116]	; 0x74
 8002bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bf6:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002bf8:	2320      	movs	r3, #32
 8002bfa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c14:	4413      	add	r3, r2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 8002c1c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c20:	2b23      	cmp	r3, #35	; 0x23
 8002c22:	d10e      	bne.n	8002c42 <mg_vxprintf+0x8a>
 8002c24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c26:	3301      	adds	r3, #1
 8002c28:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8002c42:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c46:	2b2d      	cmp	r3, #45	; 0x2d
 8002c48:	d110      	bne.n	8002c6c <mg_vxprintf+0xb4>
 8002c4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002c4e:	3301      	adds	r3, #1
 8002c50:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002c54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c64:	4413      	add	r3, r2
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8002c6c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c70:	2b30      	cmp	r3, #48	; 0x30
 8002c72:	d127      	bne.n	8002cc4 <mg_vxprintf+0x10c>
 8002c74:	2330      	movs	r3, #48	; 0x30
 8002c76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002c7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c7e:	3301      	adds	r3, #1
 8002c80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c8a:	4413      	add	r3, r2
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8002c92:	e017      	b.n	8002cc4 <mg_vxprintf+0x10c>
 8002c94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c96:	4613      	mov	r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	4413      	add	r3, r2
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	677b      	str	r3, [r7, #116]	; 0x74
 8002ca0:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3b30      	subs	r3, #48	; 0x30
 8002caa:	677b      	str	r3, [r7, #116]	; 0x74
 8002cac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb0:	3301      	adds	r3, #1
 8002cb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cbc:	4413      	add	r3, r2
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002cc4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f7ff fb09 	bl	80022e0 <is_digit>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1df      	bne.n	8002c94 <mg_vxprintf+0xdc>
      if (c == '.') {
 8002cd4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002cd8:	2b2e      	cmp	r3, #46	; 0x2e
 8002cda:	d153      	bne.n	8002d84 <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002cdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cec:	4413      	add	r3, r2
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8002cf4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cfa:	d113      	bne.n	8002d24 <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	1d19      	adds	r1, r3, #4
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	6011      	str	r1, [r2, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d0e:	3301      	adds	r3, #1
 8002d10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d1a:	4413      	add	r3, r2
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002d22:	e02f      	b.n	8002d84 <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002d28:	e017      	b.n	8002d5a <mg_vxprintf+0x1a2>
 8002d2a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	005b      	lsls	r3, r3, #1
 8002d34:	673b      	str	r3, [r7, #112]	; 0x70
 8002d36:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b30      	subs	r3, #48	; 0x30
 8002d40:	673b      	str	r3, [r7, #112]	; 0x70
 8002d42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d46:	3301      	adds	r3, #1
 8002d48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d52:	4413      	add	r3, r2
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002d5a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fabe 	bl	80022e0 <is_digit>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1df      	bne.n	8002d2a <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8002d6a:	e00b      	b.n	8002d84 <mg_vxprintf+0x1cc>
 8002d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d70:	3301      	adds	r3, #1
 8002d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d7c:	4413      	add	r3, r2
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002d84:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002d88:	2b68      	cmp	r3, #104	; 0x68
 8002d8a:	d0ef      	beq.n	8002d6c <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8002d8c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002d90:	2b6c      	cmp	r3, #108	; 0x6c
 8002d92:	d121      	bne.n	8002dd8 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8002d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d96:	3301      	adds	r3, #1
 8002d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002daa:	4413      	add	r3, r2
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8002db2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002db6:	2b6c      	cmp	r3, #108	; 0x6c
 8002db8:	d10e      	bne.n	8002dd8 <mg_vxprintf+0x220>
 8002dba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002dc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dd0:	4413      	add	r3, r2
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002dd8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002ddc:	2b70      	cmp	r3, #112	; 0x70
 8002dde:	d103      	bne.n	8002de8 <mg_vxprintf+0x230>
 8002de0:	2301      	movs	r3, #1
 8002de2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002de4:	2301      	movs	r3, #1
 8002de6:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002de8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002dec:	2b64      	cmp	r3, #100	; 0x64
 8002dee:	d018      	beq.n	8002e22 <mg_vxprintf+0x26a>
 8002df0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002df4:	2b75      	cmp	r3, #117	; 0x75
 8002df6:	d014      	beq.n	8002e22 <mg_vxprintf+0x26a>
 8002df8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002dfc:	2b78      	cmp	r3, #120	; 0x78
 8002dfe:	d010      	beq.n	8002e22 <mg_vxprintf+0x26a>
 8002e00:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e04:	2b58      	cmp	r3, #88	; 0x58
 8002e06:	d00c      	beq.n	8002e22 <mg_vxprintf+0x26a>
 8002e08:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e0c:	2b70      	cmp	r3, #112	; 0x70
 8002e0e:	d008      	beq.n	8002e22 <mg_vxprintf+0x26a>
 8002e10:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e14:	2b67      	cmp	r3, #103	; 0x67
 8002e16:	d004      	beq.n	8002e22 <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002e18:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e1c:	2b66      	cmp	r3, #102	; 0x66
 8002e1e:	f040 816c 	bne.w	80030fa <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8002e22:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	bf0c      	ite	eq
 8002e2a:	2301      	moveq	r3, #1
 8002e2c:	2300      	movne	r3, #0
 8002e2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002e32:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e36:	2b78      	cmp	r3, #120	; 0x78
 8002e38:	d007      	beq.n	8002e4a <mg_vxprintf+0x292>
 8002e3a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e3e:	2b58      	cmp	r3, #88	; 0x58
 8002e40:	d003      	beq.n	8002e4a <mg_vxprintf+0x292>
 8002e42:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e46:	2b70      	cmp	r3, #112	; 0x70
 8002e48:	d101      	bne.n	8002e4e <mg_vxprintf+0x296>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <mg_vxprintf+0x298>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8002e54:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8002e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <mg_vxprintf+0x2b2>
 8002e66:	2302      	movs	r3, #2
 8002e68:	e000      	b.n	8002e6c <mg_vxprintf+0x2b4>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 8002e6e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e72:	2b67      	cmp	r3, #103	; 0x67
 8002e74:	d003      	beq.n	8002e7e <mg_vxprintf+0x2c6>
 8002e76:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002e7a:	2b66      	cmp	r3, #102	; 0x66
 8002e7c:	d124      	bne.n	8002ec8 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	3307      	adds	r3, #7
 8002e84:	f023 0307 	bic.w	r3, r3, #7
 8002e88:	f103 0108 	add.w	r1, r3, #8
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	6011      	str	r1, [r2, #0]
 8002e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e94:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 8002e98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9e:	d101      	bne.n	8002ea4 <mg_vxprintf+0x2ec>
 8002ea0:	2306      	movs	r3, #6
 8002ea2:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002ea4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ea6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002eaa:	2b67      	cmp	r3, #103	; 0x67
 8002eac:	bf0c      	ite	eq
 8002eae:	2301      	moveq	r3, #1
 8002eb0:	2300      	movne	r3, #0
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f107 0014 	add.w	r0, r7, #20
 8002eb8:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002ebc:	2128      	movs	r1, #40	; 0x28
 8002ebe:	f7ff fafb 	bl	80024b8 <mg_dtoa>
 8002ec2:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 8002ec6:	e069      	b.n	8002f9c <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d11c      	bne.n	8002f08 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3307      	adds	r3, #7
 8002ed4:	f023 0307 	bic.w	r3, r3, #7
 8002ed8:	f103 0108 	add.w	r1, r3, #8
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	6011      	str	r1, [r2, #0]
 8002ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee4:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 8002ee8:	f107 0114 	add.w	r1, r7, #20
 8002eec:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002efc:	4608      	mov	r0, r1
 8002efe:	f7ff fd6d 	bl	80029dc <mg_lld>
 8002f02:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002f06:	e049      	b.n	8002f9c <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002f08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d123      	bne.n	8002f56 <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	1d19      	adds	r1, r3, #4
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	6011      	str	r1, [r2, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d004      	beq.n	8002f2e <mg_vxprintf+0x376>
 8002f24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f26:	17da      	asrs	r2, r3, #31
 8002f28:	461c      	mov	r4, r3
 8002f2a:	4615      	mov	r5, r2
 8002f2c:	e003      	b.n	8002f36 <mg_vxprintf+0x37e>
 8002f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f30:	2200      	movs	r2, #0
 8002f32:	461c      	mov	r4, r3
 8002f34:	4615      	mov	r5, r2
 8002f36:	f107 0114 	add.w	r1, r7, #20
 8002f3a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	4622      	mov	r2, r4
 8002f48:	462b      	mov	r3, r5
 8002f4a:	4608      	mov	r0, r1
 8002f4c:	f7ff fd46 	bl	80029dc <mg_lld>
 8002f50:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002f54:	e022      	b.n	8002f9c <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	1d19      	adds	r1, r3, #4
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	6011      	str	r1, [r2, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8002f64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <mg_vxprintf+0x3be>
 8002f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f6e:	17da      	asrs	r2, r3, #31
 8002f70:	4698      	mov	r8, r3
 8002f72:	4691      	mov	r9, r2
 8002f74:	e003      	b.n	8002f7e <mg_vxprintf+0x3c6>
 8002f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f78:	2200      	movs	r2, #0
 8002f7a:	4698      	mov	r8, r3
 8002f7c:	4691      	mov	r9, r2
 8002f7e:	f107 0114 	add.w	r1, r7, #20
 8002f82:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002f86:	9301      	str	r3, [sp, #4]
 8002f88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	4642      	mov	r2, r8
 8002f90:	464b      	mov	r3, r9
 8002f92:	4608      	mov	r0, r1
 8002f94:	f7ff fd22 	bl	80029dc <mg_lld>
 8002f98:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fa2:	e007      	b.n	8002fb4 <mg_vxprintf+0x3fc>
 8002fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	677b      	str	r3, [r7, #116]	; 0x74
 8002faa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002fb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fba:	429a      	cmp	r2, r3
 8002fbc:	d202      	bcs.n	8002fc4 <mg_vxprintf+0x40c>
 8002fbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ef      	bne.n	8002fa4 <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fca:	e011      	b.n	8002ff0 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002fcc:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	68b9      	ldr	r1, [r7, #8]
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fdb1 	bl	8002b3c <scpy>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002fe6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fea:	3301      	adds	r3, #1
 8002fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002ff4:	2b20      	cmp	r3, #32
 8002ff6:	d110      	bne.n	800301a <mg_vxprintf+0x462>
 8002ff8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10c      	bne.n	800301a <mg_vxprintf+0x462>
 8003000:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003006:	429a      	cmp	r2, r3
 8003008:	d207      	bcs.n	800301a <mg_vxprintf+0x462>
 800300a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800300e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003012:	4413      	add	r3, r2
 8003014:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003016:	429a      	cmp	r2, r3
 8003018:	d8d8      	bhi.n	8002fcc <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 800301a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800301c:	4ab7      	ldr	r2, [pc, #732]	; (80032fc <mg_vxprintf+0x744>)
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f7ff fd8b 	bl	8002b3c <scpy>
 8003026:	4602      	mov	r2, r0
 8003028:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800302c:	4413      	add	r3, r2
 800302e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003032:	2300      	movs	r3, #0
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003038:	e011      	b.n	800305e <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 800303a:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800303e:	2301      	movs	r3, #1
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f7ff fd7a 	bl	8002b3c <scpy>
 8003048:	4602      	mov	r2, r0
 800304a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800304e:	4413      	add	r3, r2
 8003050:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8003054:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003058:	3301      	adds	r3, #1
 800305a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800305e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003062:	2b30      	cmp	r3, #48	; 0x30
 8003064:	d10c      	bne.n	8003080 <mg_vxprintf+0x4c8>
 8003066:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800306a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800306c:	429a      	cmp	r2, r3
 800306e:	d207      	bcs.n	8003080 <mg_vxprintf+0x4c8>
 8003070:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003078:	4413      	add	r3, r2
 800307a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800307c:	429a      	cmp	r2, r3
 800307e:	d8dc      	bhi.n	800303a <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8003080:	f107 0214 	add.w	r2, r7, #20
 8003084:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003088:	68b9      	ldr	r1, [r7, #8]
 800308a:	68f8      	ldr	r0, [r7, #12]
 800308c:	f7ff fd56 	bl	8002b3c <scpy>
 8003090:	4602      	mov	r2, r0
 8003092:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003096:	4413      	add	r3, r2
 8003098:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 800309c:	2300      	movs	r3, #0
 800309e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030a2:	e011      	b.n	80030c8 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 80030a4:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80030a8:	2301      	movs	r3, #1
 80030aa:	68b9      	ldr	r1, [r7, #8]
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f7ff fd45 	bl	8002b3c <scpy>
 80030b2:	4602      	mov	r2, r0
 80030b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b8:	4413      	add	r3, r2
 80030ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 80030be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80030c2:	3301      	adds	r3, #1
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80030c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80030cc:	2b20      	cmp	r3, #32
 80030ce:	f040 80ea 	bne.w	80032a6 <mg_vxprintf+0x6ee>
 80030d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80e5 	beq.w	80032a6 <mg_vxprintf+0x6ee>
 80030dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80030e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030e2:	429a      	cmp	r2, r3
 80030e4:	f080 80df 	bcs.w	80032a6 <mg_vxprintf+0x6ee>
 80030e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80030ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80030f0:	4413      	add	r3, r2
 80030f2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8d5      	bhi.n	80030a4 <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 80030f8:	e0d5      	b.n	80032a6 <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 80030fa:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80030fe:	2b6d      	cmp	r3, #109	; 0x6d
 8003100:	d003      	beq.n	800310a <mg_vxprintf+0x552>
 8003102:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003106:	2b4d      	cmp	r3, #77	; 0x4d
 8003108:	d128      	bne.n	800315c <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	1d19      	adds	r1, r3, #4
 8003110:	683a      	ldr	r2, [r7, #0]
 8003112:	6011      	str	r1, [r2, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 8003118:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800311c:	2b6d      	cmp	r3, #109	; 0x6d
 800311e:	d103      	bne.n	8003128 <mg_vxprintf+0x570>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	68b9      	ldr	r1, [r7, #8]
 8003124:	2022      	movs	r0, #34	; 0x22
 8003126:	4798      	blx	r3
        n += f(out, param, ap);
 8003128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	68b9      	ldr	r1, [r7, #8]
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	4798      	blx	r3
 8003132:	4602      	mov	r2, r0
 8003134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003138:	4413      	add	r3, r2
 800313a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 800313e:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003142:	2b6d      	cmp	r3, #109	; 0x6d
 8003144:	f040 80b1 	bne.w	80032aa <mg_vxprintf+0x6f2>
 8003148:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800314c:	3302      	adds	r3, #2
 800314e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	68b9      	ldr	r1, [r7, #8]
 8003156:	2022      	movs	r0, #34	; 0x22
 8003158:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 800315a:	e0a6      	b.n	80032aa <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 800315c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8003160:	2b63      	cmp	r3, #99	; 0x63
 8003162:	d112      	bne.n	800318a <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	1d19      	adds	r1, r3, #4
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	6011      	str	r1, [r2, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 8003172:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68b9      	ldr	r1, [r7, #8]
 800317a:	4610      	mov	r0, r2
 800317c:	4798      	blx	r3
        n++;
 800317e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003182:	3301      	adds	r3, #1
 8003184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003188:	e090      	b.n	80032ac <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 800318a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800318e:	2b73      	cmp	r3, #115	; 0x73
 8003190:	d16b      	bne.n	800326a <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	1d19      	adds	r1, r3, #4
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	6011      	str	r1, [r2, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 80031a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a6:	d109      	bne.n	80031bc <mg_vxprintf+0x604>
 80031a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d004      	beq.n	80031b8 <mg_vxprintf+0x600>
 80031ae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80031b0:	f7fd f90e 	bl	80003d0 <strlen>
 80031b4:	4603      	mov	r3, r0
 80031b6:	e000      	b.n	80031ba <mg_vxprintf+0x602>
 80031b8:	2300      	movs	r3, #0
 80031ba:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80031bc:	2300      	movs	r3, #0
 80031be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031c2:	e011      	b.n	80031e8 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 80031c4:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 80031c8:	2301      	movs	r3, #1
 80031ca:	68b9      	ldr	r1, [r7, #8]
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff fcb5 	bl	8002b3c <scpy>
 80031d2:	4602      	mov	r2, r0
 80031d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031d8:	4413      	add	r3, r2
 80031da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 80031de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031e2:	3301      	adds	r3, #1
 80031e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80031e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10a      	bne.n	8003206 <mg_vxprintf+0x64e>
 80031f0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80031f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d206      	bcs.n	8003206 <mg_vxprintf+0x64e>
 80031f8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80031fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031fe:	4413      	add	r3, r2
 8003200:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003202:	429a      	cmp	r2, r3
 8003204:	d8de      	bhi.n	80031c4 <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 8003206:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003208:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800320a:	68b9      	ldr	r1, [r7, #8]
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff fc95 	bl	8002b3c <scpy>
 8003212:	4602      	mov	r2, r0
 8003214:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003218:	4413      	add	r3, r2
 800321a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 800321e:	2300      	movs	r3, #0
 8003220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003224:	e011      	b.n	800324a <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 8003226:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 800322a:	2301      	movs	r3, #1
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f7ff fc84 	bl	8002b3c <scpy>
 8003234:	4602      	mov	r2, r0
 8003236:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800323a:	4413      	add	r3, r2
 800323c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003244:	3301      	adds	r3, #1
 8003246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800324a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800324e:	2b00      	cmp	r3, #0
 8003250:	d02c      	beq.n	80032ac <mg_vxprintf+0x6f4>
 8003252:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003256:	429a      	cmp	r2, r3
 8003258:	d228      	bcs.n	80032ac <mg_vxprintf+0x6f4>
 800325a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800325e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003260:	4413      	add	r3, r2
 8003262:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003264:	429a      	cmp	r2, r3
 8003266:	d8de      	bhi.n	8003226 <mg_vxprintf+0x66e>
 8003268:	e020      	b.n	80032ac <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 800326a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800326e:	2b25      	cmp	r3, #37	; 0x25
 8003270:	d109      	bne.n	8003286 <mg_vxprintf+0x6ce>
        out('%', param);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	2025      	movs	r0, #37	; 0x25
 8003278:	4798      	blx	r3
        n++;
 800327a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800327e:	3301      	adds	r3, #1
 8003280:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003284:	e012      	b.n	80032ac <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	68b9      	ldr	r1, [r7, #8]
 800328a:	2025      	movs	r0, #37	; 0x25
 800328c:	4798      	blx	r3
        out(c, param);
 800328e:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	4610      	mov	r0, r2
 8003298:	4798      	blx	r3
        n += 2;
 800329a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800329e:	3302      	adds	r3, #2
 80032a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032a4:	e002      	b.n	80032ac <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80032a6:	bf00      	nop
 80032a8:	e000      	b.n	80032ac <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80032aa:	bf00      	nop
      }
      i++;
 80032ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032b0:	3301      	adds	r3, #1
 80032b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80032b6:	e012      	b.n	80032de <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032be:	4413      	add	r3, r2
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	4610      	mov	r0, r2
 80032c8:	4798      	blx	r3
 80032ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032ce:	3301      	adds	r3, #1
 80032d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032d8:	3301      	adds	r3, #1
 80032da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032e4:	4413      	add	r3, r2
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f47f ac74 	bne.w	8002bd6 <mg_vxprintf+0x1e>
    }
  }
  return n;
 80032ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3790      	adds	r7, #144	; 0x90
 80032f6:	46bd      	mov	sp, r7
 80032f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032fc:	080165a8 	.word	0x080165a8

08003300 <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 800330c:	2108      	movs	r1, #8
 800330e:	2001      	movs	r0, #1
 8003310:	f011 fe98 	bl	8015044 <calloc>
 8003314:	4603      	mov	r3, r0
 8003316:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d013      	beq.n	8003346 <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	6879      	ldr	r1, [r7, #4]
 8003324:	68b8      	ldr	r0, [r7, #8]
 8003326:	4798      	blx	r3
 8003328:	4602      	mov	r2, r0
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <mg_fs_open+0x46>
      free(fd);
 800333c:	6978      	ldr	r0, [r7, #20]
 800333e:	f011 fea7 	bl	8015090 <free>
      fd = NULL;
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 8003346:	697b      	ldr	r3, [r7, #20]
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d009      	beq.n	8003372 <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	6812      	ldr	r2, [r2, #0]
 8003368:	4610      	mov	r0, r2
 800336a:	4798      	blx	r3
    free(fd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f011 fe8f 	bl	8015090 <free>
  }
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fd f822 	bl	80003d0 <strlen>
 800338c:	4602      	mov	r2, r0
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	4293      	cmp	r3, r2
 8003392:	d219      	bcs.n	80033c8 <is_dir_prefix+0x4e>
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	6879      	ldr	r1, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f012 f98e 	bl	80156ba <strncmp>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <is_dir_prefix+0x4e>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00c      	beq.n	80033c4 <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4413      	add	r3, r2
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b2f      	cmp	r3, #47	; 0x2f
 80033b4:	d006      	beq.n	80033c4 <is_dir_prefix+0x4a>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3b01      	subs	r3, #1
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	4413      	add	r3, r2
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b2f      	cmp	r3, #47	; 0x2f
 80033c2:	d101      	bne.n	80033c8 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <is_dir_prefix+0x50>
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b088      	sub	sp, #32
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	60f8      	str	r0, [r7, #12]
 80033da:	60b9      	str	r1, [r7, #8]
 80033dc:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7fc fff6 	bl	80003d0 <strlen>
 80033e4:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f00c f982 	bl	800f6f4 <mg_unpack>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d001      	beq.n	80033fa <packed_stat+0x28>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e017      	b.n	800342a <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	e00c      	b.n	800341a <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	69b9      	ldr	r1, [r7, #24]
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f7ff ffb8 	bl	800337a <is_dir_prefix>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d001      	beq.n	8003414 <packed_stat+0x42>
 8003410:	2304      	movs	r3, #4
 8003412:	e00a      	b.n	800342a <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	3301      	adds	r3, #1
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	69f8      	ldr	r0, [r7, #28]
 800341c:	f00c f956 	bl	800f6cc <mg_unlist>
 8003420:	6178      	str	r0, [r7, #20]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1eb      	bne.n	8003400 <packed_stat+0x2e>
  }
  return 0;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	3720      	adds	r7, #32
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
	...

08003434 <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 8003434:	b580      	push	{r7, lr}
 8003436:	b0be      	sub	sp, #248	; 0xf8
 8003438:	af02      	add	r7, sp, #8
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f7fc ffc5 	bl	80003d0 <strlen>
 8003446:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  tmp[0] = '\0';  // Previously listed entry
 800344a:	2300      	movs	r3, #0
 800344c:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800344e:	2300      	movs	r3, #0
 8003450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003454:	e05a      	b.n	800350c <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003456:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800345a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f7ff ff8b 	bl	800337a <is_dir_prefix>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d048      	beq.n	80034fc <packed_list+0xc8>
    begin = &path[n + 1];
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	3301      	adds	r3, #1
 8003470:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003474:	4413      	add	r3, r2
 8003476:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    end = strchr(begin, '/');
 800347a:	212f      	movs	r1, #47	; 0x2f
 800347c:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003480:	f012 f8f1 	bl	8015666 <strchr>
 8003484:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    if (end == NULL) end = begin + strlen(begin);
 8003488:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800348c:	2b00      	cmp	r3, #0
 800348e:	d109      	bne.n	80034a4 <packed_list+0x70>
 8003490:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8003494:	f7fc ff9c 	bl	80003d0 <strlen>
 8003498:	4602      	mov	r2, r0
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800349e:	4413      	add	r3, r2
 80034a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 80034a4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80034a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80034b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4613      	mov	r3, r2
 80034ba:	4a1c      	ldr	r2, [pc, #112]	; (800352c <packed_list+0xf8>)
 80034bc:	2164      	movs	r1, #100	; 0x64
 80034be:	f004 fcc1 	bl	8007e44 <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 80034c8:	f107 0214 	add.w	r2, r7, #20
 80034cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fc ff1c 	bl	8000310 <strcmp>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 80034de:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6879      	ldr	r1, [r7, #4]
 80034e6:	4610      	mov	r0, r2
 80034e8:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 80034ea:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80034ee:	f107 0314 	add.w	r3, r7, #20
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f012 f98d 	bl	8015814 <strcpy>
 80034fa:	e002      	b.n	8003502 <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 80034fc:	bf00      	nop
 80034fe:	e000      	b.n	8003502 <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8003500:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003502:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003506:	3301      	adds	r3, #1
 8003508:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800350c:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003510:	f00c f8dc 	bl	800f6cc <mg_unlist>
 8003514:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8003518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d19a      	bne.n	8003456 <packed_list+0x22>
  }
}
 8003520:	bf00      	nop
 8003522:	bf00      	nop
 8003524:	37f0      	adds	r7, #240	; 0xf0
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	0801658c 	.word	0x0801658c

08003530 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	2200      	movs	r2, #0
 8003544:	4619      	mov	r1, r3
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f00c f8d4 	bl	800f6f4 <mg_unpack>
 800354c:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 800354e:	2300      	movs	r3, #0
 8003550:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <packed_open+0x2c>
 8003558:	2300      	movs	r3, #0
 800355a:	e016      	b.n	800358a <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f003 0302 	and.w	r3, r3, #2
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <packed_open+0x3a>
 8003566:	2300      	movs	r3, #0
 8003568:	e00f      	b.n	800358a <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 800356a:	210c      	movs	r1, #12
 800356c:	2001      	movs	r0, #1
 800356e:	f011 fd69 	bl	8015044 <calloc>
 8003572:	4603      	mov	r3, r0
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <packed_open+0x58>
    fp->size = size;
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	605a      	str	r2, [r3, #4]
    fp->data = data;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 8003588:	693b      	ldr	r3, [r7, #16]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <packed_close>:

static void packed_close(void *fp) {
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <packed_close+0x14>
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f011 fd75 	bl	8015090 <free>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b086      	sub	sp, #24
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	441a      	add	r2, r3
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d905      	bls.n	80035da <packed_read+0x2c>
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	4413      	add	r3, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4619      	mov	r1, r3
 80035e8:	68b8      	ldr	r0, [r7, #8]
 80035ea:	f012 f91b 	bl	8015824 <memcpy>
  fp->pos += len;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	441a      	add	r2, r3
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	609a      	str	r2, [r3, #8]
  return len;
 80035fa:	687b      	ldr	r3, [r7, #4]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3718      	adds	r7, #24
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	689a      	ldr	r2, [r3, #8]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	429a      	cmp	r2, r3
 800363c:	d903      	bls.n	8003646 <packed_seek+0x28>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	609a      	str	r2, [r3, #8]
  return fp->pos;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	689b      	ldr	r3, [r3, #8]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3714      	adds	r7, #20
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003660:	2300      	movs	r3, #0
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <packed_remove>:

static bool packed_remove(const char *path) {
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 800369a:	b480      	push	{r7}
 800369c:	b085      	sub	sp, #20
 800369e:	af00      	add	r7, sp, #0
 80036a0:	60f8      	str	r0, [r7, #12]
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	60b9      	str	r1, [r7, #8]
 80036be:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 80036c0:	bf00      	nop
 80036c2:	3714      	adds	r7, #20
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <p_open>:
static void *p_open(const char *path, int flags) {
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <p_close>:
static void p_close(void *fp) {
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3714      	adds	r7, #20
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 8003712:	b480      	push	{r7}
 8003714:	b085      	sub	sp, #20
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3714      	adds	r7, #20
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 8003736:	f04f 33ff 	mov.w	r3, #4294967295
}
 800373a:	4618      	mov	r0, r3
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <p_rename>:
static bool p_rename(const char *from, const char *to) {
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	370c      	adds	r7, #12
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <p_remove>:
static bool p_remove(const char *path) {
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <p_mkdir>:
static bool p_mkdir(const char *path) {
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	0000      	movs	r0, r0
 800378c:	0000      	movs	r0, r0
	...

08003790 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 8003790:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003794:	b08f      	sub	sp, #60	; 0x3c
 8003796:	af00      	add	r7, sp, #0
 8003798:	f107 0318 	add.w	r3, r7, #24
 800379c:	e883 0003 	stmia.w	r3, {r0, r1}
 80037a0:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80037ae:	a340      	add	r3, pc, #256	; (adr r3, 80038b0 <mg_to_size_t+0x120>)
 80037b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b4:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 80037b8:	2300      	movs	r3, #0
 80037ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 80037bc:	e002      	b.n	80037c4 <mg_to_size_t+0x34>
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	3301      	adds	r3, #1
 80037c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d20b      	bcs.n	80037e4 <mg_to_size_t+0x54>
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037d0:	4413      	add	r3, r2
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d0f2      	beq.n	80037be <mg_to_size_t+0x2e>
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	4413      	add	r3, r2
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b09      	cmp	r3, #9
 80037e2:	d0ec      	beq.n	80037be <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d244      	bcs.n	8003876 <mg_to_size_t+0xe6>
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f0:	4413      	add	r3, r2
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b2d      	cmp	r3, #45	; 0x2d
 80037f6:	d13e      	bne.n	8003876 <mg_to_size_t+0xe6>
 80037f8:	2300      	movs	r3, #0
 80037fa:	e050      	b.n	800389e <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 80037fc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003800:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003804:	4290      	cmp	r0, r2
 8003806:	eb71 0303 	sbcs.w	r3, r1, r3
 800380a:	d201      	bcs.n	8003810 <mg_to_size_t+0x80>
 800380c:	2300      	movs	r3, #0
 800380e:	e046      	b.n	800389e <mg_to_size_t+0x10e>
    result *= 10;
 8003810:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 8003814:	4642      	mov	r2, r8
 8003816:	464b      	mov	r3, r9
 8003818:	f04f 0000 	mov.w	r0, #0
 800381c:	f04f 0100 	mov.w	r1, #0
 8003820:	0099      	lsls	r1, r3, #2
 8003822:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8003826:	0090      	lsls	r0, r2, #2
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	eb12 0408 	adds.w	r4, r2, r8
 8003830:	eb43 0509 	adc.w	r5, r3, r9
 8003834:	1923      	adds	r3, r4, r4
 8003836:	60bb      	str	r3, [r7, #8]
 8003838:	eb45 0305 	adc.w	r3, r5, r5
 800383c:	60fb      	str	r3, [r7, #12]
 800383e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003842:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 8003846:	69ba      	ldr	r2, [r7, #24]
 8003848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800384a:	4413      	add	r3, r2
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	3b30      	subs	r3, #48	; 0x30
 8003850:	461a      	mov	r2, r3
 8003852:	2300      	movs	r3, #0
 8003854:	4692      	mov	sl, r2
 8003856:	469b      	mov	fp, r3
 8003858:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800385c:	eb12 010a 	adds.w	r1, r2, sl
 8003860:	6039      	str	r1, [r7, #0]
 8003862:	eb43 030b 	adc.w	r3, r3, fp
 8003866:	607b      	str	r3, [r7, #4]
 8003868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800386c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 8003870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003872:	3301      	adds	r3, #1
 8003874:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800387a:	429a      	cmp	r2, r3
 800387c:	d20b      	bcs.n	8003896 <mg_to_size_t+0x106>
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	4413      	add	r3, r2
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	2b2f      	cmp	r3, #47	; 0x2f
 8003888:	d905      	bls.n	8003896 <mg_to_size_t+0x106>
 800388a:	69ba      	ldr	r2, [r7, #24]
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	4413      	add	r3, r2
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b39      	cmp	r3, #57	; 0x39
 8003894:	d9b2      	bls.n	80037fc <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 8003896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	601a      	str	r2, [r3, #0]
  return true;
 800389c:	2301      	movs	r3, #1
}
 800389e:	4618      	mov	r0, r3
 80038a0:	373c      	adds	r7, #60	; 0x3c
 80038a2:	46bd      	mov	sp, r7
 80038a4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	f3af 8000 	nop.w
 80038b0:	99999998 	.word	0x99999998
 80038b4:	19999999 	.word	0x19999999

080038b8 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80038b8:	b082      	sub	sp, #8
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b08a      	sub	sp, #40	; 0x28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	1d38      	adds	r0, r7, #4
 80038c4:	e880 0006 	stmia.w	r0, {r1, r2}
 80038c8:	637b      	str	r3, [r7, #52]	; 0x34
  struct mg_str k, v, result = mg_str_n(NULL, 0);
 80038ca:	f107 0310 	add.w	r3, r7, #16
 80038ce:	2200      	movs	r2, #0
 80038d0:	2100      	movs	r1, #0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f006 fbf9 	bl	800a0ca <mg_str_n>
  while (mg_split(&buf, &k, &v, '&')) {
 80038d8:	e015      	b.n	8003906 <mg_http_var+0x4e>
    if (name.len == k.len && mg_ncasecmp(name.ptr, k.ptr, k.len) == 0) {
 80038da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038de:	429a      	cmp	r2, r3
 80038e0:	d111      	bne.n	8003906 <mg_http_var+0x4e>
 80038e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e4:	6a39      	ldr	r1, [r7, #32]
 80038e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e8:	4618      	mov	r0, r3
 80038ea:	f006 fc1d 	bl	800a128 <mg_ncasecmp>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d108      	bne.n	8003906 <mg_http_var+0x4e>
      result = v;
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	f107 0218 	add.w	r2, r7, #24
 80038fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003900:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 8003904:	e00a      	b.n	800391c <mg_http_var+0x64>
  while (mg_split(&buf, &k, &v, '&')) {
 8003906:	f107 0218 	add.w	r2, r7, #24
 800390a:	f107 0120 	add.w	r1, r7, #32
 800390e:	1d38      	adds	r0, r7, #4
 8003910:	2326      	movs	r3, #38	; 0x26
 8003912:	f006 fe6a 	bl	800a5ea <mg_split>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1de      	bne.n	80038da <mg_http_var+0x22>
    }
  }
  return result;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003928:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800392c:	68f8      	ldr	r0, [r7, #12]
 800392e:	3728      	adds	r7, #40	; 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003936:	b002      	add	sp, #8
 8003938:	4770      	bx	lr

0800393a <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 800393a:	b580      	push	{r7, lr}
 800393c:	b08c      	sub	sp, #48	; 0x30
 800393e:	af02      	add	r7, sp, #8
 8003940:	60f8      	str	r0, [r7, #12]
 8003942:	60b9      	str	r1, [r7, #8]
 8003944:	607a      	str	r2, [r7, #4]
 8003946:	603b      	str	r3, [r7, #0]
  int len;
  if (dst == NULL || dst_len == 0) {
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <mg_http_get_var+0x1a>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d103      	bne.n	800395c <mg_http_get_var+0x22>
    len = -2;  // Bad destination
 8003954:	f06f 0301 	mvn.w	r3, #1
 8003958:	627b      	str	r3, [r7, #36]	; 0x24
 800395a:	e036      	b.n	80039ca <mg_http_get_var+0x90>
  } else if (buf->ptr == NULL || name == NULL || buf->len == 0) {
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d006      	beq.n	8003972 <mg_http_get_var+0x38>
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <mg_http_get_var+0x38>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d106      	bne.n	8003980 <mg_http_get_var+0x46>
    len = -1;  // Bad source
 8003972:	f04f 33ff 	mov.w	r3, #4294967295
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
    dst[0] = '\0';
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	701a      	strb	r2, [r3, #0]
 800397e:	e024      	b.n	80039ca <mg_http_get_var+0x90>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 8003980:	f107 031c 	add.w	r3, r7, #28
 8003984:	68b9      	ldr	r1, [r7, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f006 fb82 	bl	800a090 <mg_str_s>
 800398c:	f107 0014 	add.w	r0, r7, #20
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	9300      	str	r3, [sp, #0]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	ca06      	ldmia	r2, {r1, r2}
 800399a:	f7ff ff8d 	bl	80038b8 <mg_http_var>
    if (v.ptr == NULL) {
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d103      	bne.n	80039ac <mg_http_get_var+0x72>
      len = -4;  // Name does not exist
 80039a4:	f06f 0303 	mvn.w	r3, #3
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
 80039aa:	e00e      	b.n	80039ca <mg_http_get_var+0x90>
    } else {
      len = mg_url_decode(v.ptr, v.len, dst, dst_len, 1);
 80039ac:	6978      	ldr	r0, [r7, #20]
 80039ae:	69b9      	ldr	r1, [r7, #24]
 80039b0:	2301      	movs	r3, #1
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	f000 f82e 	bl	8003a18 <mg_url_decode>
 80039bc:	6278      	str	r0, [r7, #36]	; 0x24
      if (len < 0) len = -3;  // Failed to decode
 80039be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	da02      	bge.n	80039ca <mg_http_get_var+0x90>
 80039c4:	f06f 0302 	mvn.w	r3, #2
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return len;
 80039ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3728      	adds	r7, #40	; 0x28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <isx>:

static bool isx(int c) {
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b2f      	cmp	r3, #47	; 0x2f
 80039e0:	dd02      	ble.n	80039e8 <isx+0x14>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b39      	cmp	r3, #57	; 0x39
 80039e6:	dd0b      	ble.n	8003a00 <isx+0x2c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b60      	cmp	r3, #96	; 0x60
 80039ec:	dd02      	ble.n	80039f4 <isx+0x20>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b66      	cmp	r3, #102	; 0x66
 80039f2:	dd05      	ble.n	8003a00 <isx+0x2c>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	dd04      	ble.n	8003a04 <isx+0x30>
         (c >= 'A' && c <= 'F');
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b46      	cmp	r3, #70	; 0x46
 80039fe:	dc01      	bgt.n	8003a04 <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <isx+0x32>
 8003a04:	2300      	movs	r3, #0
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
 8003a24:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	e04f      	b.n	8003ad0 <mg_url_decode+0xb8>
    if (src[i] == '%') {
 8003a30:	68fa      	ldr	r2, [r7, #12]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	4413      	add	r3, r2
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b25      	cmp	r3, #37	; 0x25
 8003a3a:	d12c      	bne.n	8003a96 <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3302      	adds	r3, #2
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d924      	bls.n	8003a90 <mg_url_decode+0x78>
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff ffbf 	bl	80039d4 <isx>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d019      	beq.n	8003a90 <mg_url_decode+0x78>
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	3302      	adds	r3, #2
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4413      	add	r3, r2
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff ffb4 	bl	80039d4 <isx>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00e      	beq.n	8003a90 <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	3301      	adds	r3, #1
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	18d0      	adds	r0, r2, r3
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	4413      	add	r3, r2
 8003a80:	461a      	mov	r2, r3
 8003a82:	2102      	movs	r1, #2
 8003a84:	f006 fe7f 	bl	800a786 <mg_unhex>
        i += 2;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e019      	b.n	8003ac4 <mg_url_decode+0xac>
      } else {
        return -1;
 8003a90:	f04f 33ff 	mov.w	r3, #4294967295
 8003a94:	e03a      	b.n	8003b0c <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00b      	beq.n	8003ab4 <mg_url_decode+0x9c>
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b2b      	cmp	r3, #43	; 0x2b
 8003aa6:	d105      	bne.n	8003ab4 <mg_url_decode+0x9c>
      dst[j] = ' ';
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	2220      	movs	r2, #32
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e007      	b.n	8003ac4 <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	441a      	add	r2, r3
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	440b      	add	r3, r1
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3301      	adds	r3, #1
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d204      	bcs.n	8003ae2 <mg_url_decode+0xca>
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	3301      	adds	r3, #1
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d8a6      	bhi.n	8003a30 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d204      	bcs.n	8003af4 <mg_url_decode+0xdc>
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	4413      	add	r3, r2
 8003af0:	2200      	movs	r2, #0
 8003af2:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 8003af4:	697a      	ldr	r2, [r7, #20]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d305      	bcc.n	8003b08 <mg_url_decode+0xf0>
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d201      	bcs.n	8003b08 <mg_url_decode+0xf0>
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	e001      	b.n	8003b0c <mg_url_decode+0xf4>
 8003b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3718      	adds	r7, #24
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <isok>:

static bool isok(uint8_t c) {
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b0a      	cmp	r3, #10
 8003b22:	d005      	beq.n	8003b30 <isok+0x1c>
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	2b0d      	cmp	r3, #13
 8003b28:	d002      	beq.n	8003b30 <isok+0x1c>
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	2b1f      	cmp	r3, #31
 8003b2e:	d901      	bls.n	8003b34 <isok+0x20>
 8003b30:	2301      	movs	r3, #1
 8003b32:	e000      	b.n	8003b36 <isok+0x22>
 8003b34:	2300      	movs	r3, #0
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	b2db      	uxtb	r3, r3
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
 8003b56:	e03c      	b.n	8003bd2 <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8003b58:	687a      	ldr	r2, [r7, #4]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ffd7 	bl	8003b14 <isok>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f083 0301 	eor.w	r3, r3, #1
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <mg_http_get_request_len+0x30>
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295
 8003b76:	e031      	b.n	8003bdc <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00c      	beq.n	8003b98 <mg_http_get_request_len+0x50>
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	4413      	add	r3, r2
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	2b0a      	cmp	r3, #10
 8003b88:	d106      	bne.n	8003b98 <mg_http_get_request_len+0x50>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b0a      	cmp	r3, #10
 8003b96:	d016      	beq.n	8003bc6 <mg_http_get_request_len+0x7e>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d916      	bls.n	8003bcc <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b0a      	cmp	r3, #10
 8003ba8:	d110      	bne.n	8003bcc <mg_http_get_request_len+0x84>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3b01      	subs	r3, #1
 8003bae:	687a      	ldr	r2, [r7, #4]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b0d      	cmp	r3, #13
 8003bb6:	d109      	bne.n	8003bcc <mg_http_get_request_len+0x84>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3b02      	subs	r3, #2
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b0a      	cmp	r3, #10
 8003bc4:	d102      	bne.n	8003bcc <mg_http_get_request_len+0x84>
      return (int) i + 1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	e007      	b.n	8003bdc <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d3be      	bcc.n	8003b58 <mg_http_get_request_len+0x10>
  }
  return 0;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <skip>:

static const char *skip(const char *s, const char *e, const char *d,
                        struct mg_str *v) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  v->ptr = s;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]
  while (s < e && *s != '\n' && strchr(d, *s) == NULL) s++;
 8003bf8:	e002      	b.n	8003c00 <skip+0x1c>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d20c      	bcs.n	8003c22 <skip+0x3e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b0a      	cmp	r3, #10
 8003c0e:	d008      	beq.n	8003c22 <skip+0x3e>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f011 fd25 	bl	8015666 <strchr>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0eb      	beq.n	8003bfa <skip+0x16>
  v->len = (size_t) (s - v->ptr);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68fa      	ldr	r2, [r7, #12]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
  while (s < e && strchr(d, *s) != NULL) s++;
 8003c30:	e002      	b.n	8003c38 <skip+0x54>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d208      	bcs.n	8003c52 <skip+0x6e>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	781b      	ldrb	r3, [r3, #0]
 8003c44:	4619      	mov	r1, r3
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f011 fd0d 	bl	8015666 <strchr>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ef      	bne.n	8003c32 <skip+0x4e>
  return s;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <mg_http_get_header>:

struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8003c66:	6838      	ldr	r0, [r7, #0]
 8003c68:	f7fc fbb2 	bl	80003d0 <strlen>
 8003c6c:	61b8      	str	r0, [r7, #24]
 8003c6e:	231e      	movs	r3, #30
 8003c70:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003c72:	2300      	movs	r3, #0
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	e01f      	b.n	8003cb8 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	3302      	adds	r3, #2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	3328      	adds	r3, #40	; 0x28
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	69ba      	ldr	r2, [r7, #24]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d10b      	bne.n	8003cb2 <mg_http_get_header+0x56>
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f006 fa40 	bl	800a128 <mg_ncasecmp>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d101      	bne.n	8003cb2 <mg_http_get_header+0x56>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	e010      	b.n	8003cd4 <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	61fb      	str	r3, [r7, #28]
 8003cb8:	69fa      	ldr	r2, [r7, #28]
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d208      	bcs.n	8003cd2 <mg_http_get_header+0x76>
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3302      	adds	r3, #2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	4413      	add	r3, r2
 8003cca:	3304      	adds	r3, #4
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1d2      	bne.n	8003c78 <mg_http_get_header+0x1c>
  }
  return NULL;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3720      	adds	r7, #32
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, int max_headers) {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b08c      	sub	sp, #48	; 0x30
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  int i;
  for (i = 0; i < max_headers; i++) {
 8003cea:	2300      	movs	r3, #0
 8003cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cee:	e04c      	b.n	8003d8a <mg_http_parse_headers+0xae>
    struct mg_str k, v, tmp;
    const char *he = skip(s, end, "\r\n", &tmp);
 8003cf0:	f107 0310 	add.w	r3, r7, #16
 8003cf4:	4a2a      	ldr	r2, [pc, #168]	; (8003da0 <mg_http_parse_headers+0xc4>)
 8003cf6:	68b9      	ldr	r1, [r7, #8]
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f7ff ff73 	bl	8003be4 <skip>
 8003cfe:	62b8      	str	r0, [r7, #40]	; 0x28
    if (tmp.len == 0) break;  // empty header = EOH
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d046      	beq.n	8003d94 <mg_http_parse_headers+0xb8>
    s = skip(s, he, ": \r\n", &k);
 8003d06:	f107 0320 	add.w	r3, r7, #32
 8003d0a:	4a26      	ldr	r2, [pc, #152]	; (8003da4 <mg_http_parse_headers+0xc8>)
 8003d0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f7ff ff68 	bl	8003be4 <skip>
 8003d14:	60f8      	str	r0, [r7, #12]
    s = skip(s, he, "\r\n", &v);
 8003d16:	f107 0318 	add.w	r3, r7, #24
 8003d1a:	4a21      	ldr	r2, [pc, #132]	; (8003da0 <mg_http_parse_headers+0xc4>)
 8003d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f7ff ff60 	bl	8003be4 <skip>
 8003d24:	60f8      	str	r0, [r7, #12]
    if (k.len == tmp.len) continue;
 8003d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d029      	beq.n	8003d82 <mg_http_parse_headers+0xa6>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 8003d2e:	e002      	b.n	8003d36 <mg_http_parse_headers+0x5a>
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d006      	beq.n	8003d4a <mg_http_parse_headers+0x6e>
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	3b01      	subs	r3, #1
 8003d42:	4413      	add	r3, r2
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b20      	cmp	r3, #32
 8003d48:	d0f2      	beq.n	8003d30 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                          // empty name
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <mg_http_parse_headers+0x78>
 8003d50:	2300      	movs	r3, #0
 8003d52:	e021      	b.n	8003d98 <mg_http_parse_headers+0xbc>
    // MG_INFO(("--HH [%.*s] [%.*s] [%.*s]", (int) tmp.len - 1, tmp.ptr,
    //(int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k;
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f107 0320 	add.w	r3, r7, #32
 8003d62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d66:	e882 0003 	stmia.w	r2, {r0, r1}
    h[i].value = v;
 8003d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	3308      	adds	r3, #8
 8003d74:	f107 0218 	add.w	r2, r7, #24
 8003d78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8003d80:	e000      	b.n	8003d84 <mg_http_parse_headers+0xa8>
    if (k.len == tmp.len) continue;
 8003d82:	bf00      	nop
  for (i = 0; i < max_headers; i++) {
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	3301      	adds	r3, #1
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	dbae      	blt.n	8003cf0 <mg_http_parse_headers+0x14>
 8003d92:	e000      	b.n	8003d96 <mg_http_parse_headers+0xba>
    if (tmp.len == 0) break;  // empty header = EOH
 8003d94:	bf00      	nop
  }
  return true;
 8003d96:	2301      	movs	r3, #1
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3730      	adds	r7, #48	; 0x30
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	080165f4 	.word	0x080165f4
 8003da4:	08016608 	.word	0x08016608

08003da8 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff fec6 	bl	8003b48 <mg_http_get_request_len>
 8003dbc:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <mg_http_parse+0x24>
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	4413      	add	r3, r2
 8003dca:	e000      	b.n	8003dce <mg_http_parse+0x26>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;

  memset(hm, 0, sizeof(*hm));
 8003dd0:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f011 fc3d 	bl	8015656 <memset>
  if (req_len <= 0) return req_len;
 8003ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	dc01      	bgt.n	8003de6 <mg_http_parse+0x3e>
 8003de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de4:	e0e0      	b.n	8003fa8 <mg_http_parse+0x200>

  hm->message.ptr = hm->head.ptr = s;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8003e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a3a      	ldr	r2, [r7, #32]
 8003e0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f04f 32ff 	mov.w	r2, #4294967295
 8003e18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  s = skip(s, end, " ", &hm->method);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	4a61      	ldr	r2, [pc, #388]	; (8003fb0 <mg_http_parse+0x208>)
 8003e2c:	6a39      	ldr	r1, [r7, #32]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fed8 	bl	8003be4 <skip>
 8003e34:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, " ", &hm->uri);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	4a5d      	ldr	r2, [pc, #372]	; (8003fb0 <mg_http_parse+0x208>)
 8003e3c:	6a39      	ldr	r1, [r7, #32]
 8003e3e:	68f8      	ldr	r0, [r7, #12]
 8003e40:	f7ff fed0 	bl	8003be4 <skip>
 8003e44:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, "\r\n", &hm->proto);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3318      	adds	r3, #24
 8003e4a:	4a5a      	ldr	r2, [pc, #360]	; (8003fb4 <mg_http_parse+0x20c>)
 8003e4c:	6a39      	ldr	r1, [r7, #32]
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff fec8 	bl	8003be4 <skip>
 8003e54:	60f8      	str	r0, [r7, #12]

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <mg_http_parse+0xbe>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d102      	bne.n	8003e6c <mg_http_parse+0xc4>
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	e09d      	b.n	8003fa8 <mg_http_parse+0x200>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6898      	ldr	r0, [r3, #8]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	461a      	mov	r2, r3
 8003e76:	213f      	movs	r1, #63	; 0x3f
 8003e78:	f7fc fa5a 	bl	8000330 <memchr>
 8003e7c:	61f8      	str	r0, [r7, #28]
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d015      	beq.n	8003eb0 <mg_http_parse+0x108>
    hm->query.ptr = qs + 1;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	441a      	add	r2, r3
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	69fa      	ldr	r2, [r7, #28]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	461a      	mov	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f103 0220 	add.w	r2, r3, #32
 8003eb6:	231e      	movs	r3, #30
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f7ff ff0e 	bl	8003cdc <mg_http_parse_headers>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d002      	beq.n	8003ed2 <mg_http_parse+0x12a>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	e06a      	b.n	8003fa8 <mg_http_parse+0x200>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8003ed2:	4939      	ldr	r1, [pc, #228]	; (8003fb8 <mg_http_parse+0x210>)
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fec1 	bl	8003c5c <mg_http_get_header>
 8003eda:	61b8      	str	r0, [r7, #24]
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d018      	beq.n	8003f14 <mg_http_parse+0x16c>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003eee:	f7ff fc4f 	bl	8003790 <mg_to_size_t>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f083 0301 	eor.w	r3, r3, #1
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d002      	beq.n	8003f04 <mg_http_parse+0x15c>
 8003efe:	f04f 33ff 	mov.w	r3, #4294967295
 8003f02:	e051      	b.n	8003fa8 <mg_http_parse+0x200>
    hm->message.len = (size_t) req_len + hm->body.len;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	441a      	add	r2, r3
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2205      	movs	r2, #5
 8003f1a:	4928      	ldr	r1, [pc, #160]	; (8003fbc <mg_http_parse+0x214>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f006 f903 	bl	800a128 <mg_ncasecmp>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	bf0c      	ite	eq
 8003f28:	2301      	moveq	r3, #1
 8003f2a:	2300      	movne	r3, #0
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	617b      	str	r3, [r7, #20]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3a:	d11a      	bne.n	8003f72 <mg_http_parse+0x1ca>
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d117      	bne.n	8003f72 <mg_http_parse+0x1ca>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	491e      	ldr	r1, [pc, #120]	; (8003fc0 <mg_http_parse+0x218>)
 8003f46:	4618      	mov	r0, r3
 8003f48:	f006 f940 	bl	800a1cc <mg_vcasecmp>
 8003f4c:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00f      	beq.n	8003f72 <mg_http_parse+0x1ca>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	491b      	ldr	r1, [pc, #108]	; (8003fc4 <mg_http_parse+0x21c>)
 8003f56:	4618      	mov	r0, r3
 8003f58:	f006 f938 	bl	800a1cc <mg_vcasecmp>
 8003f5c:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d007      	beq.n	8003f72 <mg_http_parse+0x1ca>
    hm->body.len = 0;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7c:	d113      	bne.n	8003fa6 <mg_http_parse+0x1fe>
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d010      	beq.n	8003fa6 <mg_http_parse+0x1fe>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3308      	adds	r3, #8
 8003f88:	490f      	ldr	r1, [pc, #60]	; (8003fc8 <mg_http_parse+0x220>)
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f006 f91e 	bl	800a1cc <mg_vcasecmp>
 8003f90:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d107      	bne.n	8003fa6 <mg_http_parse+0x1fe>
    hm->body.len = 0;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3728      	adds	r7, #40	; 0x28
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08016610 	.word	0x08016610
 8003fb4:	080165f4 	.word	0x080165f4
 8003fb8:	08016614 	.word	0x08016614
 8003fbc:	08016624 	.word	0x08016624
 8003fc0:	0801662c 	.word	0x0801662c
 8003fc4:	08016630 	.word	0x08016630
 8003fc8:	08016638 	.word	0x08016638

08003fcc <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	3b64      	subs	r3, #100	; 0x64
 8003fd8:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f200 8469 	bhi.w	80048b4 <mg_http_status_code_str+0x8e8>
 8003fe2:	a101      	add	r1, pc, #4	; (adr r1, 8003fe8 <mg_http_status_code_str+0x1c>)
 8003fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fe8:	080047b9 	.word	0x080047b9
 8003fec:	080047bd 	.word	0x080047bd
 8003ff0:	080047c1 	.word	0x080047c1
 8003ff4:	080048b5 	.word	0x080048b5
 8003ff8:	080048b5 	.word	0x080048b5
 8003ffc:	080048b5 	.word	0x080048b5
 8004000:	080048b5 	.word	0x080048b5
 8004004:	080048b5 	.word	0x080048b5
 8004008:	080048b5 	.word	0x080048b5
 800400c:	080048b5 	.word	0x080048b5
 8004010:	080048b5 	.word	0x080048b5
 8004014:	080048b5 	.word	0x080048b5
 8004018:	080048b5 	.word	0x080048b5
 800401c:	080048b5 	.word	0x080048b5
 8004020:	080048b5 	.word	0x080048b5
 8004024:	080048b5 	.word	0x080048b5
 8004028:	080048b5 	.word	0x080048b5
 800402c:	080048b5 	.word	0x080048b5
 8004030:	080048b5 	.word	0x080048b5
 8004034:	080048b5 	.word	0x080048b5
 8004038:	080048b5 	.word	0x080048b5
 800403c:	080048b5 	.word	0x080048b5
 8004040:	080048b5 	.word	0x080048b5
 8004044:	080048b5 	.word	0x080048b5
 8004048:	080048b5 	.word	0x080048b5
 800404c:	080048b5 	.word	0x080048b5
 8004050:	080048b5 	.word	0x080048b5
 8004054:	080048b5 	.word	0x080048b5
 8004058:	080048b5 	.word	0x080048b5
 800405c:	080048b5 	.word	0x080048b5
 8004060:	080048b5 	.word	0x080048b5
 8004064:	080048b5 	.word	0x080048b5
 8004068:	080048b5 	.word	0x080048b5
 800406c:	080048b5 	.word	0x080048b5
 8004070:	080048b5 	.word	0x080048b5
 8004074:	080048b5 	.word	0x080048b5
 8004078:	080048b5 	.word	0x080048b5
 800407c:	080048b5 	.word	0x080048b5
 8004080:	080048b5 	.word	0x080048b5
 8004084:	080048b5 	.word	0x080048b5
 8004088:	080048b5 	.word	0x080048b5
 800408c:	080048b5 	.word	0x080048b5
 8004090:	080048b5 	.word	0x080048b5
 8004094:	080048b5 	.word	0x080048b5
 8004098:	080048b5 	.word	0x080048b5
 800409c:	080048b5 	.word	0x080048b5
 80040a0:	080048b5 	.word	0x080048b5
 80040a4:	080048b5 	.word	0x080048b5
 80040a8:	080048b5 	.word	0x080048b5
 80040ac:	080048b5 	.word	0x080048b5
 80040b0:	080048b5 	.word	0x080048b5
 80040b4:	080048b5 	.word	0x080048b5
 80040b8:	080048b5 	.word	0x080048b5
 80040bc:	080048b5 	.word	0x080048b5
 80040c0:	080048b5 	.word	0x080048b5
 80040c4:	080048b5 	.word	0x080048b5
 80040c8:	080048b5 	.word	0x080048b5
 80040cc:	080048b5 	.word	0x080048b5
 80040d0:	080048b5 	.word	0x080048b5
 80040d4:	080048b5 	.word	0x080048b5
 80040d8:	080048b5 	.word	0x080048b5
 80040dc:	080048b5 	.word	0x080048b5
 80040e0:	080048b5 	.word	0x080048b5
 80040e4:	080048b5 	.word	0x080048b5
 80040e8:	080048b5 	.word	0x080048b5
 80040ec:	080048b5 	.word	0x080048b5
 80040f0:	080048b5 	.word	0x080048b5
 80040f4:	080048b5 	.word	0x080048b5
 80040f8:	080048b5 	.word	0x080048b5
 80040fc:	080048b5 	.word	0x080048b5
 8004100:	080048b5 	.word	0x080048b5
 8004104:	080048b5 	.word	0x080048b5
 8004108:	080048b5 	.word	0x080048b5
 800410c:	080048b5 	.word	0x080048b5
 8004110:	080048b5 	.word	0x080048b5
 8004114:	080048b5 	.word	0x080048b5
 8004118:	080048b5 	.word	0x080048b5
 800411c:	080048b5 	.word	0x080048b5
 8004120:	080048b5 	.word	0x080048b5
 8004124:	080048b5 	.word	0x080048b5
 8004128:	080048b5 	.word	0x080048b5
 800412c:	080048b5 	.word	0x080048b5
 8004130:	080048b5 	.word	0x080048b5
 8004134:	080048b5 	.word	0x080048b5
 8004138:	080048b5 	.word	0x080048b5
 800413c:	080048b5 	.word	0x080048b5
 8004140:	080048b5 	.word	0x080048b5
 8004144:	080048b5 	.word	0x080048b5
 8004148:	080048b5 	.word	0x080048b5
 800414c:	080048b5 	.word	0x080048b5
 8004150:	080048b5 	.word	0x080048b5
 8004154:	080048b5 	.word	0x080048b5
 8004158:	080048b5 	.word	0x080048b5
 800415c:	080048b5 	.word	0x080048b5
 8004160:	080048b5 	.word	0x080048b5
 8004164:	080048b5 	.word	0x080048b5
 8004168:	080048b5 	.word	0x080048b5
 800416c:	080048b5 	.word	0x080048b5
 8004170:	080048b5 	.word	0x080048b5
 8004174:	080048b5 	.word	0x080048b5
 8004178:	080047c5 	.word	0x080047c5
 800417c:	080047c9 	.word	0x080047c9
 8004180:	080047cd 	.word	0x080047cd
 8004184:	080047d1 	.word	0x080047d1
 8004188:	080047d5 	.word	0x080047d5
 800418c:	080047d9 	.word	0x080047d9
 8004190:	080047dd 	.word	0x080047dd
 8004194:	080047e1 	.word	0x080047e1
 8004198:	080047e5 	.word	0x080047e5
 800419c:	080048b5 	.word	0x080048b5
 80041a0:	080048b5 	.word	0x080048b5
 80041a4:	080048b5 	.word	0x080048b5
 80041a8:	080048b5 	.word	0x080048b5
 80041ac:	080048b5 	.word	0x080048b5
 80041b0:	080048b5 	.word	0x080048b5
 80041b4:	080048b5 	.word	0x080048b5
 80041b8:	080048b5 	.word	0x080048b5
 80041bc:	080048b5 	.word	0x080048b5
 80041c0:	080048b5 	.word	0x080048b5
 80041c4:	080048b5 	.word	0x080048b5
 80041c8:	080048b5 	.word	0x080048b5
 80041cc:	080048b5 	.word	0x080048b5
 80041d0:	080048b5 	.word	0x080048b5
 80041d4:	080048b5 	.word	0x080048b5
 80041d8:	080048b5 	.word	0x080048b5
 80041dc:	080048b5 	.word	0x080048b5
 80041e0:	080047e9 	.word	0x080047e9
 80041e4:	080048b5 	.word	0x080048b5
 80041e8:	080048b5 	.word	0x080048b5
 80041ec:	080048b5 	.word	0x080048b5
 80041f0:	080048b5 	.word	0x080048b5
 80041f4:	080048b5 	.word	0x080048b5
 80041f8:	080048b5 	.word	0x080048b5
 80041fc:	080048b5 	.word	0x080048b5
 8004200:	080048b5 	.word	0x080048b5
 8004204:	080048b5 	.word	0x080048b5
 8004208:	080048b5 	.word	0x080048b5
 800420c:	080048b5 	.word	0x080048b5
 8004210:	080048b5 	.word	0x080048b5
 8004214:	080048b5 	.word	0x080048b5
 8004218:	080048b5 	.word	0x080048b5
 800421c:	080048b5 	.word	0x080048b5
 8004220:	080048b5 	.word	0x080048b5
 8004224:	080048b5 	.word	0x080048b5
 8004228:	080048b5 	.word	0x080048b5
 800422c:	080048b5 	.word	0x080048b5
 8004230:	080048b5 	.word	0x080048b5
 8004234:	080048b5 	.word	0x080048b5
 8004238:	080048b5 	.word	0x080048b5
 800423c:	080048b5 	.word	0x080048b5
 8004240:	080048b5 	.word	0x080048b5
 8004244:	080048b5 	.word	0x080048b5
 8004248:	080048b5 	.word	0x080048b5
 800424c:	080048b5 	.word	0x080048b5
 8004250:	080048b5 	.word	0x080048b5
 8004254:	080048b5 	.word	0x080048b5
 8004258:	080048b5 	.word	0x080048b5
 800425c:	080048b5 	.word	0x080048b5
 8004260:	080048b5 	.word	0x080048b5
 8004264:	080048b5 	.word	0x080048b5
 8004268:	080048b5 	.word	0x080048b5
 800426c:	080048b5 	.word	0x080048b5
 8004270:	080048b5 	.word	0x080048b5
 8004274:	080048b5 	.word	0x080048b5
 8004278:	080048b5 	.word	0x080048b5
 800427c:	080048b5 	.word	0x080048b5
 8004280:	080048b5 	.word	0x080048b5
 8004284:	080048b5 	.word	0x080048b5
 8004288:	080048b5 	.word	0x080048b5
 800428c:	080048b5 	.word	0x080048b5
 8004290:	080048b5 	.word	0x080048b5
 8004294:	080048b5 	.word	0x080048b5
 8004298:	080048b5 	.word	0x080048b5
 800429c:	080048b5 	.word	0x080048b5
 80042a0:	080048b5 	.word	0x080048b5
 80042a4:	080048b5 	.word	0x080048b5
 80042a8:	080048b5 	.word	0x080048b5
 80042ac:	080048b5 	.word	0x080048b5
 80042b0:	080048b5 	.word	0x080048b5
 80042b4:	080048b5 	.word	0x080048b5
 80042b8:	080048b5 	.word	0x080048b5
 80042bc:	080048b5 	.word	0x080048b5
 80042c0:	080048b5 	.word	0x080048b5
 80042c4:	080048b5 	.word	0x080048b5
 80042c8:	080048b5 	.word	0x080048b5
 80042cc:	080048b5 	.word	0x080048b5
 80042d0:	080048b5 	.word	0x080048b5
 80042d4:	080048b5 	.word	0x080048b5
 80042d8:	080048b5 	.word	0x080048b5
 80042dc:	080048b5 	.word	0x080048b5
 80042e0:	080048b5 	.word	0x080048b5
 80042e4:	080048b5 	.word	0x080048b5
 80042e8:	080048b5 	.word	0x080048b5
 80042ec:	080048b5 	.word	0x080048b5
 80042f0:	080048b5 	.word	0x080048b5
 80042f4:	080048b5 	.word	0x080048b5
 80042f8:	080048b5 	.word	0x080048b5
 80042fc:	080048b5 	.word	0x080048b5
 8004300:	080048b5 	.word	0x080048b5
 8004304:	080048b5 	.word	0x080048b5
 8004308:	080047ed 	.word	0x080047ed
 800430c:	080047f1 	.word	0x080047f1
 8004310:	080047f5 	.word	0x080047f5
 8004314:	080047f9 	.word	0x080047f9
 8004318:	080047fd 	.word	0x080047fd
 800431c:	08004801 	.word	0x08004801
 8004320:	080048b5 	.word	0x080048b5
 8004324:	08004805 	.word	0x08004805
 8004328:	08004809 	.word	0x08004809
 800432c:	080048b5 	.word	0x080048b5
 8004330:	080048b5 	.word	0x080048b5
 8004334:	080048b5 	.word	0x080048b5
 8004338:	080048b5 	.word	0x080048b5
 800433c:	080048b5 	.word	0x080048b5
 8004340:	080048b5 	.word	0x080048b5
 8004344:	080048b5 	.word	0x080048b5
 8004348:	080048b5 	.word	0x080048b5
 800434c:	080048b5 	.word	0x080048b5
 8004350:	080048b5 	.word	0x080048b5
 8004354:	080048b5 	.word	0x080048b5
 8004358:	080048b5 	.word	0x080048b5
 800435c:	080048b5 	.word	0x080048b5
 8004360:	080048b5 	.word	0x080048b5
 8004364:	080048b5 	.word	0x080048b5
 8004368:	080048b5 	.word	0x080048b5
 800436c:	080048b5 	.word	0x080048b5
 8004370:	080048b5 	.word	0x080048b5
 8004374:	080048b5 	.word	0x080048b5
 8004378:	080048b5 	.word	0x080048b5
 800437c:	080048b5 	.word	0x080048b5
 8004380:	080048b5 	.word	0x080048b5
 8004384:	080048b5 	.word	0x080048b5
 8004388:	080048b5 	.word	0x080048b5
 800438c:	080048b5 	.word	0x080048b5
 8004390:	080048b5 	.word	0x080048b5
 8004394:	080048b5 	.word	0x080048b5
 8004398:	080048b5 	.word	0x080048b5
 800439c:	080048b5 	.word	0x080048b5
 80043a0:	080048b5 	.word	0x080048b5
 80043a4:	080048b5 	.word	0x080048b5
 80043a8:	080048b5 	.word	0x080048b5
 80043ac:	080048b5 	.word	0x080048b5
 80043b0:	080048b5 	.word	0x080048b5
 80043b4:	080048b5 	.word	0x080048b5
 80043b8:	080048b5 	.word	0x080048b5
 80043bc:	080048b5 	.word	0x080048b5
 80043c0:	080048b5 	.word	0x080048b5
 80043c4:	080048b5 	.word	0x080048b5
 80043c8:	080048b5 	.word	0x080048b5
 80043cc:	080048b5 	.word	0x080048b5
 80043d0:	080048b5 	.word	0x080048b5
 80043d4:	080048b5 	.word	0x080048b5
 80043d8:	080048b5 	.word	0x080048b5
 80043dc:	080048b5 	.word	0x080048b5
 80043e0:	080048b5 	.word	0x080048b5
 80043e4:	080048b5 	.word	0x080048b5
 80043e8:	080048b5 	.word	0x080048b5
 80043ec:	080048b5 	.word	0x080048b5
 80043f0:	080048b5 	.word	0x080048b5
 80043f4:	080048b5 	.word	0x080048b5
 80043f8:	080048b5 	.word	0x080048b5
 80043fc:	080048b5 	.word	0x080048b5
 8004400:	080048b5 	.word	0x080048b5
 8004404:	080048b5 	.word	0x080048b5
 8004408:	080048b5 	.word	0x080048b5
 800440c:	080048b5 	.word	0x080048b5
 8004410:	080048b5 	.word	0x080048b5
 8004414:	080048b5 	.word	0x080048b5
 8004418:	080048b5 	.word	0x080048b5
 800441c:	080048b5 	.word	0x080048b5
 8004420:	080048b5 	.word	0x080048b5
 8004424:	080048b5 	.word	0x080048b5
 8004428:	080048b5 	.word	0x080048b5
 800442c:	080048b5 	.word	0x080048b5
 8004430:	080048b5 	.word	0x080048b5
 8004434:	080048b5 	.word	0x080048b5
 8004438:	080048b5 	.word	0x080048b5
 800443c:	080048b5 	.word	0x080048b5
 8004440:	080048b5 	.word	0x080048b5
 8004444:	080048b5 	.word	0x080048b5
 8004448:	080048b5 	.word	0x080048b5
 800444c:	080048b5 	.word	0x080048b5
 8004450:	080048b5 	.word	0x080048b5
 8004454:	080048b5 	.word	0x080048b5
 8004458:	080048b5 	.word	0x080048b5
 800445c:	080048b5 	.word	0x080048b5
 8004460:	080048b5 	.word	0x080048b5
 8004464:	080048b5 	.word	0x080048b5
 8004468:	080048b5 	.word	0x080048b5
 800446c:	080048b5 	.word	0x080048b5
 8004470:	080048b5 	.word	0x080048b5
 8004474:	080048b5 	.word	0x080048b5
 8004478:	080048b5 	.word	0x080048b5
 800447c:	080048b5 	.word	0x080048b5
 8004480:	080048b5 	.word	0x080048b5
 8004484:	080048b5 	.word	0x080048b5
 8004488:	080048b5 	.word	0x080048b5
 800448c:	080048b5 	.word	0x080048b5
 8004490:	080048b5 	.word	0x080048b5
 8004494:	080048b5 	.word	0x080048b5
 8004498:	0800480d 	.word	0x0800480d
 800449c:	08004811 	.word	0x08004811
 80044a0:	08004815 	.word	0x08004815
 80044a4:	08004819 	.word	0x08004819
 80044a8:	0800481d 	.word	0x0800481d
 80044ac:	08004821 	.word	0x08004821
 80044b0:	08004825 	.word	0x08004825
 80044b4:	08004829 	.word	0x08004829
 80044b8:	0800482d 	.word	0x0800482d
 80044bc:	08004831 	.word	0x08004831
 80044c0:	08004835 	.word	0x08004835
 80044c4:	08004839 	.word	0x08004839
 80044c8:	0800483d 	.word	0x0800483d
 80044cc:	08004841 	.word	0x08004841
 80044d0:	08004845 	.word	0x08004845
 80044d4:	08004849 	.word	0x08004849
 80044d8:	0800484d 	.word	0x0800484d
 80044dc:	08004851 	.word	0x08004851
 80044e0:	08004855 	.word	0x08004855
 80044e4:	080048b5 	.word	0x080048b5
 80044e8:	080048b5 	.word	0x080048b5
 80044ec:	08004859 	.word	0x08004859
 80044f0:	0800485d 	.word	0x0800485d
 80044f4:	08004861 	.word	0x08004861
 80044f8:	08004865 	.word	0x08004865
 80044fc:	080048b5 	.word	0x080048b5
 8004500:	08004869 	.word	0x08004869
 8004504:	080048b5 	.word	0x080048b5
 8004508:	0800486d 	.word	0x0800486d
 800450c:	08004871 	.word	0x08004871
 8004510:	080048b5 	.word	0x080048b5
 8004514:	08004875 	.word	0x08004875
 8004518:	080048b5 	.word	0x080048b5
 800451c:	080048b5 	.word	0x080048b5
 8004520:	080048b5 	.word	0x080048b5
 8004524:	080048b5 	.word	0x080048b5
 8004528:	080048b5 	.word	0x080048b5
 800452c:	080048b5 	.word	0x080048b5
 8004530:	080048b5 	.word	0x080048b5
 8004534:	080048b5 	.word	0x080048b5
 8004538:	080048b5 	.word	0x080048b5
 800453c:	080048b5 	.word	0x080048b5
 8004540:	080048b5 	.word	0x080048b5
 8004544:	080048b5 	.word	0x080048b5
 8004548:	08004879 	.word	0x08004879
 800454c:	080048b5 	.word	0x080048b5
 8004550:	080048b5 	.word	0x080048b5
 8004554:	080048b5 	.word	0x080048b5
 8004558:	080048b5 	.word	0x080048b5
 800455c:	080048b5 	.word	0x080048b5
 8004560:	080048b5 	.word	0x080048b5
 8004564:	0800487d 	.word	0x0800487d
 8004568:	080048b5 	.word	0x080048b5
 800456c:	080048b5 	.word	0x080048b5
 8004570:	080048b5 	.word	0x080048b5
 8004574:	080048b5 	.word	0x080048b5
 8004578:	080048b5 	.word	0x080048b5
 800457c:	080048b5 	.word	0x080048b5
 8004580:	080048b5 	.word	0x080048b5
 8004584:	080048b5 	.word	0x080048b5
 8004588:	080048b5 	.word	0x080048b5
 800458c:	080048b5 	.word	0x080048b5
 8004590:	080048b5 	.word	0x080048b5
 8004594:	080048b5 	.word	0x080048b5
 8004598:	080048b5 	.word	0x080048b5
 800459c:	080048b5 	.word	0x080048b5
 80045a0:	080048b5 	.word	0x080048b5
 80045a4:	080048b5 	.word	0x080048b5
 80045a8:	080048b5 	.word	0x080048b5
 80045ac:	080048b5 	.word	0x080048b5
 80045b0:	080048b5 	.word	0x080048b5
 80045b4:	080048b5 	.word	0x080048b5
 80045b8:	080048b5 	.word	0x080048b5
 80045bc:	080048b5 	.word	0x080048b5
 80045c0:	080048b5 	.word	0x080048b5
 80045c4:	080048b5 	.word	0x080048b5
 80045c8:	080048b5 	.word	0x080048b5
 80045cc:	080048b5 	.word	0x080048b5
 80045d0:	080048b5 	.word	0x080048b5
 80045d4:	080048b5 	.word	0x080048b5
 80045d8:	080048b5 	.word	0x080048b5
 80045dc:	080048b5 	.word	0x080048b5
 80045e0:	080048b5 	.word	0x080048b5
 80045e4:	080048b5 	.word	0x080048b5
 80045e8:	080048b5 	.word	0x080048b5
 80045ec:	080048b5 	.word	0x080048b5
 80045f0:	080048b5 	.word	0x080048b5
 80045f4:	080048b5 	.word	0x080048b5
 80045f8:	080048b5 	.word	0x080048b5
 80045fc:	080048b5 	.word	0x080048b5
 8004600:	080048b5 	.word	0x080048b5
 8004604:	080048b5 	.word	0x080048b5
 8004608:	080048b5 	.word	0x080048b5
 800460c:	080048b5 	.word	0x080048b5
 8004610:	080048b5 	.word	0x080048b5
 8004614:	080048b5 	.word	0x080048b5
 8004618:	080048b5 	.word	0x080048b5
 800461c:	080048b5 	.word	0x080048b5
 8004620:	080048b5 	.word	0x080048b5
 8004624:	08004881 	.word	0x08004881
 8004628:	08004885 	.word	0x08004885
 800462c:	08004889 	.word	0x08004889
 8004630:	0800488d 	.word	0x0800488d
 8004634:	08004891 	.word	0x08004891
 8004638:	08004895 	.word	0x08004895
 800463c:	08004899 	.word	0x08004899
 8004640:	0800489d 	.word	0x0800489d
 8004644:	080048a1 	.word	0x080048a1
 8004648:	080048a5 	.word	0x080048a5
 800464c:	080048b5 	.word	0x080048b5
 8004650:	080048a9 	.word	0x080048a9
 8004654:	080048ad 	.word	0x080048ad
 8004658:	080048b5 	.word	0x080048b5
 800465c:	080048b5 	.word	0x080048b5
 8004660:	080048b5 	.word	0x080048b5
 8004664:	080048b5 	.word	0x080048b5
 8004668:	080048b5 	.word	0x080048b5
 800466c:	080048b5 	.word	0x080048b5
 8004670:	080048b5 	.word	0x080048b5
 8004674:	080048b5 	.word	0x080048b5
 8004678:	080048b5 	.word	0x080048b5
 800467c:	080048b5 	.word	0x080048b5
 8004680:	080048b5 	.word	0x080048b5
 8004684:	080048b5 	.word	0x080048b5
 8004688:	080048b5 	.word	0x080048b5
 800468c:	080048b5 	.word	0x080048b5
 8004690:	080048b5 	.word	0x080048b5
 8004694:	080048b5 	.word	0x080048b5
 8004698:	080048b5 	.word	0x080048b5
 800469c:	080048b5 	.word	0x080048b5
 80046a0:	080048b5 	.word	0x080048b5
 80046a4:	080048b5 	.word	0x080048b5
 80046a8:	080048b5 	.word	0x080048b5
 80046ac:	080048b5 	.word	0x080048b5
 80046b0:	080048b5 	.word	0x080048b5
 80046b4:	080048b5 	.word	0x080048b5
 80046b8:	080048b5 	.word	0x080048b5
 80046bc:	080048b5 	.word	0x080048b5
 80046c0:	080048b5 	.word	0x080048b5
 80046c4:	080048b5 	.word	0x080048b5
 80046c8:	080048b5 	.word	0x080048b5
 80046cc:	080048b5 	.word	0x080048b5
 80046d0:	080048b5 	.word	0x080048b5
 80046d4:	080048b5 	.word	0x080048b5
 80046d8:	080048b5 	.word	0x080048b5
 80046dc:	080048b5 	.word	0x080048b5
 80046e0:	080048b5 	.word	0x080048b5
 80046e4:	080048b5 	.word	0x080048b5
 80046e8:	080048b5 	.word	0x080048b5
 80046ec:	080048b5 	.word	0x080048b5
 80046f0:	080048b5 	.word	0x080048b5
 80046f4:	080048b5 	.word	0x080048b5
 80046f8:	080048b5 	.word	0x080048b5
 80046fc:	080048b5 	.word	0x080048b5
 8004700:	080048b5 	.word	0x080048b5
 8004704:	080048b5 	.word	0x080048b5
 8004708:	080048b5 	.word	0x080048b5
 800470c:	080048b5 	.word	0x080048b5
 8004710:	080048b5 	.word	0x080048b5
 8004714:	080048b5 	.word	0x080048b5
 8004718:	080048b5 	.word	0x080048b5
 800471c:	080048b5 	.word	0x080048b5
 8004720:	080048b5 	.word	0x080048b5
 8004724:	080048b5 	.word	0x080048b5
 8004728:	080048b5 	.word	0x080048b5
 800472c:	080048b5 	.word	0x080048b5
 8004730:	080048b5 	.word	0x080048b5
 8004734:	080048b5 	.word	0x080048b5
 8004738:	080048b5 	.word	0x080048b5
 800473c:	080048b5 	.word	0x080048b5
 8004740:	080048b5 	.word	0x080048b5
 8004744:	080048b5 	.word	0x080048b5
 8004748:	080048b5 	.word	0x080048b5
 800474c:	080048b5 	.word	0x080048b5
 8004750:	080048b5 	.word	0x080048b5
 8004754:	080048b5 	.word	0x080048b5
 8004758:	080048b5 	.word	0x080048b5
 800475c:	080048b5 	.word	0x080048b5
 8004760:	080048b5 	.word	0x080048b5
 8004764:	080048b5 	.word	0x080048b5
 8004768:	080048b5 	.word	0x080048b5
 800476c:	080048b5 	.word	0x080048b5
 8004770:	080048b5 	.word	0x080048b5
 8004774:	080048b5 	.word	0x080048b5
 8004778:	080048b5 	.word	0x080048b5
 800477c:	080048b5 	.word	0x080048b5
 8004780:	080048b5 	.word	0x080048b5
 8004784:	080048b5 	.word	0x080048b5
 8004788:	080048b5 	.word	0x080048b5
 800478c:	080048b5 	.word	0x080048b5
 8004790:	080048b5 	.word	0x080048b5
 8004794:	080048b5 	.word	0x080048b5
 8004798:	080048b5 	.word	0x080048b5
 800479c:	080048b5 	.word	0x080048b5
 80047a0:	080048b5 	.word	0x080048b5
 80047a4:	080048b5 	.word	0x080048b5
 80047a8:	080048b5 	.word	0x080048b5
 80047ac:	080048b5 	.word	0x080048b5
 80047b0:	080048b5 	.word	0x080048b5
 80047b4:	080048b1 	.word	0x080048b1
    case 100: return "Continue";
 80047b8:	4b42      	ldr	r3, [pc, #264]	; (80048c4 <mg_http_status_code_str+0x8f8>)
 80047ba:	e07c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 80047bc:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <mg_http_status_code_str+0x8fc>)
 80047be:	e07a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 80047c0:	4b42      	ldr	r3, [pc, #264]	; (80048cc <mg_http_status_code_str+0x900>)
 80047c2:	e078      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 80047c4:	4b42      	ldr	r3, [pc, #264]	; (80048d0 <mg_http_status_code_str+0x904>)
 80047c6:	e076      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 80047c8:	4b42      	ldr	r3, [pc, #264]	; (80048d4 <mg_http_status_code_str+0x908>)
 80047ca:	e074      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 80047cc:	4b42      	ldr	r3, [pc, #264]	; (80048d8 <mg_http_status_code_str+0x90c>)
 80047ce:	e072      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 80047d0:	4b42      	ldr	r3, [pc, #264]	; (80048dc <mg_http_status_code_str+0x910>)
 80047d2:	e070      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 80047d4:	4b42      	ldr	r3, [pc, #264]	; (80048e0 <mg_http_status_code_str+0x914>)
 80047d6:	e06e      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 80047d8:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <mg_http_status_code_str+0x918>)
 80047da:	e06c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 80047dc:	4b42      	ldr	r3, [pc, #264]	; (80048e8 <mg_http_status_code_str+0x91c>)
 80047de:	e06a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 80047e0:	4b42      	ldr	r3, [pc, #264]	; (80048ec <mg_http_status_code_str+0x920>)
 80047e2:	e068      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 80047e4:	4b42      	ldr	r3, [pc, #264]	; (80048f0 <mg_http_status_code_str+0x924>)
 80047e6:	e066      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 80047e8:	4b42      	ldr	r3, [pc, #264]	; (80048f4 <mg_http_status_code_str+0x928>)
 80047ea:	e064      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 80047ec:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <mg_http_status_code_str+0x92c>)
 80047ee:	e062      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 80047f0:	4b42      	ldr	r3, [pc, #264]	; (80048fc <mg_http_status_code_str+0x930>)
 80047f2:	e060      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 80047f4:	4b42      	ldr	r3, [pc, #264]	; (8004900 <mg_http_status_code_str+0x934>)
 80047f6:	e05e      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 80047f8:	4b42      	ldr	r3, [pc, #264]	; (8004904 <mg_http_status_code_str+0x938>)
 80047fa:	e05c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 80047fc:	4b42      	ldr	r3, [pc, #264]	; (8004908 <mg_http_status_code_str+0x93c>)
 80047fe:	e05a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8004800:	4b42      	ldr	r3, [pc, #264]	; (800490c <mg_http_status_code_str+0x940>)
 8004802:	e058      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 8004804:	4b42      	ldr	r3, [pc, #264]	; (8004910 <mg_http_status_code_str+0x944>)
 8004806:	e056      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8004808:	4b42      	ldr	r3, [pc, #264]	; (8004914 <mg_http_status_code_str+0x948>)
 800480a:	e054      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 800480c:	4b42      	ldr	r3, [pc, #264]	; (8004918 <mg_http_status_code_str+0x94c>)
 800480e:	e052      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8004810:	4b42      	ldr	r3, [pc, #264]	; (800491c <mg_http_status_code_str+0x950>)
 8004812:	e050      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 8004814:	4b42      	ldr	r3, [pc, #264]	; (8004920 <mg_http_status_code_str+0x954>)
 8004816:	e04e      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8004818:	4b42      	ldr	r3, [pc, #264]	; (8004924 <mg_http_status_code_str+0x958>)
 800481a:	e04c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 800481c:	4b42      	ldr	r3, [pc, #264]	; (8004928 <mg_http_status_code_str+0x95c>)
 800481e:	e04a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8004820:	4b42      	ldr	r3, [pc, #264]	; (800492c <mg_http_status_code_str+0x960>)
 8004822:	e048      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 8004824:	4b42      	ldr	r3, [pc, #264]	; (8004930 <mg_http_status_code_str+0x964>)
 8004826:	e046      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8004828:	4b42      	ldr	r3, [pc, #264]	; (8004934 <mg_http_status_code_str+0x968>)
 800482a:	e044      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 800482c:	4b42      	ldr	r3, [pc, #264]	; (8004938 <mg_http_status_code_str+0x96c>)
 800482e:	e042      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8004830:	4b42      	ldr	r3, [pc, #264]	; (800493c <mg_http_status_code_str+0x970>)
 8004832:	e040      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 8004834:	4b42      	ldr	r3, [pc, #264]	; (8004940 <mg_http_status_code_str+0x974>)
 8004836:	e03e      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8004838:	4b42      	ldr	r3, [pc, #264]	; (8004944 <mg_http_status_code_str+0x978>)
 800483a:	e03c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 800483c:	4b42      	ldr	r3, [pc, #264]	; (8004948 <mg_http_status_code_str+0x97c>)
 800483e:	e03a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8004840:	4b42      	ldr	r3, [pc, #264]	; (800494c <mg_http_status_code_str+0x980>)
 8004842:	e038      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 8004844:	4b42      	ldr	r3, [pc, #264]	; (8004950 <mg_http_status_code_str+0x984>)
 8004846:	e036      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8004848:	4b42      	ldr	r3, [pc, #264]	; (8004954 <mg_http_status_code_str+0x988>)
 800484a:	e034      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 800484c:	4b42      	ldr	r3, [pc, #264]	; (8004958 <mg_http_status_code_str+0x98c>)
 800484e:	e032      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8004850:	4b42      	ldr	r3, [pc, #264]	; (800495c <mg_http_status_code_str+0x990>)
 8004852:	e030      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 8004854:	4b42      	ldr	r3, [pc, #264]	; (8004960 <mg_http_status_code_str+0x994>)
 8004856:	e02e      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8004858:	4b42      	ldr	r3, [pc, #264]	; (8004964 <mg_http_status_code_str+0x998>)
 800485a:	e02c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 800485c:	4b42      	ldr	r3, [pc, #264]	; (8004968 <mg_http_status_code_str+0x99c>)
 800485e:	e02a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8004860:	4b42      	ldr	r3, [pc, #264]	; (800496c <mg_http_status_code_str+0x9a0>)
 8004862:	e028      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 8004864:	4b42      	ldr	r3, [pc, #264]	; (8004970 <mg_http_status_code_str+0x9a4>)
 8004866:	e026      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 8004868:	4b42      	ldr	r3, [pc, #264]	; (8004974 <mg_http_status_code_str+0x9a8>)
 800486a:	e024      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 800486c:	4b42      	ldr	r3, [pc, #264]	; (8004978 <mg_http_status_code_str+0x9ac>)
 800486e:	e022      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 8004870:	4b42      	ldr	r3, [pc, #264]	; (800497c <mg_http_status_code_str+0x9b0>)
 8004872:	e020      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 8004874:	4b42      	ldr	r3, [pc, #264]	; (8004980 <mg_http_status_code_str+0x9b4>)
 8004876:	e01e      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <mg_http_status_code_str+0x9b8>)
 800487a:	e01c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 800487c:	4b42      	ldr	r3, [pc, #264]	; (8004988 <mg_http_status_code_str+0x9bc>)
 800487e:	e01a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 8004880:	4b42      	ldr	r3, [pc, #264]	; (800498c <mg_http_status_code_str+0x9c0>)
 8004882:	e018      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 8004884:	4b42      	ldr	r3, [pc, #264]	; (8004990 <mg_http_status_code_str+0x9c4>)
 8004886:	e016      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 8004888:	4b42      	ldr	r3, [pc, #264]	; (8004994 <mg_http_status_code_str+0x9c8>)
 800488a:	e014      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 800488c:	4b42      	ldr	r3, [pc, #264]	; (8004998 <mg_http_status_code_str+0x9cc>)
 800488e:	e012      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 8004890:	4b42      	ldr	r3, [pc, #264]	; (800499c <mg_http_status_code_str+0x9d0>)
 8004892:	e010      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 8004894:	4b42      	ldr	r3, [pc, #264]	; (80049a0 <mg_http_status_code_str+0x9d4>)
 8004896:	e00e      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <mg_http_status_code_str+0x9d8>)
 800489a:	e00c      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 800489c:	4b42      	ldr	r3, [pc, #264]	; (80049a8 <mg_http_status_code_str+0x9dc>)
 800489e:	e00a      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80048a0:	4b42      	ldr	r3, [pc, #264]	; (80049ac <mg_http_status_code_str+0x9e0>)
 80048a2:	e008      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80048a4:	4b42      	ldr	r3, [pc, #264]	; (80049b0 <mg_http_status_code_str+0x9e4>)
 80048a6:	e006      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80048a8:	4b42      	ldr	r3, [pc, #264]	; (80049b4 <mg_http_status_code_str+0x9e8>)
 80048aa:	e004      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80048ac:	4b42      	ldr	r3, [pc, #264]	; (80049b8 <mg_http_status_code_str+0x9ec>)
 80048ae:	e002      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 80048b0:	4b42      	ldr	r3, [pc, #264]	; (80049bc <mg_http_status_code_str+0x9f0>)
 80048b2:	e000      	b.n	80048b6 <mg_http_status_code_str+0x8ea>
    default: return "";
 80048b4:	4b42      	ldr	r3, [pc, #264]	; (80049c0 <mg_http_status_code_str+0x9f4>)
  }
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	08016658 	.word	0x08016658
 80048c8:	08016664 	.word	0x08016664
 80048cc:	08016678 	.word	0x08016678
 80048d0:	08016684 	.word	0x08016684
 80048d4:	08016688 	.word	0x08016688
 80048d8:	08016690 	.word	0x08016690
 80048dc:	0801669c 	.word	0x0801669c
 80048e0:	080166bc 	.word	0x080166bc
 80048e4:	080166c8 	.word	0x080166c8
 80048e8:	080166d8 	.word	0x080166d8
 80048ec:	080166e8 	.word	0x080166e8
 80048f0:	080166f8 	.word	0x080166f8
 80048f4:	0801670c 	.word	0x0801670c
 80048f8:	08016714 	.word	0x08016714
 80048fc:	08016728 	.word	0x08016728
 8004900:	0801673c 	.word	0x0801673c
 8004904:	08016744 	.word	0x08016744
 8004908:	08016750 	.word	0x08016750
 800490c:	08016760 	.word	0x08016760
 8004910:	0801676c 	.word	0x0801676c
 8004914:	08016780 	.word	0x08016780
 8004918:	08016794 	.word	0x08016794
 800491c:	080167a0 	.word	0x080167a0
 8004920:	080167b0 	.word	0x080167b0
 8004924:	080167c4 	.word	0x080167c4
 8004928:	080167d0 	.word	0x080167d0
 800492c:	080167dc 	.word	0x080167dc
 8004930:	080167f0 	.word	0x080167f0
 8004934:	08016800 	.word	0x08016800
 8004938:	08016820 	.word	0x08016820
 800493c:	08016830 	.word	0x08016830
 8004940:	0801683c 	.word	0x0801683c
 8004944:	08016844 	.word	0x08016844
 8004948:	08016854 	.word	0x08016854
 800494c:	08016868 	.word	0x08016868
 8004950:	0801687c 	.word	0x0801687c
 8004954:	08016894 	.word	0x08016894
 8004958:	080168ac 	.word	0x080168ac
 800495c:	080168cc 	.word	0x080168cc
 8004960:	080168e0 	.word	0x080168e0
 8004964:	080168f0 	.word	0x080168f0
 8004968:	08016904 	.word	0x08016904
 800496c:	0801691c 	.word	0x0801691c
 8004970:	08016924 	.word	0x08016924
 8004974:	08016938 	.word	0x08016938
 8004978:	0801694c 	.word	0x0801694c
 800497c:	08016964 	.word	0x08016964
 8004980:	08016978 	.word	0x08016978
 8004984:	08016998 	.word	0x08016998
 8004988:	080169bc 	.word	0x080169bc
 800498c:	080169dc 	.word	0x080169dc
 8004990:	080169f4 	.word	0x080169f4
 8004994:	08016a0c 	.word	0x08016a0c
 8004998:	08016a1c 	.word	0x08016a1c
 800499c:	08016a28 	.word	0x08016a28
 80049a0:	08016a3c 	.word	0x08016a3c
 80049a4:	08016a4c 	.word	0x08016a4c
 80049a8:	08016a68 	.word	0x08016a68
 80049ac:	08016a80 	.word	0x08016a80
 80049b0:	08016a98 	.word	0x08016a98
 80049b4:	08016aa8 	.word	0x08016aa8
 80049b8:	08016ab8 	.word	0x08016ab8
 80049bc:	08016ad8 	.word	0x08016ad8
 80049c0:	08016af8 	.word	0x08016af8

080049c4 <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80049c4:	b408      	push	{r3}
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b08b      	sub	sp, #44	; 0x2c
 80049ca:	af02      	add	r7, sp, #8
 80049cc:	60f8      	str	r0, [r7, #12]
 80049ce:	60b9      	str	r1, [r7, #8]
 80049d0:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 80049d2:	68b8      	ldr	r0, [r7, #8]
 80049d4:	f7ff fafa 	bl	8003fcc <mg_http_status_code_str>
 80049d8:	4602      	mov	r2, r0
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d001      	beq.n	80049e4 <mg_http_reply+0x20>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	e000      	b.n	80049e6 <mg_http_reply+0x22>
 80049e4:	4b1f      	ldr	r3, [pc, #124]	; (8004a64 <mg_http_reply+0xa0>)
 80049e6:	9300      	str	r3, [sp, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	491e      	ldr	r1, [pc, #120]	; (8004a68 <mg_http_reply+0xa4>)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f002 fd52 	bl	8007498 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 80049fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049fe:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004a06:	f107 0314 	add.w	r3, r7, #20
 8004a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0c:	4817      	ldr	r0, [pc, #92]	; (8004a6c <mg_http_reply+0xa8>)
 8004a0e:	f7fe f8d3 	bl	8002bb8 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a16:	2b10      	cmp	r3, #16
 8004a18:	d916      	bls.n	8004a48 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3b0f      	subs	r3, #15
 8004a22:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004a2c:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <mg_http_reply+0xac>)
 8004a2e:	210b      	movs	r1, #11
 8004a30:	f003 fa08 	bl	8007e44 <mg_snprintf>
 8004a34:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a3a:	69f9      	ldr	r1, [r7, #28]
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	440b      	add	r3, r1
 8004a40:	3b0f      	subs	r3, #15
 8004a42:	4413      	add	r3, r2
 8004a44:	2220      	movs	r2, #32
 8004a46:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004a4e:	f36f 13c7 	bfc	r3, #7, #1
 8004a52:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 8004a56:	bf00      	nop
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a60:	b001      	add	sp, #4
 8004a62:	4770      	bx	lr
 8004a64:	08016af8 	.word	0x08016af8
 8004a68:	08016afc 	.word	0x08016afc
 8004a6c:	08007dd5 	.word	0x08007dd5
 8004a70:	08016b30 	.word	0x08016b30

08004a74 <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a80:	4618      	mov	r0, r3
 8004a82:	f7fe fc65 	bl	8003350 <mg_fs_close>
  c->pfn_data = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a06      	ldr	r2, [pc, #24]	; (8004aa8 <restore_http_cb+0x34>)
 8004a90:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004a98:	f36f 13c7 	bfc	r3, #7, #1
 8004a9c:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 8004aa0:	bf00      	nop
 8004aa2:	3708      	adds	r7, #8
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	08005f19 	.word	0x08005f19

08004aac <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 8004aac:	b5b0      	push	{r4, r5, r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af04      	add	r7, sp, #16
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	461c      	mov	r4, r3
 8004abe:	4615      	mov	r5, r2
 8004ac0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004ac4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ac8:	e9cd 2300 	strd	r2, r3, [sp]
 8004acc:	4a04      	ldr	r2, [pc, #16]	; (8004ae0 <mg_http_etag+0x34>)
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f003 f9b7 	bl	8007e44 <mg_snprintf>
  return buf;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bdb0      	pop	{r4, r5, r7, pc}
 8004ae0:	08016b38 	.word	0x08016b38

08004ae4 <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d002      	beq.n	8004afe <static_cb+0x1a>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d146      	bne.n	8004b8c <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 8004b02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b06:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3384      	adds	r3, #132	; 0x84
 8004b0c:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b12:	69fa      	ldr	r2, [r7, #28]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d905      	bls.n	8004b24 <static_cb+0x40>
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	3348      	adds	r3, #72	; 0x48
 8004b1c:	69f9      	ldr	r1, [r7, #28]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f001 fb6c 	bl	80061fc <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d234      	bcs.n	8004b9a <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d902      	bls.n	8004b4c <static_cb+0x68>
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	6a3a      	ldr	r2, [r7, #32]
 8004b54:	6810      	ldr	r0, [r2, #0]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004b5e:	4411      	add	r1, r2
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	4798      	blx	r3
 8004b64:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	441a      	add	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	1ad2      	subs	r2, r2, r3
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d10c      	bne.n	8004b9e <static_cb+0xba>
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f7ff ff75 	bl	8004a74 <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004b8a:	e008      	b.n	8004b9e <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	2b09      	cmp	r3, #9
 8004b90:	d106      	bne.n	8004ba0 <static_cb+0xbc>
    restore_http_cb(c);
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f7ff ff6e 	bl	8004a74 <restore_http_cb>
 8004b98:	e002      	b.n	8004ba0 <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 8004b9a:	bf00      	nop
 8004b9c:	e000      	b.n	8004ba0 <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 8004b9e:	bf00      	nop
  }
  (void) ev_data;
}
 8004ba0:	3728      	adds	r7, #40	; 0x28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
	...

08004ba8 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 8004ba8:	b590      	push	{r4, r7, lr}
 8004baa:	b08d      	sub	sp, #52	; 0x34
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	1d38      	adds	r0, r7, #4
 8004bb2:	e880 0006 	stmia.w	r0, {r1, r2}
 8004bb6:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	6839      	ldr	r1, [r7, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f005 fa66 	bl	800a090 <mg_str_s>
  size_t i = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 8004bc8:	e002      	b.n	8004bd0 <guess_content_type+0x28>
 8004bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bcc:	3301      	adds	r3, #1
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d208      	bcs.n	8004bea <guess_content_type+0x42>
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	1acb      	subs	r3, r1, r3
 8004be0:	3b01      	subs	r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b2e      	cmp	r3, #46	; 0x2e
 8004be8:	d1ef      	bne.n	8004bca <guess_content_type+0x22>
  path.ptr += path.len - i;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	68b9      	ldr	r1, [r7, #8]
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	1acb      	subs	r3, r1, r3
 8004bf2:	4413      	add	r3, r2
 8004bf4:	607b      	str	r3, [r7, #4]
  path.len = i;
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 8004bfa:	e012      	b.n	8004c22 <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 8004bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004c00:	cb0c      	ldmia	r3, {r2, r3}
 8004c02:	1d39      	adds	r1, r7, #4
 8004c04:	c903      	ldmia	r1, {r0, r1}
 8004c06:	f005 fb05 	bl	800a214 <mg_strcmp>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d108      	bne.n	8004c22 <guess_content_type+0x7a>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	461a      	mov	r2, r3
 8004c14:	f107 031c 	add.w	r3, r7, #28
 8004c18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c1c:	e882 0003 	stmia.w	r2, {r0, r1}
 8004c20:	e034      	b.n	8004c8c <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 8004c22:	f107 021c 	add.w	r2, r7, #28
 8004c26:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004c2a:	f107 0314 	add.w	r3, r7, #20
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f005 fd4f 	bl	800a6d2 <mg_commalist>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1e0      	bne.n	8004bfc <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c3e:	e01a      	b.n	8004c76 <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <guess_content_type+0xec>)
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c44:	00db      	lsls	r3, r3, #3
 8004c46:	4413      	add	r3, r2
 8004c48:	cb0c      	ldmia	r3, {r2, r3}
 8004c4a:	1d39      	adds	r1, r7, #4
 8004c4c:	c903      	ldmia	r1, {r0, r1}
 8004c4e:	f005 fae1 	bl	800a214 <mg_strcmp>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10b      	bne.n	8004c70 <guess_content_type+0xc8>
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	68f9      	ldr	r1, [r7, #12]
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <guess_content_type+0xec>)
 8004c60:	460c      	mov	r4, r1
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4413      	add	r3, r2
 8004c66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004c6a:	e884 0003 	stmia.w	r4, {r0, r1}
 8004c6e:	e00d      	b.n	8004c8c <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 8004c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c72:	3302      	adds	r3, #2
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c76:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <guess_content_type+0xec>)
 8004c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1de      	bne.n	8004c40 <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4904      	ldr	r1, [pc, #16]	; (8004c98 <guess_content_type+0xf0>)
 8004c86:	4618      	mov	r0, r3
 8004c88:	f005 fa02 	bl	800a090 <mg_str_s>
}
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	3734      	adds	r7, #52	; 0x34
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd90      	pop	{r4, r7, pc}
 8004c94:	24000058 	.word	0x24000058
 8004c98:	08016c20 	.word	0x08016c20

08004c9c <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b088      	sub	sp, #32
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 8004cac:	2300      	movs	r3, #0
 8004cae:	61fb      	str	r3, [r7, #28]
 8004cb0:	e076      	b.n	8004da0 <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	4413      	add	r3, r2
 8004cba:	2206      	movs	r2, #6
 8004cbc:	493f      	ldr	r1, [pc, #252]	; (8004dbc <getrange+0x120>)
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f010 fc9f 	bl	8015602 <memcmp>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d167      	bne.n	8004d9a <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3306      	adds	r3, #6
 8004cd2:	18d1      	adds	r1, r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	1f9a      	subs	r2, r3, #6
 8004cde:	f107 0310 	add.w	r3, r7, #16
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f005 f9f1 	bl	800a0ca <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00a      	beq.n	8004d04 <getrange+0x68>
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b2f      	cmp	r3, #47	; 0x2f
 8004cf4:	d906      	bls.n	8004d04 <getrange+0x68>
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b39      	cmp	r3, #57	; 0x39
 8004cfc:	d802      	bhi.n	8004d04 <getrange+0x68>
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	3301      	adds	r3, #1
 8004d02:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	f107 0310 	add.w	r3, r7, #16
 8004d0a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d0e:	f7fe fd3f 	bl	8003790 <mg_to_size_t>
 8004d12:	4603      	mov	r3, r0
 8004d14:	f083 0301 	eor.w	r3, r3, #1
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d007      	beq.n	8004d2e <getrange+0x92>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	e047      	b.n	8004db2 <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	3301      	adds	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <getrange+0xa8>
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	2b2f      	cmp	r3, #47	; 0x2f
 8004d3a:	d903      	bls.n	8004d44 <getrange+0xa8>
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b39      	cmp	r3, #57	; 0x39
 8004d42:	d9ee      	bls.n	8004d22 <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d009      	beq.n	8004d5e <getrange+0xc2>
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	2b2d      	cmp	r3, #45	; 0x2d
 8004d50:	d105      	bne.n	8004d5e <getrange+0xc2>
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	3301      	adds	r3, #1
 8004d56:	613b      	str	r3, [r7, #16]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004d68:	f7fe fd12 	bl	8003790 <mg_to_size_t>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	f083 0301 	eor.w	r3, r3, #1
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <getrange+0xe0>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	e01a      	b.n	8004db2 <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d015      	beq.n	8004dae <getrange+0x112>
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	2b2f      	cmp	r3, #47	; 0x2f
 8004d88:	d911      	bls.n	8004dae <getrange+0x112>
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	2b39      	cmp	r3, #57	; 0x39
 8004d90:	d80d      	bhi.n	8004dae <getrange+0x112>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	3301      	adds	r3, #1
 8004d96:	61bb      	str	r3, [r7, #24]
 8004d98:	e00a      	b.n	8004db0 <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	61fb      	str	r3, [r7, #28]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	1d9a      	adds	r2, r3, #6
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d382      	bcc.n	8004cb2 <getrange+0x16>
 8004dac:	e000      	b.n	8004db0 <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 8004dae:	bf00      	nop
    }
  }
  return (int) numparsed;
 8004db0:	69bb      	ldr	r3, [r7, #24]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3720      	adds	r7, #32
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	08016da4 	.word	0x08016da4

08004dc0 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8004dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc4:	b0ef      	sub	sp, #444	; 0x1bc
 8004dc6:	af0a      	add	r7, sp, #40	; 0x28
 8004dc8:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8004dcc:	f5a4 74b6 	sub.w	r4, r4, #364	; 0x16c
 8004dd0:	6020      	str	r0, [r4, #0]
 8004dd2:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8004dd6:	f5a0 70b8 	sub.w	r0, r0, #368	; 0x170
 8004dda:	6001      	str	r1, [r0, #0]
 8004ddc:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8004de0:	f5a1 71ba 	sub.w	r1, r1, #372	; 0x174
 8004de4:	600a      	str	r2, [r1, #0]
 8004de6:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004dea:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004dee:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004df0:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004df4:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d006      	beq.n	8004e0e <mg_http_serve_file+0x4e>
 8004e00:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e04:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	e000      	b.n	8004e10 <mg_http_serve_file+0x50>
 8004e0e:	4bcd      	ldr	r3, [pc, #820]	; (8005144 <mg_http_serve_file+0x384>)
 8004e10:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  struct mg_fd *fd = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  size_t size = 0;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  time_t mtime = 0;
 8004e20:	f04f 0200 	mov.w	r2, #0
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8004e32:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004e36:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e3a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e3e:	6819      	ldr	r1, [r3, #0]
 8004e40:	4610      	mov	r0, r2
 8004e42:	f005 f925 	bl	800a090 <mg_str_s>
 8004e46:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e4a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
 8004e52:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8004e56:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004e5a:	ca06      	ldmia	r2, {r1, r2}
 8004e5c:	f7ff fea4 	bl	8004ba8 <guess_content_type>
  bool gzip = false;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b

  if (path != NULL) {
 8004e66:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e6a:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d051      	beq.n	8004f18 <mg_http_serve_file+0x158>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8004e74:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e78:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e7c:	49b2      	ldr	r1, [pc, #712]	; (8005148 <mg_http_serve_file+0x388>)
 8004e7e:	6818      	ldr	r0, [r3, #0]
 8004e80:	f7fe feec 	bl	8003c5c <mg_http_get_header>
 8004e84:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 8004e88:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d033      	beq.n	8004ef8 <mg_http_serve_file+0x138>
 8004e90:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e94:	49ad      	ldr	r1, [pc, #692]	; (800514c <mg_http_serve_file+0x38c>)
 8004e96:	4618      	mov	r0, r3
 8004e98:	f005 f8fa 	bl	800a090 <mg_str_s>
 8004e9c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004ea0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ea4:	cb0c      	ldmia	r3, {r2, r3}
 8004ea6:	c903      	ldmia	r1, {r0, r1}
 8004ea8:	f005 f9f6 	bl	800a298 <mg_strstr>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d022      	beq.n	8004ef8 <mg_http_serve_file+0x138>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8004eb2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004eb6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004eba:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4aa3      	ldr	r2, [pc, #652]	; (8005150 <mg_http_serve_file+0x390>)
 8004ec2:	2164      	movs	r1, #100	; 0x64
 8004ec4:	f002 ffbe 	bl	8007e44 <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8004ec8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004ecc:	2201      	movs	r2, #1
 8004ece:	4619      	mov	r1, r3
 8004ed0:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004ed4:	f7fe fa14 	bl	8003300 <mg_fs_open>
 8004ed8:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      if (fd != NULL) gzip = true, path = tmp;
 8004edc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d009      	beq.n	8004ef8 <mg_http_serve_file+0x138>
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8004eea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004eee:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ef2:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004ef6:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8004ef8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <mg_http_serve_file+0x158>
 8004f00:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f04:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f08:	2201      	movs	r2, #1
 8004f0a:	6819      	ldr	r1, [r3, #0]
 8004f0c:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004f10:	f7fe f9f6 	bl	8003300 <mg_fs_open>
 8004f14:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8004f18:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d141      	bne.n	8004fa4 <mg_http_serve_file+0x1e4>
 8004f20:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f24:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d039      	beq.n	8004fa4 <mg_http_serve_file+0x1e4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8004f30:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f34:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004f44:	f7fe f9dc 	bl	8003300 <mg_fs_open>
 8004f48:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8004f4c:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004f50:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f54:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f58:	6819      	ldr	r1, [r3, #0]
 8004f5a:	4610      	mov	r0, r2
 8004f5c:	f005 f898 	bl	800a090 <mg_str_s>
 8004f60:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f64:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f107 0010 	add.w	r0, r7, #16
 8004f70:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004f74:	ca06      	ldmia	r2, {r1, r2}
 8004f76:	f7ff fe17 	bl	8004ba8 <guess_content_type>
 8004f7a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f7e:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8004f82:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004f86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004f8a:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 8004f8e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f92:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004f96:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004f9a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004f9e:	6812      	ldr	r2, [r2, #0]
 8004fa0:	6912      	ldr	r2, [r2, #16]
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8004fa4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00f      	beq.n	8004fcc <mg_http_serve_file+0x20c>
 8004fac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004fb0:	681c      	ldr	r4, [r3, #0]
 8004fb2:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004fb6:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004fba:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004fbe:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004fc2:	6818      	ldr	r0, [r3, #0]
 8004fc4:	47a0      	blx	r4
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d114      	bne.n	8004ff6 <mg_http_serve_file+0x236>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8004fcc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004fd0:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004fdc:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8004fe0:	4b5c      	ldr	r3, [pc, #368]	; (8005154 <mg_http_serve_file+0x394>)
 8004fe2:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004fe6:	6800      	ldr	r0, [r0, #0]
 8004fe8:	f7ff fcec 	bl	80049c4 <mg_http_reply>
    mg_fs_close(fd);
 8004fec:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004ff0:	f7fe f9ae 	bl	8003350 <mg_fs_close>
 8004ff4:	e173      	b.n	80052de <mg_http_serve_file+0x51e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004ff6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004ffa:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004ffe:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8005002:	e9cd 2300 	strd	r2, r3, [sp]
 8005006:	460a      	mov	r2, r1
 8005008:	2140      	movs	r1, #64	; 0x40
 800500a:	f7ff fd4f 	bl	8004aac <mg_http_etag>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d02c      	beq.n	800506e <mg_http_serve_file+0x2ae>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005014:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005018:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800501c:	494e      	ldr	r1, [pc, #312]	; (8005158 <mg_http_serve_file+0x398>)
 800501e:	6818      	ldr	r0, [r3, #0]
 8005020:	f7fe fe1c 	bl	8003c5c <mg_http_get_header>
 8005024:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8005028:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <mg_http_serve_file+0x2ae>
             mg_vcasecmp(inm, etag) == 0) {
 8005030:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005034:	4619      	mov	r1, r3
 8005036:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 800503a:	f005 f8c7 	bl	800a1cc <mg_vcasecmp>
 800503e:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8005040:	2b00      	cmp	r3, #0
 8005042:	d114      	bne.n	800506e <mg_http_serve_file+0x2ae>
    mg_fs_close(fd);
 8005044:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8005048:	f7fe f982 	bl	8003350 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 800504c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005050:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800505c:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8005060:	4b3e      	ldr	r3, [pc, #248]	; (800515c <mg_http_serve_file+0x39c>)
 8005062:	f44f 7198 	mov.w	r1, #304	; 0x130
 8005066:	6800      	ldr	r0, [r0, #0]
 8005068:	f7ff fcac 	bl	80049c4 <mg_http_reply>
 800506c:	e137      	b.n	80052de <mg_http_serve_file+0x51e>
  } else {
    int n, status = 200;
 800506e:	23c8      	movs	r3, #200	; 0xc8
 8005070:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8005074:	2300      	movs	r3, #0
 8005076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800507a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800507e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005082:	2200      	movs	r2, #0
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800508a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 800508e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005092:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005096:	4932      	ldr	r1, [pc, #200]	; (8005160 <mg_http_serve_file+0x3a0>)
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	f7fe fddf 	bl	8003c5c <mg_http_get_header>
 800509e:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
    range[0] = '\0';
 80050a2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050a6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80050aa:	2200      	movs	r2, #0
 80050ac:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 80050ae:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f000 8092 	beq.w	80051dc <mg_http_serve_file+0x41c>
 80050b8:	f107 0290 	add.w	r2, r7, #144	; 0x90
 80050bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050c0:	4619      	mov	r1, r3
 80050c2:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 80050c6:	f7ff fde9 	bl	8004c9c <getrange>
 80050ca:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 80050ce:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f340 8082 	ble.w	80051dc <mg_http_serve_file+0x41c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 80050d8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <mg_http_serve_file+0x330>
 80050e0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80050e4:	1e5a      	subs	r2, r3, #1
 80050e6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050ea:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050ee:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 80050f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80050f4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050f8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d808      	bhi.n	8005114 <mg_http_serve_file+0x354>
 8005102:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005106:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8005110:	429a      	cmp	r2, r3
 8005112:	d829      	bhi.n	8005168 <mg_http_serve_file+0x3a8>
        status = 416;
 8005114:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8005118:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        cl = 0;
 800511c:	2300      	movs	r3, #0
 800511e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8005122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005126:	2200      	movs	r2, #0
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	60fa      	str	r2, [r7, #12]
 800512c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005130:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005134:	e9cd 1200 	strd	r1, r2, [sp]
 8005138:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <mg_http_serve_file+0x3a4>)
 800513a:	2164      	movs	r1, #100	; 0x64
 800513c:	4618      	mov	r0, r3
 800513e:	f002 fe81 	bl	8007e44 <mg_snprintf>
 8005142:	e04b      	b.n	80051dc <mg_http_serve_file+0x41c>
 8005144:	24000030 	.word	0x24000030
 8005148:	08016dac 	.word	0x08016dac
 800514c:	08016dbc 	.word	0x08016dbc
 8005150:	08016dc4 	.word	0x08016dc4
 8005154:	08016dcc 	.word	0x08016dcc
 8005158:	08016dd8 	.word	0x08016dd8
 800515c:	08016af8 	.word	0x08016af8
 8005160:	08016de8 	.word	0x08016de8
 8005164:	08016df0 	.word	0x08016df0
                    (int64_t) size);
      } else {
        status = 206;
 8005168:	23ce      	movs	r3, #206	; 0xce
 800516a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        cl = r2 - r1 + 1;
 800516e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005172:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	3301      	adds	r3, #1
 8005180:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        mg_snprintf(range, sizeof(range),
 8005184:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005188:	2200      	movs	r2, #0
 800518a:	469a      	mov	sl, r3
 800518c:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 800518e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005192:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8005196:	4413      	add	r3, r2
 8005198:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 800519a:	2200      	movs	r2, #0
 800519c:	461d      	mov	r5, r3
 800519e:	4616      	mov	r6, r2
 80051a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80051a4:	2200      	movs	r2, #0
 80051a6:	603b      	str	r3, [r7, #0]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80051ae:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051b2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80051b6:	e9cd 5602 	strd	r5, r6, [sp, #8]
 80051ba:	e9cd ab00 	strd	sl, fp, [sp]
 80051be:	4a4b      	ldr	r2, [pc, #300]	; (80052ec <mg_http_serve_file+0x52c>)
 80051c0:	2164      	movs	r1, #100	; 0x64
 80051c2:	4618      	mov	r0, r3
 80051c4:	f002 fe3e 	bl	8007e44 <mg_snprintf>
        fs->sk(fd->fd, r1);
 80051c8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80051d2:	6812      	ldr	r2, [r2, #0]
 80051d4:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80051d8:	4610      	mov	r0, r2
 80051da:	4798      	blx	r3
      }
    }
    mg_printf(c,
 80051dc:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 80051e0:	f7fe fef4 	bl	8003fcc <mg_http_status_code_str>
 80051e4:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 80051e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    mg_printf(c,
 80051ea:	461d      	mov	r5, r3
 80051ec:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80051f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80051f4:	2100      	movs	r1, #0
 80051f6:	4698      	mov	r8, r3
 80051f8:	4689      	mov	r9, r1
 80051fa:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d001      	beq.n	8005206 <mg_http_serve_file+0x446>
 8005202:	493b      	ldr	r1, [pc, #236]	; (80052f0 <mg_http_serve_file+0x530>)
 8005204:	e000      	b.n	8005208 <mg_http_serve_file+0x448>
 8005206:	493b      	ldr	r1, [pc, #236]	; (80052f4 <mg_http_serve_file+0x534>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8005208:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800520c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 8005214:	2b00      	cmp	r3, #0
 8005216:	d006      	beq.n	8005226 <mg_http_serve_file+0x466>
 8005218:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800521c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	e000      	b.n	8005228 <mg_http_serve_file+0x468>
 8005226:	4b33      	ldr	r3, [pc, #204]	; (80052f4 <mg_http_serve_file+0x534>)
 8005228:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 800522c:	f5a0 70b6 	sub.w	r0, r0, #364	; 0x16c
 8005230:	9308      	str	r3, [sp, #32]
 8005232:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005236:	9307      	str	r3, [sp, #28]
 8005238:	9106      	str	r1, [sp, #24]
 800523a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800523e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005242:	9302      	str	r3, [sp, #8]
 8005244:	9201      	str	r2, [sp, #4]
 8005246:	9500      	str	r5, [sp, #0]
 8005248:	4623      	mov	r3, r4
 800524a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 800524e:	492a      	ldr	r1, [pc, #168]	; (80052f8 <mg_http_serve_file+0x538>)
 8005250:	6800      	ldr	r0, [r0, #0]
 8005252:	f002 f921 	bl	8007498 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 8005256:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800525a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4926      	ldr	r1, [pc, #152]	; (80052fc <mg_http_serve_file+0x53c>)
 8005262:	4618      	mov	r0, r3
 8005264:	f004 ffb2 	bl	800a1cc <mg_vcasecmp>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d11a      	bne.n	80052a4 <mg_http_serve_file+0x4e4>
      c->is_draining = 1;
 800526e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005272:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800527c:	f043 0310 	orr.w	r3, r3, #16
 8005280:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 8005284:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005288:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8005292:	f36f 13c7 	bfc	r3, #7, #1
 8005296:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 800529a:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 800529e:	f7fe f857 	bl	8003350 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 80052a2:	e01c      	b.n	80052de <mg_http_serve_file+0x51e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80052a4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80052a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	3384      	adds	r3, #132	; 0x84
 80052b0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
      c->pfn = static_cb;
 80052b4:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80052b8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a10      	ldr	r2, [pc, #64]	; (8005300 <mg_http_serve_file+0x540>)
 80052c0:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 80052c2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80052c6:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80052d0:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 80052d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80052d6:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80052da:	601a      	str	r2, [r3, #0]
}
 80052dc:	e7ff      	b.n	80052de <mg_http_serve_file+0x51e>
 80052de:	bf00      	nop
 80052e0:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 80052e4:	46bd      	mov	sp, r7
 80052e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ea:	bf00      	nop
 80052ec:	08016e10 	.word	0x08016e10
 80052f0:	08016e38 	.word	0x08016e38
 80052f4:	08016af8 	.word	0x08016af8
 80052f8:	08016e54 	.word	0x08016e54
 80052fc:	08016ea4 	.word	0x08016ea4
 8005300:	08004ae5 	.word	0x08004ae5

08005304 <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 8005304:	b082      	sub	sp, #8
 8005306:	b590      	push	{r4, r7, lr}
 8005308:	b08b      	sub	sp, #44	; 0x2c
 800530a:	af02      	add	r7, sp, #8
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 8005314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005316:	461a      	mov	r2, r3
 8005318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	4613      	mov	r3, r2
 800531e:	4a97      	ldr	r2, [pc, #604]	; (800557c <uri_to_path2+0x278>)
 8005320:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005322:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005324:	f002 fd8e 	bl	8007e44 <mg_snprintf>
 8005328:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800532e:	429a      	cmp	r2, r3
 8005330:	d909      	bls.n	8005346 <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 8005332:	4b93      	ldr	r3, [pc, #588]	; (8005580 <uri_to_path2+0x27c>)
 8005334:	4a93      	ldr	r2, [pc, #588]	; (8005584 <uri_to_path2+0x280>)
 8005336:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f7ff fb42 	bl	80049c4 <mg_http_reply>
    return -1;
 8005340:	f04f 33ff 	mov.w	r3, #4294967295
 8005344:	e113      	b.n	800556e <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 8005346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005348:	3b01      	subs	r3, #1
 800534a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800534c:	4413      	add	r3, r2
 800534e:	2200      	movs	r2, #0
 8005350:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n-1] != '/') path[n++] = '/', path[n] = '\0';
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	3302      	adds	r3, #2
 8005356:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005358:	429a      	cmp	r2, r3
 800535a:	d912      	bls.n	8005382 <uri_to_path2+0x7e>
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	3b01      	subs	r3, #1
 8005360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005362:	4413      	add	r3, r2
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b2f      	cmp	r3, #47	; 0x2f
 8005368:	d00b      	beq.n	8005382 <uri_to_path2+0x7e>
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	617a      	str	r2, [r7, #20]
 8005370:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005372:	4413      	add	r3, r2
 8005374:	222f      	movs	r2, #47	; 0x2f
 8005376:	701a      	strb	r2, [r3, #0]
 8005378:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	4413      	add	r3, r2
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	18d0      	adds	r0, r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005390:	1ad1      	subs	r1, r2, r3
 8005392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	18d4      	adds	r4, r2, r3
 8005398:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	2200      	movs	r2, #0
 80053a0:	9200      	str	r2, [sp, #0]
 80053a2:	4622      	mov	r2, r4
 80053a4:	f7fe fb38 	bl	8003a18 <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 80053a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053aa:	3b01      	subs	r3, #1
 80053ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ae:	4413      	add	r3, r2
 80053b0:	2200      	movs	r2, #0
 80053b2:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 80053b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80053b6:	f005 fa09 	bl	800a7cc <mg_path_is_sane>
 80053ba:	4603      	mov	r3, r0
 80053bc:	f083 0301 	eor.w	r3, r3, #1
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d009      	beq.n	80053da <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 80053c6:	4b70      	ldr	r3, [pc, #448]	; (8005588 <uri_to_path2+0x284>)
 80053c8:	4a6e      	ldr	r2, [pc, #440]	; (8005584 <uri_to_path2+0x280>)
 80053ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	f7ff faf8 	bl	80049c4 <mg_http_reply>
    return -1;
 80053d4:	f04f 33ff 	mov.w	r3, #4294967295
 80053d8:	e0c9      	b.n	800556e <uri_to_path2+0x26a>
  }
  n = strlen(path);
 80053da:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80053dc:	f7fa fff8 	bl	80003d0 <strlen>
 80053e0:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 80053e2:	e007      	b.n	80053f4 <uri_to_path2+0xf0>
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3b01      	subs	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	4413      	add	r3, r2
 80053f0:	2200      	movs	r2, #0
 80053f2:	701a      	strb	r2, [r3, #0]
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d906      	bls.n	8005408 <uri_to_path2+0x104>
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005400:	4413      	add	r3, r2
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	2b2f      	cmp	r3, #47	; 0x2f
 8005406:	d0ed      	beq.n	80053e4 <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	3308      	adds	r3, #8
 800540c:	495f      	ldr	r1, [pc, #380]	; (800558c <uri_to_path2+0x288>)
 800540e:	4618      	mov	r0, r3
 8005410:	f004 feb8 	bl	800a184 <mg_vcmp>
 8005414:	4603      	mov	r3, r0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d007      	beq.n	800542a <uri_to_path2+0x126>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2200      	movs	r2, #0
 8005420:	2100      	movs	r1, #0
 8005422:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005424:	4798      	blx	r3
 8005426:	4603      	mov	r3, r0
 8005428:	e000      	b.n	800542c <uri_to_path2+0x128>
 800542a:	2304      	movs	r3, #4
 800542c:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 800542e:	4b58      	ldr	r3, [pc, #352]	; (8005590 <uri_to_path2+0x28c>)
 8005430:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8005434:	4957      	ldr	r1, [pc, #348]	; (8005594 <uri_to_path2+0x290>)
 8005436:	2004      	movs	r0, #4
 8005438:	f001 fed0 	bl	80071dc <mg_log_prefix>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00f      	beq.n	8005462 <uri_to_path2+0x15e>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4618      	mov	r0, r3
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	9301      	str	r3, [sp, #4]
 8005454:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005456:	9300      	str	r3, [sp, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	4602      	mov	r2, r0
 800545c:	484e      	ldr	r0, [pc, #312]	; (8005598 <uri_to_path2+0x294>)
 800545e:	f001 ff17 	bl	8007290 <mg_log>
              flags));
  if (flags == 0) {
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 8081 	beq.w	800556c <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d020      	beq.n	80054b6 <uri_to_path2+0x1b2>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01c      	beq.n	80054b6 <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	3b01      	subs	r3, #1
 8005486:	4413      	add	r3, r2
 8005488:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 800548a:	2b2f      	cmp	r3, #47	; 0x2f
 800548c:	d013      	beq.n	80054b6 <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 8005492:	461a      	mov	r2, r3
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	4940      	ldr	r1, [pc, #256]	; (800559c <uri_to_path2+0x298>)
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f001 fffc 	bl	8007498 <mg_printf>
    c->is_resp = 0;
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80054a6:	f36f 13c7 	bfc	r3, #7, #1
 80054aa:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 80054ae:	f04f 33ff 	mov.w	r3, #4294967295
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	e05a      	b.n	800556c <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d055      	beq.n	800556c <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80054c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	18d0      	adds	r0, r2, r3
 80054c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	4a34      	ldr	r2, [pc, #208]	; (80055a0 <uri_to_path2+0x29c>)
 80054ce:	4619      	mov	r1, r3
 80054d0:	f002 fcb8 	bl	8007e44 <mg_snprintf>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2200      	movs	r2, #0
 80054e0:	2100      	movs	r1, #0
 80054e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80054e4:	4798      	blx	r3
 80054e6:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d116      	bne.n	800551c <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 80054ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	18d0      	adds	r0, r2, r3
 80054f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <uri_to_path2+0x2a0>)
 80054fc:	4619      	mov	r1, r3
 80054fe:	f002 fca1 	bl	8007e44 <mg_snprintf>
 8005502:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00c      	beq.n	8005522 <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2200      	movs	r2, #0
 800550e:	2100      	movs	r1, #0
 8005510:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005512:	4798      	blx	r3
 8005514:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d002      	beq.n	8005522 <uri_to_path2+0x21e>
      flags = tmp;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e024      	b.n	800556c <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 8005522:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	18d0      	adds	r0, r2, r3
 8005528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <uri_to_path2+0x2a4>)
 8005530:	4619      	mov	r1, r3
 8005532:	f002 fc87 	bl	8007e44 <mg_snprintf>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d012      	beq.n	8005562 <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2200      	movs	r2, #0
 8005542:	2100      	movs	r1, #0
 8005544:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005546:	4798      	blx	r3
 8005548:	61b8      	str	r0, [r7, #24]
                    0 &&
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	330b      	adds	r3, #11
 8005558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800555a:	4413      	add	r3, r2
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
 8005560:	e004      	b.n	800556c <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 8005562:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	4413      	add	r3, r2
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 800556c:	69fb      	ldr	r3, [r7, #28]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8005578:	b002      	add	sp, #8
 800557a:	4770      	bx	lr
 800557c:	0801658c 	.word	0x0801658c
 8005580:	08016eac 	.word	0x08016eac
 8005584:	08016af8 	.word	0x08016af8
 8005588:	08016ec0 	.word	0x08016ec0
 800558c:	08016ed0 	.word	0x08016ed0
 8005590:	080183bc 	.word	0x080183bc
 8005594:	0801645c 	.word	0x0801645c
 8005598:	08016ed4 	.word	0x08016ed4
 800559c:	08016ee8 	.word	0x08016ee8
 80055a0:	08016f24 	.word	0x08016f24
 80055a4:	08016f30 	.word	0x08016f30
 80055a8:	08016f40 	.word	0x08016f40

080055ac <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b09a      	sub	sp, #104	; 0x68
 80055b0:	af06      	add	r7, sp, #24
 80055b2:	6178      	str	r0, [r7, #20]
 80055b4:	6139      	str	r1, [r7, #16]
 80055b6:	60fa      	str	r2, [r7, #12]
 80055b8:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <uri_to_path+0x1c>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	695b      	ldr	r3, [r3, #20]
 80055c6:	e000      	b.n	80055ca <uri_to_path+0x1e>
 80055c8:	4b3b      	ldr	r3, [pc, #236]	; (80056b8 <uri_to_path+0x10c>)
 80055ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f004 fd5a 	bl	800a090 <mg_str_s>
 80055dc:	2300      	movs	r3, #0
 80055de:	627b      	str	r3, [r7, #36]	; 0x24
 80055e0:	2300      	movs	r3, #0
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80055e4:	2300      	movs	r3, #0
 80055e6:	61fb      	str	r3, [r7, #28]
 80055e8:	2300      	movs	r3, #0
 80055ea:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 80055ec:	e040      	b.n	8005670 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d113      	bne.n	800561c <uri_to_path+0x70>
 80055f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055f8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80055fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005600:	e883 0003 	stmia.w	r3, {r0, r1}
 8005604:	463b      	mov	r3, r7
 8005606:	492d      	ldr	r1, [pc, #180]	; (80056bc <uri_to_path+0x110>)
 8005608:	4618      	mov	r0, r3
 800560a:	f004 fd41 	bl	800a090 <mg_str_s>
 800560e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005612:	463a      	mov	r2, r7
 8005614:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005618:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005622:	429a      	cmp	r2, r3
 8005624:	d200      	bcs.n	8005628 <uri_to_path+0x7c>
 8005626:	e023      	b.n	8005670 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	6899      	ldr	r1, [r3, #8]
 800562c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800562e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005632:	4618      	mov	r0, r3
 8005634:	f004 fd49 	bl	800a0ca <mg_str_n>
 8005638:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800563c:	cb0c      	ldmia	r3, {r2, r3}
 800563e:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005642:	c903      	ldmia	r1, {r0, r1}
 8005644:	f004 fde6 	bl	800a214 <mg_strcmp>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d000      	beq.n	8005650 <uri_to_path+0xa4>
 800564e:	e00f      	b.n	8005670 <uri_to_path+0xc4>
    u = k, p = v;
 8005650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005654:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800565c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005660:	f107 031c 	add.w	r3, r7, #28
 8005664:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005668:	e892 0003 	ldmia.w	r2, {r0, r1}
 800566c:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 8005670:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8005674:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8005678:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800567c:	4618      	mov	r0, r3
 800567e:	f005 f828 	bl	800a6d2 <mg_commalist>
 8005682:	4603      	mov	r3, r0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d1b2      	bne.n	80055ee <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 8005688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800568a:	9304      	str	r3, [sp, #16]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	9303      	str	r3, [sp, #12]
 8005690:	aa01      	add	r2, sp, #4
 8005692:	f107 031c 	add.w	r3, r7, #28
 8005696:	e893 0003 	ldmia.w	r3, {r0, r1}
 800569a:	e882 0003 	stmia.w	r2, {r0, r1}
 800569e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a0:	9300      	str	r3, [sp, #0]
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80056a6:	6939      	ldr	r1, [r7, #16]
 80056a8:	6978      	ldr	r0, [r7, #20]
 80056aa:	f7ff fe2b 	bl	8005304 <uri_to_path2>
 80056ae:	4603      	mov	r3, r0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3750      	adds	r7, #80	; 0x50
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	24000030 	.word	0x24000030
 80056bc:	08016ed0 	.word	0x08016ed0

080056c0 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 80056c0:	b590      	push	{r4, r7, lr}
 80056c2:	b0a3      	sub	sp, #140	; 0x8c
 80056c4:	af02      	add	r7, sp, #8
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 80056d2:	f107 0314 	add.w	r3, r7, #20
 80056d6:	2264      	movs	r2, #100	; 0x64
 80056d8:	9200      	str	r2, [sp, #0]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff ff64 	bl	80055ac <uri_to_path>
 80056e4:	67b8      	str	r0, [r7, #120]	; 0x78
  if (flags < 0) {
 80056e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	db35      	blt.n	8005758 <mg_http_serve_dir+0x98>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 80056ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d007      	beq.n	8005706 <mg_http_serve_dir+0x46>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 80056f6:	4b1a      	ldr	r3, [pc, #104]	; (8005760 <mg_http_serve_dir+0xa0>)
 80056f8:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <mg_http_serve_dir+0xa4>)
 80056fa:	f240 1193 	movw	r1, #403	; 0x193
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff f960 	bl	80049c4 <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 8005704:	e028      	b.n	8005758 <mg_http_serve_dir+0x98>
  } else if (flags && sp != NULL &&
 8005706:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005708:	2b00      	cmp	r3, #0
 800570a:	d01e      	beq.n	800574a <mg_http_serve_dir+0x8a>
 800570c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800570e:	2b00      	cmp	r3, #0
 8005710:	d01b      	beq.n	800574a <mg_http_serve_dir+0x8a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 8005712:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005714:	f7fa fe5c 	bl	80003d0 <strlen>
 8005718:	4604      	mov	r4, r0
 800571a:	f107 0314 	add.w	r3, r7, #20
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa fe56 	bl	80003d0 <strlen>
 8005724:	4603      	mov	r3, r0
 8005726:	f107 0214 	add.w	r2, r7, #20
 800572a:	4621      	mov	r1, r4
 800572c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800572e:	f004 fecf 	bl	800a4d0 <mg_globmatch>
 8005732:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 8005734:	2b00      	cmp	r3, #0
 8005736:	d008      	beq.n	800574a <mg_http_serve_dir+0x8a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f107 0214 	add.w	r2, r7, #20
 8005740:	4619      	mov	r1, r3
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f004 fc90 	bl	800a068 <mg_http_serve_ssi>
}
 8005748:	e006      	b.n	8005758 <mg_http_serve_dir+0x98>
    mg_http_serve_file(c, hm, path, opts);
 800574a:	f107 0214 	add.w	r2, r7, #20
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f7ff fb34 	bl	8004dc0 <mg_http_serve_file>
}
 8005758:	bf00      	nop
 800575a:	3784      	adds	r7, #132	; 0x84
 800575c:	46bd      	mov	sp, r7
 800575e:	bd90      	pop	{r4, r7, pc}
 8005760:	08016f50 	.word	0x08016f50
 8005764:	08016af8 	.word	0x08016af8

08005768 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b0cf      	sub	sp, #316	; 0x13c
 800576c:	af02      	add	r7, sp, #8
 800576e:	f507 7498 	add.w	r4, r7, #304	; 0x130
 8005772:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 8005776:	6020      	str	r0, [r4, #0]
 8005778:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800577c:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 8005780:	6001      	str	r1, [r0, #0]
 8005782:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8005786:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 800578a:	600a      	str	r2, [r1, #0]
 800578c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005790:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8005794:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 8005796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579a:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800579e:	497a      	ldr	r1, [pc, #488]	; (8005988 <mg_http_creds+0x220>)
 80057a0:	6818      	ldr	r0, [r3, #0]
 80057a2:	f7fe fa5b 	bl	8003c5c <mg_http_get_header>
 80057a6:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  user[0] = pass[0] = '\0';
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2200      	movs	r2, #0
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	781a      	ldrb	r2, [r3, #0]
 80057c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057c8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 80057d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d05f      	beq.n	8005898 <mg_http_creds+0x130>
 80057d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	2b06      	cmp	r3, #6
 80057e0:	d95a      	bls.n	8005898 <mg_http_creds+0x130>
 80057e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2206      	movs	r2, #6
 80057ea:	4968      	ldr	r1, [pc, #416]	; (800598c <mg_http_creds+0x224>)
 80057ec:	4618      	mov	r0, r3
 80057ee:	f00f ff08 	bl	8015602 <memcmp>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d14f      	bne.n	8005898 <mg_http_creds+0x130>
    char buf[256];
    int n = mg_base64_decode(v->ptr + 6, (int) v->len - 6, buf);
 80057f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	1d98      	adds	r0, r3, #6
 8005800:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	3b06      	subs	r3, #6
 8005808:	f107 0214 	add.w	r2, r7, #20
 800580c:	4619      	mov	r1, r3
 800580e:	f7fb fec7 	bl	80015a0 <mg_base64_decode>
 8005812:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? (size_t) n : 0);
 8005816:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800581a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800581e:	461a      	mov	r2, r3
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	213a      	movs	r1, #58	; 0x3a
 8005826:	4618      	mov	r0, r3
 8005828:	f7fa fd82 	bl	8000330 <memchr>
 800582c:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (p != NULL) {
 8005830:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80a1 	beq.w	800597c <mg_http_creds+0x214>
      mg_snprintf(user, userlen, "%.*s", (int) (p - buf), buf);
 800583a:	f107 0314 	add.w	r3, r7, #20
 800583e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005842:	1ad2      	subs	r2, r2, r3
 8005844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005848:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 8005854:	f107 0314 	add.w	r3, r7, #20
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	4613      	mov	r3, r2
 800585c:	4a4c      	ldr	r2, [pc, #304]	; (8005990 <mg_http_creds+0x228>)
 800585e:	6809      	ldr	r1, [r1, #0]
 8005860:	6800      	ldr	r0, [r0, #0]
 8005862:	f002 faef 	bl	8007e44 <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (int) (p - buf) - 1, p + 1);
 8005866:	f107 0314 	add.w	r3, r7, #20
 800586a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800586e:	1ad3      	subs	r3, r2, r3
 8005870:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	1e5a      	subs	r2, r3, #1
 8005878:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800587c:	3301      	adds	r3, #1
 800587e:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8005882:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 8005886:	9300      	str	r3, [sp, #0]
 8005888:	4613      	mov	r3, r2
 800588a:	4a41      	ldr	r2, [pc, #260]	; (8005990 <mg_http_creds+0x228>)
 800588c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005890:	6800      	ldr	r0, [r0, #0]
 8005892:	f002 fad7 	bl	8007e44 <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 8005896:	e071      	b.n	800597c <mg_http_creds+0x214>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->ptr, "Bearer ", 7) == 0) {
 8005898:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589c:	2b00      	cmp	r3, #0
 800589e:	d024      	beq.n	80058ea <mg_http_creds+0x182>
 80058a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	2b07      	cmp	r3, #7
 80058a8:	d91f      	bls.n	80058ea <mg_http_creds+0x182>
 80058aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2207      	movs	r2, #7
 80058b2:	4938      	ldr	r1, [pc, #224]	; (8005994 <mg_http_creds+0x22c>)
 80058b4:	4618      	mov	r0, r3
 80058b6:	f00f fea4 	bl	8015602 <memcmp>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d114      	bne.n	80058ea <mg_http_creds+0x182>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->ptr + 7);
 80058c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	1fda      	subs	r2, r3, #7
 80058c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3307      	adds	r3, #7
 80058d0:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80058d4:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	4a2c      	ldr	r2, [pc, #176]	; (8005990 <mg_http_creds+0x228>)
 80058de:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80058e2:	6800      	ldr	r0, [r0, #0]
 80058e4:	f002 faae 	bl	8007e44 <mg_snprintf>
 80058e8:	e049      	b.n	800597e <mg_http_creds+0x216>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 80058ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ee:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80058f2:	4929      	ldr	r1, [pc, #164]	; (8005998 <mg_http_creds+0x230>)
 80058f4:	6818      	ldr	r0, [r3, #0]
 80058f6:	f7fe f9b1 	bl	8003c5c <mg_http_get_header>
 80058fa:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 80058fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005902:	2b00      	cmp	r3, #0
 8005904:	d028      	beq.n	8005958 <mg_http_creds+0x1f0>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 8005906:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800590a:	220c      	movs	r2, #12
 800590c:	4923      	ldr	r1, [pc, #140]	; (800599c <mg_http_creds+0x234>)
 800590e:	4618      	mov	r0, r3
 8005910:	f004 fbdb 	bl	800a0ca <mg_str_n>
 8005914:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8005918:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800591c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005926:	ca06      	ldmia	r2, {r1, r2}
 8005928:	f000 f863 	bl	80059f2 <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.ptr);
 800592c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005930:	2b00      	cmp	r3, #0
 8005932:	d024      	beq.n	800597e <mg_http_creds+0x216>
 8005934:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005938:	4619      	mov	r1, r3
 800593a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800593e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005942:	f5a2 7098 	sub.w	r0, r2, #304	; 0x130
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	460b      	mov	r3, r1
 800594a:	4a11      	ldr	r2, [pc, #68]	; (8005990 <mg_http_creds+0x228>)
 800594c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005950:	6800      	ldr	r0, [r0, #0]
 8005952:	f002 fa77 	bl	8007e44 <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 8005956:	e012      	b.n	800597e <mg_http_creds+0x216>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 8005958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800595c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f103 0010 	add.w	r0, r3, #16
 8005966:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596a:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 800596e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	4909      	ldr	r1, [pc, #36]	; (800599c <mg_http_creds+0x234>)
 8005976:	f7fd ffe0 	bl	800393a <mg_http_get_var>
}
 800597a:	e000      	b.n	800597e <mg_http_creds+0x216>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 800597c:	bf00      	nop
}
 800597e:	bf00      	nop
 8005980:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8005984:	46bd      	mov	sp, r7
 8005986:	bd90      	pop	{r4, r7, pc}
 8005988:	08016f5c 	.word	0x08016f5c
 800598c:	08016f6c 	.word	0x08016f6c
 8005990:	0801658c 	.word	0x0801658c
 8005994:	08016f74 	.word	0x08016f74
 8005998:	08016f7c 	.word	0x08016f7c
 800599c:	08016f84 	.word	0x08016f84

080059a0 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	1d3b      	adds	r3, r7, #4
 80059aa:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 80059ae:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.ptr + 1, s.len - 2)
             : s;
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d913      	bls.n	80059dc <stripquotes+0x3c>
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b22      	cmp	r3, #34	; 0x22
 80059ba:	d10f      	bne.n	80059dc <stripquotes+0x3c>
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	4413      	add	r3, r2
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	2b22      	cmp	r3, #34	; 0x22
 80059c8:	d108      	bne.n	80059dc <stripquotes+0x3c>
             ? mg_str_n(s.ptr + 1, s.len - 2)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	1c59      	adds	r1, r3, #1
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	1e9a      	subs	r2, r3, #2
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	4618      	mov	r0, r3
 80059d6:	f004 fb78 	bl	800a0ca <mg_str_n>
             : s;
 80059da:	e006      	b.n	80059ea <stripquotes+0x4a>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	461a      	mov	r2, r3
 80059e0:	1d3b      	adds	r3, r7, #4
 80059e2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80059e6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 80059f2:	b082      	sub	sp, #8
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	1d38      	adds	r0, r7, #4
 80059fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005a04:	2300      	movs	r3, #0
 8005a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a08:	e072      	b.n	8005af0 <mg_http_get_header_var+0xfe>
    if (s.ptr[i + v.len] == '=' && memcmp(&s.ptr[i], v.ptr, v.len) == 0) {
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a10:	440b      	add	r3, r1
 8005a12:	4413      	add	r3, r2
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	2b3d      	cmp	r3, #61	; 0x3d
 8005a18:	d167      	bne.n	8005aea <mg_http_get_header_var+0xf8>
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a1e:	4413      	add	r3, r2
 8005a20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a24:	4618      	mov	r0, r3
 8005a26:	f00f fdec 	bl	8015602 <memcmp>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d15c      	bne.n	8005aea <mg_http_get_header_var+0xf8>
      const char *p = &s.ptr[i + v.len + 1], *b = p, *x = &s.ptr[s.len];
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	440b      	add	r3, r1
 8005a38:	3301      	adds	r3, #1
 8005a3a:	4413      	add	r3, r2
 8005a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a40:	627b      	str	r3, [r7, #36]	; 0x24
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4413      	add	r3, r2
 8005a48:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 8005a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d205      	bcs.n	8005a5e <mg_http_get_header_var+0x6c>
 8005a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b22      	cmp	r3, #34	; 0x22
 8005a58:	d101      	bne.n	8005a5e <mg_http_get_header_var+0x6c>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e000      	b.n	8005a60 <mg_http_get_header_var+0x6e>
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 8005a62:	e002      	b.n	8005a6a <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 8005a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a66:	3301      	adds	r3, #1
 8005a68:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p < x &&
 8005a6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6c:	6a3b      	ldr	r3, [r7, #32]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d227      	bcs.n	8005ac2 <mg_http_get_header_var+0xd0>
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8005a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d003      	beq.n	8005a88 <mg_http_get_header_var+0x96>
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b22      	cmp	r3, #34	; 0x22
 8005a86:	d001      	beq.n	8005a8c <mg_http_get_header_var+0x9a>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e000      	b.n	8005a8e <mg_http_get_header_var+0x9c>
 8005a8c:	2300      	movs	r3, #0
      while (p < x &&
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e5      	bne.n	8005a64 <mg_http_get_header_var+0x72>
 8005a98:	e013      	b.n	8005ac2 <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 8005a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b3b      	cmp	r3, #59	; 0x3b
 8005aa0:	d009      	beq.n	8005ab6 <mg_http_get_header_var+0xc4>
 8005aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d005      	beq.n	8005ab6 <mg_http_get_header_var+0xc4>
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	2b2c      	cmp	r3, #44	; 0x2c
 8005ab0:	d001      	beq.n	8005ab6 <mg_http_get_header_var+0xc4>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e000      	b.n	8005ab8 <mg_http_get_header_var+0xc6>
 8005ab6:	2300      	movs	r3, #0
      while (p < x &&
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1d0      	bne.n	8005a64 <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.ptr, (int) v.len,
      // v.ptr, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 8005ac2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	461a      	mov	r2, r3
 8005ace:	f107 0314 	add.w	r3, r7, #20
 8005ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f004 faf8 	bl	800a0ca <mg_str_n>
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005ae4:	f7ff ff5c 	bl	80059a0 <stripquotes>
 8005ae8:	e012      	b.n	8005b10 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aec:	3301      	adds	r3, #1
 8005aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005af0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d006      	beq.n	8005b04 <mg_http_get_header_var+0x112>
 8005af6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	4413      	add	r3, r2
 8005afc:	1c9a      	adds	r2, r3, #2
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d382      	bcc.n	8005a0a <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 fadd 	bl	800a0ca <mg_str_n>
}
 8005b10:	68f8      	ldr	r0, [r7, #12]
 8005b12:	3730      	adds	r7, #48	; 0x30
 8005b14:	46bd      	mov	sp, r7
 8005b16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b1a:	b002      	add	sp, #8
 8005b1c:	4770      	bx	lr

08005b1e <mg_http_match_uri>:

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 8005b1e:	b580      	push	{r7, lr}
 8005b20:	b086      	sub	sp, #24
 8005b22:	af02      	add	r7, sp, #8
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8005b28:	f107 0308 	add.w	r3, r7, #8
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f004 faae 	bl	800a090 <mg_str_s>
 8005b34:	6879      	ldr	r1, [r7, #4]
 8005b36:	2300      	movs	r3, #0
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	f107 0308 	add.w	r3, r7, #8
 8005b3e:	cb0c      	ldmia	r3, {r2, r3}
 8005b40:	3108      	adds	r1, #8
 8005b42:	c903      	ldmia	r1, {r0, r1}
 8005b44:	f004 fbdd 	bl	800a302 <mg_match>
 8005b48:	4603      	mov	r3, r0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 8005b52:	b590      	push	{r4, r7, lr}
 8005b54:	b087      	sub	sp, #28
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	f107 0408 	add.w	r4, r7, #8
 8005b5c:	e884 0003 	stmia.w	r4, {r0, r1}
 8005b60:	607a      	str	r2, [r7, #4]
 8005b62:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 8005b64:	2300      	movs	r3, #0
 8005b66:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 8005b68:	e002      	b.n	8005b70 <getchunk+0x1e>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	697a      	ldr	r2, [r7, #20]
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d20b      	bcs.n	8005b90 <getchunk+0x3e>
 8005b78:	68ba      	ldr	r2, [r7, #8]
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b0d      	cmp	r3, #13
 8005b82:	d005      	beq.n	8005b90 <getchunk+0x3e>
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	4413      	add	r3, r2
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b0a      	cmp	r3, #10
 8005b8e:	d1ec      	bne.n	8005b6a <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6979      	ldr	r1, [r7, #20]
 8005b94:	4618      	mov	r0, r3
 8005b96:	f004 fdcf 	bl	800a738 <mg_unhexn>
 8005b9a:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 8005b9c:	68fa      	ldr	r2, [r7, #12]
 8005b9e:	6979      	ldr	r1, [r7, #20]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	440b      	add	r3, r1
 8005ba4:	3304      	adds	r3, #4
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d201      	bcs.n	8005bae <getchunk+0x5c>
 8005baa:	2300      	movs	r3, #0
 8005bac:	e02a      	b.n	8005c04 <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	2b0d      	cmp	r3, #13
 8005bb8:	d106      	bne.n	8005bc8 <getchunk+0x76>
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	4413      	add	r3, r2
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b0a      	cmp	r3, #10
 8005bc6:	d001      	beq.n	8005bcc <getchunk+0x7a>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	e01b      	b.n	8005c04 <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3302      	adds	r3, #2
 8005bd6:	4413      	add	r3, r2
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	2b0d      	cmp	r3, #13
 8005bdc:	d108      	bne.n	8005bf0 <getchunk+0x9e>
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	440b      	add	r3, r1
 8005be6:	3303      	adds	r3, #3
 8005be8:	4413      	add	r3, r2
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b0a      	cmp	r3, #10
 8005bee:	d001      	beq.n	8005bf4 <getchunk+0xa2>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e007      	b.n	8005c04 <getchunk+0xb2>
  *prefixlen = i + 2;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1c9a      	adds	r2, r3, #2
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	601a      	str	r2, [r3, #0]
  *datalen = n;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	601a      	str	r2, [r3, #0]
  return true;
 8005c02:	2301      	movs	r3, #1
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	371c      	adds	r7, #28
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd90      	pop	{r4, r7, pc}

08005c0c <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8005c14:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <mg_is_chunked+0x40>)
 8005c16:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8005c18:	490d      	ldr	r1, [pc, #52]	; (8005c50 <mg_is_chunked+0x44>)
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f7fe f81e 	bl	8003c5c <mg_http_get_header>
 8005c20:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d008      	beq.n	8005c3a <mg_is_chunked+0x2e>
 8005c28:	68f9      	ldr	r1, [r7, #12]
 8005c2a:	68b8      	ldr	r0, [r7, #8]
 8005c2c:	f004 face 	bl	800a1cc <mg_vcasecmp>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d101      	bne.n	8005c3a <mg_is_chunked+0x2e>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <mg_is_chunked+0x30>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	b2db      	uxtb	r3, r3
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	08017008 	.word	0x08017008
 8005c50:	08017010 	.word	0x08017010

08005c54 <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 8005c54:	b590      	push	{r4, r7, lr}
 8005c56:	b095      	sub	sp, #84	; 0x54
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6178      	str	r0, [r7, #20]
 8005c5c:	6139      	str	r1, [r7, #16]
 8005c5e:	60fa      	str	r2, [r7, #12]
 8005c60:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	4413      	add	r3, r2
 8005c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	1ad3      	subs	r3, r2, r3
 8005c78:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c82:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	643b      	str	r3, [r7, #64]	; 0x40
 8005c88:	2300      	movs	r3, #0
 8005c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 8005c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d851      	bhi.n	8005d3e <deliver_chunked_chunks+0xea>
 8005c9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ca2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ca6:	4413      	add	r3, r2
 8005ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005caa:	e048      	b.n	8005d3e <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 8005cb2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cb6:	18d0      	adds	r0, r2, r3
 8005cb8:	6a3a      	ldr	r2, [r7, #32]
 8005cba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cbc:	4413      	add	r3, r2
 8005cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cc0:	4413      	add	r3, r2
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f00f fcac 	bl	8015622 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 8005cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ccc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cce:	18d1      	adds	r1, r2, r3
 8005cd0:	69fa      	ldr	r2, [r7, #28]
 8005cd2:	68fc      	ldr	r4, [r7, #12]
 8005cd4:	463b      	mov	r3, r7
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f004 f9f7 	bl	800a0ca <mg_str_n>
 8005cdc:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005ce0:	463a      	mov	r2, r7
 8005ce2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ce6:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	210b      	movs	r1, #11
 8005cee:	6978      	ldr	r0, [r7, #20]
 8005cf0:	f7fc fa96 	bl	8002220 <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 8005cf4:	6a3a      	ldr	r2, [r7, #32]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	441a      	add	r2, r3
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	4413      	add	r3, r2
 8005cfe:	3302      	adds	r3, #2
 8005d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d02:	6a3a      	ldr	r2, [r7, #32]
 8005d04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d06:	4413      	add	r3, r2
 8005d08:	3302      	adds	r3, #2
 8005d0a:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d10:	4413      	add	r3, r2
 8005d12:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d008      	beq.n	8005d30 <deliver_chunked_chunks+0xdc>
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	647b      	str	r3, [r7, #68]	; 0x44
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	425b      	negs	r3, r3
 8005d2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d2c:	4413      	add	r3, r2
 8005d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	bf0c      	ite	eq
 8005d36:	2301      	moveq	r3, #1
 8005d38:	2300      	movne	r3, #0
 8005d3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005d3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005d42:	f083 0301 	eor.w	r3, r3, #1
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d016      	beq.n	8005d7a <deliver_chunked_chunks+0x126>
 8005d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d50:	18d1      	adds	r1, r2, r3
 8005d52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d56:	1ad2      	subs	r2, r2, r3
 8005d58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f004 f9b4 	bl	800a0ca <mg_str_n>
 8005d62:	f107 031c 	add.w	r3, r7, #28
 8005d66:	f107 0220 	add.w	r2, r7, #32
 8005d6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005d6e:	c903      	ldmia	r1, {r0, r1}
 8005d70:	f7ff feef 	bl	8005b52 <getchunk>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d198      	bne.n	8005cac <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d84:	4413      	add	r3, r2
 8005d86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d88:	4619      	mov	r1, r3
 8005d8a:	f000 fb13 	bl	80063b4 <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d96:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005d98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	461a      	mov	r2, r3
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 8005da4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d019      	beq.n	8005de0 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005db0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db8:	441a      	add	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d009      	beq.n	8005de0 <deliver_chunked_chunks+0x18c>
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	3338      	adds	r3, #56	; 0x38
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 faed 	bl	80063b4 <mg_iobuf_del>
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 8005de0:	bf00      	nop
 8005de2:	3754      	adds	r7, #84	; 0x54
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd90      	pop	{r4, r7, pc}

08005de8 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 8005de8:	b590      	push	{r4, r7, lr}
 8005dea:	b08b      	sub	sp, #44	; 0x2c
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6178      	str	r0, [r7, #20]
 8005df0:	6139      	str	r1, [r7, #16]
 8005df2:	60fa      	str	r2, [r7, #12]
 8005df4:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dfa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e08:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	18d1      	adds	r1, r2, r3
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	1ad2      	subs	r2, r2, r3
 8005e1a:	68fc      	ldr	r4, [r7, #12]
 8005e1c:	463b      	mov	r3, r7
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f004 f953 	bl	800a0ca <mg_str_n>
 8005e24:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005e28:	463a      	mov	r2, r7
 8005e2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e2e:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d812      	bhi.n	8005e64 <deliver_normal_chunks+0x7c>
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d10f      	bne.n	8005e64 <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5c:	441a      	add	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d805      	bhi.n	8005e7c <deliver_normal_chunks+0x94>
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	e000      	b.n	8005e7e <deliver_normal_chunks+0x96>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e86:	69fa      	ldr	r2, [r7, #28]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d203      	bcs.n	8005e94 <deliver_normal_chunks+0xac>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	69fa      	ldr	r2, [r7, #28]
 8005e90:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d004      	beq.n	8005ea8 <deliver_normal_chunks+0xc0>
 8005e9e:	68fa      	ldr	r2, [r7, #12]
 8005ea0:	210b      	movs	r1, #11
 8005ea2:	6978      	ldr	r0, [r7, #20]
 8005ea4:	f7fc f9bc 	bl	8002220 <mg_call>
  processed += hm->chunk.len;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005eae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb0:	4413      	add	r3, r2
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ebc:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d31c      	bcc.n	8005f04 <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	210b      	movs	r1, #11
 8005ed6:	6978      	ldr	r0, [r7, #20]
 8005ed8:	f7fc f9a2 	bl	8002220 <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d013      	beq.n	8005f10 <deliver_normal_chunks+0x128>
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d010      	beq.n	8005f10 <deliver_normal_chunks+0x128>
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	3338      	adds	r3, #56	; 0x38
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 fa5c 	bl	80063b4 <mg_iobuf_del>
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 8005f02:	e005      	b.n	8005f10 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 8005f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005f10:	bf00      	nop
 8005f12:	372c      	adds	r7, #44	; 0x2c
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd90      	pop	{r4, r7, pc}

08005f18 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	f507 740e 	add.w	r4, r7, #568	; 0x238
 8005f24:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8005f28:	6020      	str	r0, [r4, #0]
 8005f2a:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005f2e:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 8005f32:	6001      	str	r1, [r0, #0]
 8005f34:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8005f38:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 8005f3c:	600a      	str	r2, [r1, #0]
 8005f3e:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005f42:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005f46:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 8005f48:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f4c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b07      	cmp	r3, #7
 8005f54:	f000 80e9 	beq.w	800612a <http_cb+0x212>
 8005f58:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f5c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b09      	cmp	r3, #9
 8005f64:	f040 80f2 	bne.w	800614c <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005f68:	e0df      	b.n	800612a <http_cb+0x212>
      bool next = false;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 8005f70:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f74:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005f7c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f80:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f88:	f107 0210 	add.w	r2, r7, #16
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f7fd ff0b 	bl	8003da8 <mg_http_parse>
 8005f92:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 8005f96:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	da17      	bge.n	8005fce <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 8005f9e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fa2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	4619      	mov	r1, r3
 8005fac:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fb0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb8:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005fbc:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8005fc0:	460a      	mov	r2, r1
 8005fc2:	4965      	ldr	r1, [pc, #404]	; (8006158 <http_cb+0x240>)
 8005fc4:	6800      	ldr	r0, [r0, #0]
 8005fc6:	f7fc f94d 	bl	8002264 <mg_error>
        break;
 8005fca:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 8005fcc:	e0be      	b.n	800614c <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 8005fce:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005fd2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005fdc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	f040 809b 	bne.w	800611e <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 8005fe8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 8098 	beq.w	8006122 <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 8005ff2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ff6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b09      	cmp	r3, #9
 8005ffe:	d125      	bne.n	800604c <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 8006000:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006004:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800600c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006010:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8006014:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 8006018:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800601c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8006020:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006024:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8006028:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 800602c:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8006030:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8006034:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8006038:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 800603c:	1a8a      	subs	r2, r1, r2
 800603e:	1a9a      	subs	r2, r3, r2
 8006040:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8006044:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8006048:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 800604c:	f107 0310 	add.w	r3, r7, #16
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff fddb 	bl	8005c0c <mg_is_chunked>
 8006056:	4603      	mov	r3, r0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 800605c:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8006060:	f207 2333 	addw	r3, r7, #563	; 0x233
 8006064:	f107 0210 	add.w	r2, r7, #16
 8006068:	f507 700e 	add.w	r0, r7, #568	; 0x238
 800606c:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8006070:	6800      	ldr	r0, [r0, #0]
 8006072:	f7ff fdef 	bl	8005c54 <deliver_chunked_chunks>
 8006076:	e00c      	b.n	8006092 <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 8006078:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 800607c:	f207 2333 	addw	r3, r7, #563	; 0x233
 8006080:	f107 0210 	add.w	r2, r7, #16
 8006084:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8006088:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f7ff feab 	bl	8005de8 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 8006092:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8006096:	2b00      	cmp	r3, #0
 8006098:	d000      	beq.n	800609c <http_cb+0x184>
 800609a:	e046      	b.n	800612a <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 800609c:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060a0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060a8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060ac:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80060b0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d336      	bcc.n	8006126 <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 80060b8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060bc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00a      	beq.n	80060e6 <http_cb+0x1ce>
 80060d0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060d4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80060de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060e2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 80060e6:	f107 0210 	add.w	r2, r7, #16
 80060ea:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060ee:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80060f2:	210a      	movs	r1, #10
 80060f4:	6818      	ldr	r0, [r3, #0]
 80060f6:	f7fc f893 	bl	8002220 <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 80060fa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80060fe:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8006108:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800610c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8006110:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8006114:	461a      	mov	r2, r3
 8006116:	2100      	movs	r1, #0
 8006118:	f000 f94c 	bl	80063b4 <mg_iobuf_del>
 800611c:	e005      	b.n	800612a <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 800611e:	bf00      	nop
 8006120:	e014      	b.n	800614c <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 8006122:	bf00      	nop
 8006124:	e012      	b.n	800614c <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 8006126:	bf00      	nop
}
 8006128:	e010      	b.n	800614c <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 800612a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800612e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006136:	2b00      	cmp	r3, #0
 8006138:	d008      	beq.n	800614c <http_cb+0x234>
 800613a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800613e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	f47f af0f 	bne.w	8005f6a <http_cb+0x52>
}
 800614c:	bf00      	nop
 800614e:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8006152:	46bd      	mov	sp, r7
 8006154:	bd90      	pop	{r4, r7, pc}
 8006156:	bf00      	nop
 8006158:	08017024 	.word	0x08017024

0800615c <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 800615c:	b580      	push	{r7, lr}
 800615e:	b086      	sub	sp, #24
 8006160:	af00      	add	r7, sp, #0
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	68b9      	ldr	r1, [r7, #8]
 8006170:	68f8      	ldr	r0, [r7, #12]
 8006172:	f001 fcfd 	bl	8007b70 <mg_listen>
 8006176:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d002      	beq.n	8006184 <mg_http_listen+0x28>
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	4a03      	ldr	r2, [pc, #12]	; (8006190 <mg_http_listen+0x34>)
 8006182:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 8006184:	697b      	ldr	r3, [r7, #20]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	08005f19 	.word	0x08005f19

08006194 <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <zeromem+0x26>
    while (len--) *buf++ = 0;
 80061a4:	e004      	b.n	80061b0 <zeromem+0x1c>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	1c5a      	adds	r2, r3, #1
 80061aa:	607a      	str	r2, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	1e5a      	subs	r2, r3, #1
 80061b4:	603a      	str	r2, [r7, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d1f5      	bne.n	80061a6 <zeromem+0x12>
  }
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <roundup>:

static size_t roundup(size_t size, size_t align) {
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <roundup+0x26>
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	4413      	add	r3, r2
 80061dc:	1e5a      	subs	r2, r3, #1
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	fb02 f303 	mul.w	r3, r2, r3
 80061ea:	e000      	b.n	80061ee <roundup+0x28>
 80061ec:	687b      	ldr	r3, [r7, #4]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	370c      	adds	r7, #12
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
	...

080061fc <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 80061fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006200:	b088      	sub	sp, #32
 8006202:	af02      	add	r7, sp, #8
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8006208:	2301      	movs	r3, #1
 800620a:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	4619      	mov	r1, r3
 8006212:	6838      	ldr	r0, [r7, #0]
 8006214:	f7ff ffd7 	bl	80061c6 <roundup>
 8006218:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d117      	bne.n	8006250 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f7ff ffb2 	bl	8006194 <zeromem>
    free(io->buf);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4618      	mov	r0, r3
 8006236:	f00e ff2b 	bl	8015090 <free>
    io->buf = NULL;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	605a      	str	r2, [r3, #4]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	609a      	str	r2, [r3, #8]
 800624e:	e052      	b.n	80062f6 <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	683a      	ldr	r2, [r7, #0]
 8006256:	429a      	cmp	r2, r3
 8006258:	d04d      	beq.n	80062f6 <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	2001      	movs	r0, #1
 800625e:	f00e fef1 	bl	8015044 <calloc>
 8006262:	4603      	mov	r3, r0
 8006264:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 8006266:	693b      	ldr	r3, [r7, #16]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d028      	beq.n	80062be <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	683a      	ldr	r2, [r7, #0]
 8006272:	4293      	cmp	r3, r2
 8006274:	bf28      	it	cs
 8006276:	4613      	movcs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d00a      	beq.n	8006296 <mg_iobuf_resize+0x9a>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d006      	beq.n	8006296 <mg_iobuf_resize+0x9a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	4619      	mov	r1, r3
 8006290:	6938      	ldr	r0, [r7, #16]
 8006292:	f00f f9c6 	bl	8015622 <memmove>
      zeromem(io->buf, io->size);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	4619      	mov	r1, r3
 80062a0:	4610      	mov	r0, r2
 80062a2:	f7ff ff77 	bl	8006194 <zeromem>
      free(io->buf);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f00e fef0 	bl	8015090 <free>
      io->buf = (unsigned char *) p;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	605a      	str	r2, [r3, #4]
 80062bc:	e01b      	b.n	80062f6 <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80062c2:	4b10      	ldr	r3, [pc, #64]	; (8006304 <mg_iobuf_resize+0x108>)
 80062c4:	f640 1246 	movw	r2, #2374	; 0x946
 80062c8:	490f      	ldr	r1, [pc, #60]	; (8006308 <mg_iobuf_resize+0x10c>)
 80062ca:	2001      	movs	r0, #1
 80062cc:	f000 ff86 	bl	80071dc <mg_log_prefix>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <mg_iobuf_resize+0xfa>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	4698      	mov	r8, r3
 80062de:	4691      	mov	r9, r2
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	2200      	movs	r2, #0
 80062e4:	461c      	mov	r4, r3
 80062e6:	4615      	mov	r5, r2
 80062e8:	e9cd 4500 	strd	r4, r5, [sp]
 80062ec:	4642      	mov	r2, r8
 80062ee:	464b      	mov	r3, r9
 80062f0:	4806      	ldr	r0, [pc, #24]	; (800630c <mg_iobuf_resize+0x110>)
 80062f2:	f000 ffcd 	bl	8007290 <mg_log>
    }
  }
  return ok;
 80062f6:	697b      	ldr	r3, [r7, #20]
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3718      	adds	r7, #24
 80062fc:	46bd      	mov	sp, r7
 80062fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006302:	bf00      	nop
 8006304:	080183cc 	.word	0x080183cc
 8006308:	0801645c 	.word	0x0801645c
 800630c:	08017070 	.word	0x08017070

08006310 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	689a      	ldr	r2, [r3, #8]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7ff ff4a 	bl	80061c6 <roundup>
 8006332:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 8006334:	6979      	ldr	r1, [r7, #20]
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f7ff ff60 	bl	80061fc <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	429a      	cmp	r2, r3
 8006344:	d001      	beq.n	800634a <mg_iobuf_add+0x3a>
 8006346:	2300      	movs	r3, #0
 8006348:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	68ba      	ldr	r2, [r7, #8]
 8006350:	429a      	cmp	r2, r3
 8006352:	d210      	bcs.n	8006376 <mg_iobuf_add+0x66>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	68b9      	ldr	r1, [r7, #8]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	440b      	add	r3, r1
 800635e:	18d0      	adds	r0, r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	18d1      	adds	r1, r2, r3
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689a      	ldr	r2, [r3, #8]
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	461a      	mov	r2, r3
 8006372:	f00f f956 	bl	8015622 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <mg_iobuf_add+0x7e>
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	4413      	add	r3, r2
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	6879      	ldr	r1, [r7, #4]
 8006388:	4618      	mov	r0, r3
 800638a:	f00f f94a 	bl	8015622 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	68ba      	ldr	r2, [r7, #8]
 8006394:	429a      	cmp	r2, r3
 8006396:	d902      	bls.n	800639e <mg_iobuf_add+0x8e>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	68ba      	ldr	r2, [r7, #8]
 800639c:	609a      	str	r2, [r3, #8]
  io->len += len;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	441a      	add	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	609a      	str	r2, [r3, #8]
  return len;
 80063aa:	683b      	ldr	r3, [r7, #0]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	68ba      	ldr	r2, [r7, #8]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d902      	bls.n	80063d0 <mg_iobuf_del+0x1c>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	441a      	add	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	689b      	ldr	r3, [r3, #8]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d904      	bls.n	80063e8 <mg_iobuf_del+0x34>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689a      	ldr	r2, [r3, #8]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d012      	beq.n	8006416 <mg_iobuf_del+0x62>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	18d0      	adds	r0, r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	68b9      	ldr	r1, [r7, #8]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	440b      	add	r3, r1
 8006402:	18d1      	adds	r1, r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	461a      	mov	r2, r3
 8006412:	f00f f906 	bl	8015622 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00a      	beq.n	8006434 <mg_iobuf_del+0x80>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6899      	ldr	r1, [r3, #8]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	1acb      	subs	r3, r1, r3
 800642a:	4413      	add	r3, r2
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff feb0 	bl	8006194 <zeromem>
  io->len -= len;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689a      	ldr	r2, [r3, #8]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	1ad2      	subs	r2, r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	609a      	str	r2, [r3, #8]
  return len;
 8006440:	687b      	ldr	r3, [r7, #4]
}
 8006442:	4618      	mov	r0, r3
 8006444:	3710      	adds	r7, #16
 8006446:	46bd      	mov	sp, r7
 8006448:	bd80      	pop	{r7, pc}

0800644a <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 8006452:	2100      	movs	r1, #0
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f7ff fed1 	bl	80061fc <mg_iobuf_resize>
}
 800645a:	bf00      	nop
 800645c:	3708      	adds	r7, #8
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
	...

08006464 <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <escapeseq+0x12>
 8006472:	4b04      	ldr	r3, [pc, #16]	; (8006484 <escapeseq+0x20>)
 8006474:	e000      	b.n	8006478 <escapeseq+0x14>
 8006476:	4b04      	ldr	r3, [pc, #16]	; (8006488 <escapeseq+0x24>)
}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	0801707c 	.word	0x0801707c
 8006488:	08017084 	.word	0x08017084

0800648c <json_esc>:

static char json_esc(int c, int esc) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
 8006494:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 8006496:	6838      	ldr	r0, [r7, #0]
 8006498:	f7ff ffe4 	bl	8006464 <escapeseq>
 800649c:	6138      	str	r0, [r7, #16]
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	bf0c      	ite	eq
 80064a4:	2301      	moveq	r3, #1
 80064a6:	2300      	movne	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	4618      	mov	r0, r3
 80064ac:	f7ff ffda 	bl	8006464 <escapeseq>
 80064b0:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	e010      	b.n	80064da <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	461a      	mov	r2, r3
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d107      	bne.n	80064d4 <json_esc+0x48>
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	1ad3      	subs	r3, r2, r3
 80064ca:	461a      	mov	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	e007      	b.n	80064e4 <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	3301      	adds	r3, #1
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1ea      	bne.n	80064b8 <json_esc+0x2c>
  }
  return 0;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 80064f6:	2300      	movs	r3, #0
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e02e      	b.n	800655a <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	4413      	add	r3, r2
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b5c      	cmp	r3, #92	; 0x5c
 8006506:	d114      	bne.n	8006532 <mg_pass_string+0x46>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	dd0f      	ble.n	8006532 <mg_pass_string+0x46>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3301      	adds	r3, #1
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	4413      	add	r3, r2
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	2101      	movs	r1, #1
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ffb4 	bl	800648c <json_esc>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d003      	beq.n	8006532 <mg_pass_string+0x46>
      i++;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e010      	b.n	8006554 <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	781b      	ldrb	r3, [r3, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d102      	bne.n	8006544 <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 800653e:	f06f 0301 	mvn.w	r3, #1
 8006542:	e010      	b.n	8006566 <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	4413      	add	r3, r2
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	2b22      	cmp	r3, #34	; 0x22
 800654e:	d101      	bne.n	8006554 <mg_pass_string+0x68>
      return i;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	e008      	b.n	8006566 <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	dbcc      	blt.n	80064fc <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 8006562:	f06f 0301 	mvn.w	r3, #1
}
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
	...

08006570 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 8006570:	b480      	push	{r7}
 8006572:	b091      	sub	sp, #68	; 0x44
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 8006588:	2300      	movs	r3, #0
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
 800658c:	2301      	movs	r3, #1
 800658e:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 8006590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	429a      	cmp	r2, r3
 8006596:	da0a      	bge.n	80065ae <mg_atod+0x3e>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	2b2d      	cmp	r3, #45	; 0x2d
 800659e:	d106      	bne.n	80065ae <mg_atod+0x3e>
    sign = -1, i++;
 80065a0:	f04f 33ff 	mov.w	r3, #4294967295
 80065a4:	633b      	str	r3, [r7, #48]	; 0x30
 80065a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a8:	3301      	adds	r3, #1
 80065aa:	637b      	str	r3, [r7, #52]	; 0x34
 80065ac:	e00a      	b.n	80065c4 <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 80065ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	da21      	bge.n	80065fa <mg_atod+0x8a>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	2b2b      	cmp	r3, #43	; 0x2b
 80065bc:	d11d      	bne.n	80065fa <mg_atod+0x8a>
    i++;
 80065be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c0:	3301      	adds	r3, #1
 80065c2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80065c4:	e019      	b.n	80065fa <mg_atod+0x8a>
    d *= 10.0;
 80065c6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80065ca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80065ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065d2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    d += p[i] - '0';
 80065d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d8:	68fa      	ldr	r2, [r7, #12]
 80065da:	4413      	add	r3, r2
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	3b30      	subs	r3, #48	; 0x30
 80065e0:	ee07 3a90 	vmov	s15, r3
 80065e4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80065e8:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80065ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065f0:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80065f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065f6:	3301      	adds	r3, #1
 80065f8:	637b      	str	r3, [r7, #52]	; 0x34
 80065fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	429a      	cmp	r2, r3
 8006600:	da0b      	bge.n	800661a <mg_atod+0xaa>
 8006602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	4413      	add	r3, r2
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	2b2f      	cmp	r3, #47	; 0x2f
 800660c:	d905      	bls.n	800661a <mg_atod+0xaa>
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	4413      	add	r3, r2
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b39      	cmp	r3, #57	; 0x39
 8006618:	d9d5      	bls.n	80065c6 <mg_atod+0x56>
  }
  d *= sign;
 800661a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661c:	ee07 3a90 	vmov	s15, r3
 8006620:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006624:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8006628:	ee26 7b07 	vmul.f64	d7, d6, d7
 800662c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8006630:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	429a      	cmp	r2, r3
 8006636:	da51      	bge.n	80066dc <mg_atod+0x16c>
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	68fa      	ldr	r2, [r7, #12]
 800663c:	4413      	add	r3, r2
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b2e      	cmp	r3, #46	; 0x2e
 8006642:	d14b      	bne.n	80066dc <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 8006644:	f04f 0200 	mov.w	r2, #0
 8006648:	f04f 0300 	mov.w	r3, #0
 800664c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006650:	a36d      	add	r3, pc, #436	; (adr r3, 8006808 <mg_atod+0x298>)
 8006652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006656:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 800665a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800665c:	3301      	adds	r3, #1
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006660:	e01d      	b.n	800669e <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 8006662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4413      	add	r3, r2
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	3b30      	subs	r3, #48	; 0x30
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006674:	ed97 7b08 	vldr	d7, [r7, #32]
 8006678:	ee26 7b07 	vmul.f64	d7, d6, d7
 800667c:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 8006680:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006684:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
      base /= 10.0;
 8006688:	ed97 6b08 	vldr	d6, [r7, #32]
 800668c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8006690:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006694:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669a:	3301      	adds	r3, #1
 800669c:	637b      	str	r3, [r7, #52]	; 0x34
 800669e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	da0b      	bge.n	80066be <mg_atod+0x14e>
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4413      	add	r3, r2
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	2b2f      	cmp	r3, #47	; 0x2f
 80066b0:	d905      	bls.n	80066be <mg_atod+0x14e>
 80066b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b39      	cmp	r3, #57	; 0x39
 80066bc:	d9d1      	bls.n	8006662 <mg_atod+0xf2>
    }
    d += frac * sign;
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	ee07 3a90 	vmov	s15, r3
 80066c4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80066c8:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 80066cc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80066d0:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80066d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80066d8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 80066dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	da7e      	bge.n	80067e2 <mg_atod+0x272>
 80066e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e6:	68fa      	ldr	r2, [r7, #12]
 80066e8:	4413      	add	r3, r2
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	2b65      	cmp	r3, #101	; 0x65
 80066ee:	d005      	beq.n	80066fc <mg_atod+0x18c>
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	4413      	add	r3, r2
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	2b45      	cmp	r3, #69	; 0x45
 80066fa:	d172      	bne.n	80067e2 <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	61bb      	str	r3, [r7, #24]
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
    i++;
 8006704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006706:	3301      	adds	r3, #1
 8006708:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 800670a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	429a      	cmp	r2, r3
 8006710:	da0a      	bge.n	8006728 <mg_atod+0x1b8>
 8006712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	781b      	ldrb	r3, [r3, #0]
 800671a:	2b2d      	cmp	r3, #45	; 0x2d
 800671c:	d104      	bne.n	8006728 <mg_atod+0x1b8>
 800671e:	2301      	movs	r3, #1
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006724:	3301      	adds	r3, #1
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8006728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	429a      	cmp	r2, r3
 800672e:	da19      	bge.n	8006764 <mg_atod+0x1f4>
 8006730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	4413      	add	r3, r2
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b2b      	cmp	r3, #43	; 0x2b
 800673a:	d113      	bne.n	8006764 <mg_atod+0x1f4>
 800673c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800673e:	3301      	adds	r3, #1
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8006742:	e00f      	b.n	8006764 <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	4613      	mov	r3, r2
 8006748:	009b      	lsls	r3, r3, #2
 800674a:	4413      	add	r3, r2
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	4619      	mov	r1, r3
 8006750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	637a      	str	r2, [r7, #52]	; 0x34
 8006756:	461a      	mov	r2, r3
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	3b30      	subs	r3, #48	; 0x30
 8006760:	440b      	add	r3, r1
 8006762:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 8006764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	429a      	cmp	r2, r3
 800676a:	da0f      	bge.n	800678c <mg_atod+0x21c>
 800676c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	4413      	add	r3, r2
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b2f      	cmp	r3, #47	; 0x2f
 8006776:	d909      	bls.n	800678c <mg_atod+0x21c>
 8006778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	2b39      	cmp	r3, #57	; 0x39
 8006782:	d803      	bhi.n	800678c <mg_atod+0x21c>
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800678a:	dbdb      	blt.n	8006744 <mg_atod+0x1d4>
    if (minus) exp = -exp;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d002      	beq.n	8006798 <mg_atod+0x228>
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	425b      	negs	r3, r3
 8006796:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 8006798:	2300      	movs	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]
 800679c:	e00a      	b.n	80067b4 <mg_atod+0x244>
 800679e:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80067a2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80067a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80067aa:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3301      	adds	r3, #1
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	69fa      	ldr	r2, [r7, #28]
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	429a      	cmp	r2, r3
 80067ba:	dbf0      	blt.n	800679e <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	e00a      	b.n	80067d8 <mg_atod+0x268>
 80067c2:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80067c6:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80067ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067ce:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	3301      	adds	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	425b      	negs	r3, r3
 80067dc:	69fa      	ldr	r2, [r7, #28]
 80067de:	429a      	cmp	r2, r3
 80067e0:	dbef      	blt.n	80067c2 <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <mg_atod+0x27e>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067ec:	601a      	str	r2, [r3, #0]
  return d;
 80067ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80067f2:	ec43 2b17 	vmov	d7, r2, r3
}
 80067f6:	eeb0 0b47 	vmov.f64	d0, d7
 80067fa:	3744      	adds	r7, #68	; 0x44
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	f3af 8000 	nop.w
 8006808:	9999999a 	.word	0x9999999a
 800680c:	3fb99999 	.word	0x3fb99999

08006810 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8006810:	b590      	push	{r4, r7, lr}
 8006812:	b09b      	sub	sp, #108	; 0x6c
 8006814:	af00      	add	r7, sp, #0
 8006816:	f107 0408 	add.w	r4, r7, #8
 800681a:	e884 0003 	stmia.w	r4, {r0, r1}
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 800682a:	2300      	movs	r3, #0
 800682c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8006830:	2300      	movs	r3, #0
 8006832:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 8006834:	2300      	movs	r3, #0
 8006836:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8006838:	2300      	movs	r3, #0
 800683a:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 800683c:	2300      	movs	r3, #0
 800683e:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 8006840:	2301      	movs	r3, #1
 8006842:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 8006844:	f04f 33ff 	mov.w	r3, #4294967295
 8006848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
 800684e:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d002      	beq.n	800685c <mg_json_get+0x4c>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	2b24      	cmp	r3, #36	; 0x24
 8006862:	d002      	beq.n	800686a <mg_json_get+0x5a>
 8006864:	f06f 0301 	mvn.w	r3, #1
 8006868:	e2e2      	b.n	8006e30 <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 800686a:	2300      	movs	r3, #0
 800686c:	663b      	str	r3, [r7, #96]	; 0x60
 800686e:	e2d8      	b.n	8006e22 <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 8006870:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006872:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006874:	4413      	add	r3, r2
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 800687c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006880:	2b20      	cmp	r3, #32
 8006882:	f000 82c8 	beq.w	8006e16 <mg_json_get+0x606>
 8006886:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800688a:	2b09      	cmp	r3, #9
 800688c:	f000 82c3 	beq.w	8006e16 <mg_json_get+0x606>
 8006890:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006894:	2b0a      	cmp	r3, #10
 8006896:	f000 82be 	beq.w	8006e16 <mg_json_get+0x606>
 800689a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800689e:	2b0d      	cmp	r3, #13
 80068a0:	f000 82b9 	beq.w	8006e16 <mg_json_get+0x606>
    switch (expecting) {
 80068a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	f200 82b7 	bhi.w	8006e1c <mg_json_get+0x60c>
 80068ae:	a201      	add	r2, pc, #4	; (adr r2, 80068b4 <mg_json_get+0xa4>)
 80068b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068b4:	080068c5 	.word	0x080068c5
 80068b8:	08006bad 	.word	0x08006bad
 80068bc:	08006d37 	.word	0x08006d37
 80068c0:	08006d4d 	.word	0x08006d4d
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 80068c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d101      	bne.n	80068d0 <mg_json_get+0xc0>
 80068cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068ce:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 80068d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068d4:	2b7b      	cmp	r3, #123	; 0x7b
 80068d6:	d12b      	bne.n	8006930 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 80068d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068da:	2b1d      	cmp	r3, #29
 80068dc:	dd02      	ble.n	80068e4 <mg_json_get+0xd4>
 80068de:	f04f 33ff 	mov.w	r3, #4294967295
 80068e2:	e2a5      	b.n	8006e30 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 80068e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80068e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d114      	bne.n	8006916 <mg_json_get+0x106>
 80068ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	4413      	add	r3, r2
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b2e      	cmp	r3, #46	; 0x2e
 80068f6:	d10e      	bne.n	8006916 <mg_json_get+0x106>
 80068f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80068fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d10a      	bne.n	8006916 <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8006900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006902:	3301      	adds	r3, #1
 8006904:	657b      	str	r3, [r7, #84]	; 0x54
 8006906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006908:	3301      	adds	r3, #1
 800690a:	653b      	str	r3, [r7, #80]	; 0x50
 800690c:	f04f 33ff 	mov.w	r3, #4294967295
 8006910:	64bb      	str	r3, [r7, #72]	; 0x48
 8006912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006914:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 8006916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	65ba      	str	r2, [r7, #88]	; 0x58
 800691c:	3368      	adds	r3, #104	; 0x68
 800691e:	443b      	add	r3, r7
 8006920:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006924:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 800692e:	e275      	b.n	8006e1c <mg_json_get+0x60c>
        } else if (c == '[') {
 8006930:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006934:	2b5b      	cmp	r3, #91	; 0x5b
 8006936:	d14e      	bne.n	80069d6 <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8006938:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800693a:	2b1d      	cmp	r3, #29
 800693c:	dd02      	ble.n	8006944 <mg_json_get+0x134>
 800693e:	f04f 33ff 	mov.w	r3, #4294967295
 8006942:	e275      	b.n	8006e30 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 8006944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006948:	429a      	cmp	r2, r3
 800694a:	d13a      	bne.n	80069c2 <mg_json_get+0x1b2>
 800694c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	4413      	add	r3, r2
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b5b      	cmp	r3, #91	; 0x5b
 8006956:	d134      	bne.n	80069c2 <mg_json_get+0x1b2>
 8006958:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800695a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695c:	429a      	cmp	r2, r3
 800695e:	d130      	bne.n	80069c2 <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8006960:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006962:	3301      	adds	r3, #1
 8006964:	657b      	str	r3, [r7, #84]	; 0x54
 8006966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006968:	3301      	adds	r3, #1
 800696a:	653b      	str	r3, [r7, #80]	; 0x50
 800696c:	2300      	movs	r3, #0
 800696e:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006970:	2300      	movs	r3, #0
 8006972:	64bb      	str	r3, [r7, #72]	; 0x48
 8006974:	e010      	b.n	8006998 <mg_json_get+0x188>
              ei *= 10;
 8006976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	005b      	lsls	r3, r3, #1
 8006980:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 8006982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4413      	add	r3, r2
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	3b30      	subs	r3, #48	; 0x30
 800698c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800698e:	4413      	add	r3, r2
 8006990:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 8006992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006994:	3301      	adds	r3, #1
 8006996:	653b      	str	r3, [r7, #80]	; 0x50
 8006998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	4413      	add	r3, r2
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b5d      	cmp	r3, #93	; 0x5d
 80069a2:	d005      	beq.n	80069b0 <mg_json_get+0x1a0>
 80069a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	4413      	add	r3, r2
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e2      	bne.n	8006976 <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 80069b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	4413      	add	r3, r2
 80069b6:	781b      	ldrb	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d002      	beq.n	80069c2 <mg_json_get+0x1b2>
 80069bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069be:	3301      	adds	r3, #1
 80069c0:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 80069c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069c4:	1c5a      	adds	r2, r3, #1
 80069c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80069c8:	3368      	adds	r3, #104	; 0x68
 80069ca:	443b      	add	r3, r7
 80069cc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80069d0:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 80069d4:	e222      	b.n	8006e1c <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 80069d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069da:	2b5d      	cmp	r3, #93	; 0x5d
 80069dc:	d13a      	bne.n	8006a54 <mg_json_get+0x244>
 80069de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	dd37      	ble.n	8006a54 <mg_json_get+0x244>
          MG_EOO(']');
 80069e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d106      	bne.n	80069fa <mg_json_get+0x1ea>
 80069ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d002      	beq.n	80069fa <mg_json_get+0x1ea>
 80069f4:	f06f 0302 	mvn.w	r3, #2
 80069f8:	e21a      	b.n	8006e30 <mg_json_get+0x620>
 80069fa:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80069fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a00:	3b01      	subs	r3, #1
 8006a02:	3368      	adds	r3, #104	; 0x68
 8006a04:	443b      	add	r3, r7
 8006a06:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006a0a:	3302      	adds	r3, #2
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d002      	beq.n	8006a16 <mg_json_get+0x206>
 8006a10:	f06f 0301 	mvn.w	r3, #1
 8006a14:	e20c      	b.n	8006e30 <mg_json_get+0x620>
 8006a16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a20:	429a      	cmp	r2, r3
 8006a22:	f040 809c 	bne.w	8006b5e <mg_json_get+0x34e>
 8006a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a28:	687a      	ldr	r2, [r7, #4]
 8006a2a:	4413      	add	r3, r2
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f040 8095 	bne.w	8006b5e <mg_json_get+0x34e>
 8006a34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	f040 8090 	bne.w	8006b5e <mg_json_get+0x34e>
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <mg_json_get+0x240>
 8006a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a48:	1ad3      	subs	r3, r2, r3
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	601a      	str	r2, [r3, #0]
 8006a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a52:	e1ed      	b.n	8006e30 <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 8006a54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a58:	2b74      	cmp	r3, #116	; 0x74
 8006a5a:	d113      	bne.n	8006a84 <mg_json_get+0x274>
 8006a5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5e:	3303      	adds	r3, #3
 8006a60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a62:	429a      	cmp	r2, r3
 8006a64:	dd0e      	ble.n	8006a84 <mg_json_get+0x274>
 8006a66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a6a:	4413      	add	r3, r2
 8006a6c:	2204      	movs	r2, #4
 8006a6e:	4998      	ldr	r1, [pc, #608]	; (8006cd0 <mg_json_get+0x4c0>)
 8006a70:	4618      	mov	r0, r3
 8006a72:	f00e fdc6 	bl	8015602 <memcmp>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d103      	bne.n	8006a84 <mg_json_get+0x274>
          i += 3;
 8006a7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a7e:	3303      	adds	r3, #3
 8006a80:	663b      	str	r3, [r7, #96]	; 0x60
 8006a82:	e06c      	b.n	8006b5e <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 8006a84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a88:	2b6e      	cmp	r3, #110	; 0x6e
 8006a8a:	d113      	bne.n	8006ab4 <mg_json_get+0x2a4>
 8006a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a8e:	3303      	adds	r3, #3
 8006a90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a92:	429a      	cmp	r2, r3
 8006a94:	dd0e      	ble.n	8006ab4 <mg_json_get+0x2a4>
 8006a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a9a:	4413      	add	r3, r2
 8006a9c:	2204      	movs	r2, #4
 8006a9e:	498d      	ldr	r1, [pc, #564]	; (8006cd4 <mg_json_get+0x4c4>)
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f00e fdae 	bl	8015602 <memcmp>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d103      	bne.n	8006ab4 <mg_json_get+0x2a4>
          i += 3;
 8006aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006aae:	3303      	adds	r3, #3
 8006ab0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ab2:	e054      	b.n	8006b5e <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 8006ab4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ab8:	2b66      	cmp	r3, #102	; 0x66
 8006aba:	d113      	bne.n	8006ae4 <mg_json_get+0x2d4>
 8006abc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006abe:	3304      	adds	r3, #4
 8006ac0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	dd0e      	ble.n	8006ae4 <mg_json_get+0x2d4>
 8006ac6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ac8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aca:	4413      	add	r3, r2
 8006acc:	2205      	movs	r2, #5
 8006ace:	4982      	ldr	r1, [pc, #520]	; (8006cd8 <mg_json_get+0x4c8>)
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f00e fd96 	bl	8015602 <memcmp>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <mg_json_get+0x2d4>
          i += 4;
 8006adc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ade:	3304      	adds	r3, #4
 8006ae0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae2:	e03c      	b.n	8006b5e <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8006ae4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ae8:	2b2d      	cmp	r3, #45	; 0x2d
 8006aea:	d007      	beq.n	8006afc <mg_json_get+0x2ec>
 8006aec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006af0:	2b2f      	cmp	r3, #47	; 0x2f
 8006af2:	d916      	bls.n	8006b22 <mg_json_get+0x312>
 8006af4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006af8:	2b39      	cmp	r3, #57	; 0x39
 8006afa:	d812      	bhi.n	8006b22 <mg_json_get+0x312>
          int numlen = 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8006b00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b04:	18d0      	adds	r0, r2, r3
 8006b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	f107 0210 	add.w	r2, r7, #16
 8006b10:	4619      	mov	r1, r3
 8006b12:	f7ff fd2d 	bl	8006570 <mg_atod>
          i += numlen - 1;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b1c:	4413      	add	r3, r2
 8006b1e:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8006b20:	e01d      	b.n	8006b5e <mg_json_get+0x34e>
        } else if (c == '"') {
 8006b22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b26:	2b22      	cmp	r3, #34	; 0x22
 8006b28:	d116      	bne.n	8006b58 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b30:	18d0      	adds	r0, r2, r3
 8006b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b36:	1ad3      	subs	r3, r2, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	f7ff fcd6 	bl	80064ec <mg_pass_string>
 8006b40:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 8006b42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da01      	bge.n	8006b4c <mg_json_get+0x33c>
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	e171      	b.n	8006e30 <mg_json_get+0x620>
          i += n + 1;
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4e:	3301      	adds	r3, #1
 8006b50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b52:	4413      	add	r3, r2
 8006b54:	663b      	str	r3, [r7, #96]	; 0x60
 8006b56:	e002      	b.n	8006b5e <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8006b58:	f06f 0301 	mvn.w	r3, #1
 8006b5c:	e168      	b.n	8006e30 <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 8006b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d114      	bne.n	8006b90 <mg_json_get+0x380>
 8006b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10e      	bne.n	8006b90 <mg_json_get+0x380>
 8006b72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d10a      	bne.n	8006b90 <mg_json_get+0x380>
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <mg_json_get+0x37c>
 8006b80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	1c5a      	adds	r2, r3, #1
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	601a      	str	r2, [r3, #0]
 8006b8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b8e:	e14f      	b.n	8006e30 <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 8006b90:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b94:	429a      	cmp	r2, r3
 8006b96:	d105      	bne.n	8006ba4 <mg_json_get+0x394>
 8006b98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	db02      	blt.n	8006ba4 <mg_json_get+0x394>
 8006b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 8006baa:	e137      	b.n	8006e1c <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 8006bac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bb0:	2b22      	cmp	r3, #34	; 0x22
 8006bb2:	d170      	bne.n	8006c96 <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006bb4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bba:	18d0      	adds	r0, r2, r3
 8006bbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	f7ff fc91 	bl	80064ec <mg_pass_string>
 8006bca:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	da01      	bge.n	8006bd6 <mg_json_get+0x3c6>
 8006bd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bd4:	e12c      	b.n	8006e30 <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8006bd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	4413      	add	r3, r2
 8006bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006be0:	429a      	cmp	r2, r3
 8006be2:	dc02      	bgt.n	8006bea <mg_json_get+0x3da>
 8006be4:	f06f 0302 	mvn.w	r3, #2
 8006be8:	e122      	b.n	8006e30 <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8006bea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	da02      	bge.n	8006bf8 <mg_json_get+0x3e8>
 8006bf2:	f06f 0302 	mvn.w	r3, #2
 8006bf6:	e11b      	b.n	8006e30 <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8006bf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d109      	bne.n	8006c14 <mg_json_get+0x404>
 8006c00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c02:	3b01      	subs	r3, #1
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4413      	add	r3, r2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c0c:	d002      	beq.n	8006c14 <mg_json_get+0x404>
 8006c0e:	f06f 0302 	mvn.w	r3, #2
 8006c12:	e10d      	b.n	8006e30 <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8006c14:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d133      	bne.n	8006c84 <mg_json_get+0x474>
 8006c1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	2b2e      	cmp	r3, #46	; 0x2e
 8006c28:	d12c      	bne.n	8006c84 <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006c2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c30:	18d0      	adds	r0, r2, r3
 8006c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	4413      	add	r3, r2
 8006c38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f00e fd3d 	bl	80156ba <strncmp>
 8006c40:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d11e      	bne.n	8006c84 <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006c46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c4a:	4413      	add	r3, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4413      	add	r3, r2
 8006c52:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d011      	beq.n	8006c7c <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006c58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c5c:	4413      	add	r3, r2
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4413      	add	r3, r2
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b2e      	cmp	r3, #46	; 0x2e
 8006c68:	d008      	beq.n	8006c7c <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8006c6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c6e:	4413      	add	r3, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4413      	add	r3, r2
 8006c76:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006c78:	2b5b      	cmp	r3, #91	; 0x5b
 8006c7a:	d103      	bne.n	8006c84 <mg_json_get+0x474>
            pos += n;
 8006c7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c80:	4413      	add	r3, r2
 8006c82:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 8006c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c86:	3301      	adds	r3, #1
 8006c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c8a:	4413      	add	r3, r2
 8006c8c:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006c94:	e0c1      	b.n	8006e1a <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 8006c96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c9a:	2b7d      	cmp	r3, #125	; 0x7d
 8006c9c:	d148      	bne.n	8006d30 <mg_json_get+0x520>
          MG_EOO('}');
 8006c9e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ca0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d106      	bne.n	8006cb4 <mg_json_get+0x4a4>
 8006ca6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d002      	beq.n	8006cb4 <mg_json_get+0x4a4>
 8006cae:	f06f 0302 	mvn.w	r3, #2
 8006cb2:	e0bd      	b.n	8006e30 <mg_json_get+0x620>
 8006cb4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006cb8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	3368      	adds	r3, #104	; 0x68
 8006cbe:	443b      	add	r3, r7
 8006cc0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006cc4:	3302      	adds	r3, #2
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d008      	beq.n	8006cdc <mg_json_get+0x4cc>
 8006cca:	f06f 0301 	mvn.w	r3, #1
 8006cce:	e0af      	b.n	8006e30 <mg_json_get+0x620>
 8006cd0:	0801708c 	.word	0x0801708c
 8006cd4:	08017094 	.word	0x08017094
 8006cd8:	0801709c 	.word	0x0801709c
 8006cdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ce2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d114      	bne.n	8006d14 <mg_json_get+0x504>
 8006cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	4413      	add	r3, r2
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10e      	bne.n	8006d14 <mg_json_get+0x504>
 8006cf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d10a      	bne.n	8006d14 <mg_json_get+0x504>
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <mg_json_get+0x500>
 8006d04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d08:	1ad3      	subs	r3, r2, r3
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d12:	e08d      	b.n	8006e30 <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 8006d14:	2303      	movs	r3, #3
 8006d16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 8006d1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d17b      	bne.n	8006e1a <mg_json_get+0x60a>
 8006d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	db78      	blt.n	8006e1a <mg_json_get+0x60a>
 8006d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8006d2e:	e074      	b.n	8006e1a <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 8006d30:	f06f 0301 	mvn.w	r3, #1
 8006d34:	e07c      	b.n	8006e30 <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 8006d36:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8006d3c:	d103      	bne.n	8006d46 <mg_json_get+0x536>
          expecting = S_VALUE;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006d44:	e06a      	b.n	8006e1c <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 8006d46:	f06f 0301 	mvn.w	r3, #1
 8006d4a:	e071      	b.n	8006e30 <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8006d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	dc02      	bgt.n	8006d58 <mg_json_get+0x548>
          return MG_JSON_INVALID;
 8006d52:	f06f 0301 	mvn.w	r3, #1
 8006d56:	e06b      	b.n	8006e30 <mg_json_get+0x620>
        } else if (c == ',') {
 8006d58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d5c:	2b2c      	cmp	r3, #44	; 0x2c
 8006d5e:	d10d      	bne.n	8006d7c <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8006d60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d62:	3b01      	subs	r3, #1
 8006d64:	3368      	adds	r3, #104	; 0x68
 8006d66:	443b      	add	r3, r7
 8006d68:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006d6c:	2b7b      	cmp	r3, #123	; 0x7b
 8006d6e:	bf0c      	ite	eq
 8006d70:	2301      	moveq	r3, #1
 8006d72:	2300      	movne	r3, #0
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006d7a:	e04f      	b.n	8006e1c <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 8006d7c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d80:	2b5d      	cmp	r3, #93	; 0x5d
 8006d82:	d003      	beq.n	8006d8c <mg_json_get+0x57c>
 8006d84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006d88:	2b7d      	cmp	r3, #125	; 0x7d
 8006d8a:	d13f      	bne.n	8006e0c <mg_json_get+0x5fc>
          MG_EOO('O');
 8006d8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d106      	bne.n	8006da2 <mg_json_get+0x592>
 8006d94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d002      	beq.n	8006da2 <mg_json_get+0x592>
 8006d9c:	f06f 0302 	mvn.w	r3, #2
 8006da0:	e046      	b.n	8006e30 <mg_json_get+0x620>
 8006da2:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006da8:	3b01      	subs	r3, #1
 8006daa:	3368      	adds	r3, #104	; 0x68
 8006dac:	443b      	add	r3, r7
 8006dae:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006db2:	3302      	adds	r3, #2
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d002      	beq.n	8006dbe <mg_json_get+0x5ae>
 8006db8:	f06f 0301 	mvn.w	r3, #1
 8006dbc:	e038      	b.n	8006e30 <mg_json_get+0x620>
 8006dbe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8006dc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d114      	bne.n	8006df6 <mg_json_get+0x5e6>
 8006dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10e      	bne.n	8006df6 <mg_json_get+0x5e6>
 8006dd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d10a      	bne.n	8006df6 <mg_json_get+0x5e6>
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d005      	beq.n	8006df2 <mg_json_get+0x5e2>
 8006de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006de8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	1c5a      	adds	r2, r3, #1
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006df4:	e01c      	b.n	8006e30 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006df6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006df8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d109      	bne.n	8006e12 <mg_json_get+0x602>
 8006dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	db06      	blt.n	8006e12 <mg_json_get+0x602>
 8006e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e06:	3301      	adds	r3, #1
 8006e08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e0a:	e002      	b.n	8006e12 <mg_json_get+0x602>
          return MG_JSON_INVALID;
 8006e0c:	f06f 0301 	mvn.w	r3, #1
 8006e10:	e00e      	b.n	8006e30 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006e12:	bf00      	nop
        break;
 8006e14:	e002      	b.n	8006e1c <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8006e16:	bf00      	nop
 8006e18:	e000      	b.n	8006e1c <mg_json_get+0x60c>
        break;
 8006e1a:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e1e:	3301      	adds	r3, #1
 8006e20:	663b      	str	r3, [r7, #96]	; 0x60
 8006e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e26:	429a      	cmp	r2, r3
 8006e28:	f6ff ad22 	blt.w	8006870 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006e2c:	f06f 0302 	mvn.w	r3, #2
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	376c      	adds	r7, #108	; 0x6c
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd90      	pop	{r4, r7, pc}

08006e38 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b089      	sub	sp, #36	; 0x24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	f107 0408 	add.w	r4, r7, #8
 8006e42:	e884 0003 	stmia.w	r4, {r0, r1}
 8006e46:	607a      	str	r2, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006e4e:	f107 0314 	add.w	r3, r7, #20
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	f107 0108 	add.w	r1, r7, #8
 8006e58:	c903      	ldmia	r1, {r0, r1}
 8006e5a:	f7ff fcd9 	bl	8006810 <mg_json_get>
 8006e5e:	61b8      	str	r0, [r7, #24]
 8006e60:	69bb      	ldr	r3, [r7, #24]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	db23      	blt.n	8006eae <mg_json_get_num+0x76>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006e66:	68ba      	ldr	r2, [r7, #8]
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006e6e:	2b2d      	cmp	r3, #45	; 0x2d
 8006e70:	d00b      	beq.n	8006e8a <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006e72:	68ba      	ldr	r2, [r7, #8]
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	4413      	add	r3, r2
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	2b2f      	cmp	r3, #47	; 0x2f
 8006e7c:	d917      	bls.n	8006eae <mg_json_get_num+0x76>
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	69bb      	ldr	r3, [r7, #24]
 8006e82:	4413      	add	r3, r2
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b39      	cmp	r3, #57	; 0x39
 8006e88:	d811      	bhi.n	8006eae <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00c      	beq.n	8006eaa <mg_json_get_num+0x72>
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	4413      	add	r3, r2
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fb68 	bl	8006570 <mg_atod>
 8006ea0:	eeb0 7b40 	vmov.f64	d7, d0
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8006eae:	69fb      	ldr	r3, [r7, #28]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3724      	adds	r7, #36	; 0x24
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd90      	pop	{r4, r7, pc}

08006ec2 <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8006ec2:	b590      	push	{r4, r7, lr}
 8006ec4:	b087      	sub	sp, #28
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	f107 0408 	add.w	r4, r7, #8
 8006ecc:	e884 0003 	stmia.w	r4, {r0, r1}
 8006ed0:	607a      	str	r2, [r7, #4]
 8006ed2:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	f107 0108 	add.w	r1, r7, #8
 8006ee0:	c903      	ldmia	r1, {r0, r1}
 8006ee2:	f7ff fc95 	bl	8006810 <mg_json_get>
 8006ee6:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.ptr[off] == 't' || json.ptr[off] == 'f')) {
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	db1b      	blt.n	8006f26 <mg_json_get_bool+0x64>
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b74      	cmp	r3, #116	; 0x74
 8006ef8:	d005      	beq.n	8006f06 <mg_json_get_bool+0x44>
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	4413      	add	r3, r2
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	2b66      	cmp	r3, #102	; 0x66
 8006f04:	d10f      	bne.n	8006f26 <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.ptr[off] == 't';
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00a      	beq.n	8006f22 <mg_json_get_bool+0x60>
 8006f0c:	68ba      	ldr	r2, [r7, #8]
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	4413      	add	r3, r2
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b74      	cmp	r3, #116	; 0x74
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	701a      	strb	r2, [r3, #0]
    found = 1;
 8006f22:	2301      	movs	r3, #1
 8006f24:	617b      	str	r3, [r7, #20]
  }
  return found;
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	bf14      	ite	ne
 8006f2c:	2301      	movne	r3, #1
 8006f2e:	2300      	moveq	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd90      	pop	{r4, r7, pc}

08006f3a <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8006f3a:	b590      	push	{r4, r7, lr}
 8006f3c:	b089      	sub	sp, #36	; 0x24
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	f107 0408 	add.w	r4, r7, #8
 8006f44:	e884 0003 	stmia.w	r4, {r0, r1}
 8006f48:	607a      	str	r2, [r7, #4]
 8006f4a:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	61fb      	str	r3, [r7, #28]
 8006f50:	2300      	movs	r3, #0
 8006f52:	61bb      	str	r3, [r7, #24]
 8006f54:	e065      	b.n	8007022 <mg_json_unescape+0xe8>
    if (s.ptr[i] == '\\' && i + 5 < s.len && s.ptr[i + 1] == 'u') {
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b5c      	cmp	r3, #92	; 0x5c
 8006f60:	d12d      	bne.n	8006fbe <mg_json_unescape+0x84>
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	1d5a      	adds	r2, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d228      	bcs.n	8006fbe <mg_json_unescape+0x84>
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	3301      	adds	r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	2b75      	cmp	r3, #117	; 0x75
 8006f78:	d121      	bne.n	8006fbe <mg_json_unescape+0x84>
      //  \uXXXX escape. We could process a simple one-byte chars
      // \u00xx from the ASCII range. More complex chars would require
      // dragging in a UTF8 library, which is too much for us
      if (s.ptr[i + 2] != '0' || s.ptr[i + 3] != '0') return false;  // Give up
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	3302      	adds	r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	2b30      	cmp	r3, #48	; 0x30
 8006f86:	d106      	bne.n	8006f96 <mg_json_unescape+0x5c>
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	3303      	adds	r3, #3
 8006f8e:	4413      	add	r3, r2
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	2b30      	cmp	r3, #48	; 0x30
 8006f94:	d001      	beq.n	8006f9a <mg_json_unescape+0x60>
 8006f96:	2300      	movs	r3, #0
 8006f98:	e05a      	b.n	8007050 <mg_json_unescape+0x116>
      ((unsigned char *) to)[j] = (unsigned char) mg_unhexn(s.ptr + i + 4, 2);
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4413      	add	r3, r2
 8006fa2:	2102      	movs	r1, #2
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f003 fbc7 	bl	800a738 <mg_unhexn>
 8006faa:	4601      	mov	r1, r0
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	b2ca      	uxtb	r2, r1
 8006fb4:	701a      	strb	r2, [r3, #0]

      i += 5;
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	3305      	adds	r3, #5
 8006fba:	61fb      	str	r3, [r7, #28]
 8006fbc:	e02b      	b.n	8007016 <mg_json_unescape+0xdc>
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	2b5c      	cmp	r3, #92	; 0x5c
 8006fc8:	d11d      	bne.n	8007006 <mg_json_unescape+0xcc>
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	1c5a      	adds	r2, r3, #1
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d218      	bcs.n	8007006 <mg_json_unescape+0xcc>
      char c = json_esc(s.ptr[i + 1], 0);
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	4413      	add	r3, r2
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	2100      	movs	r1, #0
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f7ff fa53 	bl	800648c <json_esc>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	75fb      	strb	r3, [r7, #23]
      if (c == 0) return false;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <mg_json_unescape+0xba>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e02d      	b.n	8007050 <mg_json_unescape+0x116>
      to[j] = c;
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	7dfa      	ldrb	r2, [r7, #23]
 8006ffc:	701a      	strb	r2, [r3, #0]
      i++;
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	3301      	adds	r3, #1
 8007002:	61fb      	str	r3, [r7, #28]
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 8007004:	e007      	b.n	8007016 <mg_json_unescape+0xdc>
    } else {
      to[j] = s.ptr[i];
 8007006:	68ba      	ldr	r2, [r7, #8]
 8007008:	69fb      	ldr	r3, [r7, #28]
 800700a:	441a      	add	r2, r3
 800700c:	6879      	ldr	r1, [r7, #4]
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	440b      	add	r3, r1
 8007012:	7812      	ldrb	r2, [r2, #0]
 8007014:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	3301      	adds	r3, #1
 800701a:	61fb      	str	r3, [r7, #28]
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	3301      	adds	r3, #1
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	429a      	cmp	r2, r3
 8007028:	d203      	bcs.n	8007032 <mg_json_unescape+0xf8>
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	429a      	cmp	r2, r3
 8007030:	d391      	bcc.n	8006f56 <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8007032:	69ba      	ldr	r2, [r7, #24]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d301      	bcc.n	800703e <mg_json_unescape+0x104>
 800703a:	2300      	movs	r3, #0
 800703c:	e008      	b.n	8007050 <mg_json_unescape+0x116>
  if (n > 0) to[j] = '\0';
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d004      	beq.n	800704e <mg_json_unescape+0x114>
 8007044:	687a      	ldr	r2, [r7, #4]
 8007046:	69bb      	ldr	r3, [r7, #24]
 8007048:	4413      	add	r3, r2
 800704a:	2200      	movs	r2, #0
 800704c:	701a      	strb	r2, [r3, #0]
  return true;
 800704e:	2301      	movs	r3, #1
}
 8007050:	4618      	mov	r0, r3
 8007052:	3724      	adds	r7, #36	; 0x24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd90      	pop	{r4, r7, pc}

08007058 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	; 0x28
 800705c:	af00      	add	r7, sp, #0
 800705e:	f107 0308 	add.w	r3, r7, #8
 8007062:	e883 0003 	stmia.w	r3, {r0, r1}
 8007066:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 8007068:	2300      	movs	r3, #0
 800706a:	627b      	str	r3, [r7, #36]	; 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 800706c:	2300      	movs	r3, #0
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	f107 0314 	add.w	r3, r7, #20
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	f107 0108 	add.w	r1, r7, #8
 800707a:	c903      	ldmia	r1, {r0, r1}
 800707c:	f7ff fbc8 	bl	8006810 <mg_json_get>
 8007080:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.ptr[off] == '"') {
 8007082:	6a3b      	ldr	r3, [r7, #32]
 8007084:	2b00      	cmp	r3, #0
 8007086:	db30      	blt.n	80070ea <mg_json_get_str+0x92>
 8007088:	697b      	ldr	r3, [r7, #20]
 800708a:	2b01      	cmp	r3, #1
 800708c:	dd2d      	ble.n	80070ea <mg_json_get_str+0x92>
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	4413      	add	r3, r2
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b22      	cmp	r3, #34	; 0x22
 8007098:	d127      	bne.n	80070ea <mg_json_get_str+0x92>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 800709a:	697b      	ldr	r3, [r7, #20]
 800709c:	4619      	mov	r1, r3
 800709e:	2001      	movs	r0, #1
 80070a0:	f00d ffd0 	bl	8015044 <calloc>
 80070a4:	4603      	mov	r3, r0
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01d      	beq.n	80070ea <mg_json_get_str+0x92>
        !mg_json_unescape(mg_str_n(json.ptr + off + 1, (size_t) (len - 2)),
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	3301      	adds	r3, #1
 80070b4:	18d1      	adds	r1, r2, r3
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	3b02      	subs	r3, #2
 80070ba:	461a      	mov	r2, r3
 80070bc:	f107 0318 	add.w	r3, r7, #24
 80070c0:	4618      	mov	r0, r3
 80070c2:	f003 f802 	bl	800a0ca <mg_str_n>
 80070c6:	697b      	ldr	r3, [r7, #20]
 80070c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ca:	f107 0118 	add.w	r1, r7, #24
 80070ce:	c903      	ldmia	r1, {r0, r1}
 80070d0:	f7ff ff33 	bl	8006f3a <mg_json_unescape>
 80070d4:	4603      	mov	r3, r0
 80070d6:	f083 0301 	eor.w	r3, r3, #1
 80070da:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <mg_json_get_str+0x92>
                          result, (size_t) len)) {
      free(result);
 80070e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80070e2:	f00d ffd5 	bl	8015090 <free>
      result = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return result;
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3728      	adds	r7, #40	; 0x28
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b089      	sub	sp, #36	; 0x24
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	f107 0408 	add.w	r4, r7, #8
 80070fe:	e884 0003 	stmia.w	r4, {r0, r1}
 8007102:	607a      	str	r2, [r7, #4]
 8007104:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 800710a:	f107 0310 	add.w	r3, r7, #16
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	f107 0108 	add.w	r1, r7, #8
 8007114:	c903      	ldmia	r1, {r0, r1}
 8007116:	f7ff fe8f 	bl	8006e38 <mg_json_get_num>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d006      	beq.n	800712e <mg_json_get_long+0x3a>
 8007120:	ed97 7b04 	vldr	d7, [r7, #16]
 8007124:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8007128:	ee17 3a90 	vmov	r3, s15
 800712c:	61fb      	str	r3, [r7, #28]
  return result;
 800712e:	69fb      	ldr	r3, [r7, #28]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3724      	adds	r7, #36	; 0x24
 8007134:	46bd      	mov	sp, r7
 8007136:	bd90      	pop	{r4, r7, pc}

08007138 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	4603      	mov	r3, r0
 8007140:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8007142:	4b05      	ldr	r3, [pc, #20]	; (8007158 <logc+0x20>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a05      	ldr	r2, [pc, #20]	; (800715c <logc+0x24>)
 8007148:	6811      	ldr	r1, [r2, #0]
 800714a:	79fa      	ldrb	r2, [r7, #7]
 800714c:	4610      	mov	r0, r2
 800714e:	4798      	blx	r3
}
 8007150:	bf00      	nop
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	24000244 	.word	0x24000244
 800715c:	24000584 	.word	0x24000584

08007160 <logs>:

static void logs(const char *buf, size_t len) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 800716a:	2300      	movs	r3, #0
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	e009      	b.n	8007184 <logs+0x24>
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	781b      	ldrb	r3, [r3, #0]
 8007178:	4618      	mov	r0, r3
 800717a:	f7ff ffdd 	bl	8007138 <logc>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	3301      	adds	r3, #1
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	68fa      	ldr	r2, [r7, #12]
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	429a      	cmp	r2, r3
 800718a:	d3f1      	bcc.n	8007170 <logs+0x10>
}
 800718c:	bf00      	nop
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
	...

08007198 <mg_log_set>:

void mg_log_set(int log_level) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <mg_log_set+0x34>)
 80071a2:	f640 22b9 	movw	r2, #2745	; 0xab9
 80071a6:	490a      	ldr	r1, [pc, #40]	; (80071d0 <mg_log_set+0x38>)
 80071a8:	2003      	movs	r0, #3
 80071aa:	f000 f817 	bl	80071dc <mg_log_prefix>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d003      	beq.n	80071bc <mg_log_set+0x24>
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4807      	ldr	r0, [pc, #28]	; (80071d4 <mg_log_set+0x3c>)
 80071b8:	f000 f86a 	bl	8007290 <mg_log>
  s_level = log_level;
 80071bc:	4a06      	ldr	r2, [pc, #24]	; (80071d8 <mg_log_set+0x40>)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6013      	str	r3, [r2, #0]
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	080183dc 	.word	0x080183dc
 80071d0:	0801645c 	.word	0x0801645c
 80071d4:	080170a4 	.word	0x080170a4
 80071d8:	24000240 	.word	0x24000240

080071dc <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 80071dc:	b590      	push	{r4, r7, lr}
 80071de:	b099      	sub	sp, #100	; 0x64
 80071e0:	af06      	add	r7, sp, #24
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 80071ea:	4b27      	ldr	r3, [pc, #156]	; (8007288 <mg_log_prefix+0xac>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	429a      	cmp	r2, r3
 80071f2:	dc43      	bgt.n	800727c <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 80071f4:	212f      	movs	r1, #47	; 0x2f
 80071f6:	68b8      	ldr	r0, [r7, #8]
 80071f8:	f00e fa71 	bl	80156de <strrchr>
 80071fc:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 80071fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007200:	2b00      	cmp	r3, #0
 8007202:	d104      	bne.n	800720e <mg_log_prefix+0x32>
 8007204:	215c      	movs	r1, #92	; 0x5c
 8007206:	68b8      	ldr	r0, [r7, #8]
 8007208:	f00e fa69 	bl	80156de <strrchr>
 800720c:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 800720e:	f7f9 fcc7 	bl	8000ba0 <mg_millis>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007218:	2900      	cmp	r1, #0
 800721a:	d002      	beq.n	8007222 <mg_log_prefix+0x46>
 800721c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800721e:	3101      	adds	r1, #1
 8007220:	e000      	b.n	8007224 <mg_log_prefix+0x48>
 8007222:	68b9      	ldr	r1, [r7, #8]
 8007224:	f107 0414 	add.w	r4, r7, #20
 8007228:	6838      	ldr	r0, [r7, #0]
 800722a:	9005      	str	r0, [sp, #20]
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	9004      	str	r0, [sp, #16]
 8007230:	9103      	str	r1, [sp, #12]
 8007232:	68f9      	ldr	r1, [r7, #12]
 8007234:	9102      	str	r1, [sp, #8]
 8007236:	e9cd 2300 	strd	r2, r3, [sp]
 800723a:	4a14      	ldr	r2, [pc, #80]	; (800728c <mg_log_prefix+0xb0>)
 800723c:	2129      	movs	r1, #41	; 0x29
 800723e:	4620      	mov	r0, r4
 8007240:	f000 fe00 	bl	8007e44 <mg_snprintf>
 8007244:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 8007246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007248:	2b27      	cmp	r3, #39	; 0x27
 800724a:	d90a      	bls.n	8007262 <mg_log_prefix+0x86>
 800724c:	2327      	movs	r3, #39	; 0x27
 800724e:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 8007250:	e007      	b.n	8007262 <mg_log_prefix+0x86>
 8007252:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007254:	1c5a      	adds	r2, r3, #1
 8007256:	643a      	str	r2, [r7, #64]	; 0x40
 8007258:	3348      	adds	r3, #72	; 0x48
 800725a:	443b      	add	r3, r7
 800725c:	2220      	movs	r2, #32
 800725e:	f803 2c34 	strb.w	r2, [r3, #-52]
 8007262:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007264:	2b28      	cmp	r3, #40	; 0x28
 8007266:	d9f4      	bls.n	8007252 <mg_log_prefix+0x76>
    logs(buf, n - 1);
 8007268:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726a:	1e5a      	subs	r2, r3, #1
 800726c:	f107 0314 	add.w	r3, r7, #20
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff74 	bl	8007160 <logs>
    return true;
 8007278:	2301      	movs	r3, #1
 800727a:	e000      	b.n	800727e <mg_log_prefix+0xa2>
  } else {
    return false;
 800727c:	2300      	movs	r3, #0
  }
}
 800727e:	4618      	mov	r0, r3
 8007280:	374c      	adds	r7, #76	; 0x4c
 8007282:	46bd      	mov	sp, r7
 8007284:	bd90      	pop	{r4, r7, pc}
 8007286:	bf00      	nop
 8007288:	24000240 	.word	0x24000240
 800728c:	080170bc 	.word	0x080170bc

08007290 <mg_log>:

void mg_log(const char *fmt, ...) {
 8007290:	b40f      	push	{r0, r1, r2, r3}
 8007292:	b580      	push	{r7, lr}
 8007294:	b082      	sub	sp, #8
 8007296:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 8007298:	f107 0314 	add.w	r3, r7, #20
 800729c:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <mg_log+0x34>)
 80072a0:	6818      	ldr	r0, [r3, #0]
 80072a2:	4b09      	ldr	r3, [pc, #36]	; (80072c8 <mg_log+0x38>)
 80072a4:	6819      	ldr	r1, [r3, #0]
 80072a6:	1d3b      	adds	r3, r7, #4
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	f7fb fc85 	bl	8002bb8 <mg_vxprintf>
  va_end(ap);
  logc((unsigned char) '\n');
 80072ae:	200a      	movs	r0, #10
 80072b0:	f7ff ff42 	bl	8007138 <logc>
}
 80072b4:	bf00      	nop
 80072b6:	3708      	adds	r7, #8
 80072b8:	46bd      	mov	sp, r7
 80072ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072be:	b004      	add	sp, #16
 80072c0:	4770      	bx	lr
 80072c2:	bf00      	nop
 80072c4:	24000244 	.word	0x24000244
 80072c8:	24000584 	.word	0x24000584

080072cc <nibble>:

static unsigned char nibble(unsigned c) {
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2b09      	cmp	r3, #9
 80072d8:	d804      	bhi.n	80072e4 <nibble+0x18>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	3330      	adds	r3, #48	; 0x30
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	e003      	b.n	80072ec <nibble+0x20>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	3357      	adds	r3, #87	; 0x57
 80072ea:	b2db      	uxtb	r3, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08a      	sub	sp, #40	; 0x28
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 8007306:	2300      	movs	r3, #0
 8007308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 800730c:	2300      	movs	r3, #0
 800730e:	623b      	str	r3, [r7, #32]
 8007310:	e07a      	b.n	8007408 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 8007312:	6a3b      	ldr	r3, [r7, #32]
 8007314:	f003 030f 	and.w	r3, r3, #15
 8007318:	2b00      	cmp	r3, #0
 800731a:	d13a      	bne.n	8007392 <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00f      	beq.n	8007342 <mg_hexdump+0x4a>
 8007322:	2102      	movs	r1, #2
 8007324:	484c      	ldr	r0, [pc, #304]	; (8007458 <mg_hexdump+0x160>)
 8007326:	f7ff ff1b 	bl	8007160 <logs>
 800732a:	f107 030c 	add.w	r3, r7, #12
 800732e:	2110      	movs	r1, #16
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ff15 	bl	8007160 <logs>
 8007336:	200a      	movs	r0, #10
 8007338:	f7ff fefe 	bl	8007138 <logc>
 800733c:	2300      	movs	r3, #0
 800733e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 8007342:	6a3b      	ldr	r3, [r7, #32]
 8007344:	0b1b      	lsrs	r3, r3, #12
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff ffbe 	bl	80072cc <nibble>
 8007350:	4603      	mov	r3, r0
 8007352:	4618      	mov	r0, r3
 8007354:	f7ff fef0 	bl	8007138 <logc>
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	0a1b      	lsrs	r3, r3, #8
 800735c:	f003 030f 	and.w	r3, r3, #15
 8007360:	4618      	mov	r0, r3
 8007362:	f7ff ffb3 	bl	80072cc <nibble>
 8007366:	4603      	mov	r3, r0
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff fee5 	bl	8007138 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	091b      	lsrs	r3, r3, #4
 8007372:	f003 030f 	and.w	r3, r3, #15
 8007376:	4618      	mov	r0, r3
 8007378:	f7ff ffa8 	bl	80072cc <nibble>
 800737c:	4603      	mov	r3, r0
 800737e:	4618      	mov	r0, r3
 8007380:	f7ff feda 	bl	8007138 <logc>
 8007384:	2030      	movs	r0, #48	; 0x30
 8007386:	f7ff fed7 	bl	8007138 <logc>
 800738a:	2103      	movs	r1, #3
 800738c:	4833      	ldr	r0, [pc, #204]	; (800745c <mg_hexdump+0x164>)
 800738e:	f7ff fee7 	bl	8007160 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	4413      	add	r3, r2
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	091b      	lsrs	r3, r3, #4
 800739c:	b2db      	uxtb	r3, r3
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff ff94 	bl	80072cc <nibble>
 80073a4:	4603      	mov	r3, r0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7ff fec6 	bl	8007138 <logc>
 80073ac:	69fa      	ldr	r2, [r7, #28]
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	4413      	add	r3, r2
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7ff ff87 	bl	80072cc <nibble>
 80073be:	4603      	mov	r3, r0
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7ff feb9 	bl	8007138 <logc>
    logc(' ');                                         // Space after hex number
 80073c6:	2020      	movs	r0, #32
 80073c8:	f7ff feb6 	bl	8007138 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	4413      	add	r3, r2
 80073d2:	781b      	ldrb	r3, [r3, #0]
 80073d4:	2b1f      	cmp	r3, #31
 80073d6:	d90a      	bls.n	80073ee <mg_hexdump+0xf6>
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	6a3b      	ldr	r3, [r7, #32]
 80073dc:	4413      	add	r3, r2
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b7e      	cmp	r3, #126	; 0x7e
 80073e2:	d804      	bhi.n	80073ee <mg_hexdump+0xf6>
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	6a3b      	ldr	r3, [r7, #32]
 80073e8:	4413      	add	r3, r2
 80073ea:	781a      	ldrb	r2, [r3, #0]
 80073ec:	e000      	b.n	80073f0 <mg_hexdump+0xf8>
 80073ee:	222e      	movs	r2, #46	; 0x2e
 80073f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80073f4:	1c59      	adds	r1, r3, #1
 80073f6:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 80073fa:	3328      	adds	r3, #40	; 0x28
 80073fc:	443b      	add	r3, r7
 80073fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 8007402:	6a3b      	ldr	r3, [r7, #32]
 8007404:	3301      	adds	r3, #1
 8007406:	623b      	str	r3, [r7, #32]
 8007408:	6a3a      	ldr	r2, [r7, #32]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	429a      	cmp	r2, r3
 800740e:	d380      	bcc.n	8007312 <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8007410:	e00d      	b.n	800742e <mg_hexdump+0x136>
 8007412:	2103      	movs	r1, #3
 8007414:	4811      	ldr	r0, [pc, #68]	; (800745c <mg_hexdump+0x164>)
 8007416:	f7ff fea3 	bl	8007160 <logs>
 800741a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800741e:	1c5a      	adds	r2, r3, #1
 8007420:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 8007424:	3328      	adds	r3, #40	; 0x28
 8007426:	443b      	add	r3, r7
 8007428:	2220      	movs	r2, #32
 800742a:	f803 2c1c 	strb.w	r2, [r3, #-28]
 800742e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d9ed      	bls.n	8007412 <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 8007436:	2102      	movs	r1, #2
 8007438:	4807      	ldr	r0, [pc, #28]	; (8007458 <mg_hexdump+0x160>)
 800743a:	f7ff fe91 	bl	8007160 <logs>
 800743e:	f107 030c 	add.w	r3, r7, #12
 8007442:	2110      	movs	r1, #16
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fe8b 	bl	8007160 <logs>
 800744a:	200a      	movs	r0, #10
 800744c:	f7ff fe74 	bl	8007138 <logc>
}
 8007450:	bf00      	nop
 8007452:	3728      	adds	r7, #40	; 0x28
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	080170d0 	.word	0x080170d0
 800745c:	080170d4 	.word	0x080170d4

08007460 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007470:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	4805      	ldr	r0, [pc, #20]	; (8007494 <mg_vprintf+0x34>)
 800747e:	f7fb fb9b 	bl	8002bb8 <mg_vxprintf>
  return c->send.len - old;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	1ad3      	subs	r3, r2, r3
}
 800748a:	4618      	mov	r0, r3
 800748c:	3718      	adds	r7, #24
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	08007dd5 	.word	0x08007dd5

08007498 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8007498:	b40e      	push	{r1, r2, r3}
 800749a:	b580      	push	{r7, lr}
 800749c:	b085      	sub	sp, #20
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80074a6:	f107 0320 	add.w	r3, r7, #32
 80074aa:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 80074ac:	f107 0308 	add.w	r3, r7, #8
 80074b0:	461a      	mov	r2, r3
 80074b2:	69f9      	ldr	r1, [r7, #28]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff ffd3 	bl	8007460 <mg_vprintf>
 80074ba:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80074bc:	68fb      	ldr	r3, [r7, #12]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074c8:	b003      	add	sp, #12
 80074ca:	4770      	bx	lr

080074cc <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b086      	sub	sp, #24
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	f107 0308 	add.w	r3, r7, #8
 80074d6:	e883 0003 	stmia.w	r3, {r0, r1}
 80074da:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 80074dc:	480d      	ldr	r0, [pc, #52]	; (8007514 <mg_atonl+0x48>)
 80074de:	f003 fc07 	bl	800acf0 <mg_ntohl>
 80074e2:	4603      	mov	r3, r0
 80074e4:	617b      	str	r3, [r7, #20]
  if (mg_vcasecmp(&str, "localhost") != 0) return false;
 80074e6:	f107 0308 	add.w	r3, r7, #8
 80074ea:	490b      	ldr	r1, [pc, #44]	; (8007518 <mg_atonl+0x4c>)
 80074ec:	4618      	mov	r0, r3
 80074ee:	f002 fe6d 	bl	800a1cc <mg_vcasecmp>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <mg_atonl+0x30>
 80074f8:	2300      	movs	r3, #0
 80074fa:	e006      	b.n	800750a <mg_atonl+0x3e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	697a      	ldr	r2, [r7, #20]
 8007500:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2200      	movs	r2, #0
 8007506:	749a      	strb	r2, [r3, #18]
  return true;
 8007508:	2301      	movs	r3, #1
}
 800750a:	4618      	mov	r0, r3
 800750c:	3718      	adds	r7, #24
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	7f000001 	.word	0x7f000001
 8007518:	08017160 	.word	0x08017160

0800751c <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	f107 0308 	add.w	r3, r7, #8
 8007526:	e883 0003 	stmia.w	r3, {r0, r1}
 800752a:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d001      	beq.n	8007536 <mg_atone+0x1a>
 8007532:	2300      	movs	r3, #0
 8007534:	e009      	b.n	800754a <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2210      	movs	r2, #16
 800753a:	2100      	movs	r1, #0
 800753c:	4618      	mov	r0, r3
 800753e:	f00e f88a 	bl	8015656 <memset>
  addr->is_ip6 = false;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	749a      	strb	r2, [r3, #18]
  return true;
 8007548:	2301      	movs	r3, #1
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 8007552:	b480      	push	{r7}
 8007554:	b089      	sub	sp, #36	; 0x24
 8007556:	af00      	add	r7, sp, #0
 8007558:	f107 0308 	add.w	r3, r7, #8
 800755c:	e883 0003 	stmia.w	r3, {r0, r1}
 8007560:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 800756a:	2300      	movs	r3, #0
 800756c:	61fb      	str	r3, [r7, #28]
 800756e:	e049      	b.n	8007604 <mg_aton4+0xb2>
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8007570:	68ba      	ldr	r2, [r7, #8]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	2b2f      	cmp	r3, #47	; 0x2f
 800757a:	d925      	bls.n	80075c8 <mg_aton4+0x76>
 800757c:	68ba      	ldr	r2, [r7, #8]
 800757e:	69fb      	ldr	r3, [r7, #28]
 8007580:	4413      	add	r3, r2
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	2b39      	cmp	r3, #57	; 0x39
 8007586:	d81f      	bhi.n	80075c8 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.ptr[i] - '0');
 8007588:	f107 0210 	add.w	r2, r7, #16
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	4413      	add	r3, r2
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	461a      	mov	r2, r3
 8007594:	4613      	mov	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	4413      	add	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4619      	mov	r1, r3
 800759e:	68ba      	ldr	r2, [r7, #8]
 80075a0:	69fb      	ldr	r3, [r7, #28]
 80075a2:	4413      	add	r3, r2
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	3b30      	subs	r3, #48	; 0x30
 80075a8:	440b      	add	r3, r1
 80075aa:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2bff      	cmp	r3, #255	; 0xff
 80075b0:	dd01      	ble.n	80075b6 <mg_aton4+0x64>
 80075b2:	2300      	movs	r3, #0
 80075b4:	e03d      	b.n	8007632 <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	b2d9      	uxtb	r1, r3
 80075ba:	f107 0210 	add.w	r2, r7, #16
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	4413      	add	r3, r2
 80075c2:	460a      	mov	r2, r1
 80075c4:	701a      	strb	r2, [r3, #0]
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 80075c6:	e01a      	b.n	80075fe <mg_aton4+0xac>
    } else if (str.ptr[i] == '.') {
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	69fb      	ldr	r3, [r7, #28]
 80075cc:	4413      	add	r3, r2
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b2e      	cmp	r3, #46	; 0x2e
 80075d2:	d112      	bne.n	80075fa <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.ptr[i - 1] == '.') return false;
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d809      	bhi.n	80075ee <mg_aton4+0x9c>
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d006      	beq.n	80075ee <mg_aton4+0x9c>
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	4413      	add	r3, r2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b2e      	cmp	r3, #46	; 0x2e
 80075ec:	d101      	bne.n	80075f2 <mg_aton4+0xa0>
 80075ee:	2300      	movs	r3, #0
 80075f0:	e01f      	b.n	8007632 <mg_aton4+0xe0>
      num_dots++;
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	3301      	adds	r3, #1
 80075f6:	61bb      	str	r3, [r7, #24]
 80075f8:	e001      	b.n	80075fe <mg_aton4+0xac>
    } else {
      return false;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e019      	b.n	8007632 <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	3301      	adds	r3, #1
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	69fa      	ldr	r2, [r7, #28]
 8007608:	429a      	cmp	r2, r3
 800760a:	d3b1      	bcc.n	8007570 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.ptr[i - 1] == '.') return false;
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b03      	cmp	r3, #3
 8007610:	d106      	bne.n	8007620 <mg_aton4+0xce>
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	3b01      	subs	r3, #1
 8007618:	4413      	add	r3, r2
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	2b2e      	cmp	r3, #46	; 0x2e
 800761e:	d101      	bne.n	8007624 <mg_aton4+0xd2>
 8007620:	2300      	movs	r3, #0
 8007622:	e006      	b.n	8007632 <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	693a      	ldr	r2, [r7, #16]
 8007628:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	749a      	strb	r2, [r3, #18]
  return true;
 8007630:	2301      	movs	r3, #1
}
 8007632:	4618      	mov	r0, r3
 8007634:	3724      	adds	r7, #36	; 0x24
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 800763e:	b580      	push	{r7, lr}
 8007640:	b088      	sub	sp, #32
 8007642:	af00      	add	r7, sp, #0
 8007644:	f107 0308 	add.w	r3, r7, #8
 8007648:	e883 0003 	stmia.w	r3, {r0, r1}
 800764c:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b0d      	cmp	r3, #13
 8007652:	d801      	bhi.n	8007658 <mg_v4mapped+0x1a>
 8007654:	2300      	movs	r3, #0
 8007656:	e056      	b.n	8007706 <mg_v4mapped+0xc8>
  if (str.ptr[0] != ':' || str.ptr[1] != ':' || str.ptr[6] != ':') return false;
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	781b      	ldrb	r3, [r3, #0]
 800765c:	2b3a      	cmp	r3, #58	; 0x3a
 800765e:	d109      	bne.n	8007674 <mg_v4mapped+0x36>
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	3301      	adds	r3, #1
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b3a      	cmp	r3, #58	; 0x3a
 8007668:	d104      	bne.n	8007674 <mg_v4mapped+0x36>
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	3306      	adds	r3, #6
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b3a      	cmp	r3, #58	; 0x3a
 8007672:	d001      	beq.n	8007678 <mg_v4mapped+0x3a>
 8007674:	2300      	movs	r3, #0
 8007676:	e046      	b.n	8007706 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8007678:	2302      	movs	r3, #2
 800767a:	61fb      	str	r3, [r7, #28]
 800767c:	e010      	b.n	80076a0 <mg_v4mapped+0x62>
    if (str.ptr[i] != 'f' && str.ptr[i] != 'F') return false;
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	69fb      	ldr	r3, [r7, #28]
 8007682:	4413      	add	r3, r2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	2b66      	cmp	r3, #102	; 0x66
 8007688:	d007      	beq.n	800769a <mg_v4mapped+0x5c>
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	4413      	add	r3, r2
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	2b46      	cmp	r3, #70	; 0x46
 8007694:	d001      	beq.n	800769a <mg_v4mapped+0x5c>
 8007696:	2300      	movs	r3, #0
 8007698:	e035      	b.n	8007706 <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	3301      	adds	r3, #1
 800769e:	61fb      	str	r3, [r7, #28]
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	2b05      	cmp	r3, #5
 80076a4:	ddeb      	ble.n	800767e <mg_v4mapped+0x40>
  }
  //struct mg_str s = mg_str_n(&str.ptr[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.ptr[7], str.len - 7), addr)) return false;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	1dd9      	adds	r1, r3, #7
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	1fda      	subs	r2, r3, #7
 80076ae:	f107 0314 	add.w	r3, r7, #20
 80076b2:	4618      	mov	r0, r3
 80076b4:	f002 fd09 	bl	800a0ca <mg_str_n>
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	f107 0314 	add.w	r3, r7, #20
 80076be:	e893 0003 	ldmia.w	r3, {r0, r1}
 80076c2:	f7ff ff46 	bl	8007552 <mg_aton4>
 80076c6:	4603      	mov	r3, r0
 80076c8:	f083 0301 	eor.w	r3, r3, #1
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d001      	beq.n	80076d6 <mg_v4mapped+0x98>
 80076d2:	2300      	movs	r3, #0
 80076d4:	e017      	b.n	8007706 <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2210      	movs	r2, #16
 80076e0:	2100      	movs	r1, #0
 80076e2:	4618      	mov	r0, r3
 80076e4:	f00d ffb7 	bl	8015656 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	22ff      	movs	r2, #255	; 0xff
 80076ec:	72da      	strb	r2, [r3, #11]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	7ada      	ldrb	r2, [r3, #11]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	330c      	adds	r3, #12
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	749a      	strb	r2, [r3, #18]
  return true;
 8007704:	2301      	movs	r3, #1
}
 8007706:	4618      	mov	r0, r3
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 800770e:	b580      	push	{r7, lr}
 8007710:	b08a      	sub	sp, #40	; 0x28
 8007712:	af00      	add	r7, sp, #0
 8007714:	f107 0308 	add.w	r3, r7, #8
 8007718:	e883 0003 	stmia.w	r3, {r0, r1}
 800771c:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 800771e:	2300      	movs	r3, #0
 8007720:	623b      	str	r3, [r7, #32]
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
 8007726:	232a      	movs	r3, #42	; 0x2a
 8007728:	61bb      	str	r3, [r7, #24]
  if (str.len > 2 && str.ptr[0] == '[') str.ptr++, str.len -= 2;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d909      	bls.n	8007744 <mg_aton6+0x36>
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b5b      	cmp	r3, #91	; 0x5b
 8007736:	d105      	bne.n	8007744 <mg_aton6+0x36>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	3301      	adds	r3, #1
 800773c:	60bb      	str	r3, [r7, #8]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	3b02      	subs	r3, #2
 8007742:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	f107 0308 	add.w	r3, r7, #8
 800774a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800774e:	f7ff ff76 	bl	800763e <mg_v4mapped>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <mg_aton6+0x4e>
 8007758:	2301      	movs	r3, #1
 800775a:	e0b5      	b.n	80078c8 <mg_aton6+0x1ba>
  for (i = 0; i < str.len; i++) {
 800775c:	2300      	movs	r3, #0
 800775e:	627b      	str	r3, [r7, #36]	; 0x24
 8007760:	e084      	b.n	800786c <mg_aton6+0x15e>
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	4413      	add	r3, r2
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	2b2f      	cmp	r3, #47	; 0x2f
 800776c:	d905      	bls.n	800777a <mg_aton6+0x6c>
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	4413      	add	r3, r2
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b39      	cmp	r3, #57	; 0x39
 8007778:	d917      	bls.n	80077aa <mg_aton6+0x9c>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	4413      	add	r3, r2
 8007780:	781b      	ldrb	r3, [r3, #0]
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 8007782:	2b60      	cmp	r3, #96	; 0x60
 8007784:	d905      	bls.n	8007792 <mg_aton6+0x84>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	4413      	add	r3, r2
 800778c:	781b      	ldrb	r3, [r3, #0]
 800778e:	2b66      	cmp	r3, #102	; 0x66
 8007790:	d90b      	bls.n	80077aa <mg_aton6+0x9c>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007796:	4413      	add	r3, r2
 8007798:	781b      	ldrb	r3, [r3, #0]
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 800779a:	2b40      	cmp	r3, #64	; 0x40
 800779c:	d926      	bls.n	80077ec <mg_aton6+0xde>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a2:	4413      	add	r3, r2
 80077a4:	781b      	ldrb	r3, [r3, #0]
 80077a6:	2b46      	cmp	r3, #70	; 0x46
 80077a8:	d820      	bhi.n	80077ec <mg_aton6+0xde>
      unsigned long val;
      if (i > j + 3) return false;
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	3303      	adds	r3, #3
 80077ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d901      	bls.n	80077b8 <mg_aton6+0xaa>
 80077b4:	2300      	movs	r3, #0
 80077b6:	e087      	b.n	80078c8 <mg_aton6+0x1ba>
      // MG_DEBUG(("%zu %zu [%.*s]", i, j, (int) (i - j + 1), &str.ptr[j]));
      val = mg_unhexn(&str.ptr[j], i - j + 1);
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	6a3b      	ldr	r3, [r7, #32]
 80077bc:	18d0      	adds	r0, r2, r3
 80077be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	3301      	adds	r3, #1
 80077c6:	4619      	mov	r1, r3
 80077c8:	f002 ffb6 	bl	800a738 <mg_unhexn>
 80077cc:	6178      	str	r0, [r7, #20]
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	0a1b      	lsrs	r3, r3, #8
 80077d2:	b2d9      	uxtb	r1, r3
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	4413      	add	r3, r2
 80077da:	460a      	mov	r2, r1
 80077dc:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	3301      	adds	r3, #1
 80077e2:	697a      	ldr	r2, [r7, #20]
 80077e4:	b2d1      	uxtb	r1, r2
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	54d1      	strb	r1, [r2, r3]
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 80077ea:	e03c      	b.n	8007866 <mg_aton6+0x158>
    } else if (str.ptr[i] == ':') {
 80077ec:	68ba      	ldr	r2, [r7, #8]
 80077ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f0:	4413      	add	r3, r2
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b3a      	cmp	r3, #58	; 0x3a
 80077f6:	d134      	bne.n	8007862 <mg_aton6+0x154>
      j = i + 1;
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	3301      	adds	r3, #1
 80077fc:	623b      	str	r3, [r7, #32]
      if (i > 0 && str.ptr[i - 1] == ':') {
 80077fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007800:	2b00      	cmp	r3, #0
 8007802:	d014      	beq.n	800782e <mg_aton6+0x120>
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007808:	3b01      	subs	r3, #1
 800780a:	4413      	add	r3, r2
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b3a      	cmp	r3, #58	; 0x3a
 8007810:	d10d      	bne.n	800782e <mg_aton6+0x120>
        dc = n;  // Double colon
 8007812:	69fb      	ldr	r3, [r7, #28]
 8007814:	61bb      	str	r3, [r7, #24]
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	2b01      	cmp	r3, #1
 800781a:	d90f      	bls.n	800783c <mg_aton6+0x12e>
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	3b02      	subs	r3, #2
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b3a      	cmp	r3, #58	; 0x3a
 8007828:	d108      	bne.n	800783c <mg_aton6+0x12e>
 800782a:	2300      	movs	r3, #0
 800782c:	e04c      	b.n	80078c8 <mg_aton6+0x1ba>
      } else if (i > 0) {
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	2b00      	cmp	r3, #0
 8007832:	d004      	beq.n	800783e <mg_aton6+0x130>
        n += 2;
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	3302      	adds	r3, #2
 8007838:	61fb      	str	r3, [r7, #28]
 800783a:	e000      	b.n	800783e <mg_aton6+0x130>
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 800783c:	bf00      	nop
      }
      if (n > 14) return false;
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	2b0e      	cmp	r3, #14
 8007842:	d901      	bls.n	8007848 <mg_aton6+0x13a>
 8007844:	2300      	movs	r3, #0
 8007846:	e03f      	b.n	80078c8 <mg_aton6+0x1ba>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	3301      	adds	r3, #1
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	2100      	movs	r1, #0
 8007850:	54d1      	strb	r1, [r2, r3]
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	5cd1      	ldrb	r1, [r2, r3]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	4413      	add	r3, r2
 800785c:	460a      	mov	r2, r1
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	e001      	b.n	8007866 <mg_aton6+0x158>
    } else {
      return false;
 8007862:	2300      	movs	r3, #0
 8007864:	e030      	b.n	80078c8 <mg_aton6+0x1ba>
  for (i = 0; i < str.len; i++) {
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	3301      	adds	r3, #1
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	429a      	cmp	r2, r3
 8007872:	f4ff af76 	bcc.w	8007762 <mg_aton6+0x54>
    }
  }
  if (n < 14 && dc == 42) return false;
 8007876:	69fb      	ldr	r3, [r7, #28]
 8007878:	2b0d      	cmp	r3, #13
 800787a:	d804      	bhi.n	8007886 <mg_aton6+0x178>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	2b2a      	cmp	r3, #42	; 0x2a
 8007880:	d101      	bne.n	8007886 <mg_aton6+0x178>
 8007882:	2300      	movs	r3, #0
 8007884:	e020      	b.n	80078c8 <mg_aton6+0x1ba>
  if (n < 14) {
 8007886:	69fb      	ldr	r3, [r7, #28]
 8007888:	2b0d      	cmp	r3, #13
 800788a:	d819      	bhi.n	80078c0 <mg_aton6+0x1b2>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	1ad3      	subs	r3, r2, r3
 8007892:	330e      	adds	r3, #14
 8007894:	687a      	ldr	r2, [r7, #4]
 8007896:	18d0      	adds	r0, r2, r3
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	18d1      	adds	r1, r2, r3
 800789e:	69fa      	ldr	r2, [r7, #28]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	3302      	adds	r3, #2
 80078a6:	461a      	mov	r2, r3
 80078a8:	f00d febb 	bl	8015622 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	18d0      	adds	r0, r2, r3
 80078b2:	69fb      	ldr	r3, [r7, #28]
 80078b4:	f1c3 030e 	rsb	r3, r3, #14
 80078b8:	461a      	mov	r2, r3
 80078ba:	2100      	movs	r1, #0
 80078bc:	f00d fecb 	bl	8015656 <memset>
  }

  addr->is_ip6 = true;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	749a      	strb	r2, [r3, #18]
  return true;
 80078c6:	2301      	movs	r3, #1
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	; 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	f107 0308 	add.w	r3, r7, #8
 80078da:	e883 0003 	stmia.w	r3, {r0, r1}
 80078de:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	f107 0308 	add.w	r3, r7, #8
 80078e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078ea:	f7ff fe17 	bl	800751c <mg_atone>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d11d      	bne.n	8007930 <mg_aton+0x60>
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	f107 0308 	add.w	r3, r7, #8
 80078fa:	e893 0003 	ldmia.w	r3, {r0, r1}
 80078fe:	f7ff fde5 	bl	80074cc <mg_atonl>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d113      	bne.n	8007930 <mg_aton+0x60>
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	f107 0308 	add.w	r3, r7, #8
 800790e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007912:	f7ff fe1e 	bl	8007552 <mg_aton4>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d109      	bne.n	8007930 <mg_aton+0x60>
         mg_aton6(str, addr);
 800791c:	687a      	ldr	r2, [r7, #4]
 800791e:	f107 0308 	add.w	r3, r7, #8
 8007922:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007926:	f7ff fef2 	bl	800770e <mg_aton6>
 800792a:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 800792c:	2b00      	cmp	r3, #0
 800792e:	d001      	beq.n	8007934 <mg_aton+0x64>
 8007930:	2301      	movs	r3, #1
 8007932:	e000      	b.n	8007936 <mg_aton+0x66>
 8007934:	2300      	movs	r3, #0
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	b2db      	uxtb	r3, r3
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	3390      	adds	r3, #144	; 0x90
 8007952:	4619      	mov	r1, r3
 8007954:	2001      	movs	r0, #1
 8007956:	f00d fb75 	bl	8015044 <calloc>
 800795a:	4603      	mov	r3, r0
 800795c:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d013      	beq.n	800798c <mg_alloc_conn+0x48>
    c->mgr = mgr;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	687a      	ldr	r2, [r7, #4]
 8007968:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007970:	645a      	str	r2, [r3, #68]	; 0x44
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69db      	ldr	r3, [r3, #28]
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	61da      	str	r2, [r3, #28]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	69da      	ldr	r2, [r3, #28]
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 800798c:	68fb      	ldr	r3, [r7, #12]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3710      	adds	r7, #16
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
	...

08007998 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7f9 fea9 	bl	80016f8 <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	60fb      	str	r3, [r7, #12]
 80079ac:	e002      	b.n	80079b4 <mg_close_conn+0x1c>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d1f7      	bne.n	80079ae <mg_close_conn+0x16>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681a      	ldr	r2, [r3, #0]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	689b      	ldr	r3, [r3, #8]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d103      	bne.n	80079da <mg_close_conn+0x42>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d103      	bne.n	80079ee <mg_close_conn+0x56>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80079ee:	2200      	movs	r2, #0
 80079f0:	2109      	movs	r1, #9
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f7fa fc14 	bl	8002220 <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 80079f8:	4b15      	ldr	r3, [pc, #84]	; (8007a50 <mg_close_conn+0xb8>)
 80079fa:	f640 625e 	movw	r2, #3678	; 0xe5e
 80079fe:	4915      	ldr	r1, [pc, #84]	; (8007a54 <mg_close_conn+0xbc>)
 8007a00:	2003      	movs	r0, #3
 8007a02:	f7ff fbeb 	bl	80071dc <mg_log_prefix>
 8007a06:	4603      	mov	r3, r0
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d007      	beq.n	8007a1c <mg_close_conn+0x84>
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	461a      	mov	r2, r3
 8007a16:	4810      	ldr	r0, [pc, #64]	; (8007a58 <mg_close_conn+0xc0>)
 8007a18:	f7ff fc3a 	bl	8007290 <mg_log>

  mg_tls_free(c);
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f003 f813 	bl	800aa48 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	3338      	adds	r3, #56	; 0x38
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fe fd0f 	bl	800644a <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	3348      	adds	r3, #72	; 0x48
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe fd0a 	bl	800644a <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 8007a36:	2290      	movs	r2, #144	; 0x90
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f00d fe0b 	bl	8015656 <memset>
  free(c);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f00d fb25 	bl	8015090 <free>
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	080183e8 	.word	0x080183e8
 8007a54:	0801645c 	.word	0x0801645c
 8007a58:	0801716c 	.word	0x0801716c

08007a5c <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
 8007a68:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d003      	beq.n	8007a7c <mg_connect+0x20>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10d      	bne.n	8007a98 <mg_connect+0x3c>
    MG_ERROR(("null url"));
 8007a7c:	4b36      	ldr	r3, [pc, #216]	; (8007b58 <mg_connect+0xfc>)
 8007a7e:	f640 626b 	movw	r2, #3691	; 0xe6b
 8007a82:	4936      	ldr	r1, [pc, #216]	; (8007b5c <mg_connect+0x100>)
 8007a84:	2001      	movs	r0, #1
 8007a86:	f7ff fba9 	bl	80071dc <mg_log_prefix>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d05d      	beq.n	8007b4c <mg_connect+0xf0>
 8007a90:	4833      	ldr	r0, [pc, #204]	; (8007b60 <mg_connect+0x104>)
 8007a92:	f7ff fbfd 	bl	8007290 <mg_log>
 8007a96:	e059      	b.n	8007b4c <mg_connect+0xf0>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	f7ff ff53 	bl	8007944 <mg_alloc_conn>
 8007a9e:	6178      	str	r0, [r7, #20]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10d      	bne.n	8007ac2 <mg_connect+0x66>
    MG_ERROR(("OOM"));
 8007aa6:	4b2c      	ldr	r3, [pc, #176]	; (8007b58 <mg_connect+0xfc>)
 8007aa8:	f640 626d 	movw	r2, #3693	; 0xe6d
 8007aac:	492b      	ldr	r1, [pc, #172]	; (8007b5c <mg_connect+0x100>)
 8007aae:	2001      	movs	r0, #1
 8007ab0:	f7ff fb94 	bl	80071dc <mg_log_prefix>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d048      	beq.n	8007b4c <mg_connect+0xf0>
 8007aba:	482a      	ldr	r0, [pc, #168]	; (8007b64 <mg_connect+0x108>)
 8007abc:	f7ff fbe8 	bl	8007290 <mg_log>
 8007ac0:	e044      	b.n	8007b4c <mg_connect+0xf0>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	601a      	str	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	697a      	ldr	r2, [r7, #20]
 8007ace:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	4925      	ldr	r1, [pc, #148]	; (8007b68 <mg_connect+0x10c>)
 8007ad4:	68b8      	ldr	r0, [r7, #8]
 8007ad6:	f00d fdf0 	bl	80156ba <strncmp>
 8007ada:	4603      	mov	r3, r0
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	bf0c      	ite	eq
 8007ae0:	2301      	moveq	r3, #1
 8007ae2:	2300      	movne	r3, #0
 8007ae4:	b2d9      	uxtb	r1, r3
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8007aec:	f361 0300 	bfi	r3, r1, #0, #1
 8007af0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f04f 32ff 	mov.w	r2, #4294967295
 8007afa:	631a      	str	r2, [r3, #48]	; 0x30
    c->fn = fn;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	687a      	ldr	r2, [r7, #4]
 8007b00:	659a      	str	r2, [r3, #88]	; 0x58
    c->is_client = true;
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8007b08:	f043 0302 	orr.w	r3, r3, #2
 8007b0c:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->fn_data = fn_data;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	683a      	ldr	r2, [r7, #0]
 8007b14:	65da      	str	r2, [r3, #92]	; 0x5c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 8007b16:	4b10      	ldr	r3, [pc, #64]	; (8007b58 <mg_connect+0xfc>)
 8007b18:	f640 6275 	movw	r2, #3701	; 0xe75
 8007b1c:	490f      	ldr	r1, [pc, #60]	; (8007b5c <mg_connect+0x100>)
 8007b1e:	2003      	movs	r0, #3
 8007b20:	f7ff fb5c 	bl	80071dc <mg_log_prefix>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <mg_connect+0xde>
 8007b2a:	697b      	ldr	r3, [r7, #20]
 8007b2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	480d      	ldr	r0, [pc, #52]	; (8007b6c <mg_connect+0x110>)
 8007b36:	f7ff fbab 	bl	8007290 <mg_log>
    mg_call(c, MG_EV_OPEN, NULL);
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	6978      	ldr	r0, [r7, #20]
 8007b40:	f7fa fb6e 	bl	8002220 <mg_call>
    mg_resolve(c, url);
 8007b44:	68b9      	ldr	r1, [r7, #8]
 8007b46:	6978      	ldr	r0, [r7, #20]
 8007b48:	f7fa fb26 	bl	8002198 <mg_resolve>
  }
  return c;
 8007b4c:	697b      	ldr	r3, [r7, #20]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3718      	adds	r7, #24
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
 8007b56:	bf00      	nop
 8007b58:	080183f8 	.word	0x080183f8
 8007b5c:	0801645c 	.word	0x0801645c
 8007b60:	0801717c 	.word	0x0801717c
 8007b64:	08017188 	.word	0x08017188
 8007b68:	0801718c 	.word	0x0801718c
 8007b6c:	08016568 	.word	0x08016568

08007b70 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
 8007b7c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 8007b82:	68f8      	ldr	r0, [r7, #12]
 8007b84:	f7ff fede 	bl	8007944 <mg_alloc_conn>
 8007b88:	6178      	str	r0, [r7, #20]
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d10e      	bne.n	8007bae <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 8007b90:	4b39      	ldr	r3, [pc, #228]	; (8007c78 <mg_listen+0x108>)
 8007b92:	f44f 6268 	mov.w	r2, #3712	; 0xe80
 8007b96:	4939      	ldr	r1, [pc, #228]	; (8007c7c <mg_listen+0x10c>)
 8007b98:	2001      	movs	r0, #1
 8007b9a:	f7ff fb1f 	bl	80071dc <mg_log_prefix>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d064      	beq.n	8007c6e <mg_listen+0xfe>
 8007ba4:	68b9      	ldr	r1, [r7, #8]
 8007ba6:	4836      	ldr	r0, [pc, #216]	; (8007c80 <mg_listen+0x110>)
 8007ba8:	f7ff fb72 	bl	8007290 <mg_log>
 8007bac:	e05f      	b.n	8007c6e <mg_listen+0xfe>
  } else if (!mg_open_listener(c, url)) {
 8007bae:	68b9      	ldr	r1, [r7, #8]
 8007bb0:	6978      	ldr	r0, [r7, #20]
 8007bb2:	f006 fe2f 	bl	800e814 <mg_open_listener>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	f083 0301 	eor.w	r3, r3, #1
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d018      	beq.n	8007bf4 <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 8007bc2:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <mg_listen+0x108>)
 8007bc4:	f640 6282 	movw	r2, #3714	; 0xe82
 8007bc8:	492c      	ldr	r1, [pc, #176]	; (8007c7c <mg_listen+0x10c>)
 8007bca:	2001      	movs	r0, #1
 8007bcc:	f7ff fb06 	bl	80071dc <mg_log_prefix>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d008      	beq.n	8007be8 <mg_listen+0x78>
 8007bd6:	f00d fdf1 	bl	80157bc <__errno>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	461a      	mov	r2, r3
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	4828      	ldr	r0, [pc, #160]	; (8007c84 <mg_listen+0x114>)
 8007be4:	f7ff fb54 	bl	8007290 <mg_log>
    free(c);
 8007be8:	6978      	ldr	r0, [r7, #20]
 8007bea:	f00d fa51 	bl	8015090 <free>
    c = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	617b      	str	r3, [r7, #20]
 8007bf2:	e03c      	b.n	8007c6e <mg_listen+0xfe>
  } else {
    c->is_listening = 1;
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8007bfa:	f043 0301 	orr.w	r3, r3, #1
 8007bfe:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 8007c02:	2204      	movs	r2, #4
 8007c04:	4920      	ldr	r1, [pc, #128]	; (8007c88 <mg_listen+0x118>)
 8007c06:	68b8      	ldr	r0, [r7, #8]
 8007c08:	f00d fd57 	bl	80156ba <strncmp>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	bf0c      	ite	eq
 8007c12:	2301      	moveq	r3, #1
 8007c14:	2300      	movne	r3, #0
 8007c16:	b2d9      	uxtb	r1, r3
 8007c18:	697a      	ldr	r2, [r7, #20]
 8007c1a:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8007c1e:	f361 0300 	bfi	r3, r1, #0, #1
 8007c22:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	601a      	str	r2, [r3, #0]
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	683a      	ldr	r2, [r7, #0]
 8007c3e:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 8007c40:	2200      	movs	r2, #0
 8007c42:	2101      	movs	r1, #1
 8007c44:	6978      	ldr	r0, [r7, #20]
 8007c46:	f7fa faeb 	bl	8002220 <mg_call>
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <mg_listen+0x108>)
 8007c4c:	f640 628c 	movw	r2, #3724	; 0xe8c
 8007c50:	490a      	ldr	r1, [pc, #40]	; (8007c7c <mg_listen+0x10c>)
 8007c52:	2003      	movs	r0, #3
 8007c54:	f7ff fac2 	bl	80071dc <mg_log_prefix>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d007      	beq.n	8007c6e <mg_listen+0xfe>
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4808      	ldr	r0, [pc, #32]	; (8007c8c <mg_listen+0x11c>)
 8007c6a:	f7ff fb11 	bl	8007290 <mg_log>
  }
  return c;
 8007c6e:	697b      	ldr	r3, [r7, #20]
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	08018404 	.word	0x08018404
 8007c7c:	0801645c 	.word	0x0801645c
 8007c80:	08017194 	.word	0x08017194
 8007c84:	0801719c 	.word	0x0801719c
 8007c88:	0801718c 	.word	0x0801718c
 8007c8c:	08016568 	.word	0x08016568

08007c90 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b08a      	sub	sp, #40	; 0x28
 8007c94:	af04      	add	r7, sp, #16
 8007c96:	60f8      	str	r0, [r7, #12]
 8007c98:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8007c9c:	2128      	movs	r1, #40	; 0x28
 8007c9e:	2001      	movs	r0, #1
 8007ca0:	f00d f9d0 	bl	8015044 <calloc>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d014      	beq.n	8007cd8 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	9302      	str	r3, [sp, #8]
 8007cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cba:	9301      	str	r3, [sp, #4]
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc4:	6979      	ldr	r1, [r7, #20]
 8007cc6:	f002 fdae 	bl	800a826 <mg_timer_init>
    t->id = mgr->timerid++;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6a1b      	ldr	r3, [r3, #32]
 8007cce:	1c59      	adds	r1, r3, #1
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	6211      	str	r1, [r2, #32]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	6013      	str	r3, [r2, #0]
  }
  return t;
 8007cd8:	697b      	ldr	r3, [r7, #20]
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <mg_mgr_init>:
#if MG_ENABLE_EPOLL
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8007cec:	2244      	movs	r2, #68	; 0x44
 8007cee:	2100      	movs	r1, #0
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f00d fcb0 	bl	8015656 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cfc:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8007d04:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	4a04      	ldr	r2, [pc, #16]	; (8007d1c <mg_mgr_init+0x38>)
 8007d0a:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a04      	ldr	r2, [pc, #16]	; (8007d20 <mg_mgr_init+0x3c>)
 8007d10:	60da      	str	r2, [r3, #12]
}
 8007d12:	bf00      	nop
 8007d14:	3708      	adds	r7, #8
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	080171cc 	.word	0x080171cc
 8007d20:	080171e0 	.word	0x080171e0

08007d24 <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	71fb      	strb	r3, [r7, #7]
 8007d30:	4613      	mov	r3, r2
 8007d32:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8007d38:	79bb      	ldrb	r3, [r7, #6]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00d      	beq.n	8007d5a <mg_pfn_iobuf_private+0x36>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	1c9a      	adds	r2, r3, #2
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d906      	bls.n	8007d5a <mg_pfn_iobuf_private+0x36>
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	3302      	adds	r3, #2
 8007d52:	4619      	mov	r1, r3
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7fe fa51 	bl	80061fc <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	1c9a      	adds	r2, r3, #2
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d811      	bhi.n	8007d8c <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	1c58      	adds	r0, r3, #1
 8007d72:	68f9      	ldr	r1, [r7, #12]
 8007d74:	6088      	str	r0, [r1, #8]
 8007d76:	4413      	add	r3, r2
 8007d78:	79fa      	ldrb	r2, [r7, #7]
 8007d7a:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	4413      	add	r3, r2
 8007d86:	2200      	movs	r2, #0
 8007d88:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8007d8a:	e00f      	b.n	8007dac <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d209      	bcs.n	8007dac <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	1c58      	adds	r0, r3, #1
 8007da2:	68f9      	ldr	r1, [r7, #12]
 8007da4:	6088      	str	r0, [r1, #8]
 8007da6:	4413      	add	r3, r2
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
}
 8007dac:	bf00      	nop
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8007dc0:	79fb      	ldrb	r3, [r7, #7]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f7ff ffac 	bl	8007d24 <mg_pfn_iobuf_private>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	4603      	mov	r3, r0
 8007ddc:	6039      	str	r1, [r7, #0]
 8007dde:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8007de0:	79fb      	ldrb	r3, [r7, #7]
 8007de2:	2201      	movs	r2, #1
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7ff ff9c 	bl	8007d24 <mg_pfn_iobuf_private>
}
 8007dec:	bf00      	nop
 8007dee:	3708      	adds	r7, #8
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	; 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	61bb      	str	r3, [r7, #24]
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	2300      	movs	r3, #0
 8007e10:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8007e12:	f107 0114 	add.w	r1, r7, #20
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4809      	ldr	r0, [pc, #36]	; (8007e40 <mg_vsnprintf+0x4c>)
 8007e1c:	f7fa fecc 	bl	8002bb8 <mg_vxprintf>
 8007e20:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 8007e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d204      	bcs.n	8007e34 <mg_vsnprintf+0x40>
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	4413      	add	r3, r2
 8007e30:	2200      	movs	r2, #0
 8007e32:	701a      	strb	r2, [r3, #0]
  return n;
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3728      	adds	r7, #40	; 0x28
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}
 8007e3e:	bf00      	nop
 8007e40:	08007db5 	.word	0x08007db5

08007e44 <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8007e44:	b40c      	push	{r2, r3}
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8007e50:	f107 031c 	add.w	r3, r7, #28
 8007e54:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8007e56:	f107 0308 	add.w	r3, r7, #8
 8007e5a:	69ba      	ldr	r2, [r7, #24]
 8007e5c:	6839      	ldr	r1, [r7, #0]
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7ff ffc8 	bl	8007df4 <mg_vsnprintf>
 8007e64:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8007e66:	68fb      	ldr	r3, [r7, #12]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e72:	b002      	add	sp, #8
 8007e74:	4770      	bx	lr

08007e76 <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	6039      	str	r1, [r7, #0]
 8007e80:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f00d fb71 	bl	801556c <putchar>
  (void) param;
}
 8007e8a:	bf00      	nop
 8007e8c:	3708      	adds	r7, #8
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
	...

08007e94 <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b088      	sub	sp, #32
 8007e98:	af04      	add	r7, sp, #16
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	461a      	mov	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	3302      	adds	r3, #2
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3303      	adds	r3, #3
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	9302      	str	r3, [sp, #8]
 8007ebe:	9101      	str	r1, [sp, #4]
 8007ec0:	9200      	str	r2, [sp, #0]
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4a04      	ldr	r2, [pc, #16]	; (8007ed8 <print_ip4+0x44>)
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f7fa fe5a 	bl	8002b82 <mg_xprintf>
 8007ece:	4603      	mov	r3, r0
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}
 8007ed8:	08017200 	.word	0x08017200

08007edc <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8007edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ee0:	b08e      	sub	sp, #56	; 0x38
 8007ee2:	af08      	add	r7, sp, #32
 8007ee4:	6178      	str	r0, [r7, #20]
 8007ee6:	6139      	str	r1, [r7, #16]
 8007ee8:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	881b      	ldrh	r3, [r3, #0]
 8007eee:	4618      	mov	r0, r3
 8007ef0:	f002 ff17 	bl	800ad22 <mg_ntohs>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	3302      	adds	r3, #2
 8007efc:	881b      	ldrh	r3, [r3, #0]
 8007efe:	4618      	mov	r0, r3
 8007f00:	f002 ff0f 	bl	800ad22 <mg_ntohs>
 8007f04:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007f06:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	881b      	ldrh	r3, [r3, #0]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f002 ff07 	bl	800ad22 <mg_ntohs>
 8007f14:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007f16:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3306      	adds	r3, #6
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f002 feff 	bl	800ad22 <mg_ntohs>
 8007f24:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007f26:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	3308      	adds	r3, #8
 8007f2c:	881b      	ldrh	r3, [r3, #0]
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f002 fef7 	bl	800ad22 <mg_ntohs>
 8007f34:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007f36:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	330a      	adds	r3, #10
 8007f3c:	881b      	ldrh	r3, [r3, #0]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f002 feef 	bl	800ad22 <mg_ntohs>
 8007f44:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007f46:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	330c      	adds	r3, #12
 8007f4c:	881b      	ldrh	r3, [r3, #0]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 fee7 	bl	800ad22 <mg_ntohs>
 8007f54:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007f56:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	330e      	adds	r3, #14
 8007f5c:	881b      	ldrh	r3, [r3, #0]
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f002 fedf 	bl	800ad22 <mg_ntohs>
 8007f64:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8007f66:	9306      	str	r3, [sp, #24]
 8007f68:	683a      	ldr	r2, [r7, #0]
 8007f6a:	9205      	str	r2, [sp, #20]
 8007f6c:	687a      	ldr	r2, [r7, #4]
 8007f6e:	9204      	str	r2, [sp, #16]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	9303      	str	r3, [sp, #12]
 8007f74:	9602      	str	r6, [sp, #8]
 8007f76:	9501      	str	r5, [sp, #4]
 8007f78:	9400      	str	r4, [sp, #0]
 8007f7a:	4643      	mov	r3, r8
 8007f7c:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <print_ip6+0xb8>)
 8007f7e:	6939      	ldr	r1, [r7, #16]
 8007f80:	6978      	ldr	r0, [r7, #20]
 8007f82:	f7fa fdfe 	bl	8002b82 <mg_xprintf>
 8007f86:	4603      	mov	r3, r0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3718      	adds	r7, #24
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f92:	bf00      	nop
 8007f94:	0801720c 	.word	0x0801720c

08007f98 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	1d19      	adds	r1, r3, #4
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8007fb2:	697a      	ldr	r2, [r7, #20]
 8007fb4:	68b9      	ldr	r1, [r7, #8]
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff ff6c 	bl	8007e94 <print_ip4>
 8007fbc:	4603      	mov	r3, r0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b086      	sub	sp, #24
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	60b9      	str	r1, [r7, #8]
 8007fd0:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	1d19      	adds	r1, r3, #4
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6011      	str	r1, [r2, #0]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	7c9b      	ldrb	r3, [r3, #18]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d007      	beq.n	8007ff8 <mg_print_ip+0x32>
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	461a      	mov	r2, r3
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f7ff ff74 	bl	8007edc <print_ip6>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	e006      	b.n	8008006 <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	68b9      	ldr	r1, [r7, #8]
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	f7ff ff48 	bl	8007e94 <print_ip4>
 8008004:	4603      	mov	r3, r0
}
 8008006:	4618      	mov	r0, r3
 8008008:	3718      	adds	r7, #24
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8008010:	b580      	push	{r7, lr}
 8008012:	b088      	sub	sp, #32
 8008014:	af02      	add	r7, sp, #8
 8008016:	60f8      	str	r0, [r7, #12]
 8008018:	60b9      	str	r1, [r7, #8]
 800801a:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	1d19      	adds	r1, r3, #4
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	6011      	str	r1, [r2, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	8a1b      	ldrh	r3, [r3, #16]
 800802e:	4618      	mov	r0, r3
 8008030:	f002 fe77 	bl	800ad22 <mg_ntohs>
 8008034:	4603      	mov	r3, r0
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	4b05      	ldr	r3, [pc, #20]	; (8008054 <mg_print_ip_port+0x44>)
 800803e:	4a06      	ldr	r2, [pc, #24]	; (8008058 <mg_print_ip_port+0x48>)
 8008040:	68b9      	ldr	r1, [r7, #8]
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	f7fa fd9d 	bl	8002b82 <mg_xprintf>
 8008048:	4603      	mov	r3, r0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	08007fc7 	.word	0x08007fc7
 8008058:	08017228 	.word	0x08017228

0800805c <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 800805c:	b5b0      	push	{r4, r5, r7, lr}
 800805e:	b08c      	sub	sp, #48	; 0x30
 8008060:	af06      	add	r7, sp, #24
 8008062:	60f8      	str	r0, [r7, #12]
 8008064:	60b9      	str	r1, [r7, #8]
 8008066:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	1d19      	adds	r1, r3, #4
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	6011      	str	r1, [r2, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	461d      	mov	r5, r3
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	3301      	adds	r3, #1
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	3302      	adds	r3, #2
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	3303      	adds	r3, #3
 8008090:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8008092:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	3304      	adds	r3, #4
 8008098:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 800809a:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	3305      	adds	r3, #5
 80080a0:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 80080a2:	9304      	str	r3, [sp, #16]
 80080a4:	9403      	str	r4, [sp, #12]
 80080a6:	9002      	str	r0, [sp, #8]
 80080a8:	9101      	str	r1, [sp, #4]
 80080aa:	9200      	str	r2, [sp, #0]
 80080ac:	462b      	mov	r3, r5
 80080ae:	4a05      	ldr	r2, [pc, #20]	; (80080c4 <mg_print_mac+0x68>)
 80080b0:	68b9      	ldr	r1, [r7, #8]
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7fa fd65 	bl	8002b82 <mg_xprintf>
 80080b8:	4603      	mov	r3, r0
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3718      	adds	r7, #24
 80080be:	46bd      	mov	sp, r7
 80080c0:	bdb0      	pop	{r4, r5, r7, pc}
 80080c2:	bf00      	nop
 80080c4:	08017230 	.word	0x08017230

080080c8 <mg_esc>:

static char mg_esc(int c, bool esc) {
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	460b      	mov	r3, r1
 80080d2:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 80080d4:	4b19      	ldr	r3, [pc, #100]	; (800813c <mg_esc+0x74>)
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	4b19      	ldr	r3, [pc, #100]	; (8008140 <mg_esc+0x78>)
 80080da:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 80080dc:	78fb      	ldrb	r3, [r7, #3]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d001      	beq.n	80080e6 <mg_esc+0x1e>
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	e000      	b.n	80080e8 <mg_esc+0x20>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	e01b      	b.n	8008124 <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d112      	bne.n	800811e <mg_esc+0x56>
 80080f8:	78fb      	ldrb	r3, [r7, #3]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d007      	beq.n	800810e <mg_esc+0x46>
 80080fe:	697a      	ldr	r2, [r7, #20]
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	461a      	mov	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	4413      	add	r3, r2
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	e00f      	b.n	800812e <mg_esc+0x66>
 800810e:	697a      	ldr	r2, [r7, #20]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	1ad3      	subs	r3, r2, r3
 8008114:	461a      	mov	r2, r3
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	4413      	add	r3, r2
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	e007      	b.n	800812e <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	3301      	adds	r3, #1
 8008122:	617b      	str	r3, [r7, #20]
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	781b      	ldrb	r3, [r3, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1df      	bne.n	80080ec <mg_esc+0x24>
  }
  return 0;
 800812c:	2300      	movs	r3, #0
}
 800812e:	4618      	mov	r0, r3
 8008130:	371c      	adds	r7, #28
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr
 800813a:	bf00      	nop
 800813c:	0801707c 	.word	0x0801707c
 8008140:	08017084 	.word	0x08017084

08008144 <mg_escape>:

static char mg_escape(int c) {
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 800814c:	2101      	movs	r1, #1
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f7ff ffba 	bl	80080c8 <mg_esc>
 8008154:	4603      	mov	r3, r0
}
 8008156:	4618      	mov	r0, r3
 8008158:	3708      	adds	r7, #8
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 800815e:	b580      	push	{r7, lr}
 8008160:	b088      	sub	sp, #32
 8008162:	af00      	add	r7, sp, #0
 8008164:	60f8      	str	r0, [r7, #12]
 8008166:	60b9      	str	r1, [r7, #8]
 8008168:	607a      	str	r2, [r7, #4]
 800816a:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	e023      	b.n	80081c2 <qcpy+0x64>
    char c = mg_escape(buf[i]);
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	4413      	add	r3, r2
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7ff ffde 	bl	8008144 <mg_escape>
 8008188:	4603      	mov	r3, r0
 800818a:	75fb      	strb	r3, [r7, #23]
    if (c) {
 800818c:	7dfb      	ldrb	r3, [r7, #23]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00c      	beq.n	80081ac <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68b9      	ldr	r1, [r7, #8]
 8008196:	205c      	movs	r0, #92	; 0x5c
 8008198:	4798      	blx	r3
 800819a:	7dfa      	ldrb	r2, [r7, #23]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	4610      	mov	r0, r2
 80081a2:	4798      	blx	r3
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	e007      	b.n	80081bc <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	68b9      	ldr	r1, [r7, #8]
 80081b8:	4610      	mov	r0, r2
 80081ba:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	3301      	adds	r3, #1
 80081c0:	61fb      	str	r3, [r7, #28]
 80081c2:	69fa      	ldr	r2, [r7, #28]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	429a      	cmp	r2, r3
 80081c8:	d205      	bcs.n	80081d6 <qcpy+0x78>
 80081ca:	687a      	ldr	r2, [r7, #4]
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	4413      	add	r3, r2
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d1d1      	bne.n	800817a <qcpy+0x1c>
    }
  }
  return i + extra;
 80081d6:	69fa      	ldr	r2, [r7, #28]
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	4413      	add	r3, r2
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3720      	adds	r7, #32
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}

080081e4 <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b086      	sub	sp, #24
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	60f8      	str	r0, [r7, #12]
 80081ec:	60b9      	str	r1, [r7, #8]
 80081ee:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	1d19      	adds	r1, r3, #4
 80081f6:	687a      	ldr	r2, [r7, #4]
 80081f8:	6011      	str	r1, [r2, #0]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	1d19      	adds	r1, r3, #4
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	6011      	str	r1, [r2, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <mg_print_esc+0x42>
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d004      	beq.n	8008222 <mg_print_esc+0x3e>
 8008218:	6938      	ldr	r0, [r7, #16]
 800821a:	f7f8 f8d9 	bl	80003d0 <strlen>
 800821e:	4603      	mov	r3, r0
 8008220:	e000      	b.n	8008224 <mg_print_esc+0x40>
 8008222:	2300      	movs	r3, #0
 8008224:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	68b9      	ldr	r1, [r7, #8]
 800822c:	68f8      	ldr	r0, [r7, #12]
 800822e:	f7ff ff96 	bl	800815e <qcpy>
 8008232:	4603      	mov	r3, r0
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 800823c:	b580      	push	{r7, lr}
 800823e:	b084      	sub	sp, #16
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8008244:	2300      	movs	r3, #0
 8008246:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8008248:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	4413      	add	r3, r2
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	689a      	ldr	r2, [r3, #8]
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	4413      	add	r3, r2
 8008262:	1d1a      	adds	r2, r3, #4
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	429a      	cmp	r2, r3
 800826a:	d906      	bls.n	800827a <mg_queue_read_len+0x3e>
 800826c:	4b05      	ldr	r3, [pc, #20]	; (8008284 <mg_queue_read_len+0x48>)
 800826e:	4a06      	ldr	r2, [pc, #24]	; (8008288 <mg_queue_read_len+0x4c>)
 8008270:	f640 71b1 	movw	r1, #4017	; 0xfb1
 8008274:	4805      	ldr	r0, [pc, #20]	; (800828c <mg_queue_read_len+0x50>)
 8008276:	f00c fec3 	bl	8015000 <__assert_func>
  return n;
 800827a:	68fb      	ldr	r3, [r7, #12]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}
 8008284:	08017294 	.word	0x08017294
 8008288:	08018410 	.word	0x08018410
 800828c:	0801645c 	.word	0x0801645c

08008290 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68db      	ldr	r3, [r3, #12]
 80082a6:	4413      	add	r3, r2
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 80082ac:	f3bf 8f5b 	dmb	ish
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b086      	sub	sp, #24
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 80082c8:	2300      	movs	r3, #0
 80082ca:	617b      	str	r3, [r7, #20]
 80082cc:	2308      	movs	r3, #8
 80082ce:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68da      	ldr	r2, [r3, #12]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d312      	bcc.n	8008302 <mg_queue_book+0x46>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	441a      	add	r2, r3
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	441a      	add	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d808      	bhi.n	8008302 <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	1ad2      	subs	r2, r2, r3
 80082fa:	693b      	ldr	r3, [r7, #16]
 80082fc:	1ad3      	subs	r3, r2, r3
 80082fe:	617b      	str	r3, [r7, #20]
 8008300:	e011      	b.n	8008326 <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68da      	ldr	r2, [r3, #12]
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	429a      	cmp	r2, r3
 800830c:	d30b      	bcc.n	8008326 <mg_queue_book+0x6a>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	693a      	ldr	r2, [r7, #16]
 8008314:	429a      	cmp	r2, r3
 8008316:	d206      	bcs.n	8008326 <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 8008318:	2100      	movs	r1, #0
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7ff ffb8 	bl	8008290 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	2200      	movs	r2, #0
 8008324:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	68da      	ldr	r2, [r3, #12]
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	441a      	add	r2, r3
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	441a      	add	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	689b      	ldr	r3, [r3, #8]
 8008336:	429a      	cmp	r2, r3
 8008338:	d207      	bcs.n	800834a <mg_queue_book+0x8e>
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d007      	beq.n	8008360 <mg_queue_book+0xa4>
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	3304      	adds	r3, #4
 800835a:	441a      	add	r2, r3
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	601a      	str	r2, [r3, #0]
  return space;
 8008360:	697b      	ldr	r3, [r7, #20]
}
 8008362:	4618      	mov	r0, r3
 8008364:	3718      	adds	r7, #24
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
	...

0800836c <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	689a      	ldr	r2, [r3, #8]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	429a      	cmp	r2, r3
 8008384:	d013      	beq.n	80083ae <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f7ff ff58 	bl	800823c <mg_queue_read_len>
 800838c:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10c      	bne.n	80083ae <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d903      	bls.n	80083ae <mg_queue_next+0x42>
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff ff48 	bl	800823c <mg_queue_read_len>
 80083ac:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d007      	beq.n	80083c4 <mg_queue_next+0x58>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	689b      	ldr	r3, [r3, #8]
 80083bc:	3304      	adds	r3, #4
 80083be:	441a      	add	r2, r3
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	441a      	add	r2, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d906      	bls.n	80083e2 <mg_queue_next+0x76>
 80083d4:	4b05      	ldr	r3, [pc, #20]	; (80083ec <mg_queue_next+0x80>)
 80083d6:	4a06      	ldr	r2, [pc, #24]	; (80083f0 <mg_queue_next+0x84>)
 80083d8:	f640 71d2 	movw	r1, #4050	; 0xfd2
 80083dc:	4805      	ldr	r0, [pc, #20]	; (80083f4 <mg_queue_next+0x88>)
 80083de:	f00c fe0f 	bl	8015000 <__assert_func>
  return len;
 80083e2:	68fb      	ldr	r3, [r7, #12]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3710      	adds	r7, #16
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	080172b8 	.word	0x080172b8
 80083f0:	08018424 	.word	0x08018424
 80083f4:	0801645c 	.word	0x0801645c

080083f8 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d106      	bne.n	8008416 <mg_queue_add+0x1e>
 8008408:	4b13      	ldr	r3, [pc, #76]	; (8008458 <mg_queue_add+0x60>)
 800840a:	4a14      	ldr	r2, [pc, #80]	; (800845c <mg_queue_add+0x64>)
 800840c:	f640 71d7 	movw	r1, #4055	; 0xfd7
 8008410:	4813      	ldr	r0, [pc, #76]	; (8008460 <mg_queue_add+0x68>)
 8008412:	f00c fdf5 	bl	8015000 <__assert_func>
  mg_queue_write_len(q, len);
 8008416:	6839      	ldr	r1, [r7, #0]
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f7ff ff39 	bl	8008290 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	4413      	add	r3, r2
 8008426:	f103 0208 	add.w	r2, r3, #8
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	429a      	cmp	r2, r3
 8008430:	d906      	bls.n	8008440 <mg_queue_add+0x48>
 8008432:	4b0c      	ldr	r3, [pc, #48]	; (8008464 <mg_queue_add+0x6c>)
 8008434:	4a09      	ldr	r2, [pc, #36]	; (800845c <mg_queue_add+0x64>)
 8008436:	f640 71d9 	movw	r1, #4057	; 0xfd9
 800843a:	4809      	ldr	r0, [pc, #36]	; (8008460 <mg_queue_add+0x68>)
 800843c:	f00c fde0 	bl	8015000 <__assert_func>
  q->head += len + sizeof(uint32_t);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	4413      	add	r3, r2
 8008448:	1d1a      	adds	r2, r3, #4
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	60da      	str	r2, [r3, #12]
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	080172d4 	.word	0x080172d4
 800845c:	08018434 	.word	0x08018434
 8008460:	0801645c 	.word	0x0801645c
 8008464:	080172dc 	.word	0x080172dc

08008468 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	4413      	add	r3, r2
 800847a:	1d1a      	adds	r2, r3, #4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	1d1a      	adds	r2, r3, #4
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	429a      	cmp	r2, r3
 800848c:	d906      	bls.n	800849c <mg_queue_del+0x34>
 800848e:	4b05      	ldr	r3, [pc, #20]	; (80084a4 <mg_queue_del+0x3c>)
 8008490:	4a05      	ldr	r2, [pc, #20]	; (80084a8 <mg_queue_del+0x40>)
 8008492:	f640 71df 	movw	r1, #4063	; 0xfdf
 8008496:	4805      	ldr	r0, [pc, #20]	; (80084ac <mg_queue_del+0x44>)
 8008498:	f00c fdb2 	bl	8015000 <__assert_func>
}
 800849c:	bf00      	nop
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	0801730c 	.word	0x0801730c
 80084a8:	08018444 	.word	0x08018444
 80084ac:	0801645c 	.word	0x0801645c

080084b0 <blk0>:
  uint32_t l[16];
};

#define rol(value, bits) (((value) << (bits)) | ((value) >> (32 - (bits))))

static uint32_t blk0(union char64long16 *block, int i) {
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  if (MG_BIG_ENDIAN) {
 80084ba:	4b12      	ldr	r3, [pc, #72]	; (8008504 <blk0+0x54>)
 80084bc:	881b      	ldrh	r3, [r3, #0]
 80084be:	2bff      	cmp	r3, #255	; 0xff
 80084c0:	d915      	bls.n	80084ee <blk0+0x3e>
  } else {
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	683a      	ldr	r2, [r7, #0]
 80084c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ca:	ea4f 2333 	mov.w	r3, r3, ror #8
 80084ce:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
                  (rol(block->l[i], 8) & 0x00FF00FF);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6839      	ldr	r1, [r7, #0]
 80084d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80084da:	ea4f 6333 	mov.w	r3, r3, ror #24
 80084de:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
    block->l[i] = (rol(block->l[i], 24) & 0xFF00FF00) |
 80084e2:	ea42 0103 	orr.w	r1, r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return block->l[i];
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	370c      	adds	r7, #12
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	080170d8 	.word	0x080170d8

08008508 <mg_sha1_transform>:
#define R4(v, w, x, y, z, i)                          \
  z += (w ^ x ^ y) + blk(i) + 0xCA62C1D6 + rol(v, 5); \
  w = rol(w, 30);

static void mg_sha1_transform(uint32_t state[5],
                              const unsigned char *buffer) {
 8008508:	b590      	push	{r4, r7, lr}
 800850a:	b099      	sub	sp, #100	; 0x64
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
 8008510:	6039      	str	r1, [r7, #0]
  uint32_t a, b, c, d, e;
  union char64long16 block[1];

  memcpy(block, buffer, 64);
 8008512:	f107 030c 	add.w	r3, r7, #12
 8008516:	2240      	movs	r2, #64	; 0x40
 8008518:	6839      	ldr	r1, [r7, #0]
 800851a:	4618      	mov	r0, r3
 800851c:	f00d f982 	bl	8015824 <memcpy>
  a = state[0];
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	65fb      	str	r3, [r7, #92]	; 0x5c
  b = state[1];
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	65bb      	str	r3, [r7, #88]	; 0x58
  c = state[2];
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	657b      	str	r3, [r7, #84]	; 0x54
  d = state[3];
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	653b      	str	r3, [r7, #80]	; 0x50
  e = state[4];
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(a, b, c, d, e, 0);
 800853e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008540:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008542:	405a      	eors	r2, r3
 8008544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008546:	401a      	ands	r2, r3
 8008548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800854a:	ea82 0403 	eor.w	r4, r2, r3
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	2100      	movs	r1, #0
 8008554:	4618      	mov	r0, r3
 8008556:	f7ff ffab 	bl	80084b0 <blk0>
 800855a:	4603      	mov	r3, r0
 800855c:	18e2      	adds	r2, r4, r3
 800855e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008560:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008564:	441a      	add	r2, r3
 8008566:	4bbd      	ldr	r3, [pc, #756]	; (800885c <mg_sha1_transform+0x354>)
 8008568:	4413      	add	r3, r2
 800856a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800856c:	4413      	add	r3, r2
 800856e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008570:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008572:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008576:	65bb      	str	r3, [r7, #88]	; 0x58
  R0(e, a, b, c, d, 1);
 8008578:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800857a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800857c:	405a      	eors	r2, r3
 800857e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008580:	401a      	ands	r2, r3
 8008582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008584:	ea82 0403 	eor.w	r4, r2, r3
 8008588:	f107 030c 	add.w	r3, r7, #12
 800858c:	2101      	movs	r1, #1
 800858e:	4618      	mov	r0, r3
 8008590:	f7ff ff8e 	bl	80084b0 <blk0>
 8008594:	4603      	mov	r3, r0
 8008596:	18e2      	adds	r2, r4, r3
 8008598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800859a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800859e:	441a      	add	r2, r3
 80085a0:	4bae      	ldr	r3, [pc, #696]	; (800885c <mg_sha1_transform+0x354>)
 80085a2:	4413      	add	r3, r2
 80085a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80085a6:	4413      	add	r3, r2
 80085a8:	653b      	str	r3, [r7, #80]	; 0x50
 80085aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80085b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  R0(d, e, a, b, c, 2);
 80085b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085b6:	405a      	eors	r2, r3
 80085b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ba:	401a      	ands	r2, r3
 80085bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80085be:	ea82 0403 	eor.w	r4, r2, r3
 80085c2:	f107 030c 	add.w	r3, r7, #12
 80085c6:	2102      	movs	r1, #2
 80085c8:	4618      	mov	r0, r3
 80085ca:	f7ff ff71 	bl	80084b0 <blk0>
 80085ce:	4603      	mov	r3, r0
 80085d0:	18e2      	adds	r2, r4, r3
 80085d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80085d8:	441a      	add	r2, r3
 80085da:	4ba0      	ldr	r3, [pc, #640]	; (800885c <mg_sha1_transform+0x354>)
 80085dc:	4413      	add	r3, r2
 80085de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80085e0:	4413      	add	r3, r2
 80085e2:	657b      	str	r3, [r7, #84]	; 0x54
 80085e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80085ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(c, d, e, a, b, 3);
 80085ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085f0:	405a      	eors	r2, r3
 80085f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085f4:	401a      	ands	r2, r3
 80085f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085f8:	ea82 0403 	eor.w	r4, r2, r3
 80085fc:	f107 030c 	add.w	r3, r7, #12
 8008600:	2103      	movs	r1, #3
 8008602:	4618      	mov	r0, r3
 8008604:	f7ff ff54 	bl	80084b0 <blk0>
 8008608:	4603      	mov	r3, r0
 800860a:	18e2      	adds	r2, r4, r3
 800860c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800860e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008612:	441a      	add	r2, r3
 8008614:	4b91      	ldr	r3, [pc, #580]	; (800885c <mg_sha1_transform+0x354>)
 8008616:	4413      	add	r3, r2
 8008618:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800861a:	4413      	add	r3, r2
 800861c:	65bb      	str	r3, [r7, #88]	; 0x58
 800861e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008620:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008624:	653b      	str	r3, [r7, #80]	; 0x50
  R0(b, c, d, e, a, 4);
 8008626:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862a:	405a      	eors	r2, r3
 800862c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800862e:	401a      	ands	r2, r3
 8008630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008632:	ea82 0403 	eor.w	r4, r2, r3
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	2104      	movs	r1, #4
 800863c:	4618      	mov	r0, r3
 800863e:	f7ff ff37 	bl	80084b0 <blk0>
 8008642:	4603      	mov	r3, r0
 8008644:	18e2      	adds	r2, r4, r3
 8008646:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008648:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800864c:	441a      	add	r2, r3
 800864e:	4b83      	ldr	r3, [pc, #524]	; (800885c <mg_sha1_transform+0x354>)
 8008650:	4413      	add	r3, r2
 8008652:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008654:	4413      	add	r3, r2
 8008656:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800865a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800865e:	657b      	str	r3, [r7, #84]	; 0x54
  R0(a, b, c, d, e, 5);
 8008660:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008664:	405a      	eors	r2, r3
 8008666:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008668:	401a      	ands	r2, r3
 800866a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800866c:	ea82 0403 	eor.w	r4, r2, r3
 8008670:	f107 030c 	add.w	r3, r7, #12
 8008674:	2105      	movs	r1, #5
 8008676:	4618      	mov	r0, r3
 8008678:	f7ff ff1a 	bl	80084b0 <blk0>
 800867c:	4603      	mov	r3, r0
 800867e:	18e2      	adds	r2, r4, r3
 8008680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008682:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008686:	441a      	add	r2, r3
 8008688:	4b74      	ldr	r3, [pc, #464]	; (800885c <mg_sha1_transform+0x354>)
 800868a:	4413      	add	r3, r2
 800868c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800868e:	4413      	add	r3, r2
 8008690:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008694:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008698:	65bb      	str	r3, [r7, #88]	; 0x58
  R0(e, a, b, c, d, 6);
 800869a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800869c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800869e:	405a      	eors	r2, r3
 80086a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086a2:	401a      	ands	r2, r3
 80086a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086a6:	ea82 0403 	eor.w	r4, r2, r3
 80086aa:	f107 030c 	add.w	r3, r7, #12
 80086ae:	2106      	movs	r1, #6
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7ff fefd 	bl	80084b0 <blk0>
 80086b6:	4603      	mov	r3, r0
 80086b8:	18e2      	adds	r2, r4, r3
 80086ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086bc:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80086c0:	441a      	add	r2, r3
 80086c2:	4b66      	ldr	r3, [pc, #408]	; (800885c <mg_sha1_transform+0x354>)
 80086c4:	4413      	add	r3, r2
 80086c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086c8:	4413      	add	r3, r2
 80086ca:	653b      	str	r3, [r7, #80]	; 0x50
 80086cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80086ce:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80086d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  R0(d, e, a, b, c, 7);
 80086d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086d8:	405a      	eors	r2, r3
 80086da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086dc:	401a      	ands	r2, r3
 80086de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80086e0:	ea82 0403 	eor.w	r4, r2, r3
 80086e4:	f107 030c 	add.w	r3, r7, #12
 80086e8:	2107      	movs	r1, #7
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff fee0 	bl	80084b0 <blk0>
 80086f0:	4603      	mov	r3, r0
 80086f2:	18e2      	adds	r2, r4, r3
 80086f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086f6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80086fa:	441a      	add	r2, r3
 80086fc:	4b57      	ldr	r3, [pc, #348]	; (800885c <mg_sha1_transform+0x354>)
 80086fe:	4413      	add	r3, r2
 8008700:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008702:	4413      	add	r3, r2
 8008704:	657b      	str	r3, [r7, #84]	; 0x54
 8008706:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008708:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800870c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(c, d, e, a, b, 8);
 800870e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008712:	405a      	eors	r2, r3
 8008714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008716:	401a      	ands	r2, r3
 8008718:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800871a:	ea82 0403 	eor.w	r4, r2, r3
 800871e:	f107 030c 	add.w	r3, r7, #12
 8008722:	2108      	movs	r1, #8
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fec3 	bl	80084b0 <blk0>
 800872a:	4603      	mov	r3, r0
 800872c:	18e2      	adds	r2, r4, r3
 800872e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008730:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008734:	441a      	add	r2, r3
 8008736:	4b49      	ldr	r3, [pc, #292]	; (800885c <mg_sha1_transform+0x354>)
 8008738:	4413      	add	r3, r2
 800873a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800873c:	4413      	add	r3, r2
 800873e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008742:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008746:	653b      	str	r3, [r7, #80]	; 0x50
  R0(b, c, d, e, a, 9);
 8008748:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800874a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800874c:	405a      	eors	r2, r3
 800874e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008750:	401a      	ands	r2, r3
 8008752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008754:	ea82 0403 	eor.w	r4, r2, r3
 8008758:	f107 030c 	add.w	r3, r7, #12
 800875c:	2109      	movs	r1, #9
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fea6 	bl	80084b0 <blk0>
 8008764:	4603      	mov	r3, r0
 8008766:	18e2      	adds	r2, r4, r3
 8008768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800876a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800876e:	441a      	add	r2, r3
 8008770:	4b3a      	ldr	r3, [pc, #232]	; (800885c <mg_sha1_transform+0x354>)
 8008772:	4413      	add	r3, r2
 8008774:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008776:	4413      	add	r3, r2
 8008778:	65fb      	str	r3, [r7, #92]	; 0x5c
 800877a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800877c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008780:	657b      	str	r3, [r7, #84]	; 0x54
  R0(a, b, c, d, e, 10);
 8008782:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008786:	405a      	eors	r2, r3
 8008788:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800878a:	401a      	ands	r2, r3
 800878c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800878e:	ea82 0403 	eor.w	r4, r2, r3
 8008792:	f107 030c 	add.w	r3, r7, #12
 8008796:	210a      	movs	r1, #10
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff fe89 	bl	80084b0 <blk0>
 800879e:	4603      	mov	r3, r0
 80087a0:	18e2      	adds	r2, r4, r3
 80087a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087a4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80087a8:	441a      	add	r2, r3
 80087aa:	4b2c      	ldr	r3, [pc, #176]	; (800885c <mg_sha1_transform+0x354>)
 80087ac:	4413      	add	r3, r2
 80087ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80087b0:	4413      	add	r3, r2
 80087b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087b6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80087ba:	65bb      	str	r3, [r7, #88]	; 0x58
  R0(e, a, b, c, d, 11);
 80087bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c0:	405a      	eors	r2, r3
 80087c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087c4:	401a      	ands	r2, r3
 80087c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80087c8:	ea82 0403 	eor.w	r4, r2, r3
 80087cc:	f107 030c 	add.w	r3, r7, #12
 80087d0:	210b      	movs	r1, #11
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7ff fe6c 	bl	80084b0 <blk0>
 80087d8:	4603      	mov	r3, r0
 80087da:	18e2      	adds	r2, r4, r3
 80087dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80087e2:	441a      	add	r2, r3
 80087e4:	4b1d      	ldr	r3, [pc, #116]	; (800885c <mg_sha1_transform+0x354>)
 80087e6:	4413      	add	r3, r2
 80087e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80087ea:	4413      	add	r3, r2
 80087ec:	653b      	str	r3, [r7, #80]	; 0x50
 80087ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80087f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R0(d, e, a, b, c, 12);
 80087f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80087fa:	405a      	eors	r2, r3
 80087fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fe:	401a      	ands	r2, r3
 8008800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008802:	ea82 0403 	eor.w	r4, r2, r3
 8008806:	f107 030c 	add.w	r3, r7, #12
 800880a:	210c      	movs	r1, #12
 800880c:	4618      	mov	r0, r3
 800880e:	f7ff fe4f 	bl	80084b0 <blk0>
 8008812:	4603      	mov	r3, r0
 8008814:	18e2      	adds	r2, r4, r3
 8008816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008818:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800881c:	441a      	add	r2, r3
 800881e:	4b0f      	ldr	r3, [pc, #60]	; (800885c <mg_sha1_transform+0x354>)
 8008820:	4413      	add	r3, r2
 8008822:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008824:	4413      	add	r3, r2
 8008826:	657b      	str	r3, [r7, #84]	; 0x54
 8008828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800882a:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800882e:	64fb      	str	r3, [r7, #76]	; 0x4c
  R0(c, d, e, a, b, 13);
 8008830:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008834:	405a      	eors	r2, r3
 8008836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008838:	401a      	ands	r2, r3
 800883a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800883c:	ea82 0403 	eor.w	r4, r2, r3
 8008840:	f107 030c 	add.w	r3, r7, #12
 8008844:	210d      	movs	r1, #13
 8008846:	4618      	mov	r0, r3
 8008848:	f7ff fe32 	bl	80084b0 <blk0>
 800884c:	4603      	mov	r3, r0
 800884e:	18e2      	adds	r2, r4, r3
 8008850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008852:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008856:	441a      	add	r2, r3
 8008858:	e002      	b.n	8008860 <mg_sha1_transform+0x358>
 800885a:	bf00      	nop
 800885c:	5a827999 	.word	0x5a827999
 8008860:	4bac      	ldr	r3, [pc, #688]	; (8008b14 <mg_sha1_transform+0x60c>)
 8008862:	4413      	add	r3, r2
 8008864:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008866:	4413      	add	r3, r2
 8008868:	65bb      	str	r3, [r7, #88]	; 0x58
 800886a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800886c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008870:	653b      	str	r3, [r7, #80]	; 0x50
  R0(b, c, d, e, a, 14);
 8008872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008876:	405a      	eors	r2, r3
 8008878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800887a:	401a      	ands	r2, r3
 800887c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887e:	ea82 0403 	eor.w	r4, r2, r3
 8008882:	f107 030c 	add.w	r3, r7, #12
 8008886:	210e      	movs	r1, #14
 8008888:	4618      	mov	r0, r3
 800888a:	f7ff fe11 	bl	80084b0 <blk0>
 800888e:	4603      	mov	r3, r0
 8008890:	18e2      	adds	r2, r4, r3
 8008892:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008894:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008898:	441a      	add	r2, r3
 800889a:	4b9e      	ldr	r3, [pc, #632]	; (8008b14 <mg_sha1_transform+0x60c>)
 800889c:	4413      	add	r3, r2
 800889e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088a0:	4413      	add	r3, r2
 80088a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088a6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80088aa:	657b      	str	r3, [r7, #84]	; 0x54
  R0(a, b, c, d, e, 15);
 80088ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b0:	405a      	eors	r2, r3
 80088b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088b4:	401a      	ands	r2, r3
 80088b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b8:	ea82 0403 	eor.w	r4, r2, r3
 80088bc:	f107 030c 	add.w	r3, r7, #12
 80088c0:	210f      	movs	r1, #15
 80088c2:	4618      	mov	r0, r3
 80088c4:	f7ff fdf4 	bl	80084b0 <blk0>
 80088c8:	4603      	mov	r3, r0
 80088ca:	18e2      	adds	r2, r4, r3
 80088cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80088d2:	441a      	add	r2, r3
 80088d4:	4b8f      	ldr	r3, [pc, #572]	; (8008b14 <mg_sha1_transform+0x60c>)
 80088d6:	4413      	add	r3, r2
 80088d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088da:	4413      	add	r3, r2
 80088dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80088e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80088e4:	65bb      	str	r3, [r7, #88]	; 0x58
  R1(e, a, b, c, d, 16);
 80088e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088ea:	405a      	eors	r2, r3
 80088ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088ee:	401a      	ands	r2, r3
 80088f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f2:	405a      	eors	r2, r3
 80088f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80088f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088f8:	4059      	eors	r1, r3
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	4059      	eors	r1, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	404b      	eors	r3, r1
 8008902:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	441a      	add	r2, r3
 800890c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800890e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008912:	441a      	add	r2, r3
 8008914:	4b7f      	ldr	r3, [pc, #508]	; (8008b14 <mg_sha1_transform+0x60c>)
 8008916:	4413      	add	r3, r2
 8008918:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800891a:	4413      	add	r3, r2
 800891c:	653b      	str	r3, [r7, #80]	; 0x50
 800891e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008920:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008924:	65fb      	str	r3, [r7, #92]	; 0x5c
  R1(d, e, a, b, c, 17);
 8008926:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800892a:	405a      	eors	r2, r3
 800892c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800892e:	401a      	ands	r2, r3
 8008930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008932:	405a      	eors	r2, r3
 8008934:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	4059      	eors	r1, r3
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	4059      	eors	r1, r3
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	404b      	eors	r3, r1
 8008942:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	441a      	add	r2, r3
 800894c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800894e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008952:	441a      	add	r2, r3
 8008954:	4b6f      	ldr	r3, [pc, #444]	; (8008b14 <mg_sha1_transform+0x60c>)
 8008956:	4413      	add	r3, r2
 8008958:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800895a:	4413      	add	r3, r2
 800895c:	657b      	str	r3, [r7, #84]	; 0x54
 800895e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008960:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008964:	64fb      	str	r3, [r7, #76]	; 0x4c
  R1(c, d, e, a, b, 18);
 8008966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008968:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800896a:	405a      	eors	r2, r3
 800896c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896e:	401a      	ands	r2, r3
 8008970:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008972:	405a      	eors	r2, r3
 8008974:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008978:	4059      	eors	r1, r3
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	4059      	eors	r1, r3
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	404b      	eors	r3, r1
 8008982:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008986:	617b      	str	r3, [r7, #20]
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	441a      	add	r2, r3
 800898c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800898e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008992:	441a      	add	r2, r3
 8008994:	4b5f      	ldr	r3, [pc, #380]	; (8008b14 <mg_sha1_transform+0x60c>)
 8008996:	4413      	add	r3, r2
 8008998:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800899a:	4413      	add	r3, r2
 800899c:	65bb      	str	r3, [r7, #88]	; 0x58
 800899e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089a0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80089a4:	653b      	str	r3, [r7, #80]	; 0x50
  R1(b, c, d, e, a, 19);
 80089a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089aa:	405a      	eors	r2, r3
 80089ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ae:	401a      	ands	r2, r3
 80089b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089b2:	405a      	eors	r2, r3
 80089b4:	68f9      	ldr	r1, [r7, #12]
 80089b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089b8:	4059      	eors	r1, r3
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	4059      	eors	r1, r3
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	404b      	eors	r3, r1
 80089c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80089c6:	61bb      	str	r3, [r7, #24]
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	441a      	add	r2, r3
 80089cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80089ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80089d2:	441a      	add	r2, r3
 80089d4:	4b4f      	ldr	r3, [pc, #316]	; (8008b14 <mg_sha1_transform+0x60c>)
 80089d6:	4413      	add	r3, r2
 80089d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80089da:	4413      	add	r3, r2
 80089dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80089e4:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 20);
 80089e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80089ea:	405a      	eors	r2, r3
 80089ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089ee:	405a      	eors	r2, r3
 80089f0:	6939      	ldr	r1, [r7, #16]
 80089f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f4:	4059      	eors	r1, r3
 80089f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f8:	4059      	eors	r1, r3
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	404b      	eors	r3, r1
 80089fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008a02:	61fb      	str	r3, [r7, #28]
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	441a      	add	r2, r3
 8008a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a0a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008a0e:	441a      	add	r2, r3
 8008a10:	4b41      	ldr	r3, [pc, #260]	; (8008b18 <mg_sha1_transform+0x610>)
 8008a12:	4413      	add	r3, r2
 8008a14:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a16:	4413      	add	r3, r2
 8008a18:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a1c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008a20:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 21);
 8008a22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008a24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a26:	405a      	eors	r2, r3
 8008a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008a2a:	405a      	eors	r2, r3
 8008a2c:	6979      	ldr	r1, [r7, #20]
 8008a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a30:	4059      	eors	r1, r3
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	4059      	eors	r1, r3
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	404b      	eors	r3, r1
 8008a3a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008a3e:	623b      	str	r3, [r7, #32]
 8008a40:	6a3b      	ldr	r3, [r7, #32]
 8008a42:	441a      	add	r2, r3
 8008a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a46:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008a4a:	441a      	add	r2, r3
 8008a4c:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <mg_sha1_transform+0x610>)
 8008a4e:	4413      	add	r3, r2
 8008a50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a52:	4413      	add	r3, r2
 8008a54:	653b      	str	r3, [r7, #80]	; 0x50
 8008a56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a58:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008a5c:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 22);
 8008a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a62:	405a      	eors	r2, r3
 8008a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008a66:	405a      	eors	r2, r3
 8008a68:	69b9      	ldr	r1, [r7, #24]
 8008a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a6c:	4059      	eors	r1, r3
 8008a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a70:	4059      	eors	r1, r3
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	404b      	eors	r3, r1
 8008a76:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7e:	441a      	add	r2, r3
 8008a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a82:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008a86:	441a      	add	r2, r3
 8008a88:	4b23      	ldr	r3, [pc, #140]	; (8008b18 <mg_sha1_transform+0x610>)
 8008a8a:	4413      	add	r3, r2
 8008a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a8e:	4413      	add	r3, r2
 8008a90:	657b      	str	r3, [r7, #84]	; 0x54
 8008a92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a94:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 23);
 8008a9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9e:	405a      	eors	r2, r3
 8008aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008aa2:	405a      	eors	r2, r3
 8008aa4:	69f9      	ldr	r1, [r7, #28]
 8008aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa8:	4059      	eors	r1, r3
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	4059      	eors	r1, r3
 8008aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab0:	404b      	eors	r3, r1
 8008ab2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	441a      	add	r2, r3
 8008abc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008abe:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008ac2:	441a      	add	r2, r3
 8008ac4:	4b14      	ldr	r3, [pc, #80]	; (8008b18 <mg_sha1_transform+0x610>)
 8008ac6:	4413      	add	r3, r2
 8008ac8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aca:	4413      	add	r3, r2
 8008acc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ad0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008ad4:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 24);
 8008ad6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008ad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ada:	405a      	eors	r2, r3
 8008adc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ade:	405a      	eors	r2, r3
 8008ae0:	6a39      	ldr	r1, [r7, #32]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	4059      	eors	r1, r3
 8008ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ae8:	4059      	eors	r1, r3
 8008aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aec:	404b      	eors	r3, r1
 8008aee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af6:	441a      	add	r2, r3
 8008af8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008afa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008afe:	441a      	add	r2, r3
 8008b00:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <mg_sha1_transform+0x610>)
 8008b02:	4413      	add	r3, r2
 8008b04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b06:	4413      	add	r3, r2
 8008b08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b0c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008b10:	e004      	b.n	8008b1c <mg_sha1_transform+0x614>
 8008b12:	bf00      	nop
 8008b14:	5a827999 	.word	0x5a827999
 8008b18:	6ed9eba1 	.word	0x6ed9eba1
 8008b1c:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 25);
 8008b1e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b22:	405a      	eors	r2, r3
 8008b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b26:	405a      	eors	r2, r3
 8008b28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	4059      	eors	r1, r3
 8008b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b30:	4059      	eors	r1, r3
 8008b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b34:	404b      	eors	r3, r1
 8008b36:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	441a      	add	r2, r3
 8008b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b42:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008b46:	441a      	add	r2, r3
 8008b48:	4ba9      	ldr	r3, [pc, #676]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008b4a:	4413      	add	r3, r2
 8008b4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b4e:	4413      	add	r3, r2
 8008b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b54:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008b58:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 26);
 8008b5a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b5e:	405a      	eors	r2, r3
 8008b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b62:	405a      	eors	r2, r3
 8008b64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	4059      	eors	r1, r3
 8008b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b6c:	4059      	eors	r1, r3
 8008b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b70:	404b      	eors	r3, r1
 8008b72:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008b76:	637b      	str	r3, [r7, #52]	; 0x34
 8008b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b7a:	441a      	add	r2, r3
 8008b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b7e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008b82:	441a      	add	r2, r3
 8008b84:	4b9a      	ldr	r3, [pc, #616]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008b86:	4413      	add	r3, r2
 8008b88:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b8a:	4413      	add	r3, r2
 8008b8c:	653b      	str	r3, [r7, #80]	; 0x50
 8008b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b90:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008b94:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 27);
 8008b96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b9a:	405a      	eors	r2, r3
 8008b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b9e:	405a      	eors	r2, r3
 8008ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	4059      	eors	r1, r3
 8008ba6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ba8:	4059      	eors	r1, r3
 8008baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bac:	404b      	eors	r3, r1
 8008bae:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008bb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bb6:	441a      	add	r2, r3
 8008bb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bba:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008bbe:	441a      	add	r2, r3
 8008bc0:	4b8b      	ldr	r3, [pc, #556]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008bc2:	4413      	add	r3, r2
 8008bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008bc6:	4413      	add	r3, r2
 8008bc8:	657b      	str	r3, [r7, #84]	; 0x54
 8008bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bcc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 28);
 8008bd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bd6:	405a      	eors	r2, r3
 8008bd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008bda:	405a      	eors	r2, r3
 8008bdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4059      	eors	r1, r3
 8008be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008be4:	4059      	eors	r1, r3
 8008be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008be8:	404b      	eors	r3, r1
 8008bea:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf2:	441a      	add	r2, r3
 8008bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008bf6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008bfa:	441a      	add	r2, r3
 8008bfc:	4b7c      	ldr	r3, [pc, #496]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008bfe:	4413      	add	r3, r2
 8008c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c02:	4413      	add	r3, r2
 8008c04:	65bb      	str	r3, [r7, #88]	; 0x58
 8008c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c08:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008c0c:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 29);
 8008c0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008c10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c12:	405a      	eors	r2, r3
 8008c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c16:	405a      	eors	r2, r3
 8008c18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c1a:	6a3b      	ldr	r3, [r7, #32]
 8008c1c:	4059      	eors	r1, r3
 8008c1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c20:	4059      	eors	r1, r3
 8008c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c24:	404b      	eors	r3, r1
 8008c26:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008c2a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c2e:	441a      	add	r2, r3
 8008c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c32:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008c36:	441a      	add	r2, r3
 8008c38:	4b6d      	ldr	r3, [pc, #436]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008c3a:	4413      	add	r3, r2
 8008c3c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c3e:	4413      	add	r3, r2
 8008c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c44:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008c48:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 30);
 8008c4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c4e:	405a      	eors	r2, r3
 8008c50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c52:	405a      	eors	r2, r3
 8008c54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c58:	4059      	eors	r1, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4059      	eors	r1, r3
 8008c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c60:	404b      	eors	r3, r1
 8008c62:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008c66:	647b      	str	r3, [r7, #68]	; 0x44
 8008c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c6a:	441a      	add	r2, r3
 8008c6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c6e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008c72:	441a      	add	r2, r3
 8008c74:	4b5e      	ldr	r3, [pc, #376]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008c76:	4413      	add	r3, r2
 8008c78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c7a:	4413      	add	r3, r2
 8008c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c80:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008c84:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 31);
 8008c86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c8a:	405a      	eors	r2, r3
 8008c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c8e:	405a      	eors	r2, r3
 8008c90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c94:	4059      	eors	r1, r3
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	4059      	eors	r1, r3
 8008c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c9c:	404b      	eors	r3, r1
 8008c9e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008ca2:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ca4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ca6:	441a      	add	r2, r3
 8008ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008caa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008cae:	441a      	add	r2, r3
 8008cb0:	4b4f      	ldr	r3, [pc, #316]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008cb2:	4413      	add	r3, r2
 8008cb4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cb6:	4413      	add	r3, r2
 8008cb8:	653b      	str	r3, [r7, #80]	; 0x50
 8008cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cbc:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008cc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 32);
 8008cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cc6:	405a      	eors	r2, r3
 8008cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cca:	405a      	eors	r2, r3
 8008ccc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	4059      	eors	r1, r3
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	4059      	eors	r1, r3
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	404b      	eors	r3, r1
 8008cda:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	441a      	add	r2, r3
 8008ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ce6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008cea:	441a      	add	r2, r3
 8008cec:	4b40      	ldr	r3, [pc, #256]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008cee:	4413      	add	r3, r2
 8008cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008cf2:	4413      	add	r3, r2
 8008cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8008cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008cfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 33);
 8008cfe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d02:	405a      	eors	r2, r3
 8008d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d06:	405a      	eors	r2, r3
 8008d08:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0c:	4059      	eors	r1, r3
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	4059      	eors	r1, r3
 8008d12:	693b      	ldr	r3, [r7, #16]
 8008d14:	404b      	eors	r3, r1
 8008d16:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008d1a:	613b      	str	r3, [r7, #16]
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	441a      	add	r2, r3
 8008d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d22:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008d26:	441a      	add	r2, r3
 8008d28:	4b31      	ldr	r3, [pc, #196]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008d2a:	4413      	add	r3, r2
 8008d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d2e:	4413      	add	r3, r2
 8008d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d34:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008d38:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 34);
 8008d3a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d3e:	405a      	eors	r2, r3
 8008d40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d42:	405a      	eors	r2, r3
 8008d44:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d48:	4059      	eors	r1, r3
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4059      	eors	r1, r3
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	404b      	eors	r3, r1
 8008d52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008d56:	617b      	str	r3, [r7, #20]
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	441a      	add	r2, r3
 8008d5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008d62:	441a      	add	r2, r3
 8008d64:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008d66:	4413      	add	r3, r2
 8008d68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008d6a:	4413      	add	r3, r2
 8008d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008d6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008d74:	657b      	str	r3, [r7, #84]	; 0x54
  R2(a, b, c, d, e, 35);
 8008d76:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d7a:	405a      	eors	r2, r3
 8008d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d7e:	405a      	eors	r2, r3
 8008d80:	68f9      	ldr	r1, [r7, #12]
 8008d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d84:	4059      	eors	r1, r3
 8008d86:	6a3b      	ldr	r3, [r7, #32]
 8008d88:	4059      	eors	r1, r3
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	404b      	eors	r3, r1
 8008d8e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008d92:	61bb      	str	r3, [r7, #24]
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	441a      	add	r2, r3
 8008d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008d9a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008d9e:	441a      	add	r2, r3
 8008da0:	4b13      	ldr	r3, [pc, #76]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008da2:	4413      	add	r3, r2
 8008da4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008da6:	4413      	add	r3, r2
 8008da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008daa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008db0:	65bb      	str	r3, [r7, #88]	; 0x58
  R2(e, a, b, c, d, 36);
 8008db2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008db6:	405a      	eors	r2, r3
 8008db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dba:	405a      	eors	r2, r3
 8008dbc:	6939      	ldr	r1, [r7, #16]
 8008dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc0:	4059      	eors	r1, r3
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	4059      	eors	r1, r3
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	404b      	eors	r3, r1
 8008dca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008dce:	61fb      	str	r3, [r7, #28]
 8008dd0:	69fb      	ldr	r3, [r7, #28]
 8008dd2:	441a      	add	r2, r3
 8008dd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008dd6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008dda:	441a      	add	r2, r3
 8008ddc:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <mg_sha1_transform+0x8e8>)
 8008dde:	4413      	add	r3, r2
 8008de0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008de2:	4413      	add	r3, r2
 8008de4:	653b      	str	r3, [r7, #80]	; 0x50
 8008de6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008de8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008dec:	e002      	b.n	8008df4 <mg_sha1_transform+0x8ec>
 8008dee:	bf00      	nop
 8008df0:	6ed9eba1 	.word	0x6ed9eba1
 8008df4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R2(d, e, a, b, c, 37);
 8008df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008df8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008dfa:	405a      	eors	r2, r3
 8008dfc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dfe:	405a      	eors	r2, r3
 8008e00:	6979      	ldr	r1, [r7, #20]
 8008e02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e04:	4059      	eors	r1, r3
 8008e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e08:	4059      	eors	r1, r3
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	404b      	eors	r3, r1
 8008e0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008e12:	623b      	str	r3, [r7, #32]
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	441a      	add	r2, r3
 8008e18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e1a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008e1e:	441a      	add	r2, r3
 8008e20:	4ba9      	ldr	r3, [pc, #676]	; (80090c8 <mg_sha1_transform+0xbc0>)
 8008e22:	4413      	add	r3, r2
 8008e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e26:	4413      	add	r3, r2
 8008e28:	657b      	str	r3, [r7, #84]	; 0x54
 8008e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  R2(c, d, e, a, b, 38);
 8008e32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e36:	405a      	eors	r2, r3
 8008e38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e3a:	405a      	eors	r2, r3
 8008e3c:	69b9      	ldr	r1, [r7, #24]
 8008e3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e40:	4059      	eors	r1, r3
 8008e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e44:	4059      	eors	r1, r3
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	404b      	eors	r3, r1
 8008e4a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	441a      	add	r2, r3
 8008e54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e56:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008e5a:	441a      	add	r2, r3
 8008e5c:	4b9a      	ldr	r3, [pc, #616]	; (80090c8 <mg_sha1_transform+0xbc0>)
 8008e5e:	4413      	add	r3, r2
 8008e60:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e62:	4413      	add	r3, r2
 8008e64:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e68:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008e6c:	653b      	str	r3, [r7, #80]	; 0x50
  R2(b, c, d, e, a, 39);
 8008e6e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e72:	405a      	eors	r2, r3
 8008e74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e76:	405a      	eors	r2, r3
 8008e78:	69f9      	ldr	r1, [r7, #28]
 8008e7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e7c:	4059      	eors	r1, r3
 8008e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e80:	4059      	eors	r1, r3
 8008e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e84:	404b      	eors	r3, r1
 8008e86:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008e8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	441a      	add	r2, r3
 8008e90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008e92:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008e96:	441a      	add	r2, r3
 8008e98:	4b8b      	ldr	r3, [pc, #556]	; (80090c8 <mg_sha1_transform+0xbc0>)
 8008e9a:	4413      	add	r3, r2
 8008e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e9e:	4413      	add	r3, r2
 8008ea0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ea4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008ea8:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 40);
 8008eaa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008eac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eae:	431a      	orrs	r2, r3
 8008eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb2:	401a      	ands	r2, r3
 8008eb4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb8:	400b      	ands	r3, r1
 8008eba:	431a      	orrs	r2, r3
 8008ebc:	6a39      	ldr	r1, [r7, #32]
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4059      	eors	r1, r3
 8008ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec4:	4059      	eors	r1, r3
 8008ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ec8:	404b      	eors	r3, r1
 8008eca:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	441a      	add	r2, r3
 8008ed4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ed6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008eda:	441a      	add	r2, r3
 8008edc:	4b7b      	ldr	r3, [pc, #492]	; (80090cc <mg_sha1_transform+0xbc4>)
 8008ede:	4413      	add	r3, r2
 8008ee0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ee2:	4413      	add	r3, r2
 8008ee4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ee6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ee8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008eec:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 41);
 8008eee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ef0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ef2:	431a      	orrs	r2, r3
 8008ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ef6:	401a      	ands	r2, r3
 8008ef8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8008efa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008efc:	400b      	ands	r3, r1
 8008efe:	431a      	orrs	r2, r3
 8008f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	4059      	eors	r1, r3
 8008f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f08:	4059      	eors	r1, r3
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	404b      	eors	r3, r1
 8008f0e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008f12:	633b      	str	r3, [r7, #48]	; 0x30
 8008f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f16:	441a      	add	r2, r3
 8008f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f1a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008f1e:	441a      	add	r2, r3
 8008f20:	4b6a      	ldr	r3, [pc, #424]	; (80090cc <mg_sha1_transform+0xbc4>)
 8008f22:	4413      	add	r3, r2
 8008f24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f26:	4413      	add	r3, r2
 8008f28:	653b      	str	r3, [r7, #80]	; 0x50
 8008f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f2c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008f30:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 42);
 8008f32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f36:	431a      	orrs	r2, r3
 8008f38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f3a:	401a      	ands	r2, r3
 8008f3c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f40:	400b      	ands	r3, r1
 8008f42:	431a      	orrs	r2, r3
 8008f44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	4059      	eors	r1, r3
 8008f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f4c:	4059      	eors	r1, r3
 8008f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f50:	404b      	eors	r3, r1
 8008f52:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008f56:	637b      	str	r3, [r7, #52]	; 0x34
 8008f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f5a:	441a      	add	r2, r3
 8008f5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f5e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008f62:	441a      	add	r2, r3
 8008f64:	4b59      	ldr	r3, [pc, #356]	; (80090cc <mg_sha1_transform+0xbc4>)
 8008f66:	4413      	add	r3, r2
 8008f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f6a:	4413      	add	r3, r2
 8008f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8008f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f70:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008f74:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 43);
 8008f76:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008f78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f7a:	431a      	orrs	r2, r3
 8008f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f7e:	401a      	ands	r2, r3
 8008f80:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f84:	400b      	ands	r3, r1
 8008f86:	431a      	orrs	r2, r3
 8008f88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	4059      	eors	r1, r3
 8008f8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f90:	4059      	eors	r1, r3
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	404b      	eors	r3, r1
 8008f96:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008f9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	441a      	add	r2, r3
 8008fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008fa2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008fa6:	441a      	add	r2, r3
 8008fa8:	4b48      	ldr	r3, [pc, #288]	; (80090cc <mg_sha1_transform+0xbc4>)
 8008faa:	4413      	add	r3, r2
 8008fac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008fae:	4413      	add	r3, r2
 8008fb0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008fb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fb4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008fb8:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 44);
 8008fba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008fbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc2:	401a      	ands	r2, r3
 8008fc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fc8:	400b      	ands	r3, r1
 8008fca:	431a      	orrs	r2, r3
 8008fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	4059      	eors	r1, r3
 8008fd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008fd4:	4059      	eors	r1, r3
 8008fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fd8:	404b      	eors	r3, r1
 8008fda:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8008fde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe2:	441a      	add	r2, r3
 8008fe4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008fe6:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8008fea:	441a      	add	r2, r3
 8008fec:	4b37      	ldr	r3, [pc, #220]	; (80090cc <mg_sha1_transform+0xbc4>)
 8008fee:	4413      	add	r3, r2
 8008ff0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008ff2:	4413      	add	r3, r2
 8008ff4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008ff8:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8008ffc:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 45);
 8008ffe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009002:	431a      	orrs	r2, r3
 8009004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009006:	401a      	ands	r2, r3
 8009008:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800900a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800900c:	400b      	ands	r3, r1
 800900e:	431a      	orrs	r2, r3
 8009010:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009012:	6a3b      	ldr	r3, [r7, #32]
 8009014:	4059      	eors	r1, r3
 8009016:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009018:	4059      	eors	r1, r3
 800901a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800901c:	404b      	eors	r3, r1
 800901e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009022:	643b      	str	r3, [r7, #64]	; 0x40
 8009024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009026:	441a      	add	r2, r3
 8009028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800902a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800902e:	441a      	add	r2, r3
 8009030:	4b26      	ldr	r3, [pc, #152]	; (80090cc <mg_sha1_transform+0xbc4>)
 8009032:	4413      	add	r3, r2
 8009034:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009036:	4413      	add	r3, r2
 8009038:	64fb      	str	r3, [r7, #76]	; 0x4c
 800903a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800903c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009040:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 46);
 8009042:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009044:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009046:	431a      	orrs	r2, r3
 8009048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800904a:	401a      	ands	r2, r3
 800904c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800904e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009050:	400b      	ands	r3, r1
 8009052:	431a      	orrs	r2, r3
 8009054:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	4059      	eors	r1, r3
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	4059      	eors	r1, r3
 800905e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009060:	404b      	eors	r3, r1
 8009062:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009066:	647b      	str	r3, [r7, #68]	; 0x44
 8009068:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800906a:	441a      	add	r2, r3
 800906c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800906e:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009072:	441a      	add	r2, r3
 8009074:	4b15      	ldr	r3, [pc, #84]	; (80090cc <mg_sha1_transform+0xbc4>)
 8009076:	4413      	add	r3, r2
 8009078:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800907a:	4413      	add	r3, r2
 800907c:	653b      	str	r3, [r7, #80]	; 0x50
 800907e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009080:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009084:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 47);
 8009086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009088:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800908a:	431a      	orrs	r2, r3
 800908c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800908e:	401a      	ands	r2, r3
 8009090:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009092:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009094:	400b      	ands	r3, r1
 8009096:	431a      	orrs	r2, r3
 8009098:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800909a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909c:	4059      	eors	r1, r3
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	4059      	eors	r1, r3
 80090a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090a4:	404b      	eors	r3, r1
 80090a6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80090aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80090ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090ae:	441a      	add	r2, r3
 80090b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b2:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80090b6:	441a      	add	r2, r3
 80090b8:	4b04      	ldr	r3, [pc, #16]	; (80090cc <mg_sha1_transform+0xbc4>)
 80090ba:	4413      	add	r3, r2
 80090bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80090be:	4413      	add	r3, r2
 80090c0:	657b      	str	r3, [r7, #84]	; 0x54
 80090c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c4:	e004      	b.n	80090d0 <mg_sha1_transform+0xbc8>
 80090c6:	bf00      	nop
 80090c8:	6ed9eba1 	.word	0x6ed9eba1
 80090cc:	8f1bbcdc 	.word	0x8f1bbcdc
 80090d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80090d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 48);
 80090d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80090d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090da:	431a      	orrs	r2, r3
 80090dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090de:	401a      	ands	r2, r3
 80090e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80090e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090e4:	400b      	ands	r3, r1
 80090e6:	431a      	orrs	r2, r3
 80090e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	4059      	eors	r1, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	4059      	eors	r1, r3
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	404b      	eors	r3, r1
 80090f6:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80090fa:	60fb      	str	r3, [r7, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	441a      	add	r2, r3
 8009100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009102:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009106:	441a      	add	r2, r3
 8009108:	4ba8      	ldr	r3, [pc, #672]	; (80093ac <mg_sha1_transform+0xea4>)
 800910a:	4413      	add	r3, r2
 800910c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800910e:	4413      	add	r3, r2
 8009110:	65bb      	str	r3, [r7, #88]	; 0x58
 8009112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009114:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009118:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 49);
 800911a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800911c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800911e:	431a      	orrs	r2, r3
 8009120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009122:	401a      	ands	r2, r3
 8009124:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009128:	400b      	ands	r3, r1
 800912a:	431a      	orrs	r2, r3
 800912c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800912e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009130:	4059      	eors	r1, r3
 8009132:	69bb      	ldr	r3, [r7, #24]
 8009134:	4059      	eors	r1, r3
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	404b      	eors	r3, r1
 800913a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800913e:	613b      	str	r3, [r7, #16]
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	441a      	add	r2, r3
 8009144:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009146:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800914a:	441a      	add	r2, r3
 800914c:	4b97      	ldr	r3, [pc, #604]	; (80093ac <mg_sha1_transform+0xea4>)
 800914e:	4413      	add	r3, r2
 8009150:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009152:	4413      	add	r3, r2
 8009154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009158:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800915c:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 50);
 800915e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009160:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009162:	431a      	orrs	r2, r3
 8009164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009166:	401a      	ands	r2, r3
 8009168:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800916a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800916c:	400b      	ands	r3, r1
 800916e:	431a      	orrs	r2, r3
 8009170:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009174:	4059      	eors	r1, r3
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	4059      	eors	r1, r3
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	404b      	eors	r3, r1
 800917e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009182:	617b      	str	r3, [r7, #20]
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	441a      	add	r2, r3
 8009188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800918a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800918e:	441a      	add	r2, r3
 8009190:	4b86      	ldr	r3, [pc, #536]	; (80093ac <mg_sha1_transform+0xea4>)
 8009192:	4413      	add	r3, r2
 8009194:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009196:	4413      	add	r3, r2
 8009198:	64fb      	str	r3, [r7, #76]	; 0x4c
 800919a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800919c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80091a0:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 51);
 80091a2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80091a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091a6:	431a      	orrs	r2, r3
 80091a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80091aa:	401a      	ands	r2, r3
 80091ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80091ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091b0:	400b      	ands	r3, r1
 80091b2:	431a      	orrs	r2, r3
 80091b4:	68f9      	ldr	r1, [r7, #12]
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	4059      	eors	r1, r3
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	4059      	eors	r1, r3
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	404b      	eors	r3, r1
 80091c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	441a      	add	r2, r3
 80091cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80091d2:	441a      	add	r2, r3
 80091d4:	4b75      	ldr	r3, [pc, #468]	; (80093ac <mg_sha1_transform+0xea4>)
 80091d6:	4413      	add	r3, r2
 80091d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80091da:	4413      	add	r3, r2
 80091dc:	653b      	str	r3, [r7, #80]	; 0x50
 80091de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80091e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 52);
 80091e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80091e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091ea:	431a      	orrs	r2, r3
 80091ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091ee:	401a      	ands	r2, r3
 80091f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80091f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091f4:	400b      	ands	r3, r1
 80091f6:	431a      	orrs	r2, r3
 80091f8:	6939      	ldr	r1, [r7, #16]
 80091fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80091fc:	4059      	eors	r1, r3
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	4059      	eors	r1, r3
 8009202:	69fb      	ldr	r3, [r7, #28]
 8009204:	404b      	eors	r3, r1
 8009206:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800920a:	61fb      	str	r3, [r7, #28]
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	441a      	add	r2, r3
 8009210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009212:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009216:	441a      	add	r2, r3
 8009218:	4b64      	ldr	r3, [pc, #400]	; (80093ac <mg_sha1_transform+0xea4>)
 800921a:	4413      	add	r3, r2
 800921c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800921e:	4413      	add	r3, r2
 8009220:	657b      	str	r3, [r7, #84]	; 0x54
 8009222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009224:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009228:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 53);
 800922a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800922c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800922e:	431a      	orrs	r2, r3
 8009230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009232:	401a      	ands	r2, r3
 8009234:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009238:	400b      	ands	r3, r1
 800923a:	431a      	orrs	r2, r3
 800923c:	6979      	ldr	r1, [r7, #20]
 800923e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009240:	4059      	eors	r1, r3
 8009242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009244:	4059      	eors	r1, r3
 8009246:	6a3b      	ldr	r3, [r7, #32]
 8009248:	404b      	eors	r3, r1
 800924a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800924e:	623b      	str	r3, [r7, #32]
 8009250:	6a3b      	ldr	r3, [r7, #32]
 8009252:	441a      	add	r2, r3
 8009254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009256:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800925a:	441a      	add	r2, r3
 800925c:	4b53      	ldr	r3, [pc, #332]	; (80093ac <mg_sha1_transform+0xea4>)
 800925e:	4413      	add	r3, r2
 8009260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009262:	4413      	add	r3, r2
 8009264:	65bb      	str	r3, [r7, #88]	; 0x58
 8009266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009268:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800926c:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 54);
 800926e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009270:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009272:	431a      	orrs	r2, r3
 8009274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009276:	401a      	ands	r2, r3
 8009278:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800927a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800927c:	400b      	ands	r3, r1
 800927e:	431a      	orrs	r2, r3
 8009280:	69b9      	ldr	r1, [r7, #24]
 8009282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009284:	4059      	eors	r1, r3
 8009286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009288:	4059      	eors	r1, r3
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	404b      	eors	r3, r1
 800928e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009292:	627b      	str	r3, [r7, #36]	; 0x24
 8009294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009296:	441a      	add	r2, r3
 8009298:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800929a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800929e:	441a      	add	r2, r3
 80092a0:	4b42      	ldr	r3, [pc, #264]	; (80093ac <mg_sha1_transform+0xea4>)
 80092a2:	4413      	add	r3, r2
 80092a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092a6:	4413      	add	r3, r2
 80092a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092ac:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80092b0:	657b      	str	r3, [r7, #84]	; 0x54
  R3(a, b, c, d, e, 55);
 80092b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b6:	431a      	orrs	r2, r3
 80092b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ba:	401a      	ands	r2, r3
 80092bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80092be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092c0:	400b      	ands	r3, r1
 80092c2:	431a      	orrs	r2, r3
 80092c4:	69f9      	ldr	r1, [r7, #28]
 80092c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092c8:	4059      	eors	r1, r3
 80092ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092cc:	4059      	eors	r1, r3
 80092ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d0:	404b      	eors	r3, r1
 80092d2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	441a      	add	r2, r3
 80092dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092de:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80092e2:	441a      	add	r2, r3
 80092e4:	4b31      	ldr	r3, [pc, #196]	; (80093ac <mg_sha1_transform+0xea4>)
 80092e6:	4413      	add	r3, r2
 80092e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80092ea:	4413      	add	r3, r2
 80092ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092f0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80092f4:	65bb      	str	r3, [r7, #88]	; 0x58
  R3(e, a, b, c, d, 56);
 80092f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80092f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092fa:	431a      	orrs	r2, r3
 80092fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092fe:	401a      	ands	r2, r3
 8009300:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8009302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009304:	400b      	ands	r3, r1
 8009306:	431a      	orrs	r2, r3
 8009308:	6a39      	ldr	r1, [r7, #32]
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	4059      	eors	r1, r3
 800930e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009310:	4059      	eors	r1, r3
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	404b      	eors	r3, r1
 8009316:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800931a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800931c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800931e:	441a      	add	r2, r3
 8009320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009322:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009326:	441a      	add	r2, r3
 8009328:	4b20      	ldr	r3, [pc, #128]	; (80093ac <mg_sha1_transform+0xea4>)
 800932a:	4413      	add	r3, r2
 800932c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800932e:	4413      	add	r3, r2
 8009330:	653b      	str	r3, [r7, #80]	; 0x50
 8009332:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009334:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009338:	65fb      	str	r3, [r7, #92]	; 0x5c
  R3(d, e, a, b, c, 57);
 800933a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800933c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800933e:	431a      	orrs	r2, r3
 8009340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009342:	401a      	ands	r2, r3
 8009344:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009348:	400b      	ands	r3, r1
 800934a:	431a      	orrs	r2, r3
 800934c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	4059      	eors	r1, r3
 8009352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009354:	4059      	eors	r1, r3
 8009356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009358:	404b      	eors	r3, r1
 800935a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800935e:	633b      	str	r3, [r7, #48]	; 0x30
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	441a      	add	r2, r3
 8009364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009366:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800936a:	441a      	add	r2, r3
 800936c:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <mg_sha1_transform+0xea4>)
 800936e:	4413      	add	r3, r2
 8009370:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009372:	4413      	add	r3, r2
 8009374:	657b      	str	r3, [r7, #84]	; 0x54
 8009376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009378:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800937c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R3(c, d, e, a, b, 58);
 800937e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009382:	431a      	orrs	r2, r3
 8009384:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009386:	401a      	ands	r2, r3
 8009388:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800938a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800938c:	400b      	ands	r3, r1
 800938e:	431a      	orrs	r2, r3
 8009390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	4059      	eors	r1, r3
 8009396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009398:	4059      	eors	r1, r3
 800939a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800939c:	404b      	eors	r3, r1
 800939e:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80093a2:	637b      	str	r3, [r7, #52]	; 0x34
 80093a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a6:	441a      	add	r2, r3
 80093a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093aa:	e001      	b.n	80093b0 <mg_sha1_transform+0xea8>
 80093ac:	8f1bbcdc 	.word	0x8f1bbcdc
 80093b0:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80093b4:	441a      	add	r2, r3
 80093b6:	4ba9      	ldr	r3, [pc, #676]	; (800965c <mg_sha1_transform+0x1154>)
 80093b8:	4413      	add	r3, r2
 80093ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093bc:	4413      	add	r3, r2
 80093be:	65bb      	str	r3, [r7, #88]	; 0x58
 80093c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c2:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80093c6:	653b      	str	r3, [r7, #80]	; 0x50
  R3(b, c, d, e, a, 59);
 80093c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80093ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093cc:	431a      	orrs	r2, r3
 80093ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093d0:	401a      	ands	r2, r3
 80093d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093d6:	400b      	ands	r3, r1
 80093d8:	431a      	orrs	r2, r3
 80093da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	4059      	eors	r1, r3
 80093e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80093e2:	4059      	eors	r1, r3
 80093e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093e6:	404b      	eors	r3, r1
 80093e8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80093ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80093ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f0:	441a      	add	r2, r3
 80093f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80093f4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80093f8:	441a      	add	r2, r3
 80093fa:	4b98      	ldr	r3, [pc, #608]	; (800965c <mg_sha1_transform+0x1154>)
 80093fc:	4413      	add	r3, r2
 80093fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009400:	4413      	add	r3, r2
 8009402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009404:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009406:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800940a:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 60);
 800940c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800940e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009410:	405a      	eors	r2, r3
 8009412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009414:	405a      	eors	r2, r3
 8009416:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	4059      	eors	r1, r3
 800941c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800941e:	4059      	eors	r1, r3
 8009420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009422:	404b      	eors	r3, r1
 8009424:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800942a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800942c:	441a      	add	r2, r3
 800942e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009430:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009434:	441a      	add	r2, r3
 8009436:	4b8a      	ldr	r3, [pc, #552]	; (8009660 <mg_sha1_transform+0x1158>)
 8009438:	4413      	add	r3, r2
 800943a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800943c:	4413      	add	r3, r2
 800943e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009442:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009446:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 61);
 8009448:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800944a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800944c:	405a      	eors	r2, r3
 800944e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009450:	405a      	eors	r2, r3
 8009452:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	4059      	eors	r1, r3
 8009458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800945a:	4059      	eors	r1, r3
 800945c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800945e:	404b      	eors	r3, r1
 8009460:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009464:	643b      	str	r3, [r7, #64]	; 0x40
 8009466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009468:	441a      	add	r2, r3
 800946a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800946c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009470:	441a      	add	r2, r3
 8009472:	4b7b      	ldr	r3, [pc, #492]	; (8009660 <mg_sha1_transform+0x1158>)
 8009474:	4413      	add	r3, r2
 8009476:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009478:	4413      	add	r3, r2
 800947a:	653b      	str	r3, [r7, #80]	; 0x50
 800947c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800947e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009482:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 62);
 8009484:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009488:	405a      	eors	r2, r3
 800948a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800948c:	405a      	eors	r2, r3
 800948e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009492:	4059      	eors	r1, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4059      	eors	r1, r3
 8009498:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800949a:	404b      	eors	r3, r1
 800949c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80094a0:	647b      	str	r3, [r7, #68]	; 0x44
 80094a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094a4:	441a      	add	r2, r3
 80094a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094a8:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80094ac:	441a      	add	r2, r3
 80094ae:	4b6c      	ldr	r3, [pc, #432]	; (8009660 <mg_sha1_transform+0x1158>)
 80094b0:	4413      	add	r3, r2
 80094b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094b4:	4413      	add	r3, r2
 80094b6:	657b      	str	r3, [r7, #84]	; 0x54
 80094b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094ba:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80094be:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 63);
 80094c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c4:	405a      	eors	r2, r3
 80094c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80094c8:	405a      	eors	r2, r3
 80094ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80094cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ce:	4059      	eors	r1, r3
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	4059      	eors	r1, r3
 80094d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094d6:	404b      	eors	r3, r1
 80094d8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80094dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80094de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094e0:	441a      	add	r2, r3
 80094e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094e4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80094e8:	441a      	add	r2, r3
 80094ea:	4b5d      	ldr	r3, [pc, #372]	; (8009660 <mg_sha1_transform+0x1158>)
 80094ec:	4413      	add	r3, r2
 80094ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094f0:	4413      	add	r3, r2
 80094f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80094f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094f6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80094fa:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 64);
 80094fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009500:	405a      	eors	r2, r3
 8009502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009504:	405a      	eors	r2, r3
 8009506:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950a:	4059      	eors	r1, r3
 800950c:	697b      	ldr	r3, [r7, #20]
 800950e:	4059      	eors	r1, r3
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	404b      	eors	r3, r1
 8009514:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009518:	60fb      	str	r3, [r7, #12]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	441a      	add	r2, r3
 800951e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009520:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009524:	441a      	add	r2, r3
 8009526:	4b4e      	ldr	r3, [pc, #312]	; (8009660 <mg_sha1_transform+0x1158>)
 8009528:	4413      	add	r3, r2
 800952a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800952c:	4413      	add	r3, r2
 800952e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009530:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009532:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009536:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 65);
 8009538:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800953a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800953c:	405a      	eors	r2, r3
 800953e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009540:	405a      	eors	r2, r3
 8009542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009546:	4059      	eors	r1, r3
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	4059      	eors	r1, r3
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	404b      	eors	r3, r1
 8009550:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009554:	613b      	str	r3, [r7, #16]
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	441a      	add	r2, r3
 800955a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800955c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009560:	441a      	add	r2, r3
 8009562:	4b3f      	ldr	r3, [pc, #252]	; (8009660 <mg_sha1_transform+0x1158>)
 8009564:	4413      	add	r3, r2
 8009566:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009568:	4413      	add	r3, r2
 800956a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800956c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800956e:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009572:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 66);
 8009574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009576:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009578:	405a      	eors	r2, r3
 800957a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800957c:	405a      	eors	r2, r3
 800957e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009582:	4059      	eors	r1, r3
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	4059      	eors	r1, r3
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	404b      	eors	r3, r1
 800958c:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009590:	617b      	str	r3, [r7, #20]
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	441a      	add	r2, r3
 8009596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009598:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800959c:	441a      	add	r2, r3
 800959e:	4b30      	ldr	r3, [pc, #192]	; (8009660 <mg_sha1_transform+0x1158>)
 80095a0:	4413      	add	r3, r2
 80095a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095a4:	4413      	add	r3, r2
 80095a6:	653b      	str	r3, [r7, #80]	; 0x50
 80095a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095aa:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80095ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 67);
 80095b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80095b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095b4:	405a      	eors	r2, r3
 80095b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80095b8:	405a      	eors	r2, r3
 80095ba:	68f9      	ldr	r1, [r7, #12]
 80095bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095be:	4059      	eors	r1, r3
 80095c0:	6a3b      	ldr	r3, [r7, #32]
 80095c2:	4059      	eors	r1, r3
 80095c4:	69bb      	ldr	r3, [r7, #24]
 80095c6:	404b      	eors	r3, r1
 80095c8:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80095cc:	61bb      	str	r3, [r7, #24]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	441a      	add	r2, r3
 80095d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80095d4:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80095d8:	441a      	add	r2, r3
 80095da:	4b21      	ldr	r3, [pc, #132]	; (8009660 <mg_sha1_transform+0x1158>)
 80095dc:	4413      	add	r3, r2
 80095de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095e0:	4413      	add	r3, r2
 80095e2:	657b      	str	r3, [r7, #84]	; 0x54
 80095e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e6:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80095ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 68);
 80095ec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80095ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095f0:	405a      	eors	r2, r3
 80095f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80095f4:	405a      	eors	r2, r3
 80095f6:	6939      	ldr	r1, [r7, #16]
 80095f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fa:	4059      	eors	r1, r3
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	4059      	eors	r1, r3
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	404b      	eors	r3, r1
 8009604:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009608:	61fb      	str	r3, [r7, #28]
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	441a      	add	r2, r3
 800960e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009610:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009614:	441a      	add	r2, r3
 8009616:	4b12      	ldr	r3, [pc, #72]	; (8009660 <mg_sha1_transform+0x1158>)
 8009618:	4413      	add	r3, r2
 800961a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800961c:	4413      	add	r3, r2
 800961e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009620:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009622:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009626:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 69);
 8009628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800962a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800962c:	405a      	eors	r2, r3
 800962e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009630:	405a      	eors	r2, r3
 8009632:	6979      	ldr	r1, [r7, #20]
 8009634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009636:	4059      	eors	r1, r3
 8009638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963a:	4059      	eors	r1, r3
 800963c:	6a3b      	ldr	r3, [r7, #32]
 800963e:	404b      	eors	r3, r1
 8009640:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009644:	623b      	str	r3, [r7, #32]
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	441a      	add	r2, r3
 800964a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800964c:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009650:	441a      	add	r2, r3
 8009652:	4b03      	ldr	r3, [pc, #12]	; (8009660 <mg_sha1_transform+0x1158>)
 8009654:	4413      	add	r3, r2
 8009656:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009658:	4413      	add	r3, r2
 800965a:	e003      	b.n	8009664 <mg_sha1_transform+0x115c>
 800965c:	8f1bbcdc 	.word	0x8f1bbcdc
 8009660:	ca62c1d6 	.word	0xca62c1d6
 8009664:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009666:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009668:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800966c:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 70);
 800966e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009672:	405a      	eors	r2, r3
 8009674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009676:	405a      	eors	r2, r3
 8009678:	69b9      	ldr	r1, [r7, #24]
 800967a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800967c:	4059      	eors	r1, r3
 800967e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009680:	4059      	eors	r1, r3
 8009682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009684:	404b      	eors	r3, r1
 8009686:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800968e:	441a      	add	r2, r3
 8009690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009692:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009696:	441a      	add	r2, r3
 8009698:	4ba7      	ldr	r3, [pc, #668]	; (8009938 <mg_sha1_transform+0x1430>)
 800969a:	4413      	add	r3, r2
 800969c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800969e:	4413      	add	r3, r2
 80096a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a4:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80096a8:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 71);
 80096aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ae:	405a      	eors	r2, r3
 80096b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096b2:	405a      	eors	r2, r3
 80096b4:	69f9      	ldr	r1, [r7, #28]
 80096b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096b8:	4059      	eors	r1, r3
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	4059      	eors	r1, r3
 80096be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096c0:	404b      	eors	r3, r1
 80096c2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80096c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80096c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ca:	441a      	add	r2, r3
 80096cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ce:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80096d2:	441a      	add	r2, r3
 80096d4:	4b98      	ldr	r3, [pc, #608]	; (8009938 <mg_sha1_transform+0x1430>)
 80096d6:	4413      	add	r3, r2
 80096d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80096da:	4413      	add	r3, r2
 80096dc:	653b      	str	r3, [r7, #80]	; 0x50
 80096de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80096e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 72);
 80096e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096ea:	405a      	eors	r2, r3
 80096ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096ee:	405a      	eors	r2, r3
 80096f0:	6a39      	ldr	r1, [r7, #32]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	4059      	eors	r1, r3
 80096f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f8:	4059      	eors	r1, r3
 80096fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096fc:	404b      	eors	r3, r1
 80096fe:	ea4f 73f3 	mov.w	r3, r3, ror #31
 8009702:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009706:	441a      	add	r2, r3
 8009708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800970a:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800970e:	441a      	add	r2, r3
 8009710:	4b89      	ldr	r3, [pc, #548]	; (8009938 <mg_sha1_transform+0x1430>)
 8009712:	4413      	add	r3, r2
 8009714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009716:	4413      	add	r3, r2
 8009718:	657b      	str	r3, [r7, #84]	; 0x54
 800971a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800971c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009720:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 73);
 8009722:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009726:	405a      	eors	r2, r3
 8009728:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800972a:	405a      	eors	r2, r3
 800972c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	4059      	eors	r1, r3
 8009732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009734:	4059      	eors	r1, r3
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	404b      	eors	r3, r1
 800973a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800973e:	633b      	str	r3, [r7, #48]	; 0x30
 8009740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009742:	441a      	add	r2, r3
 8009744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009746:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800974a:	441a      	add	r2, r3
 800974c:	4b7a      	ldr	r3, [pc, #488]	; (8009938 <mg_sha1_transform+0x1430>)
 800974e:	4413      	add	r3, r2
 8009750:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009752:	4413      	add	r3, r2
 8009754:	65bb      	str	r3, [r7, #88]	; 0x58
 8009756:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009758:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800975c:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 74);
 800975e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009762:	405a      	eors	r2, r3
 8009764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009766:	405a      	eors	r2, r3
 8009768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	4059      	eors	r1, r3
 800976e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009770:	4059      	eors	r1, r3
 8009772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009774:	404b      	eors	r3, r1
 8009776:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800977a:	637b      	str	r3, [r7, #52]	; 0x34
 800977c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977e:	441a      	add	r2, r3
 8009780:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009782:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009786:	441a      	add	r2, r3
 8009788:	4b6b      	ldr	r3, [pc, #428]	; (8009938 <mg_sha1_transform+0x1430>)
 800978a:	4413      	add	r3, r2
 800978c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800978e:	4413      	add	r3, r2
 8009790:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009794:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009798:	657b      	str	r3, [r7, #84]	; 0x54
  R4(a, b, c, d, e, 75);
 800979a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800979c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800979e:	405a      	eors	r2, r3
 80097a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097a2:	405a      	eors	r2, r3
 80097a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	4059      	eors	r1, r3
 80097aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ac:	4059      	eors	r1, r3
 80097ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097b0:	404b      	eors	r3, r1
 80097b2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80097b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80097b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ba:	441a      	add	r2, r3
 80097bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097be:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80097c2:	441a      	add	r2, r3
 80097c4:	4b5c      	ldr	r3, [pc, #368]	; (8009938 <mg_sha1_transform+0x1430>)
 80097c6:	4413      	add	r3, r2
 80097c8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80097ca:	4413      	add	r3, r2
 80097cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097d0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80097d4:	65bb      	str	r3, [r7, #88]	; 0x58
  R4(e, a, b, c, d, 76);
 80097d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80097d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097da:	405a      	eors	r2, r3
 80097dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80097de:	405a      	eors	r2, r3
 80097e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	4059      	eors	r1, r3
 80097e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097e8:	4059      	eors	r1, r3
 80097ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ec:	404b      	eors	r3, r1
 80097ee:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80097f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097f6:	441a      	add	r2, r3
 80097f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097fa:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80097fe:	441a      	add	r2, r3
 8009800:	4b4d      	ldr	r3, [pc, #308]	; (8009938 <mg_sha1_transform+0x1430>)
 8009802:	4413      	add	r3, r2
 8009804:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009806:	4413      	add	r3, r2
 8009808:	653b      	str	r3, [r7, #80]	; 0x50
 800980a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800980c:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009810:	65fb      	str	r3, [r7, #92]	; 0x5c
  R4(d, e, a, b, c, 77);
 8009812:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009814:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009816:	405a      	eors	r2, r3
 8009818:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800981a:	405a      	eors	r2, r3
 800981c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	4059      	eors	r1, r3
 8009822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009824:	4059      	eors	r1, r3
 8009826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009828:	404b      	eors	r3, r1
 800982a:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800982e:	643b      	str	r3, [r7, #64]	; 0x40
 8009830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009832:	441a      	add	r2, r3
 8009834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009836:	ea4f 63f3 	mov.w	r3, r3, ror #27
 800983a:	441a      	add	r2, r3
 800983c:	4b3e      	ldr	r3, [pc, #248]	; (8009938 <mg_sha1_transform+0x1430>)
 800983e:	4413      	add	r3, r2
 8009840:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009842:	4413      	add	r3, r2
 8009844:	657b      	str	r3, [r7, #84]	; 0x54
 8009846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009848:	ea4f 03b3 	mov.w	r3, r3, ror #2
 800984c:	64fb      	str	r3, [r7, #76]	; 0x4c
  R4(c, d, e, a, b, 78);
 800984e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009852:	405a      	eors	r2, r3
 8009854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009856:	405a      	eors	r2, r3
 8009858:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800985a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985c:	4059      	eors	r1, r3
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	4059      	eors	r1, r3
 8009862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009864:	404b      	eors	r3, r1
 8009866:	ea4f 73f3 	mov.w	r3, r3, ror #31
 800986a:	647b      	str	r3, [r7, #68]	; 0x44
 800986c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800986e:	441a      	add	r2, r3
 8009870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009872:	ea4f 63f3 	mov.w	r3, r3, ror #27
 8009876:	441a      	add	r2, r3
 8009878:	4b2f      	ldr	r3, [pc, #188]	; (8009938 <mg_sha1_transform+0x1430>)
 800987a:	4413      	add	r3, r2
 800987c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800987e:	4413      	add	r3, r2
 8009880:	65bb      	str	r3, [r7, #88]	; 0x58
 8009882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009884:	ea4f 03b3 	mov.w	r3, r3, ror #2
 8009888:	653b      	str	r3, [r7, #80]	; 0x50
  R4(b, c, d, e, a, 79);
 800988a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800988c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800988e:	405a      	eors	r2, r3
 8009890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009892:	405a      	eors	r2, r3
 8009894:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009898:	4059      	eors	r1, r3
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	4059      	eors	r1, r3
 800989e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098a0:	404b      	eors	r3, r1
 80098a2:	ea4f 73f3 	mov.w	r3, r3, ror #31
 80098a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80098a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098aa:	441a      	add	r2, r3
 80098ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80098ae:	ea4f 63f3 	mov.w	r3, r3, ror #27
 80098b2:	441a      	add	r2, r3
 80098b4:	4b20      	ldr	r3, [pc, #128]	; (8009938 <mg_sha1_transform+0x1430>)
 80098b6:	4413      	add	r3, r2
 80098b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098ba:	4413      	add	r3, r2
 80098bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098c0:	ea4f 03b3 	mov.w	r3, r3, ror #2
 80098c4:	657b      	str	r3, [r7, #84]	; 0x54
  state[0] += a;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80098cc:	441a      	add	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	601a      	str	r2, [r3, #0]
  state[1] += b;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	3304      	adds	r3, #4
 80098d6:	6819      	ldr	r1, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	3304      	adds	r3, #4
 80098dc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098de:	440a      	add	r2, r1
 80098e0:	601a      	str	r2, [r3, #0]
  state[2] += c;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3308      	adds	r3, #8
 80098e6:	6819      	ldr	r1, [r3, #0]
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	3308      	adds	r3, #8
 80098ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80098ee:	440a      	add	r2, r1
 80098f0:	601a      	str	r2, [r3, #0]
  state[3] += d;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	330c      	adds	r3, #12
 80098f6:	6819      	ldr	r1, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	330c      	adds	r3, #12
 80098fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80098fe:	440a      	add	r2, r1
 8009900:	601a      	str	r2, [r3, #0]
  state[4] += e;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	3310      	adds	r3, #16
 8009906:	6819      	ldr	r1, [r3, #0]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	3310      	adds	r3, #16
 800990c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800990e:	440a      	add	r2, r1
 8009910:	601a      	str	r2, [r3, #0]
  /* Erase working structures. The order of operations is important,
   * used to ensure that compiler doesn't optimize those out. */
  memset(block, 0, sizeof(block));
 8009912:	f107 030c 	add.w	r3, r7, #12
 8009916:	2240      	movs	r2, #64	; 0x40
 8009918:	2100      	movs	r1, #0
 800991a:	4618      	mov	r0, r3
 800991c:	f00b fe9b 	bl	8015656 <memset>
  a = b = c = d = e = 0;
 8009920:	2300      	movs	r3, #0
 8009922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009926:	653b      	str	r3, [r7, #80]	; 0x50
 8009928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800992a:	657b      	str	r3, [r7, #84]	; 0x54
 800992c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800992e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009930:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009932:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009934:	e002      	b.n	800993c <mg_sha1_transform+0x1434>
 8009936:	bf00      	nop
 8009938:	ca62c1d6 	.word	0xca62c1d6
  (void) a;
  (void) b;
  (void) c;
  (void) d;
  (void) e;
}
 800993c:	bf00      	nop
 800993e:	3764      	adds	r7, #100	; 0x64
 8009940:	46bd      	mov	sp, r7
 8009942:	bd90      	pop	{r4, r7, pc}

08009944 <mg_sha1_init>:

void mg_sha1_init(mg_sha1_ctx *context) {
 8009944:	b480      	push	{r7}
 8009946:	b083      	sub	sp, #12
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  context->state[0] = 0x67452301;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4a0d      	ldr	r2, [pc, #52]	; (8009984 <mg_sha1_init+0x40>)
 8009950:	601a      	str	r2, [r3, #0]
  context->state[1] = 0xEFCDAB89;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a0c      	ldr	r2, [pc, #48]	; (8009988 <mg_sha1_init+0x44>)
 8009956:	605a      	str	r2, [r3, #4]
  context->state[2] = 0x98BADCFE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a0c      	ldr	r2, [pc, #48]	; (800998c <mg_sha1_init+0x48>)
 800995c:	609a      	str	r2, [r3, #8]
  context->state[3] = 0x10325476;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4a0b      	ldr	r2, [pc, #44]	; (8009990 <mg_sha1_init+0x4c>)
 8009962:	60da      	str	r2, [r3, #12]
  context->state[4] = 0xC3D2E1F0;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a0b      	ldr	r2, [pc, #44]	; (8009994 <mg_sha1_init+0x50>)
 8009968:	611a      	str	r2, [r3, #16]
  context->count[0] = context->count[1] = 0;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	619a      	str	r2, [r3, #24]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	699a      	ldr	r2, [r3, #24]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	615a      	str	r2, [r3, #20]
}
 8009978:	bf00      	nop
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	67452301 	.word	0x67452301
 8009988:	efcdab89 	.word	0xefcdab89
 800998c:	98badcfe 	.word	0x98badcfe
 8009990:	10325476 	.word	0x10325476
 8009994:	c3d2e1f0 	.word	0xc3d2e1f0

08009998 <mg_sha1_update>:

void mg_sha1_update(mg_sha1_ctx *context, const unsigned char *data,
                    size_t len) {
 8009998:	b580      	push	{r7, lr}
 800999a:	b086      	sub	sp, #24
 800999c:	af00      	add	r7, sp, #0
 800999e:	60f8      	str	r0, [r7, #12]
 80099a0:	60b9      	str	r1, [r7, #8]
 80099a2:	607a      	str	r2, [r7, #4]
  size_t i, j;

  j = context->count[0];
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	695b      	ldr	r3, [r3, #20]
 80099a8:	613b      	str	r3, [r7, #16]
  if ((context->count[0] += (uint32_t) len << 3) < j) context->count[1]++;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	695a      	ldr	r2, [r3, #20]
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	00db      	lsls	r3, r3, #3
 80099b2:	441a      	add	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	615a      	str	r2, [r3, #20]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	693a      	ldr	r2, [r7, #16]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d904      	bls.n	80099cc <mg_sha1_update+0x34>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	699b      	ldr	r3, [r3, #24]
 80099c6:	1c5a      	adds	r2, r3, #1
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	619a      	str	r2, [r3, #24]
  context->count[1] += (uint32_t) (len >> 29);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	699a      	ldr	r2, [r3, #24]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	0f5b      	lsrs	r3, r3, #29
 80099d4:	441a      	add	r2, r3
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	619a      	str	r2, [r3, #24]
  j = (j >> 3) & 63;
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	08db      	lsrs	r3, r3, #3
 80099de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80099e2:	613b      	str	r3, [r7, #16]
  if ((j + len) > 63) {
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4413      	add	r3, r2
 80099ea:	2b3f      	cmp	r3, #63	; 0x3f
 80099ec:	d926      	bls.n	8009a3c <mg_sha1_update+0xa4>
    memcpy(&context->buffer[j], data, (i = 64 - j));
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	3318      	adds	r3, #24
 80099f2:	68fa      	ldr	r2, [r7, #12]
 80099f4:	4413      	add	r3, r2
 80099f6:	1d18      	adds	r0, r3, #4
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80099fe:	617b      	str	r3, [r7, #20]
 8009a00:	697a      	ldr	r2, [r7, #20]
 8009a02:	68b9      	ldr	r1, [r7, #8]
 8009a04:	f00b ff0e 	bl	8015824 <memcpy>
    mg_sha1_transform(context->state, context->buffer);
 8009a08:	68fa      	ldr	r2, [r7, #12]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	331c      	adds	r3, #28
 8009a0e:	4619      	mov	r1, r3
 8009a10:	4610      	mov	r0, r2
 8009a12:	f7fe fd79 	bl	8008508 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8009a16:	e009      	b.n	8009a2c <mg_sha1_update+0x94>
      mg_sha1_transform(context->state, &data[i]);
 8009a18:	68f8      	ldr	r0, [r7, #12]
 8009a1a:	68ba      	ldr	r2, [r7, #8]
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	4413      	add	r3, r2
 8009a20:	4619      	mov	r1, r3
 8009a22:	f7fe fd71 	bl	8008508 <mg_sha1_transform>
    for (; i + 63 < len; i += 64) {
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	3340      	adds	r3, #64	; 0x40
 8009a2a:	617b      	str	r3, [r7, #20]
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	333f      	adds	r3, #63	; 0x3f
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d8f0      	bhi.n	8009a18 <mg_sha1_update+0x80>
    }
    j = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	613b      	str	r3, [r7, #16]
 8009a3a:	e001      	b.n	8009a40 <mg_sha1_update+0xa8>
  } else
    i = 0;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	617b      	str	r3, [r7, #20]
  memcpy(&context->buffer[j], &data[i], len - i);
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	3318      	adds	r3, #24
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	4413      	add	r3, r2
 8009a48:	1d18      	adds	r0, r3, #4
 8009a4a:	68ba      	ldr	r2, [r7, #8]
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	18d1      	adds	r1, r2, r3
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	461a      	mov	r2, r3
 8009a58:	f00b fee4 	bl	8015824 <memcpy>
}
 8009a5c:	bf00      	nop
 8009a5e:	3718      	adds	r7, #24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}

08009a64 <mg_sha1_final>:

void mg_sha1_final(unsigned char digest[20], mg_sha1_ctx *context) {
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b086      	sub	sp, #24
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  unsigned i;
  unsigned char finalcount[8], c;

  for (i = 0; i < 8; i++) {
 8009a6e:	2300      	movs	r3, #0
 8009a70:	617b      	str	r3, [r7, #20]
 8009a72:	e01b      	b.n	8009aac <mg_sha1_final+0x48>
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	bf94      	ite	ls
 8009a7a:	2301      	movls	r3, #1
 8009a7c:	2300      	movhi	r3, #0
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	683a      	ldr	r2, [r7, #0]
 8009a82:	3304      	adds	r3, #4
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	685a      	ldr	r2, [r3, #4]
                                      ((3 - (i & 3)) * 8)) &
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	43db      	mvns	r3, r3
 8009a8e:	f003 0303 	and.w	r3, r3, #3
 8009a92:	00db      	lsls	r3, r3, #3
    finalcount[i] = (unsigned char) ((context->count[(i >= 4 ? 0 : 1)] >>
 8009a94:	fa22 f303 	lsr.w	r3, r2, r3
 8009a98:	b2d9      	uxtb	r1, r3
 8009a9a:	f107 020c 	add.w	r2, r7, #12
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	460a      	mov	r2, r1
 8009aa4:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 8; i++) {
 8009aa6:	697b      	ldr	r3, [r7, #20]
 8009aa8:	3301      	adds	r3, #1
 8009aaa:	617b      	str	r3, [r7, #20]
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	2b07      	cmp	r3, #7
 8009ab0:	d9e0      	bls.n	8009a74 <mg_sha1_final+0x10>
                                     255);
  }
  c = 0200;
 8009ab2:	2380      	movs	r3, #128	; 0x80
 8009ab4:	72fb      	strb	r3, [r7, #11]
  mg_sha1_update(context, &c, 1);
 8009ab6:	f107 030b 	add.w	r3, r7, #11
 8009aba:	2201      	movs	r2, #1
 8009abc:	4619      	mov	r1, r3
 8009abe:	6838      	ldr	r0, [r7, #0]
 8009ac0:	f7ff ff6a 	bl	8009998 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8009ac4:	e008      	b.n	8009ad8 <mg_sha1_final+0x74>
    c = 0000;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	72fb      	strb	r3, [r7, #11]
    mg_sha1_update(context, &c, 1);
 8009aca:	f107 030b 	add.w	r3, r7, #11
 8009ace:	2201      	movs	r2, #1
 8009ad0:	4619      	mov	r1, r3
 8009ad2:	6838      	ldr	r0, [r7, #0]
 8009ad4:	f7ff ff60 	bl	8009998 <mg_sha1_update>
  while ((context->count[0] & 504) != 448) {
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	695b      	ldr	r3, [r3, #20]
 8009adc:	f403 73fc 	and.w	r3, r3, #504	; 0x1f8
 8009ae0:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8009ae4:	d1ef      	bne.n	8009ac6 <mg_sha1_final+0x62>
  }
  mg_sha1_update(context, finalcount, 8);
 8009ae6:	f107 030c 	add.w	r3, r7, #12
 8009aea:	2208      	movs	r2, #8
 8009aec:	4619      	mov	r1, r3
 8009aee:	6838      	ldr	r0, [r7, #0]
 8009af0:	f7ff ff52 	bl	8009998 <mg_sha1_update>
  for (i = 0; i < 20; i++) {
 8009af4:	2300      	movs	r3, #0
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	e013      	b.n	8009b22 <mg_sha1_final+0xbe>
    digest[i] =
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8009afa:	697b      	ldr	r3, [r7, #20]
 8009afc:	089a      	lsrs	r2, r3, #2
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	43db      	mvns	r3, r3
 8009b08:	f003 0303 	and.w	r3, r3, #3
 8009b0c:	00db      	lsls	r3, r3, #3
 8009b0e:	fa22 f103 	lsr.w	r1, r2, r3
    digest[i] =
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	4413      	add	r3, r2
        (unsigned char) ((context->state[i >> 2] >> ((3 - (i & 3)) * 8)) & 255);
 8009b18:	b2ca      	uxtb	r2, r1
    digest[i] =
 8009b1a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < 20; i++) {
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	617b      	str	r3, [r7, #20]
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	2b13      	cmp	r3, #19
 8009b26:	d9e8      	bls.n	8009afa <mg_sha1_final+0x96>
  }
  memset(context, '\0', sizeof(*context));
 8009b28:	225c      	movs	r2, #92	; 0x5c
 8009b2a:	2100      	movs	r1, #0
 8009b2c:	6838      	ldr	r0, [r7, #0]
 8009b2e:	f00b fd92 	bl	8015656 <memset>
  memset(&finalcount, '\0', sizeof(finalcount));
 8009b32:	f107 030c 	add.w	r3, r7, #12
 8009b36:	2208      	movs	r2, #8
 8009b38:	2100      	movs	r1, #0
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f00b fd8b 	bl	8015656 <memset>
}
 8009b40:	bf00      	nop
 8009b42:	3718      	adds	r7, #24
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <gettimestamp>:


#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static int64_t gettimestamp(const uint32_t *data) {
 8009b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b4c:	b086      	sub	sp, #24
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f001 f8ca 	bl	800acf0 <mg_ntohl>
 8009b5c:	6178      	str	r0, [r7, #20]
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	3304      	adds	r3, #4
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4618      	mov	r0, r3
 8009b66:	f001 f8c3 	bl	800acf0 <mg_ntohl>
 8009b6a:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d003      	beq.n	8009b7a <gettimestamp+0x32>
 8009b72:	697a      	ldr	r2, [r7, #20]
 8009b74:	4b2e      	ldr	r3, [pc, #184]	; (8009c30 <gettimestamp+0xe8>)
 8009b76:	4413      	add	r3, r2
 8009b78:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4698      	mov	r8, r3
 8009b80:	4691      	mov	r9, r2
 8009b82:	4642      	mov	r2, r8
 8009b84:	464b      	mov	r3, r9
 8009b86:	f04f 0000 	mov.w	r0, #0
 8009b8a:	f04f 0100 	mov.w	r1, #0
 8009b8e:	0159      	lsls	r1, r3, #5
 8009b90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009b94:	0150      	lsls	r0, r2, #5
 8009b96:	4602      	mov	r2, r0
 8009b98:	460b      	mov	r3, r1
 8009b9a:	ebb2 0408 	subs.w	r4, r2, r8
 8009b9e:	eb63 0509 	sbc.w	r5, r3, r9
 8009ba2:	f04f 0200 	mov.w	r2, #0
 8009ba6:	f04f 0300 	mov.w	r3, #0
 8009baa:	00ab      	lsls	r3, r5, #2
 8009bac:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009bb0:	00a2      	lsls	r2, r4, #2
 8009bb2:	4614      	mov	r4, r2
 8009bb4:	461d      	mov	r5, r3
 8009bb6:	eb14 0a08 	adds.w	sl, r4, r8
 8009bba:	eb45 0b09 	adc.w	fp, r5, r9
 8009bbe:	f04f 0200 	mov.w	r2, #0
 8009bc2:	f04f 0300 	mov.w	r3, #0
 8009bc6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bd2:	4692      	mov	sl, r2
 8009bd4:	469b      	mov	fp, r3
 8009bd6:	4654      	mov	r4, sl
 8009bd8:	465d      	mov	r5, fp
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	ee07 3a90 	vmov	s15, r3
 8009be0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8009be4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8009c20 <gettimestamp+0xd8>
 8009be8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009bec:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8009c28 <gettimestamp+0xe0>
 8009bf0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bf4:	ec51 0b17 	vmov	r0, r1, d7
 8009bf8:	f7f6 fe16 	bl	8000828 <__aeabi_d2lz>
 8009bfc:	4602      	mov	r2, r0
 8009bfe:	460b      	mov	r3, r1
 8009c00:	18a1      	adds	r1, r4, r2
 8009c02:	6039      	str	r1, [r7, #0]
 8009c04:	eb45 0303 	adc.w	r3, r5, r3
 8009c08:	607b      	str	r3, [r7, #4]
 8009c0a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8009c0e:	4610      	mov	r0, r2
 8009c10:	4619      	mov	r1, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c1a:	bf00      	nop
 8009c1c:	f3af 8000 	nop.w
 8009c20:	ffe00000 	.word	0xffe00000
 8009c24:	41efffff 	.word	0x41efffff
 8009c28:	00000000 	.word	0x00000000
 8009c2c:	408f4000 	.word	0x408f4000
 8009c30:	7c558180 	.word	0x7c558180

08009c34 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8009c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c38:	b09c      	sub	sp, #112	; 0x70
 8009c3a:	af08      	add	r7, sp, #32
 8009c3c:	6178      	str	r0, [r7, #20]
 8009c3e:	6139      	str	r1, [r7, #16]
  int64_t res = -1;
 8009c40:	f04f 32ff 	mov.w	r2, #4294967295
 8009c44:	f04f 33ff 	mov.w	r3, #4294967295
 8009c48:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int mode = len > 0 ? buf[0] & 7 : 0;
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <mg_sntp_parse+0x28>
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	f003 0307 	and.w	r3, r3, #7
 8009c5a:	e000      	b.n	8009c5e <mg_sntp_parse+0x2a>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	647b      	str	r3, [r7, #68]	; 0x44
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d006      	beq.n	8009c74 <mg_sntp_parse+0x40>
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	08db      	lsrs	r3, r3, #3
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	e000      	b.n	8009c76 <mg_sntp_parse+0x42>
 8009c74:	2300      	movs	r3, #0
 8009c76:	643b      	str	r3, [r7, #64]	; 0x40
  if (len < 48) {
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	2b2f      	cmp	r3, #47	; 0x2f
 8009c7c:	d80f      	bhi.n	8009c9e <mg_sntp_parse+0x6a>
    MG_ERROR(("%s", "corrupt packet"));
 8009c7e:	4b63      	ldr	r3, [pc, #396]	; (8009e0c <mg_sntp_parse+0x1d8>)
 8009c80:	f241 1236 	movw	r2, #4406	; 0x1136
 8009c84:	4962      	ldr	r1, [pc, #392]	; (8009e10 <mg_sntp_parse+0x1dc>)
 8009c86:	2001      	movs	r0, #1
 8009c88:	f7fd faa8 	bl	80071dc <mg_log_prefix>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 80b3 	beq.w	8009dfa <mg_sntp_parse+0x1c6>
 8009c94:	495f      	ldr	r1, [pc, #380]	; (8009e14 <mg_sntp_parse+0x1e0>)
 8009c96:	4860      	ldr	r0, [pc, #384]	; (8009e18 <mg_sntp_parse+0x1e4>)
 8009c98:	f7fd fafa 	bl	8007290 <mg_log>
 8009c9c:	e0ad      	b.n	8009dfa <mg_sntp_parse+0x1c6>
  } else if (mode != 4 && mode != 5) {
 8009c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d012      	beq.n	8009cca <mg_sntp_parse+0x96>
 8009ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009ca6:	2b05      	cmp	r3, #5
 8009ca8:	d00f      	beq.n	8009cca <mg_sntp_parse+0x96>
    MG_ERROR(("%s", "not a server reply"));
 8009caa:	4b58      	ldr	r3, [pc, #352]	; (8009e0c <mg_sntp_parse+0x1d8>)
 8009cac:	f241 1238 	movw	r2, #4408	; 0x1138
 8009cb0:	4957      	ldr	r1, [pc, #348]	; (8009e10 <mg_sntp_parse+0x1dc>)
 8009cb2:	2001      	movs	r0, #1
 8009cb4:	f7fd fa92 	bl	80071dc <mg_log_prefix>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	f000 809d 	beq.w	8009dfa <mg_sntp_parse+0x1c6>
 8009cc0:	4956      	ldr	r1, [pc, #344]	; (8009e1c <mg_sntp_parse+0x1e8>)
 8009cc2:	4855      	ldr	r0, [pc, #340]	; (8009e18 <mg_sntp_parse+0x1e4>)
 8009cc4:	f7fd fae4 	bl	8007290 <mg_log>
 8009cc8:	e097      	b.n	8009dfa <mg_sntp_parse+0x1c6>
  } else if (buf[1] == 0) {
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	3301      	adds	r3, #1
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d10f      	bne.n	8009cf4 <mg_sntp_parse+0xc0>
    MG_ERROR(("%s", "server sent a kiss of death"));
 8009cd4:	4b4d      	ldr	r3, [pc, #308]	; (8009e0c <mg_sntp_parse+0x1d8>)
 8009cd6:	f241 123a 	movw	r2, #4410	; 0x113a
 8009cda:	494d      	ldr	r1, [pc, #308]	; (8009e10 <mg_sntp_parse+0x1dc>)
 8009cdc:	2001      	movs	r0, #1
 8009cde:	f7fd fa7d 	bl	80071dc <mg_log_prefix>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	f000 8088 	beq.w	8009dfa <mg_sntp_parse+0x1c6>
 8009cea:	494d      	ldr	r1, [pc, #308]	; (8009e20 <mg_sntp_parse+0x1ec>)
 8009cec:	484a      	ldr	r0, [pc, #296]	; (8009e18 <mg_sntp_parse+0x1e4>)
 8009cee:	f7fd facf 	bl	8007290 <mg_log>
 8009cf2:	e082      	b.n	8009dfa <mg_sntp_parse+0x1c6>
  } else if (version == 4 || version == 3) {
 8009cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cf6:	2b04      	cmp	r3, #4
 8009cf8:	d002      	beq.n	8009d00 <mg_sntp_parse+0xcc>
 8009cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cfc:	2b03      	cmp	r3, #3
 8009cfe:	d16e      	bne.n	8009dde <mg_sntp_parse+0x1aa>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t t0 = gettimestamp((uint32_t *) &buf[24]);
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	3318      	adds	r3, #24
 8009d04:	4618      	mov	r0, r3
 8009d06:	f7ff ff1f 	bl	8009b48 <gettimestamp>
 8009d0a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    int64_t t1 = gettimestamp((uint32_t *) &buf[32]);
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	3320      	adds	r3, #32
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff ff18 	bl	8009b48 <gettimestamp>
 8009d18:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    int64_t t2 = gettimestamp((uint32_t *) &buf[40]);
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	3328      	adds	r3, #40	; 0x28
 8009d20:	4618      	mov	r0, r3
 8009d22:	f7ff ff11 	bl	8009b48 <gettimestamp>
 8009d26:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    int64_t t3 = (int64_t) mg_millis();
 8009d2a:	f7f6 ff39 	bl	8000ba0 <mg_millis>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	460b      	mov	r3, r1
 8009d32:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int64_t delta = (t3 - t0) - (t2 - t1);
 8009d36:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009d3a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009d3e:	ebb0 0802 	subs.w	r8, r0, r2
 8009d42:	eb61 0903 	sbc.w	r9, r1, r3
 8009d46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8009d4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d4e:	1a84      	subs	r4, r0, r2
 8009d50:	eb61 0503 	sbc.w	r5, r1, r3
 8009d54:	ebb8 0304 	subs.w	r3, r8, r4
 8009d58:	60bb      	str	r3, [r7, #8]
 8009d5a:	eb69 0305 	sbc.w	r3, r9, r5
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009d64:	e9c7 3406 	strd	r3, r4, [r7, #24]
    MG_VERBOSE(("%lld %lld %lld %lld delta:%lld", t0, t1, t2, t3, delta));
 8009d68:	4b28      	ldr	r3, [pc, #160]	; (8009e0c <mg_sntp_parse+0x1d8>)
 8009d6a:	f241 1242 	movw	r2, #4418	; 0x1142
 8009d6e:	4928      	ldr	r1, [pc, #160]	; (8009e10 <mg_sntp_parse+0x1dc>)
 8009d70:	2004      	movs	r0, #4
 8009d72:	f7fd fa33 	bl	80071dc <mg_log_prefix>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d014      	beq.n	8009da6 <mg_sntp_parse+0x172>
 8009d7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d80:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d84:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d88:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009d90:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d94:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009d98:	e9cd 2300 	strd	r2, r3, [sp]
 8009d9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009da0:	4820      	ldr	r0, [pc, #128]	; (8009e24 <mg_sntp_parse+0x1f0>)
 8009da2:	f7fd fa75 	bl	8007290 <mg_log>
    res = t2 + delta / 2;
 8009da6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	da06      	bge.n	8009dbc <mg_sntp_parse+0x188>
 8009dae:	1c51      	adds	r1, r2, #1
 8009db0:	6039      	str	r1, [r7, #0]
 8009db2:	f143 0300 	adc.w	r3, r3, #0
 8009db6:	607b      	str	r3, [r7, #4]
 8009db8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009dbc:	f04f 0000 	mov.w	r0, #0
 8009dc0:	f04f 0100 	mov.w	r1, #0
 8009dc4:	0850      	lsrs	r0, r2, #1
 8009dc6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8009dca:	1059      	asrs	r1, r3, #1
 8009dcc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009dd0:	eb12 0a00 	adds.w	sl, r2, r0
 8009dd4:	eb43 0b01 	adc.w	fp, r3, r1
 8009dd8:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
  } else if (version == 4 || version == 3) {
 8009ddc:	e00d      	b.n	8009dfa <mg_sntp_parse+0x1c6>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 8009dde:	4b0b      	ldr	r3, [pc, #44]	; (8009e0c <mg_sntp_parse+0x1d8>)
 8009de0:	f241 1245 	movw	r2, #4421	; 0x1145
 8009de4:	490a      	ldr	r1, [pc, #40]	; (8009e10 <mg_sntp_parse+0x1dc>)
 8009de6:	2001      	movs	r0, #1
 8009de8:	f7fd f9f8 	bl	80071dc <mg_log_prefix>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <mg_sntp_parse+0x1c6>
 8009df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009df4:	480c      	ldr	r0, [pc, #48]	; (8009e28 <mg_sntp_parse+0x1f4>)
 8009df6:	f7fd fa4b 	bl	8007290 <mg_log>
  }
  return res;
 8009dfa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 8009dfe:	4610      	mov	r0, r2
 8009e00:	4619      	mov	r1, r3
 8009e02:	3750      	adds	r7, #80	; 0x50
 8009e04:	46bd      	mov	sp, r7
 8009e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e0a:	bf00      	nop
 8009e0c:	08018454 	.word	0x08018454
 8009e10:	0801645c 	.word	0x0801645c
 8009e14:	080173e4 	.word	0x080173e4
 8009e18:	08016578 	.word	0x08016578
 8009e1c:	080173f4 	.word	0x080173f4
 8009e20:	08017408 	.word	0x08017408
 8009e24:	08017424 	.word	0x08017424
 8009e28:	08017444 	.word	0x08017444

08009e2c <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8009e2c:	b590      	push	{r4, r7, lr}
 8009e2e:	b087      	sub	sp, #28
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_READ) {
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	2b07      	cmp	r3, #7
 8009e3e:	d156      	bne.n	8009eee <sntp_cb+0xc2>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7ff fef2 	bl	8009c34 <mg_sntp_parse>
 8009e50:	4602      	mov	r2, r0
 8009e52:	460b      	mov	r3, r1
 8009e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 8009e58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e5c:	2a01      	cmp	r2, #1
 8009e5e:	f173 0300 	sbcs.w	r3, r3, #0
 8009e62:	db3a      	blt.n	8009eda <sntp_cb+0xae>
      MG_INFO(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8009e64:	4b27      	ldr	r3, [pc, #156]	; (8009f04 <sntp_cb+0xd8>)
 8009e66:	f241 124e 	movw	r2, #4430	; 0x114e
 8009e6a:	4927      	ldr	r1, [pc, #156]	; (8009f08 <sntp_cb+0xdc>)
 8009e6c:	2002      	movs	r0, #2
 8009e6e:	f7fd f9b5 	bl	80071dc <mg_log_prefix>
 8009e72:	4603      	mov	r3, r0
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d006      	beq.n	8009e86 <sntp_cb+0x5a>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009e7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009e80:	4822      	ldr	r0, [pc, #136]	; (8009f0c <sntp_cb+0xe0>)
 8009e82:	f7fd fa05 	bl	8007290 <mg_log>
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 8009e86:	f107 0310 	add.w	r3, r7, #16
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	2112      	movs	r1, #18
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f7f8 f9c6 	bl	8002220 <mg_call>
      MG_VERBOSE(("%u.%u", (unsigned) (milliseconds / 1000),
 8009e94:	4b1b      	ldr	r3, [pc, #108]	; (8009f04 <sntp_cb+0xd8>)
 8009e96:	f241 1250 	movw	r2, #4432	; 0x1150
 8009e9a:	491b      	ldr	r1, [pc, #108]	; (8009f08 <sntp_cb+0xdc>)
 8009e9c:	2004      	movs	r0, #4
 8009e9e:	f7fd f99d 	bl	80071dc <mg_log_prefix>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d018      	beq.n	8009eda <sntp_cb+0xae>
 8009ea8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009eac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009eb0:	f04f 0300 	mov.w	r3, #0
 8009eb4:	f7f6 fc50 	bl	8000758 <__aeabi_ldivmod>
 8009eb8:	4602      	mov	r2, r0
 8009eba:	460b      	mov	r3, r1
 8009ebc:	4614      	mov	r4, r2
 8009ebe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8009ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ec6:	f04f 0300 	mov.w	r3, #0
 8009eca:	f7f6 fc45 	bl	8000758 <__aeabi_ldivmod>
 8009ece:	4613      	mov	r3, r2
 8009ed0:	461a      	mov	r2, r3
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	480e      	ldr	r0, [pc, #56]	; (8009f10 <sntp_cb+0xe4>)
 8009ed6:	f7fd f9db 	bl	8007290 <mg_log>
                  (unsigned) (milliseconds % 1000)));
    }
    mg_iobuf_del(&c->recv, 0, c->recv.len);  // Free receive buffer
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	2100      	movs	r1, #0
 8009ee8:	f7fc fa64 	bl	80063b4 <mg_iobuf_del>
    mg_sntp_request(c);
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) fnd;
  (void) evd;
}
 8009eec:	e005      	b.n	8009efa <sntp_cb+0xce>
  } else if (ev == MG_EV_CONNECT) {
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	2b04      	cmp	r3, #4
 8009ef2:	d102      	bne.n	8009efa <sntp_cb+0xce>
    mg_sntp_request(c);
 8009ef4:	68f8      	ldr	r0, [r7, #12]
 8009ef6:	f000 f80f 	bl	8009f18 <mg_sntp_request>
}
 8009efa:	bf00      	nop
 8009efc:	371c      	adds	r7, #28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd90      	pop	{r4, r7, pc}
 8009f02:	bf00      	nop
 8009f04:	08018464 	.word	0x08018464
 8009f08:	0801645c 	.word	0x0801645c
 8009f0c:	0801745c 	.word	0x0801745c
 8009f10:	08017480 	.word	0x08017480
 8009f14:	00000000 	.word	0x00000000

08009f18 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 8009f18:	b590      	push	{r4, r7, lr}
 8009f1a:	b095      	sub	sp, #84	; 0x54
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009f26:	f003 0308 	and.w	r3, r3, #8
 8009f2a:	b2db      	uxtb	r3, r3
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d010      	beq.n	8009f52 <mg_sntp_request+0x3a>
    MG_ERROR(("%lu wait until resolved", c->id));
 8009f30:	4b37      	ldr	r3, [pc, #220]	; (800a010 <mg_sntp_request+0xf8>)
 8009f32:	f241 125e 	movw	r2, #4446	; 0x115e
 8009f36:	4937      	ldr	r1, [pc, #220]	; (800a014 <mg_sntp_request+0xfc>)
 8009f38:	2001      	movs	r0, #1
 8009f3a:	f7fd f94f 	bl	80071dc <mg_log_prefix>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d058      	beq.n	8009ff6 <mg_sntp_request+0xde>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f48:	4619      	mov	r1, r3
 8009f4a:	4833      	ldr	r0, [pc, #204]	; (800a018 <mg_sntp_request+0x100>)
 8009f4c:	f7fd f9a0 	bl	8007290 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 8009f50:	e051      	b.n	8009ff6 <mg_sntp_request+0xde>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8009f52:	f7f6 fe25 	bl	8000ba0 <mg_millis>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    uint8_t buf[48] = {0};
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60bb      	str	r3, [r7, #8]
 8009f62:	f107 030c 	add.w	r3, r7, #12
 8009f66:	222c      	movs	r2, #44	; 0x2c
 8009f68:	2100      	movs	r1, #0
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f00b fb73 	bl	8015656 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 8009f70:	f107 0308 	add.w	r3, r7, #8
 8009f74:	3328      	adds	r3, #40	; 0x28
 8009f76:	647b      	str	r3, [r7, #68]	; 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8009f78:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009f7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	f7f6 fbe8 	bl	8000758 <__aeabi_ldivmod>
 8009f88:	4610      	mov	r0, r2
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	f7f6 fbb6 	bl	80006fc <__aeabi_l2d>
 8009f90:	ec41 0b15 	vmov	d5, r0, r1
 8009f94:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 800a000 <mg_sntp_request+0xe8>
 8009f98:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009f9c:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 800a008 <mg_sntp_request+0xf0>
 8009fa0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fa4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 8009fa8:	2323      	movs	r3, #35	; 0x23
 8009faa:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 8009fac:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009fb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fb4:	f04f 0300 	mov.w	r3, #0
 8009fb8:	f7f6 fbce 	bl	8000758 <__aeabi_ldivmod>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4b16      	ldr	r3, [pc, #88]	; (800a01c <mg_sntp_request+0x104>)
 8009fc2:	4413      	add	r3, r2
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	f000 fe93 	bl	800acf0 <mg_ntohl>
 8009fca:	4602      	mov	r2, r0
 8009fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fce:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 8009fd0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8009fd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8009fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fda:	1d1c      	adds	r4, r3, #4
 8009fdc:	ee17 0a90 	vmov	r0, s15
 8009fe0:	f000 fe86 	bl	800acf0 <mg_ntohl>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 8009fe8:	f107 0308 	add.w	r3, r7, #8
 8009fec:	2230      	movs	r2, #48	; 0x30
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f004 fd95 	bl	800eb20 <mg_send>
}
 8009ff6:	bf00      	nop
 8009ff8:	3754      	adds	r7, #84	; 0x54
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd90      	pop	{r4, r7, pc}
 8009ffe:	bf00      	nop
 800a000:	00000000 	.word	0x00000000
 800a004:	408f4000 	.word	0x408f4000
 800a008:	ffe00000 	.word	0xffe00000
 800a00c:	41efffff 	.word	0x41efffff
 800a010:	0801846c 	.word	0x0801846c
 800a014:	0801645c 	.word	0x0801645c
 800a018:	08017488 	.word	0x08017488
 800a01c:	83aa7e80 	.word	0x83aa7e80

0800a020 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
 800a02c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800a02e:	2300      	movs	r3, #0
 800a030:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d101      	bne.n	800a03c <mg_sntp_connect+0x1c>
 800a038:	4b09      	ldr	r3, [pc, #36]	; (800a060 <mg_sntp_connect+0x40>)
 800a03a:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) c->pfn = sntp_cb;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	687a      	ldr	r2, [r7, #4]
 800a040:	68b9      	ldr	r1, [r7, #8]
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7fd fd0a 	bl	8007a5c <mg_connect>
 800a048:	6178      	str	r0, [r7, #20]
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <mg_sntp_connect+0x36>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	4a04      	ldr	r2, [pc, #16]	; (800a064 <mg_sntp_connect+0x44>)
 800a054:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 800a056:	697b      	ldr	r3, [r7, #20]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}
 800a060:	080174a0 	.word	0x080174a0
 800a064:	08009e2d 	.word	0x08009e2d

0800a068 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	60f8      	str	r0, [r7, #12]
 800a070:	60b9      	str	r1, [r7, #8]
 800a072:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 800a074:	4b05      	ldr	r3, [pc, #20]	; (800a08c <mg_http_serve_ssi+0x24>)
 800a076:	2200      	movs	r2, #0
 800a078:	f240 11f5 	movw	r1, #501	; 0x1f5
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7fa fca1 	bl	80049c4 <mg_http_reply>
  (void) root, (void) fullpath;
}
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}
 800a08a:	bf00      	nop
 800a08c:	080174bc 	.word	0x080174bc

0800a090 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	60bb      	str	r3, [r7, #8]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d004      	beq.n	800a0ae <mg_str_s+0x1e>
 800a0a4:	6838      	ldr	r0, [r7, #0]
 800a0a6:	f7f6 f993 	bl	80003d0 <strlen>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	e000      	b.n	800a0b0 <mg_str_s+0x20>
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	60fb      	str	r3, [r7, #12]
  return str;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f107 0308 	add.w	r3, r7, #8
 800a0ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0be:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 800a0ca:	b480      	push	{r7}
 800a0cc:	b087      	sub	sp, #28
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	613b      	str	r3, [r7, #16]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	617b      	str	r3, [r7, #20]
  return str;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	f107 0310 	add.w	r3, r7, #16
 800a0e6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a0ea:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	371c      	adds	r7, #28
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <mg_lower>:

int mg_lower(const char *s) {
 800a0fa:	b480      	push	{r7}
 800a0fc:	b085      	sub	sp, #20
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  int c = *s;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	781b      	ldrb	r3, [r3, #0]
 800a106:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2b40      	cmp	r3, #64	; 0x40
 800a10c:	dd05      	ble.n	800a11a <mg_lower+0x20>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2b5a      	cmp	r3, #90	; 0x5a
 800a112:	dc02      	bgt.n	800a11a <mg_lower+0x20>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	3320      	adds	r3, #32
 800a118:	60fb      	str	r3, [r7, #12]
  return c;
 800a11a:	68fb      	ldr	r3, [r7, #12]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3714      	adds	r7, #20
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 800a128:	b590      	push	{r4, r7, lr}
 800a12a:	b087      	sub	sp, #28
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	60f8      	str	r0, [r7, #12]
 800a130:	60b9      	str	r1, [r7, #8]
 800a132:	607a      	str	r2, [r7, #4]
  int diff = 0;
 800a134:	2300      	movs	r3, #0
 800a136:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d01d      	beq.n	800a17a <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	1c5a      	adds	r2, r3, #1
 800a142:	60fa      	str	r2, [r7, #12]
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff ffd8 	bl	800a0fa <mg_lower>
 800a14a:	4604      	mov	r4, r0
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	60ba      	str	r2, [r7, #8]
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff ffd1 	bl	800a0fa <mg_lower>
 800a158:	4603      	mov	r3, r0
 800a15a:	1ae3      	subs	r3, r4, r3
 800a15c:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d10a      	bne.n	800a17a <mg_ncasecmp+0x52>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	3b01      	subs	r3, #1
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d005      	beq.n	800a17a <mg_ncasecmp+0x52>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	3b01      	subs	r3, #1
 800a172:	607b      	str	r3, [r7, #4]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d1e1      	bne.n	800a13e <mg_ncasecmp+0x16>
  return diff;
 800a17a:	697b      	ldr	r3, [r7, #20]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	371c      	adds	r7, #28
 800a180:	46bd      	mov	sp, r7
 800a182:	bd90      	pop	{r4, r7, pc}

0800a184 <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 800a184:	b580      	push	{r7, lr}
 800a186:	b086      	sub	sp, #24
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 800a18e:	6838      	ldr	r0, [r7, #0]
 800a190:	f7f6 f91e 	bl	80003d0 <strlen>
 800a194:	6178      	str	r0, [r7, #20]
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6818      	ldr	r0, [r3, #0]
 800a1a0:	697a      	ldr	r2, [r7, #20]
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	bf28      	it	cs
 800a1a8:	4613      	movcs	r3, r2
 800a1aa:	461a      	mov	r2, r3
 800a1ac:	6839      	ldr	r1, [r7, #0]
 800a1ae:	f00b fa84 	bl	80156ba <strncmp>
 800a1b2:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d103      	bne.n	800a1c2 <mg_vcmp+0x3e>
 800a1ba:	693a      	ldr	r2, [r7, #16]
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	e000      	b.n	800a1c4 <mg_vcmp+0x40>
  return r;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3718      	adds	r7, #24
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	b086      	sub	sp, #24
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 800a1d6:	6838      	ldr	r0, [r7, #0]
 800a1d8:	f7f6 f8fa 	bl	80003d0 <strlen>
 800a1dc:	6178      	str	r0, [r7, #20]
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6818      	ldr	r0, [r3, #0]
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	bf28      	it	cs
 800a1f0:	4613      	movcs	r3, r2
 800a1f2:	461a      	mov	r2, r3
 800a1f4:	6839      	ldr	r1, [r7, #0]
 800a1f6:	f7ff ff97 	bl	800a128 <mg_ncasecmp>
 800a1fa:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d103      	bne.n	800a20a <mg_vcasecmp+0x3e>
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	e000      	b.n	800a20c <mg_vcasecmp+0x40>
  return r;
 800a20a:	68fb      	ldr	r3, [r7, #12]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 800a214:	b490      	push	{r4, r7}
 800a216:	b088      	sub	sp, #32
 800a218:	af00      	add	r7, sp, #0
 800a21a:	f107 0408 	add.w	r4, r7, #8
 800a21e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a222:	4639      	mov	r1, r7
 800a224:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 800a228:	2300      	movs	r3, #0
 800a22a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800a22c:	e019      	b.n	800a262 <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	4413      	add	r3, r2
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 800a238:	683a      	ldr	r2, [r7, #0]
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	4413      	add	r3, r2
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	429a      	cmp	r2, r3
 800a248:	da02      	bge.n	800a250 <mg_strcmp+0x3c>
 800a24a:	f04f 33ff 	mov.w	r3, #4294967295
 800a24e:	e01e      	b.n	800a28e <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 800a250:	69ba      	ldr	r2, [r7, #24]
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	429a      	cmp	r2, r3
 800a256:	dd01      	ble.n	800a25c <mg_strcmp+0x48>
 800a258:	2301      	movs	r3, #1
 800a25a:	e018      	b.n	800a28e <mg_strcmp+0x7a>
    i++;
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	3301      	adds	r3, #1
 800a260:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	69fa      	ldr	r2, [r7, #28]
 800a266:	429a      	cmp	r2, r3
 800a268:	d203      	bcs.n	800a272 <mg_strcmp+0x5e>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69fa      	ldr	r2, [r7, #28]
 800a26e:	429a      	cmp	r2, r3
 800a270:	d3dd      	bcc.n	800a22e <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	69fa      	ldr	r2, [r7, #28]
 800a276:	429a      	cmp	r2, r3
 800a278:	d201      	bcs.n	800a27e <mg_strcmp+0x6a>
 800a27a:	2301      	movs	r3, #1
 800a27c:	e007      	b.n	800a28e <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	69fa      	ldr	r2, [r7, #28]
 800a282:	429a      	cmp	r2, r3
 800a284:	d202      	bcs.n	800a28c <mg_strcmp+0x78>
 800a286:	f04f 33ff 	mov.w	r3, #4294967295
 800a28a:	e000      	b.n	800a28e <mg_strcmp+0x7a>
  return 0;
 800a28c:	2300      	movs	r3, #0
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3720      	adds	r7, #32
 800a292:	46bd      	mov	sp, r7
 800a294:	bc90      	pop	{r4, r7}
 800a296:	4770      	bx	lr

0800a298 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 800a298:	b590      	push	{r4, r7, lr}
 800a29a:	b087      	sub	sp, #28
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	f107 0408 	add.w	r4, r7, #8
 800a2a2:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2a6:	4639      	mov	r1, r7
 800a2a8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d901      	bls.n	800a2b8 <mg_strstr+0x20>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	e020      	b.n	800a2fa <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d101      	bne.n	800a2c2 <mg_strstr+0x2a>
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	e01b      	b.n	800a2fa <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	617b      	str	r3, [r7, #20]
 800a2c6:	e011      	b.n	800a2ec <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f00b f995 	bl	8015602 <memcmp>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d103      	bne.n	800a2e6 <mg_strstr+0x4e>
      return haystack.ptr + i;
 800a2de:	68ba      	ldr	r2, [r7, #8]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	e009      	b.n	800a2fa <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	617b      	str	r3, [r7, #20]
 800a2ec:	68fa      	ldr	r2, [r7, #12]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	1ad3      	subs	r3, r2, r3
 800a2f2:	697a      	ldr	r2, [r7, #20]
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d9e7      	bls.n	800a2c8 <mg_strstr+0x30>
    }
  }
  return NULL;
 800a2f8:	2300      	movs	r3, #0
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd90      	pop	{r4, r7, pc}

0800a302 <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 800a302:	b490      	push	{r4, r7}
 800a304:	b088      	sub	sp, #32
 800a306:	af00      	add	r7, sp, #0
 800a308:	f107 0408 	add.w	r4, r7, #8
 800a30c:	e884 0003 	stmia.w	r4, {r0, r1}
 800a310:	4639      	mov	r1, r7
 800a312:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 800a316:	2300      	movs	r3, #0
 800a318:	61fb      	str	r3, [r7, #28]
 800a31a:	2300      	movs	r3, #0
 800a31c:	61bb      	str	r3, [r7, #24]
 800a31e:	2300      	movs	r3, #0
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	2300      	movs	r3, #0
 800a324:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 800a326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a328:	2b00      	cmp	r3, #0
 800a32a:	f000 80ad 	beq.w	800a488 <mg_match+0x186>
 800a32e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a336:	2200      	movs	r2, #0
 800a338:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 800a33a:	e0a5      	b.n	800a488 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	69fa      	ldr	r2, [r7, #28]
 800a340:	429a      	cmp	r2, r3
 800a342:	d24f      	bcs.n	800a3e4 <mg_match+0xe2>
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	429a      	cmp	r2, r3
 800a34a:	d24b      	bcs.n	800a3e4 <mg_match+0xe2>
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	4413      	add	r3, r2
 800a352:	781b      	ldrb	r3, [r3, #0]
 800a354:	2b3f      	cmp	r3, #63	; 0x3f
 800a356:	d009      	beq.n	800a36c <mg_match+0x6a>
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	4413      	add	r3, r2
 800a35e:	781a      	ldrb	r2, [r3, #0]
 800a360:	6839      	ldr	r1, [r7, #0]
 800a362:	69fb      	ldr	r3, [r7, #28]
 800a364:	440b      	add	r3, r1
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	429a      	cmp	r2, r3
 800a36a:	d13b      	bne.n	800a3e4 <mg_match+0xe2>
      if (caps == NULL) {
 800a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d031      	beq.n	800a3d6 <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 800a372:	683a      	ldr	r2, [r7, #0]
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	4413      	add	r3, r2
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	2b3f      	cmp	r3, #63	; 0x3f
 800a37c:	d111      	bne.n	800a3a2 <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	441a      	add	r2, r3
 800a384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a386:	601a      	str	r2, [r3, #0]
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	2201      	movs	r2, #1
 800a38c:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 800a38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a390:	3308      	adds	r3, #8
 800a392:	62bb      	str	r3, [r7, #40]	; 0x28
 800a394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a396:	2200      	movs	r2, #0
 800a398:	601a      	str	r2, [r3, #0]
 800a39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39c:	2200      	movs	r2, #0
 800a39e:	605a      	str	r2, [r3, #4]
 800a3a0:	e019      	b.n	800a3d6 <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 800a3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d015      	beq.n	800a3d6 <mg_match+0xd4>
 800a3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d111      	bne.n	800a3d6 <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 800a3b2:	68ba      	ldr	r2, [r7, #8]
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	441a      	add	r2, r3
 800a3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	1ad3      	subs	r3, r2, r3
 800a3be:	461a      	mov	r2, r3
 800a3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c2:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a3ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	605a      	str	r2, [r3, #4]
 800a3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 800a3d6:	69fb      	ldr	r3, [r7, #28]
 800a3d8:	3301      	adds	r3, #1
 800a3da:	61fb      	str	r3, [r7, #28]
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	3301      	adds	r3, #1
 800a3e0:	61bb      	str	r3, [r7, #24]
 800a3e2:	e051      	b.n	800a488 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	69fa      	ldr	r2, [r7, #28]
 800a3e8:	429a      	cmp	r2, r3
 800a3ea:	d222      	bcs.n	800a432 <mg_match+0x130>
 800a3ec:	683a      	ldr	r2, [r7, #0]
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a3f6:	d005      	beq.n	800a404 <mg_match+0x102>
 800a3f8:	683a      	ldr	r2, [r7, #0]
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	2b23      	cmp	r3, #35	; 0x23
 800a402:	d116      	bne.n	800a432 <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00b      	beq.n	800a422 <mg_match+0x120>
 800a40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d107      	bne.n	800a422 <mg_match+0x120>
 800a412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a414:	2200      	movs	r2, #0
 800a416:	605a      	str	r2, [r3, #4]
 800a418:	68ba      	ldr	r2, [r7, #8]
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	441a      	add	r2, r3
 800a41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a420:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 800a422:	69fb      	ldr	r3, [r7, #28]
 800a424:	1c5a      	adds	r2, r3, #1
 800a426:	61fa      	str	r2, [r7, #28]
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	69bb      	ldr	r3, [r7, #24]
 800a42c:	3301      	adds	r3, #1
 800a42e:	613b      	str	r3, [r7, #16]
 800a430:	e02a      	b.n	800a488 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d025      	beq.n	800a484 <mg_match+0x182>
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d821      	bhi.n	800a484 <mg_match+0x182>
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	4413      	add	r3, r2
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	2b23      	cmp	r3, #35	; 0x23
 800a44a:	d005      	beq.n	800a458 <mg_match+0x156>
 800a44c:	68ba      	ldr	r2, [r7, #8]
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	4413      	add	r3, r2
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	2b2f      	cmp	r3, #47	; 0x2f
 800a456:	d015      	beq.n	800a484 <mg_match+0x182>
      i = ni, j = nj;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	61fb      	str	r3, [r7, #28]
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 800a460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a462:	2b00      	cmp	r3, #0
 800a464:	d010      	beq.n	800a488 <mg_match+0x186>
 800a466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d10c      	bne.n	800a488 <mg_match+0x186>
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d108      	bne.n	800a488 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 800a476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a478:	3b08      	subs	r3, #8
 800a47a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a47c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47e:	2200      	movs	r2, #0
 800a480:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 800a482:	e001      	b.n	800a488 <mg_match+0x186>
      }
    } else {
      return false;
 800a484:	2300      	movs	r3, #0
 800a486:	e01e      	b.n	800a4c6 <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	69fa      	ldr	r2, [r7, #28]
 800a48c:	429a      	cmp	r2, r3
 800a48e:	f4ff af55 	bcc.w	800a33c <mg_match+0x3a>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	69ba      	ldr	r2, [r7, #24]
 800a496:	429a      	cmp	r2, r3
 800a498:	f4ff af50 	bcc.w	800a33c <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 800a49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d010      	beq.n	800a4c4 <mg_match+0x1c2>
 800a4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d00c      	beq.n	800a4c4 <mg_match+0x1c2>
 800a4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d108      	bne.n	800a4c4 <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 800a4b2:	68ba      	ldr	r2, [r7, #8]
 800a4b4:	69bb      	ldr	r3, [r7, #24]
 800a4b6:	441a      	add	r2, r3
 800a4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	1ad3      	subs	r3, r2, r3
 800a4be:	461a      	mov	r2, r3
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	605a      	str	r2, [r3, #4]
  }
  return true;
 800a4c4:	2301      	movs	r3, #1
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3720      	adds	r7, #32
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bc90      	pop	{r4, r7}
 800a4ce:	4770      	bx	lr

0800a4d0 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b08a      	sub	sp, #40	; 0x28
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 800a4de:	f107 0310 	add.w	r3, r7, #16
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	6879      	ldr	r1, [r7, #4]
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7ff fdef 	bl	800a0ca <mg_str_n>
 800a4ec:	f107 0318 	add.w	r3, r7, #24
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	68f9      	ldr	r1, [r7, #12]
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7ff fde8 	bl	800a0ca <mg_str_n>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	9300      	str	r3, [sp, #0]
 800a4fe:	f107 0318 	add.w	r3, r7, #24
 800a502:	cb0c      	ldmia	r3, {r2, r3}
 800a504:	f107 0110 	add.w	r1, r7, #16
 800a508:	c903      	ldmia	r1, {r0, r1}
 800a50a:	f7ff fefa 	bl	800a302 <mg_match>
 800a50e:	4603      	mov	r3, r0
}
 800a510:	4618      	mov	r0, r3
 800a512:	3720      	adds	r7, #32
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 800a518:	b480      	push	{r7}
 800a51a:	b087      	sub	sp, #28
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 800a526:	2300      	movs	r3, #0
 800a528:	617b      	str	r3, [r7, #20]
 800a52a:	e002      	b.n	800a532 <mg_nce+0x1a>
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	3301      	adds	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	4413      	add	r3, r2
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d909      	bls.n	800a552 <mg_nce+0x3a>
 800a53e:	687a      	ldr	r2, [r7, #4]
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	4413      	add	r3, r2
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	4413      	add	r3, r2
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a54e:	429a      	cmp	r2, r3
 800a550:	d1ec      	bne.n	800a52c <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 800a552:	2300      	movs	r3, #0
 800a554:	613b      	str	r3, [r7, #16]
 800a556:	e002      	b.n	800a55e <mg_nce+0x46>
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	3301      	adds	r3, #1
 800a55c:	613b      	str	r3, [r7, #16]
 800a55e:	693a      	ldr	r2, [r7, #16]
 800a560:	697b      	ldr	r3, [r7, #20]
 800a562:	429a      	cmp	r2, r3
 800a564:	d207      	bcs.n	800a576 <mg_nce+0x5e>
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	4413      	add	r3, r2
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	4413      	add	r3, r2
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b3d      	cmp	r3, #61	; 0x3d
 800a574:	d1f0      	bne.n	800a558 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d002      	beq.n	800a582 <mg_nce+0x6a>
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 800a582:	6a3b      	ldr	r3, [r7, #32]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d002      	beq.n	800a58e <mg_nce+0x76>
 800a588:	6a3b      	ldr	r3, [r7, #32]
 800a58a:	693a      	ldr	r2, [r7, #16]
 800a58c:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	d00b      	beq.n	800a5ac <mg_nce+0x94>
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d204      	bcs.n	800a5a6 <mg_nce+0x8e>
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	693b      	ldr	r3, [r7, #16]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	3301      	adds	r3, #1
 800a5a4:	e000      	b.n	800a5a8 <mg_nce+0x90>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5aa:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 800a5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <mg_nce+0xb2>
 800a5b2:	693a      	ldr	r2, [r7, #16]
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d204      	bcs.n	800a5c4 <mg_nce+0xac>
 800a5ba:	697a      	ldr	r2, [r7, #20]
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	1ad3      	subs	r3, r2, r3
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	e000      	b.n	800a5c6 <mg_nce+0xae>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a5c8:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	4413      	add	r3, r2
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	4293      	cmp	r3, r2
 800a5da:	bf28      	it	cs
 800a5dc:	4613      	movcs	r3, r2
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	371c      	adds	r7, #28
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr

0800a5ea <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 800a5ea:	b590      	push	{r4, r7, lr}
 800a5ec:	b091      	sub	sp, #68	; 0x44
 800a5ee:	af04      	add	r7, sp, #16
 800a5f0:	6178      	str	r0, [r7, #20]
 800a5f2:	6139      	str	r1, [r7, #16]
 800a5f4:	60fa      	str	r2, [r7, #12]
 800a5f6:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a600:	2300      	movs	r3, #0
 800a602:	623b      	str	r3, [r7, #32]
 800a604:	2300      	movs	r3, #0
 800a606:	61fb      	str	r3, [r7, #28]
 800a608:	2300      	movs	r3, #0
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d003      	beq.n	800a61c <mg_split+0x32>
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d101      	bne.n	800a620 <mg_split+0x36>
 800a61c:	2300      	movs	r3, #0
 800a61e:	e054      	b.n	800a6ca <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 800a620:	697b      	ldr	r3, [r7, #20]
 800a622:	6818      	ldr	r0, [r3, #0]
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	6859      	ldr	r1, [r3, #4]
 800a628:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a62c:	7afb      	ldrb	r3, [r7, #11]
 800a62e:	9303      	str	r3, [sp, #12]
 800a630:	f107 031c 	add.w	r3, r7, #28
 800a634:	9302      	str	r3, [sp, #8]
 800a636:	f107 0320 	add.w	r3, r7, #32
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	4613      	mov	r3, r2
 800a644:	2200      	movs	r2, #0
 800a646:	f7ff ff67 	bl	800a518 <mg_nce>
 800a64a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00f      	beq.n	800a672 <mg_split+0x88>
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	18d1      	adds	r1, r2, r3
 800a65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65c:	693c      	ldr	r4, [r7, #16]
 800a65e:	463b      	mov	r3, r7
 800a660:	4618      	mov	r0, r3
 800a662:	f7ff fd32 	bl	800a0ca <mg_str_n>
 800a666:	4622      	mov	r2, r4
 800a668:	463b      	mov	r3, r7
 800a66a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a66e:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00f      	beq.n	800a698 <mg_split+0xae>
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681a      	ldr	r2, [r3, #0]
 800a67c:	6a3b      	ldr	r3, [r7, #32]
 800a67e:	18d1      	adds	r1, r2, r3
 800a680:	69fa      	ldr	r2, [r7, #28]
 800a682:	68fc      	ldr	r4, [r7, #12]
 800a684:	463b      	mov	r3, r7
 800a686:	4618      	mov	r0, r3
 800a688:	f7ff fd1f 	bl	800a0ca <mg_str_n>
 800a68c:	4622      	mov	r2, r4
 800a68e:	463b      	mov	r3, r7
 800a690:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a694:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	681a      	ldr	r2, [r3, #0]
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	18d1      	adds	r1, r2, r3
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	685a      	ldr	r2, [r3, #4]
 800a6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a6:	1ad2      	subs	r2, r2, r3
 800a6a8:	697c      	ldr	r4, [r7, #20]
 800a6aa:	463b      	mov	r3, r7
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7ff fd0c 	bl	800a0ca <mg_str_n>
 800a6b2:	4622      	mov	r2, r4
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a6ba:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	bf14      	ite	ne
 800a6c4:	2301      	movne	r3, #1
 800a6c6:	2300      	moveq	r3, #0
 800a6c8:	b2db      	uxtb	r3, r3
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3734      	adds	r7, #52	; 0x34
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd90      	pop	{r4, r7, pc}

0800a6d2 <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b084      	sub	sp, #16
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60f8      	str	r0, [r7, #12]
 800a6da:	60b9      	str	r1, [r7, #8]
 800a6dc:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 800a6de:	232c      	movs	r3, #44	; 0x2c
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	68b9      	ldr	r1, [r7, #8]
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f7ff ff80 	bl	800a5ea <mg_split>
 800a6ea:	4603      	mov	r3, r0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <mg_unhex_nimble>:
  }
  to[i] = '\0';
  return to;
}

static unsigned char mg_unhex_nimble(unsigned char c) {
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	2b2f      	cmp	r3, #47	; 0x2f
 800a702:	d906      	bls.n	800a712 <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 800a704:	79fb      	ldrb	r3, [r7, #7]
 800a706:	2b39      	cmp	r3, #57	; 0x39
 800a708:	d803      	bhi.n	800a712 <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 800a70a:	79fb      	ldrb	r3, [r7, #7]
 800a70c:	3b30      	subs	r3, #48	; 0x30
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	e00c      	b.n	800a72c <mg_unhex_nimble+0x38>
 800a712:	79fb      	ldrb	r3, [r7, #7]
 800a714:	2b40      	cmp	r3, #64	; 0x40
 800a716:	d906      	bls.n	800a726 <mg_unhex_nimble+0x32>
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	2b46      	cmp	r3, #70	; 0x46
 800a71c:	d803      	bhi.n	800a726 <mg_unhex_nimble+0x32>
 800a71e:	79fb      	ldrb	r3, [r7, #7]
 800a720:	3b37      	subs	r3, #55	; 0x37
 800a722:	b2db      	uxtb	r3, r3
 800a724:	e002      	b.n	800a72c <mg_unhex_nimble+0x38>
 800a726:	79fb      	ldrb	r3, [r7, #7]
 800a728:	3b57      	subs	r3, #87	; 0x57
 800a72a:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 800a738:	b580      	push	{r7, lr}
 800a73a:	b084      	sub	sp, #16
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
 800a740:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 800a742:	2300      	movs	r3, #0
 800a744:	60fb      	str	r3, [r7, #12]
 800a746:	2300      	movs	r3, #0
 800a748:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]
 800a74e:	e011      	b.n	800a774 <mg_unhexn+0x3c>
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	011b      	lsls	r3, r3, #4
 800a754:	60bb      	str	r3, [r7, #8]
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	4413      	add	r3, r2
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	4618      	mov	r0, r3
 800a760:	f7ff ffc8 	bl	800a6f4 <mg_unhex_nimble>
 800a764:	4603      	mov	r3, r0
 800a766:	461a      	mov	r2, r3
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60bb      	str	r3, [r7, #8]
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	3301      	adds	r3, #1
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d3e9      	bcc.n	800a750 <mg_unhexn+0x18>
  return v;
 800a77c:	68bb      	ldr	r3, [r7, #8]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 800a786:	b580      	push	{r7, lr}
 800a788:	b086      	sub	sp, #24
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 800a792:	2300      	movs	r3, #0
 800a794:	617b      	str	r3, [r7, #20]
 800a796:	e010      	b.n	800a7ba <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	4413      	add	r3, r2
 800a79e:	2102      	movs	r1, #2
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f7ff ffc9 	bl	800a738 <mg_unhexn>
 800a7a6:	4601      	mov	r1, r0
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	085b      	lsrs	r3, r3, #1
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	b2ca      	uxtb	r2, r1
 800a7b2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	3302      	adds	r3, #2
 800a7b8:	617b      	str	r3, [r7, #20]
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d3ea      	bcc.n	800a798 <mg_unhex+0x12>
  }
}
 800a7c2:	bf00      	nop
 800a7c4:	bf00      	nop
 800a7c6:	3718      	adds	r7, #24
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}

0800a7cc <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 800a7cc:	b480      	push	{r7}
 800a7ce:	b085      	sub	sp, #20
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  const char *s = path;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 800a7d8:	e01a      	b.n	800a810 <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 800a7da:	68fa      	ldr	r2, [r7, #12]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d007      	beq.n	800a7f2 <mg_path_is_sane+0x26>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	2b2f      	cmp	r3, #47	; 0x2f
 800a7e8:	d003      	beq.n	800a7f2 <mg_path_is_sane+0x26>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	2b5c      	cmp	r3, #92	; 0x5c
 800a7f0:	d10b      	bne.n	800a80a <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	781b      	ldrb	r3, [r3, #0]
 800a7f8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7fa:	d106      	bne.n	800a80a <mg_path_is_sane+0x3e>
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	3302      	adds	r3, #2
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b2e      	cmp	r3, #46	; 0x2e
 800a804:	d101      	bne.n	800a80a <mg_path_is_sane+0x3e>
 800a806:	2300      	movs	r3, #0
 800a808:	e007      	b.n	800a81a <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	3301      	adds	r3, #1
 800a80e:	60fb      	str	r3, [r7, #12]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1e0      	bne.n	800a7da <mg_path_is_sane+0xe>
    }
  }
  return true;
 800a818:	2301      	movs	r3, #1
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr

0800a826 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 800a826:	b480      	push	{r7}
 800a828:	b085      	sub	sp, #20
 800a82a:	af00      	add	r7, sp, #0
 800a82c:	60f8      	str	r0, [r7, #12]
 800a82e:	60b9      	str	r1, [r7, #8]
 800a830:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a840:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800a844:	68b9      	ldr	r1, [r7, #8]
 800a846:	f04f 0200 	mov.w	r2, #0
 800a84a:	f04f 0300 	mov.w	r3, #0
 800a84e:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	619a      	str	r2, [r3, #24]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	69fa      	ldr	r2, [r7, #28]
 800a85c:	61da      	str	r2, [r3, #28]
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	6a3a      	ldr	r2, [r7, #32]
 800a862:	621a      	str	r2, [r3, #32]
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	601a      	str	r2, [r3, #0]
}
 800a872:	bf00      	nop
 800a874:	3714      	adds	r7, #20
 800a876:	46bd      	mov	sp, r7
 800a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87c:	4770      	bx	lr

0800a87e <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800a87e:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a882:	b086      	sub	sp, #24
 800a884:	af00      	add	r7, sp, #0
 800a886:	6178      	str	r0, [r7, #20]
 800a888:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800a88c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a894:	eb10 0a02 	adds.w	sl, r0, r2
 800a898:	eb41 0b03 	adc.w	fp, r1, r3
 800a89c:	697b      	ldr	r3, [r7, #20]
 800a89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a2:	4592      	cmp	sl, r2
 800a8a4:	eb7b 0303 	sbcs.w	r3, fp, r3
 800a8a8:	d206      	bcs.n	800a8b8 <mg_timer_expired+0x3a>
 800a8aa:	6979      	ldr	r1, [r7, #20]
 800a8ac:	f04f 0200 	mov.w	r2, #0
 800a8b0:	f04f 0300 	mov.w	r3, #0
 800a8b4:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	d10d      	bne.n	800a8de <mg_timer_expired+0x60>
 800a8c2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a8c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a8ca:	1886      	adds	r6, r0, r2
 800a8cc:	603e      	str	r6, [r7, #0]
 800a8ce:	eb41 0303 	adc.w	r3, r1, r3
 800a8d2:	607b      	str	r3, [r7, #4]
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a8da:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a8e8:	4290      	cmp	r0, r2
 800a8ea:	eb71 0303 	sbcs.w	r3, r1, r3
 800a8ee:	d201      	bcs.n	800a8f4 <mg_timer_expired+0x76>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	e022      	b.n	800a93a <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a8fe:	ebb0 0802 	subs.w	r8, r0, r2
 800a902:	eb61 0903 	sbc.w	r9, r1, r3
 800a906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a90a:	4542      	cmp	r2, r8
 800a90c:	eb73 0309 	sbcs.w	r3, r3, r9
 800a910:	d207      	bcs.n	800a922 <mg_timer_expired+0xa4>
 800a912:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a91a:	1884      	adds	r4, r0, r2
 800a91c:	eb41 0503 	adc.w	r5, r1, r3
 800a920:	e007      	b.n	800a932 <mg_timer_expired+0xb4>
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a928:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a92c:	1884      	adds	r4, r0, r2
 800a92e:	eb41 0503 	adc.w	r5, r1, r3
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800a938:	2301      	movs	r3, #1
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a944:	4770      	bx	lr

0800a946 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800a946:	b590      	push	{r4, r7, lr}
 800a948:	b08b      	sub	sp, #44	; 0x2c
 800a94a:	af02      	add	r7, sp, #8
 800a94c:	60f8      	str	r0, [r7, #12]
 800a94e:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	61fb      	str	r3, [r7, #28]
 800a958:	e054      	b.n	800aa04 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a960:	4313      	orrs	r3, r2
 800a962:	d10d      	bne.n	800a980 <mg_timer_poll+0x3a>
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	f003 0302 	and.w	r3, r3, #2
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d007      	beq.n	800a980 <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d101      	bne.n	800a980 <mg_timer_poll+0x3a>
 800a97c:	2301      	movs	r3, #1
 800a97e:	e000      	b.n	800a982 <mg_timer_poll+0x3c>
 800a980:	2300      	movs	r3, #0
 800a982:	76fb      	strb	r3, [r7, #27]
 800a984:	7efb      	ldrb	r3, [r7, #27]
 800a986:	f003 0301 	and.w	r3, r3, #1
 800a98a:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f103 0410 	add.w	r4, r3, #16
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a99c:	e9cd 2300 	strd	r2, r3, [sp]
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	460b      	mov	r3, r1
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	f7ff ff6a 	bl	800a87e <mg_timer_expired>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800a9ae:	69fb      	ldr	r3, [r7, #28]
 800a9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b2:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800a9b4:	7efb      	ldrb	r3, [r7, #27]
 800a9b6:	f083 0301 	eor.w	r3, r3, #1
 800a9ba:	b2db      	uxtb	r3, r3
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d005      	beq.n	800a9cc <mg_timer_poll+0x86>
 800a9c0:	7ebb      	ldrb	r3, [r7, #26]
 800a9c2:	f083 0301 	eor.w	r3, r3, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d118      	bne.n	800a9fe <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800a9cc:	69fb      	ldr	r3, [r7, #28]
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f003 0301 	and.w	r3, r3, #1
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d105      	bne.n	800a9e4 <mg_timer_poll+0x9e>
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d105      	bne.n	800a9f0 <mg_timer_poll+0xaa>
      t->fn(t->arg);
 800a9e4:	69fb      	ldr	r3, [r7, #28]
 800a9e6:	69db      	ldr	r3, [r3, #28]
 800a9e8:	69fa      	ldr	r2, [r7, #28]
 800a9ea:	6a12      	ldr	r2, [r2, #32]
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	699b      	ldr	r3, [r3, #24]
 800a9f4:	f043 0204 	orr.w	r2, r3, #4
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	619a      	str	r2, [r3, #24]
 800a9fc:	e000      	b.n	800aa00 <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800a9fe:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	61fb      	str	r3, [r7, #28]
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1a7      	bne.n	800a95a <mg_timer_poll+0x14>
  }
}
 800aa0a:	bf00      	nop
 800aa0c:	bf00      	nop
 800aa0e:	3724      	adds	r7, #36	; 0x24
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd90      	pop	{r4, r7, pc}

0800aa14 <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if !MG_ENABLE_MBEDTLS && !MG_ENABLE_OPENSSL && !MG_ENABLE_CUSTOM_TLS
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 800aa14:	b580      	push	{r7, lr}
 800aa16:	b082      	sub	sp, #8
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
 800aa1c:	6039      	str	r1, [r7, #0]
  (void) opts;
  mg_error(c, "TLS is not enabled");
 800aa1e:	4904      	ldr	r1, [pc, #16]	; (800aa30 <mg_tls_init+0x1c>)
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f7f7 fc1f 	bl	8002264 <mg_error>
}
 800aa26:	bf00      	nop
 800aa28:	3708      	adds	r7, #8
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	bd80      	pop	{r7, pc}
 800aa2e:	bf00      	nop
 800aa30:	080174cc 	.word	0x080174cc

0800aa34 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 800aa34:	b480      	push	{r7}
 800aa36:	b083      	sub	sp, #12
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
  (void) c;
}
 800aa3c:	bf00      	nop
 800aa3e:	370c      	adds	r7, #12
 800aa40:	46bd      	mov	sp, r7
 800aa42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa46:	4770      	bx	lr

0800aa48 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 800aa48:	b480      	push	{r7}
 800aa4a:	b083      	sub	sp, #12
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  (void) c;
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	60f8      	str	r0, [r7, #12]
 800aa64:	60b9      	str	r1, [r7, #8]
 800aa66:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d005      	beq.n	800aa7a <mg_tls_recv+0x1e>
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d002      	beq.n	800aa7a <mg_tls_recv+0x1e>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <mg_tls_recv+0x22>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e001      	b.n	800aa82 <mg_tls_recv+0x26>
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3714      	adds	r7, #20
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 800aa8e:	b480      	push	{r7}
 800aa90:	b085      	sub	sp, #20
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	60f8      	str	r0, [r7, #12]
 800aa96:	60b9      	str	r1, [r7, #8]
 800aa98:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d005      	beq.n	800aaac <mg_tls_send+0x1e>
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d002      	beq.n	800aaac <mg_tls_send+0x1e>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d101      	bne.n	800aab0 <mg_tls_send+0x22>
 800aaac:	2300      	movs	r3, #0
 800aaae:	e001      	b.n	800aab4 <mg_tls_send+0x26>
 800aab0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800aab4:	4618      	mov	r0, r3
 800aab6:	3714      	adds	r7, #20
 800aab8:	46bd      	mov	sp, r7
 800aaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aabe:	4770      	bx	lr

0800aac0 <urlparse>:
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0;
}

static struct url urlparse(const char *url) {
 800aac0:	b5b0      	push	{r4, r5, r7, lr}
 800aac2:	b08a      	sub	sp, #40	; 0x28
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 800aaca:	f107 0308 	add.w	r3, r7, #8
 800aace:	221c      	movs	r2, #28
 800aad0:	2100      	movs	r1, #0
 800aad2:	4618      	mov	r0, r3
 800aad4:	f00a fdbf 	bl	8015656 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 800aad8:	2300      	movs	r3, #0
 800aada:	627b      	str	r3, [r7, #36]	; 0x24
 800aadc:	e05b      	b.n	800ab96 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 800aade:	683a      	ldr	r2, [r7, #0]
 800aae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae2:	4413      	add	r3, r2
 800aae4:	781b      	ldrb	r3, [r3, #0]
 800aae6:	2b2f      	cmp	r3, #47	; 0x2f
 800aae8:	d112      	bne.n	800ab10 <urlparse+0x50>
 800aaea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d00f      	beq.n	800ab10 <urlparse+0x50>
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10c      	bne.n	800ab10 <urlparse+0x50>
 800aaf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	4413      	add	r3, r2
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b2f      	cmp	r3, #47	; 0x2f
 800ab02:	d105      	bne.n	800ab10 <urlparse+0x50>
      u.host = i + 1;
 800ab04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab06:	3301      	adds	r3, #1
 800ab08:	617b      	str	r3, [r7, #20]
      u.port = 0;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	61bb      	str	r3, [r7, #24]
 800ab0e:	e03f      	b.n	800ab90 <urlparse+0xd0>
    } else if (url[i] == ']') {
 800ab10:	683a      	ldr	r2, [r7, #0]
 800ab12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab14:	4413      	add	r3, r2
 800ab16:	781b      	ldrb	r3, [r3, #0]
 800ab18:	2b5d      	cmp	r3, #93	; 0x5d
 800ab1a:	d102      	bne.n	800ab22 <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	61bb      	str	r3, [r7, #24]
 800ab20:	e036      	b.n	800ab90 <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab26:	4413      	add	r3, r2
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	2b3a      	cmp	r3, #58	; 0x3a
 800ab2c:	d109      	bne.n	800ab42 <urlparse+0x82>
 800ab2e:	69bb      	ldr	r3, [r7, #24]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d106      	bne.n	800ab42 <urlparse+0x82>
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d103      	bne.n	800ab42 <urlparse+0x82>
      u.port = i + 1;
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	61bb      	str	r3, [r7, #24]
 800ab40:	e026      	b.n	800ab90 <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab46:	4413      	add	r3, r2
 800ab48:	781b      	ldrb	r3, [r3, #0]
 800ab4a:	2b40      	cmp	r3, #64	; 0x40
 800ab4c:	d112      	bne.n	800ab74 <urlparse+0xb4>
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d10f      	bne.n	800ab74 <urlparse+0xb4>
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d10c      	bne.n	800ab74 <urlparse+0xb4>
 800ab5a:	69fb      	ldr	r3, [r7, #28]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d109      	bne.n	800ab74 <urlparse+0xb4>
      u.user = u.host;
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 800ab68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	617b      	str	r3, [r7, #20]
      u.port = 0;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	61bb      	str	r3, [r7, #24]
 800ab72:	e00d      	b.n	800ab90 <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 800ab74:	683a      	ldr	r2, [r7, #0]
 800ab76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab78:	4413      	add	r3, r2
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	2b2f      	cmp	r3, #47	; 0x2f
 800ab7e:	d107      	bne.n	800ab90 <urlparse+0xd0>
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d004      	beq.n	800ab90 <urlparse+0xd0>
 800ab86:	69fb      	ldr	r3, [r7, #28]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <urlparse+0xd0>
      u.uri = i;
 800ab8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab8e:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 800ab90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab92:	3301      	adds	r3, #1
 800ab94:	627b      	str	r3, [r7, #36]	; 0x24
 800ab96:	683a      	ldr	r2, [r7, #0]
 800ab98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab9a:	4413      	add	r3, r2
 800ab9c:	781b      	ldrb	r3, [r3, #0]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d19d      	bne.n	800aade <urlparse+0x1e>
    }
  }
  u.end = i;
 800aba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba4:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	461d      	mov	r5, r3
 800abaa:	f107 0408 	add.w	r4, r7, #8
 800abae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abb2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800abb6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	3728      	adds	r7, #40	; 0x28
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bdb0      	pop	{r4, r5, r7, pc}

0800abc2 <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b08c      	sub	sp, #48	; 0x30
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 800abcc:	f107 0310 	add.w	r3, r7, #16
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f7ff ff74 	bl	800aac0 <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 800abd8:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d004      	beq.n	800abe8 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 800abde:	6a3a      	ldr	r2, [r7, #32]
 800abe0:	69fb      	ldr	r3, [r7, #28]
 800abe2:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 800abe4:	3b01      	subs	r3, #1
 800abe6:	e009      	b.n	800abfc <mg_url_host+0x3a>
 800abe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                     : u.end - u.host;
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 800abee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf0:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 800abf2:	1ad3      	subs	r3, r2, r3
 800abf4:	e002      	b.n	800abfc <mg_url_host+0x3a>
 800abf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abf8:	69fb      	ldr	r3, [r7, #28]
 800abfa:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 800abfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 800abfe:	69fb      	ldr	r3, [r7, #28]
 800ac00:	683a      	ldr	r2, [r7, #0]
 800ac02:	18d1      	adds	r1, r2, r3
 800ac04:	f107 0308 	add.w	r3, r7, #8
 800ac08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff fa5d 	bl	800a0ca <mg_str_n>
  return s;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	461a      	mov	r2, r3
 800ac14:	f107 0308 	add.w	r3, r7, #8
 800ac18:	e893 0003 	ldmia.w	r3, {r0, r1}
 800ac1c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	3730      	adds	r7, #48	; 0x30
 800ac24:	46bd      	mov	sp, r7
 800ac26:	bd80      	pop	{r7, pc}

0800ac28 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b08a      	sub	sp, #40	; 0x28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 800ac30:	f107 0308 	add.w	r3, r7, #8
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7ff ff42 	bl	800aac0 <urlparse>
  unsigned short port = 0;
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 800ac40:	2205      	movs	r2, #5
 800ac42:	4925      	ldr	r1, [pc, #148]	; (800acd8 <mg_url_port+0xb0>)
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f00a fd38 	bl	80156ba <strncmp>
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d007      	beq.n	800ac60 <mg_url_port+0x38>
 800ac50:	2203      	movs	r2, #3
 800ac52:	4922      	ldr	r1, [pc, #136]	; (800acdc <mg_url_port+0xb4>)
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f00a fd30 	bl	80156ba <strncmp>
 800ac5a:	4603      	mov	r3, r0
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d101      	bne.n	800ac64 <mg_url_port+0x3c>
 800ac60:	2350      	movs	r3, #80	; 0x50
 800ac62:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 800ac64:	2204      	movs	r2, #4
 800ac66:	491e      	ldr	r1, [pc, #120]	; (800ace0 <mg_url_port+0xb8>)
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	f00a fd26 	bl	80156ba <strncmp>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d007      	beq.n	800ac84 <mg_url_port+0x5c>
 800ac74:	2206      	movs	r2, #6
 800ac76:	491b      	ldr	r1, [pc, #108]	; (800ace4 <mg_url_port+0xbc>)
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f00a fd1e 	bl	80156ba <strncmp>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d102      	bne.n	800ac8a <mg_url_port+0x62>
    port = 443;
 800ac84:	f240 13bb 	movw	r3, #443	; 0x1bb
 800ac88:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 800ac8a:	2205      	movs	r2, #5
 800ac8c:	4916      	ldr	r1, [pc, #88]	; (800ace8 <mg_url_port+0xc0>)
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f00a fd13 	bl	80156ba <strncmp>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d102      	bne.n	800aca0 <mg_url_port+0x78>
 800ac9a:	f240 735b 	movw	r3, #1883	; 0x75b
 800ac9e:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 800aca0:	2206      	movs	r2, #6
 800aca2:	4912      	ldr	r1, [pc, #72]	; (800acec <mg_url_port+0xc4>)
 800aca4:	6878      	ldr	r0, [r7, #4]
 800aca6:	f00a fd08 	bl	80156ba <strncmp>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d102      	bne.n	800acb6 <mg_url_port+0x8e>
 800acb0:	f242 23b3 	movw	r3, #8883	; 0x22b3
 800acb4:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d007      	beq.n	800accc <mg_url_port+0xa4>
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	4413      	add	r3, r2
 800acc2:	4618      	mov	r0, r3
 800acc4:	f00a f9ba 	bl	801503c <atoi>
 800acc8:	4603      	mov	r3, r0
 800acca:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 800accc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3728      	adds	r7, #40	; 0x28
 800acd2:	46bd      	mov	sp, r7
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	08017508 	.word	0x08017508
 800acdc:	08017510 	.word	0x08017510
 800ace0:	080174e0 	.word	0x080174e0
 800ace4:	080174e8 	.word	0x080174e8
 800ace8:	08017514 	.word	0x08017514
 800acec:	080174f0 	.word	0x080174f0

0800acf0 <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800acf8:	2300      	movs	r3, #0
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 800acfe:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800ad00:	7bfb      	ldrb	r3, [r7, #15]
 800ad02:	461a      	mov	r2, r3
 800ad04:	7bbb      	ldrb	r3, [r7, #14]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 800ad0a:	7b7b      	ldrb	r3, [r7, #13]
 800ad0c:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800ad0e:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 800ad10:	7b3b      	ldrb	r3, [r7, #12]
 800ad12:	061b      	lsls	r3, r3, #24
 800ad14:	4313      	orrs	r3, r2
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3714      	adds	r7, #20
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 800ad22:	b480      	push	{r7}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	4603      	mov	r3, r0
 800ad2a:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	81bb      	strh	r3, [r7, #12]
 800ad30:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 800ad32:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 800ad34:	7b7b      	ldrb	r3, [r7, #13]
 800ad36:	b21a      	sxth	r2, r3
 800ad38:	7b3b      	ldrb	r3, [r7, #12]
 800ad3a:	021b      	lsls	r3, r3, #8
 800ad3c:	b21b      	sxth	r3, r3
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b21b      	sxth	r3, r3
 800ad42:	b29b      	uxth	r3, r3
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3714      	adds	r7, #20
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 800ad50:	b480      	push	{r7}
 800ad52:	b087      	sub	sp, #28
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	43db      	mvns	r3, r3
 800ad60:	60fb      	str	r3, [r7, #12]
  while (len--) {
 800ad62:	e01f      	b.n	800ada4 <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *)buf++;
 800ad64:	68bb      	ldr	r3, [r7, #8]
 800ad66:	1c5a      	adds	r2, r3, #1
 800ad68:	60ba      	str	r2, [r7, #8]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 800ad6e:	7dfa      	ldrb	r2, [r7, #23]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	4053      	eors	r3, r2
 800ad74:	f003 030f 	and.w	r3, r3, #15
 800ad78:	4a11      	ldr	r2, [pc, #68]	; (800adc0 <mg_crc32+0x70>)
 800ad7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	091b      	lsrs	r3, r3, #4
 800ad82:	4053      	eors	r3, r2
 800ad84:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 800ad86:	7dfb      	ldrb	r3, [r7, #23]
 800ad88:	091b      	lsrs	r3, r3, #4
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	461a      	mov	r2, r3
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	4053      	eors	r3, r2
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	4a0a      	ldr	r2, [pc, #40]	; (800adc0 <mg_crc32+0x70>)
 800ad98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	091b      	lsrs	r3, r3, #4
 800ada0:	4053      	eors	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]
  while (len--) {
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	1e5a      	subs	r2, r3, #1
 800ada8:	607a      	str	r2, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1da      	bne.n	800ad64 <mg_crc32+0x14>
  }
  return ~crc;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	43db      	mvns	r3, r3
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	371c      	adds	r7, #28
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	0801847c 	.word	0x0801847c

0800adc4 <ws_handshake>:
  return len;
}

static void ws_handshake(struct mg_connection *c, const struct mg_str *wskey,
                         const struct mg_str *wsproto, const char *fmt,
                         va_list *ap) {
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b0aa      	sub	sp, #168	; 0xa8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
  const char *magic = "258EAFA5-E914-47DA-95CA-C5AB0DC85B11";
 800add2:	4b29      	ldr	r3, [pc, #164]	; (800ae78 <ws_handshake+0xb4>)
 800add4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  unsigned char sha[20], b64_sha[30];

  mg_sha1_ctx sha_ctx;
  mg_sha1_init(&sha_ctx);
 800add8:	f107 0314 	add.w	r3, r7, #20
 800addc:	4618      	mov	r0, r3
 800adde:	f7fe fdb1 	bl	8009944 <mg_sha1_init>
  mg_sha1_update(&sha_ctx, (unsigned char *) wskey->ptr, wskey->len);
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	6819      	ldr	r1, [r3, #0]
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	685a      	ldr	r2, [r3, #4]
 800adea:	f107 0314 	add.w	r3, r7, #20
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe fdd2 	bl	8009998 <mg_sha1_update>
  mg_sha1_update(&sha_ctx, (unsigned char *) magic, 36);
 800adf4:	f107 0314 	add.w	r3, r7, #20
 800adf8:	2224      	movs	r2, #36	; 0x24
 800adfa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe fdca 	bl	8009998 <mg_sha1_update>
  mg_sha1_final(sha, &sha_ctx);
 800ae04:	f107 0214 	add.w	r2, r7, #20
 800ae08:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ae0c:	4611      	mov	r1, r2
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fe28 	bl	8009a64 <mg_sha1_final>
  mg_base64_encode(sha, sizeof(sha), (char *) b64_sha);
 800ae14:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800ae18:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800ae1c:	2114      	movs	r1, #20
 800ae1e:	4618      	mov	r0, r3
 800ae20:	f7f6 fb98 	bl	8001554 <mg_base64_encode>
  mg_xprintf(mg_pfn_iobuf, &c->send,
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800ae2a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ae2e:	4a13      	ldr	r2, [pc, #76]	; (800ae7c <ws_handshake+0xb8>)
 800ae30:	4813      	ldr	r0, [pc, #76]	; (800ae80 <ws_handshake+0xbc>)
 800ae32:	f7f7 fea6 	bl	8002b82 <mg_xprintf>
             "HTTP/1.1 101 Switching Protocols\r\n"
             "Upgrade: websocket\r\n"
             "Connection: Upgrade\r\n"
             "Sec-WebSocket-Accept: %s\r\n",
             b64_sha);
  if (fmt != NULL) mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d008      	beq.n	800ae4e <ws_handshake+0x8a>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800ae42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ae46:	683a      	ldr	r2, [r7, #0]
 800ae48:	480d      	ldr	r0, [pc, #52]	; (800ae80 <ws_handshake+0xbc>)
 800ae4a:	f7f7 feb5 	bl	8002bb8 <mg_vxprintf>
  if (wsproto != NULL) {
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d008      	beq.n	800ae66 <ws_handshake+0xa2>
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	461a      	mov	r2, r3
              wsproto->ptr);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
    mg_printf(c, "Sec-WebSocket-Protocol: %.*s\r\n", (int) wsproto->len,
 800ae5e:	4909      	ldr	r1, [pc, #36]	; (800ae84 <ws_handshake+0xc0>)
 800ae60:	68f8      	ldr	r0, [r7, #12]
 800ae62:	f7fc fb19 	bl	8007498 <mg_printf>
  }
  mg_send(c, "\r\n", 2);
 800ae66:	2202      	movs	r2, #2
 800ae68:	4907      	ldr	r1, [pc, #28]	; (800ae88 <ws_handshake+0xc4>)
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f003 fe58 	bl	800eb20 <mg_send>
}
 800ae70:	bf00      	nop
 800ae72:	37a8      	adds	r7, #168	; 0xa8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}
 800ae78:	08017540 	.word	0x08017540
 800ae7c:	08017568 	.word	0x08017568
 800ae80:	08007dd5 	.word	0x08007dd5
 800ae84:	080175d0 	.word	0x080175d0
 800ae88:	080165f4 	.word	0x080165f4

0800ae8c <be32>:

static uint32_t be32(const uint8_t *p) {
 800ae8c:	b480      	push	{r7}
 800ae8e:	b083      	sub	sp, #12
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	3303      	adds	r3, #3
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	3302      	adds	r3, #2
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	041b      	lsls	r3, r3, #16
  return (((uint32_t) p[3]) << 0) | (((uint32_t) p[2]) << 8) |
 800aeae:	431a      	orrs	r2, r3
         (((uint32_t) p[1]) << 16) | (((uint32_t) p[0]) << 24);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	061b      	lsls	r3, r3, #24
 800aeb6:	4313      	orrs	r3, r2
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <ws_process>:

static size_t ws_process(uint8_t *buf, size_t len, struct ws_msg *msg) {
 800aec4:	b5b0      	push	{r4, r5, r7, lr}
 800aec6:	b08a      	sub	sp, #40	; 0x28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  size_t i, n = 0, mask_len = 0;
 800aed0:	2300      	movs	r3, #0
 800aed2:	61fb      	str	r3, [r7, #28]
 800aed4:	2300      	movs	r3, #0
 800aed6:	623b      	str	r3, [r7, #32]
  memset(msg, 0, sizeof(*msg));
 800aed8:	220c      	movs	r2, #12
 800aeda:	2100      	movs	r1, #0
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f00a fbba 	bl	8015656 <memset>
  if (len >= 2) {
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d953      	bls.n	800af90 <ws_process+0xcc>
    n = buf[1] & 0x7f;                // Frame length
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	3301      	adds	r3, #1
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aef2:	61fb      	str	r3, [r7, #28]
    mask_len = buf[1] & 128 ? 4 : 0;  // last bit is a mask bit
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3301      	adds	r3, #1
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	b25b      	sxtb	r3, r3
 800aefc:	115b      	asrs	r3, r3, #5
 800aefe:	b25b      	sxtb	r3, r3
 800af00:	f003 0304 	and.w	r3, r3, #4
 800af04:	623b      	str	r3, [r7, #32]
    msg->flags = buf[0];
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	781a      	ldrb	r2, [r3, #0]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	701a      	strb	r2, [r3, #0]
    if (n < 126 && len >= mask_len) {
 800af0e:	69fb      	ldr	r3, [r7, #28]
 800af10:	2b7d      	cmp	r3, #125	; 0x7d
 800af12:	d80b      	bhi.n	800af2c <ws_process+0x68>
 800af14:	68ba      	ldr	r2, [r7, #8]
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d307      	bcc.n	800af2c <ws_process+0x68>
      msg->data_len = n;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	69fa      	ldr	r2, [r7, #28]
 800af20:	609a      	str	r2, [r3, #8]
      msg->header_len = 2 + mask_len;
 800af22:	6a3b      	ldr	r3, [r7, #32]
 800af24:	1c9a      	adds	r2, r3, #2
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	605a      	str	r2, [r3, #4]
 800af2a:	e031      	b.n	800af90 <ws_process+0xcc>
    } else if (n == 126 && len >= 4 + mask_len) {
 800af2c:	69fb      	ldr	r3, [r7, #28]
 800af2e:	2b7e      	cmp	r3, #126	; 0x7e
 800af30:	d113      	bne.n	800af5a <ws_process+0x96>
 800af32:	6a3b      	ldr	r3, [r7, #32]
 800af34:	3304      	adds	r3, #4
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d30e      	bcc.n	800af5a <ws_process+0x96>
      msg->header_len = 4 + mask_len;
 800af3c:	6a3b      	ldr	r3, [r7, #32]
 800af3e:	1d1a      	adds	r2, r3, #4
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	605a      	str	r2, [r3, #4]
      msg->data_len = (((size_t) buf[2]) << 8) | buf[3];
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3302      	adds	r3, #2
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	021b      	lsls	r3, r3, #8
 800af4c:	68fa      	ldr	r2, [r7, #12]
 800af4e:	3203      	adds	r2, #3
 800af50:	7812      	ldrb	r2, [r2, #0]
 800af52:	431a      	orrs	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	609a      	str	r2, [r3, #8]
 800af58:	e01a      	b.n	800af90 <ws_process+0xcc>
    } else if (len >= 10 + mask_len) {
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	330a      	adds	r3, #10
 800af5e:	68ba      	ldr	r2, [r7, #8]
 800af60:	429a      	cmp	r2, r3
 800af62:	d315      	bcc.n	800af90 <ws_process+0xcc>
      msg->header_len = 10 + mask_len;
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	f103 020a 	add.w	r2, r3, #10
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	605a      	str	r2, [r3, #4]
      msg->data_len =
          (size_t) (((uint64_t) be32(buf + 2) << 32) + be32(buf + 6));
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	3302      	adds	r3, #2
 800af72:	4618      	mov	r0, r3
 800af74:	f7ff ff8a 	bl	800ae8c <be32>
 800af78:	4603      	mov	r3, r0
 800af7a:	2200      	movs	r2, #0
 800af7c:	461c      	mov	r4, r3
 800af7e:	4615      	mov	r5, r2
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3306      	adds	r3, #6
 800af84:	4618      	mov	r0, r3
 800af86:	f7ff ff81 	bl	800ae8c <be32>
 800af8a:	4602      	mov	r2, r0
      msg->data_len =
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	609a      	str	r2, [r3, #8]
    }
  }
  // Sanity check, and integer overflow protection for the boundary check below
  // data_len should not be larger than 1 Gb
  if (msg->data_len > 1024 * 1024 * 1024) return 0;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	689b      	ldr	r3, [r3, #8]
 800af94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af98:	d901      	bls.n	800af9e <ws_process+0xda>
 800af9a:	2300      	movs	r3, #0
 800af9c:	e036      	b.n	800b00c <ws_process+0x148>
  if (msg->header_len + msg->data_len > len) return 0;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	689b      	ldr	r3, [r3, #8]
 800afa6:	4413      	add	r3, r2
 800afa8:	68ba      	ldr	r2, [r7, #8]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d201      	bcs.n	800afb2 <ws_process+0xee>
 800afae:	2300      	movs	r3, #0
 800afb0:	e02c      	b.n	800b00c <ws_process+0x148>
  if (mask_len > 0) {
 800afb2:	6a3b      	ldr	r3, [r7, #32]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d024      	beq.n	800b002 <ws_process+0x13e>
    uint8_t *p = buf + msg->header_len, *m = p - mask_len;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	4413      	add	r3, r2
 800afc0:	61bb      	str	r3, [r7, #24]
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	425b      	negs	r3, r3
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	4413      	add	r3, r2
 800afca:	617b      	str	r3, [r7, #20]
    for (i = 0; i < msg->data_len; i++) p[i] ^= m[i & 3];
 800afcc:	2300      	movs	r3, #0
 800afce:	627b      	str	r3, [r7, #36]	; 0x24
 800afd0:	e012      	b.n	800aff8 <ws_process+0x134>
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	4413      	add	r3, r2
 800afd8:	7819      	ldrb	r1, [r3, #0]
 800afda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afdc:	f003 0303 	and.w	r3, r3, #3
 800afe0:	697a      	ldr	r2, [r7, #20]
 800afe2:	4413      	add	r3, r2
 800afe4:	781a      	ldrb	r2, [r3, #0]
 800afe6:	69b8      	ldr	r0, [r7, #24]
 800afe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afea:	4403      	add	r3, r0
 800afec:	404a      	eors	r2, r1
 800afee:	b2d2      	uxtb	r2, r2
 800aff0:	701a      	strb	r2, [r3, #0]
 800aff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff4:	3301      	adds	r3, #1
 800aff6:	627b      	str	r3, [r7, #36]	; 0x24
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800affe:	429a      	cmp	r2, r3
 800b000:	d3e7      	bcc.n	800afd2 <ws_process+0x10e>
  }
  return msg->header_len + msg->data_len;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	685a      	ldr	r2, [r3, #4]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	4413      	add	r3, r2
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3728      	adds	r7, #40	; 0x28
 800b010:	46bd      	mov	sp, r7
 800b012:	bdb0      	pop	{r4, r5, r7, pc}

0800b014 <mkhdr>:

static size_t mkhdr(size_t len, int op, bool is_client, uint8_t *buf) {
 800b014:	b5b0      	push	{r4, r5, r7, lr}
 800b016:	b088      	sub	sp, #32
 800b018:	af00      	add	r7, sp, #0
 800b01a:	60f8      	str	r0, [r7, #12]
 800b01c:	60b9      	str	r1, [r7, #8]
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	4613      	mov	r3, r2
 800b022:	71fb      	strb	r3, [r7, #7]
  size_t n = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) (op | 128);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	b25b      	sxtb	r3, r3
 800b02c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b030:	b25b      	sxtb	r3, r3
 800b032:	b2da      	uxtb	r2, r3
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	701a      	strb	r2, [r3, #0]
  if (len < 126) {
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	2b7d      	cmp	r3, #125	; 0x7d
 800b03c:	d807      	bhi.n	800b04e <mkhdr+0x3a>
    buf[1] = (unsigned char) len;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	3301      	adds	r3, #1
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	b2d2      	uxtb	r2, r2
 800b046:	701a      	strb	r2, [r3, #0]
    n = 2;
 800b048:	2302      	movs	r3, #2
 800b04a:	61fb      	str	r3, [r7, #28]
 800b04c:	e038      	b.n	800b0c0 <mkhdr+0xac>
  } else if (len < 65536) {
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b054:	d211      	bcs.n	800b07a <mkhdr+0x66>
    uint16_t tmp = mg_htons((uint16_t) len);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7ff fe61 	bl	800ad22 <mg_ntohs>
 800b060:	4603      	mov	r3, r0
 800b062:	837b      	strh	r3, [r7, #26]
    buf[1] = 126;
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	3301      	adds	r3, #1
 800b068:	227e      	movs	r2, #126	; 0x7e
 800b06a:	701a      	strb	r2, [r3, #0]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	3302      	adds	r3, #2
 800b070:	8b7a      	ldrh	r2, [r7, #26]
 800b072:	801a      	strh	r2, [r3, #0]
    n = 4;
 800b074:	2304      	movs	r3, #4
 800b076:	61fb      	str	r3, [r7, #28]
 800b078:	e022      	b.n	800b0c0 <mkhdr+0xac>
  } else {
    uint32_t tmp;
    buf[1] = 127;
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	3301      	adds	r3, #1
 800b07e:	227f      	movs	r2, #127	; 0x7f
 800b080:	701a      	strb	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (((uint64_t) len) >> 32));
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	461c      	mov	r4, r3
 800b088:	4615      	mov	r5, r2
 800b08a:	f04f 0200 	mov.w	r2, #0
 800b08e:	f04f 0300 	mov.w	r3, #0
 800b092:	002a      	movs	r2, r5
 800b094:	2300      	movs	r3, #0
 800b096:	4613      	mov	r3, r2
 800b098:	4618      	mov	r0, r3
 800b09a:	f7ff fe29 	bl	800acf0 <mg_ntohl>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	617b      	str	r3, [r7, #20]
    memcpy(&buf[2], &tmp, sizeof(tmp));
 800b0a2:	683b      	ldr	r3, [r7, #0]
 800b0a4:	3302      	adds	r3, #2
 800b0a6:	697a      	ldr	r2, [r7, #20]
 800b0a8:	601a      	str	r2, [r3, #0]
    tmp = mg_htonl((uint32_t) (len & 0xffffffffU));
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f7ff fe20 	bl	800acf0 <mg_ntohl>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	617b      	str	r3, [r7, #20]
    memcpy(&buf[6], &tmp, sizeof(tmp));
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	3306      	adds	r3, #6
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	601a      	str	r2, [r3, #0]
    n = 10;
 800b0bc:	230a      	movs	r3, #10
 800b0be:	61fb      	str	r3, [r7, #28]
  }
  if (is_client) {
 800b0c0:	79fb      	ldrb	r3, [r7, #7]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d012      	beq.n	800b0ec <mkhdr+0xd8>
    buf[1] |= 1 << 7;  // Set masking flag
 800b0c6:	683b      	ldr	r3, [r7, #0]
 800b0c8:	3301      	adds	r3, #1
 800b0ca:	781a      	ldrb	r2, [r3, #0]
 800b0cc:	683b      	ldr	r3, [r7, #0]
 800b0ce:	3301      	adds	r3, #1
 800b0d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800b0d4:	b2d2      	uxtb	r2, r2
 800b0d6:	701a      	strb	r2, [r3, #0]
    mg_random(&buf[n], 4);
 800b0d8:	683a      	ldr	r2, [r7, #0]
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	4413      	add	r3, r2
 800b0de:	2104      	movs	r1, #4
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7f5 fd6b 	bl	8000bbc <mg_random>
    n += 4;
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	61fb      	str	r3, [r7, #28]
  }
  return n;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
}
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	3720      	adds	r7, #32
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bdb0      	pop	{r4, r5, r7, pc}

0800b0f6 <mg_ws_mask>:

static void mg_ws_mask(struct mg_connection *c, size_t len) {
 800b0f6:	b480      	push	{r7}
 800b0f8:	b087      	sub	sp, #28
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  if (c->is_client && c->send.buf != NULL) {
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b106:	f003 0302 	and.w	r3, r3, #2
 800b10a:	b2db      	uxtb	r3, r3
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d028      	beq.n	800b162 <mg_ws_mask+0x6c>
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b114:	2b00      	cmp	r3, #0
 800b116:	d024      	beq.n	800b162 <mg_ws_mask+0x6c>
    size_t i;
    uint8_t *p = c->send.buf + c->send.len - len, *mask = p - 4;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	1acb      	subs	r3, r1, r3
 800b124:	4413      	add	r3, r2
 800b126:	613b      	str	r3, [r7, #16]
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	3b04      	subs	r3, #4
 800b12c:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < len; i++) p[i] ^= mask[i & 3];
 800b12e:	2300      	movs	r3, #0
 800b130:	617b      	str	r3, [r7, #20]
 800b132:	e012      	b.n	800b15a <mg_ws_mask+0x64>
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	697b      	ldr	r3, [r7, #20]
 800b138:	4413      	add	r3, r2
 800b13a:	7819      	ldrb	r1, [r3, #0]
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f003 0303 	and.w	r3, r3, #3
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	4413      	add	r3, r2
 800b146:	781a      	ldrb	r2, [r3, #0]
 800b148:	6938      	ldr	r0, [r7, #16]
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	4403      	add	r3, r0
 800b14e:	404a      	eors	r2, r1
 800b150:	b2d2      	uxtb	r2, r2
 800b152:	701a      	strb	r2, [r3, #0]
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	3301      	adds	r3, #1
 800b158:	617b      	str	r3, [r7, #20]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d3e8      	bcc.n	800b134 <mg_ws_mask+0x3e>
  }
}
 800b162:	bf00      	nop
 800b164:	371c      	adds	r7, #28
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
	...

0800b170 <mg_ws_send>:

size_t mg_ws_send(struct mg_connection *c, const void *buf, size_t len,
                  int op) {
 800b170:	b580      	push	{r7, lr}
 800b172:	b08a      	sub	sp, #40	; 0x28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	60b9      	str	r1, [r7, #8]
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	603b      	str	r3, [r7, #0]
  uint8_t header[14];
  size_t header_len = mkhdr(len, op, c->is_client, header);
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b184:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	bf14      	ite	ne
 800b18e:	2301      	movne	r3, #1
 800b190:	2300      	moveq	r3, #0
 800b192:	b2da      	uxtb	r2, r3
 800b194:	f107 0314 	add.w	r3, r7, #20
 800b198:	6839      	ldr	r1, [r7, #0]
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f7ff ff3a 	bl	800b014 <mkhdr>
 800b1a0:	6278      	str	r0, [r7, #36]	; 0x24
  mg_send(c, header, header_len);
 800b1a2:	f107 0314 	add.w	r3, r7, #20
 800b1a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f003 fcb8 	bl	800eb20 <mg_send>
  MG_VERBOSE(("WS out: %d [%.*s]", (int) len, (int) len, buf));
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <mg_ws_send+0x80>)
 800b1b2:	f641 0268 	movw	r2, #6248	; 0x1868
 800b1b6:	490f      	ldr	r1, [pc, #60]	; (800b1f4 <mg_ws_send+0x84>)
 800b1b8:	2004      	movs	r0, #4
 800b1ba:	f7fc f80f 	bl	80071dc <mg_log_prefix>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d005      	beq.n	800b1d0 <mg_ws_send+0x60>
 800b1c4:	6879      	ldr	r1, [r7, #4]
 800b1c6:	687a      	ldr	r2, [r7, #4]
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	480b      	ldr	r0, [pc, #44]	; (800b1f8 <mg_ws_send+0x88>)
 800b1cc:	f7fc f860 	bl	8007290 <mg_log>
  mg_send(c, buf, len);
 800b1d0:	687a      	ldr	r2, [r7, #4]
 800b1d2:	68b9      	ldr	r1, [r7, #8]
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f003 fca3 	bl	800eb20 <mg_send>
  mg_ws_mask(c, len);
 800b1da:	6879      	ldr	r1, [r7, #4]
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f7ff ff8a 	bl	800b0f6 <mg_ws_mask>
  return header_len + len;
 800b1e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	4413      	add	r3, r2
}
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	3728      	adds	r7, #40	; 0x28
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}
 800b1f0:	080184bc 	.word	0x080184bc
 800b1f4:	0801645c 	.word	0x0801645c
 800b1f8:	080175f0 	.word	0x080175f0

0800b1fc <mg_ws_client_handshake>:

static bool mg_ws_client_handshake(struct mg_connection *c) {
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800b202:	af00      	add	r7, sp, #0
 800b204:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b208:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b20c:	6018      	str	r0, [r3, #0]
  int n = mg_http_get_request_len(c->recv.buf, c->recv.len);
 800b20e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b212:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b21a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b21e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b226:	4619      	mov	r1, r3
 800b228:	4610      	mov	r0, r2
 800b22a:	f7f8 fc8d 	bl	8003b48 <mg_http_get_request_len>
 800b22e:	f8c7 022c 	str.w	r0, [r7, #556]	; 0x22c
  if (n < 0) {
 800b232:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b236:	2b00      	cmp	r3, #0
 800b238:	da08      	bge.n	800b24c <mg_ws_client_handshake+0x50>
    mg_error(c, "not http");  // Some just, not an HTTP request
 800b23a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b23e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b242:	4930      	ldr	r1, [pc, #192]	; (800b304 <mg_ws_client_handshake+0x108>)
 800b244:	6818      	ldr	r0, [r3, #0]
 800b246:	f7f7 f80d 	bl	8002264 <mg_error>
 800b24a:	e054      	b.n	800b2f6 <mg_ws_client_handshake+0xfa>
  } else if (n > 0) {
 800b24c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b250:	2b00      	cmp	r3, #0
 800b252:	dd4e      	ble.n	800b2f2 <mg_ws_client_handshake+0xf6>
    if (n < 15 || memcmp(c->recv.buf + 9, "101", 3) != 0) {
 800b254:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 800b258:	2b0e      	cmp	r3, #14
 800b25a:	dd0e      	ble.n	800b27a <mg_ws_client_handshake+0x7e>
 800b25c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b260:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b268:	3309      	adds	r3, #9
 800b26a:	2203      	movs	r2, #3
 800b26c:	4926      	ldr	r1, [pc, #152]	; (800b308 <mg_ws_client_handshake+0x10c>)
 800b26e:	4618      	mov	r0, r3
 800b270:	f00a f9c7 	bl	8015602 <memcmp>
 800b274:	4603      	mov	r3, r0
 800b276:	2b00      	cmp	r3, #0
 800b278:	d008      	beq.n	800b28c <mg_ws_client_handshake+0x90>
      mg_error(c, "handshake error");
 800b27a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b27e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b282:	4922      	ldr	r1, [pc, #136]	; (800b30c <mg_ws_client_handshake+0x110>)
 800b284:	6818      	ldr	r0, [r3, #0]
 800b286:	f7f6 ffed 	bl	8002264 <mg_error>
 800b28a:	e025      	b.n	800b2d8 <mg_ws_client_handshake+0xdc>
    } else {
      struct mg_http_message hm;
      mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 800b28c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b290:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b298:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b29c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b2a4:	f107 020c 	add.w	r2, r7, #12
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	f7f8 fd7d 	bl	8003da8 <mg_http_parse>
      c->is_websocket = 1;
 800b2ae:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b2b2:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b2bc:	f043 0302 	orr.w	r3, r3, #2
 800b2c0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_WS_OPEN, &hm);
 800b2c4:	f107 020c 	add.w	r2, r7, #12
 800b2c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b2cc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b2d0:	210c      	movs	r1, #12
 800b2d2:	6818      	ldr	r0, [r3, #0]
 800b2d4:	f7f6 ffa4 	bl	8002220 <mg_call>
    }
    mg_iobuf_del(&c->recv, 0, (size_t) n);
 800b2d8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b2dc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3338      	adds	r3, #56	; 0x38
 800b2e4:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800b2e8:	2100      	movs	r1, #0
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	f7fb f862 	bl	80063b4 <mg_iobuf_del>
 800b2f0:	e001      	b.n	800b2f6 <mg_ws_client_handshake+0xfa>
  } else {
    return true;  // Request is not yet received, quit event handler
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e000      	b.n	800b2f8 <mg_ws_client_handshake+0xfc>
  }
  return false;  // Continue event handler
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800b2fe:	46bd      	mov	sp, r7
 800b300:	bd80      	pop	{r7, pc}
 800b302:	bf00      	nop
 800b304:	08017604 	.word	0x08017604
 800b308:	08017610 	.word	0x08017610
 800b30c:	08017614 	.word	0x08017614

0800b310 <mg_ws_cb>:

static void mg_ws_cb(struct mg_connection *c, int ev, void *ev_data,
                     void *fn_data) {
 800b310:	b580      	push	{r7, lr}
 800b312:	b090      	sub	sp, #64	; 0x40
 800b314:	af00      	add	r7, sp, #0
 800b316:	6178      	str	r0, [r7, #20]
 800b318:	6139      	str	r1, [r7, #16]
 800b31a:	60fa      	str	r2, [r7, #12]
 800b31c:	60bb      	str	r3, [r7, #8]
  struct ws_msg msg;
  size_t ofs = (size_t) c->pfn_data;
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b322:	63fb      	str	r3, [r7, #60]	; 0x3c

  // assert(ofs < c->recv.len);
  if (ev == MG_EV_READ) {
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	2b07      	cmp	r3, #7
 800b328:	f040 8135 	bne.w	800b596 <mg_ws_cb+0x286>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	b2db      	uxtb	r3, r3
 800b338:	2b00      	cmp	r3, #0
 800b33a:	f000 8119 	beq.w	800b570 <mg_ws_cb+0x260>
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b344:	f003 0302 	and.w	r3, r3, #2
 800b348:	b2db      	uxtb	r3, r3
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f040 8110 	bne.w	800b570 <mg_ws_cb+0x260>
 800b350:	6978      	ldr	r0, [r7, #20]
 800b352:	f7ff ff53 	bl	800b1fc <mg_ws_client_handshake>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	f040 811b 	bne.w	800b594 <mg_ws_cb+0x284>

    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 800b35e:	e107      	b.n	800b570 <mg_ws_cb+0x260>
      char *s = (char *) c->recv.buf + ofs + msg.header_len;
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b364:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b368:	440b      	add	r3, r1
 800b36a:	4413      	add	r3, r2
 800b36c:	637b      	str	r3, [r7, #52]	; 0x34
      struct mg_ws_message m = {{s, msg.data_len}, msg.flags};
 800b36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b370:	61bb      	str	r3, [r7, #24]
 800b372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b374:	61fb      	str	r3, [r7, #28]
 800b376:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b37a:	f887 3020 	strb.w	r3, [r7, #32]
      size_t len = msg.header_len + msg.data_len;
 800b37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b382:	4413      	add	r3, r2
 800b384:	63bb      	str	r3, [r7, #56]	; 0x38
      uint8_t final = msg.flags & 128, op = msg.flags & 15;
 800b386:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b38a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b392:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b396:	f003 030f 	and.w	r3, r3, #15
 800b39a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      // MG_VERBOSE ("fin %d op %d len %d [%.*s]", final, op,
      //                       (int) m.data.len, (int) m.data.len, m.data.ptr));
      switch (op) {
 800b39e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b3a2:	2b0a      	cmp	r3, #10
 800b3a4:	d875      	bhi.n	800b492 <mg_ws_cb+0x182>
 800b3a6:	a201      	add	r2, pc, #4	; (adr r2, 800b3ac <mg_ws_cb+0x9c>)
 800b3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ac:	0800b3d9 	.word	0x0800b3d9
 800b3b0:	0800b431 	.word	0x0800b431
 800b3b4:	0800b431 	.word	0x0800b431
 800b3b8:	0800b493 	.word	0x0800b493
 800b3bc:	0800b493 	.word	0x0800b493
 800b3c0:	0800b493 	.word	0x0800b493
 800b3c4:	0800b493 	.word	0x0800b493
 800b3c8:	0800b493 	.word	0x0800b493
 800b3cc:	0800b449 	.word	0x0800b449
 800b3d0:	0800b3e9 	.word	0x0800b3e9
 800b3d4:	0800b421 	.word	0x0800b421
        case WEBSOCKET_OP_CONTINUE:
          mg_call(c, MG_EV_WS_CTL, &m);
 800b3d8:	f107 0318 	add.w	r3, r7, #24
 800b3dc:	461a      	mov	r2, r3
 800b3de:	210e      	movs	r1, #14
 800b3e0:	6978      	ldr	r0, [r7, #20]
 800b3e2:	f7f6 ff1d 	bl	8002220 <mg_call>
          break;
 800b3e6:	e05d      	b.n	800b4a4 <mg_ws_cb+0x194>
        case WEBSOCKET_OP_PING:
          MG_DEBUG(("%s", "WS PONG"));
 800b3e8:	4b6c      	ldr	r3, [pc, #432]	; (800b59c <mg_ws_cb+0x28c>)
 800b3ea:	f641 0297 	movw	r2, #6295	; 0x1897
 800b3ee:	496c      	ldr	r1, [pc, #432]	; (800b5a0 <mg_ws_cb+0x290>)
 800b3f0:	2003      	movs	r0, #3
 800b3f2:	f7fb fef3 	bl	80071dc <mg_log_prefix>
 800b3f6:	4603      	mov	r3, r0
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d003      	beq.n	800b404 <mg_ws_cb+0xf4>
 800b3fc:	4969      	ldr	r1, [pc, #420]	; (800b5a4 <mg_ws_cb+0x294>)
 800b3fe:	486a      	ldr	r0, [pc, #424]	; (800b5a8 <mg_ws_cb+0x298>)
 800b400:	f7fb ff46 	bl	8007290 <mg_log>
          mg_ws_send(c, s, msg.data_len, WEBSOCKET_OP_PONG);
 800b404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b406:	230a      	movs	r3, #10
 800b408:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b40a:	6978      	ldr	r0, [r7, #20]
 800b40c:	f7ff feb0 	bl	800b170 <mg_ws_send>
          mg_call(c, MG_EV_WS_CTL, &m);
 800b410:	f107 0318 	add.w	r3, r7, #24
 800b414:	461a      	mov	r2, r3
 800b416:	210e      	movs	r1, #14
 800b418:	6978      	ldr	r0, [r7, #20]
 800b41a:	f7f6 ff01 	bl	8002220 <mg_call>
          break;
 800b41e:	e041      	b.n	800b4a4 <mg_ws_cb+0x194>
        case WEBSOCKET_OP_PONG:
          mg_call(c, MG_EV_WS_CTL, &m);
 800b420:	f107 0318 	add.w	r3, r7, #24
 800b424:	461a      	mov	r2, r3
 800b426:	210e      	movs	r1, #14
 800b428:	6978      	ldr	r0, [r7, #20]
 800b42a:	f7f6 fef9 	bl	8002220 <mg_call>
          break;
 800b42e:	e039      	b.n	800b4a4 <mg_ws_cb+0x194>
        case WEBSOCKET_OP_TEXT:
        case WEBSOCKET_OP_BINARY:
          if (final) mg_call(c, MG_EV_WS_MSG, &m);
 800b430:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b434:	2b00      	cmp	r3, #0
 800b436:	d034      	beq.n	800b4a2 <mg_ws_cb+0x192>
 800b438:	f107 0318 	add.w	r3, r7, #24
 800b43c:	461a      	mov	r2, r3
 800b43e:	210d      	movs	r1, #13
 800b440:	6978      	ldr	r0, [r7, #20]
 800b442:	f7f6 feed 	bl	8002220 <mg_call>
          break;
 800b446:	e02c      	b.n	800b4a2 <mg_ws_cb+0x192>
        case WEBSOCKET_OP_CLOSE:
          MG_DEBUG(("%lu WS CLOSE", c->id));
 800b448:	4b54      	ldr	r3, [pc, #336]	; (800b59c <mg_ws_cb+0x28c>)
 800b44a:	f641 02a3 	movw	r2, #6307	; 0x18a3
 800b44e:	4954      	ldr	r1, [pc, #336]	; (800b5a0 <mg_ws_cb+0x290>)
 800b450:	2003      	movs	r0, #3
 800b452:	f7fb fec3 	bl	80071dc <mg_log_prefix>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d005      	beq.n	800b468 <mg_ws_cb+0x158>
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b460:	4619      	mov	r1, r3
 800b462:	4852      	ldr	r0, [pc, #328]	; (800b5ac <mg_ws_cb+0x29c>)
 800b464:	f7fb ff14 	bl	8007290 <mg_log>
          mg_call(c, MG_EV_WS_CTL, &m);
 800b468:	f107 0318 	add.w	r3, r7, #24
 800b46c:	461a      	mov	r2, r3
 800b46e:	210e      	movs	r1, #14
 800b470:	6978      	ldr	r0, [r7, #20]
 800b472:	f7f6 fed5 	bl	8002220 <mg_call>
          // Echo the payload of the received CLOSE message back to the sender
          mg_ws_send(c, m.data.ptr, m.data.len, WEBSOCKET_OP_CLOSE);
 800b476:	69b9      	ldr	r1, [r7, #24]
 800b478:	69fa      	ldr	r2, [r7, #28]
 800b47a:	2308      	movs	r3, #8
 800b47c:	6978      	ldr	r0, [r7, #20]
 800b47e:	f7ff fe77 	bl	800b170 <mg_ws_send>
          c->is_draining = 1;
 800b482:	697a      	ldr	r2, [r7, #20]
 800b484:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b488:	f043 0310 	orr.w	r3, r3, #16
 800b48c:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
          break;
 800b490:	e008      	b.n	800b4a4 <mg_ws_cb+0x194>
        default:
          // Per RFC6455, close conn when an unknown op is recvd
          mg_error(c, "unknown WS op %d", op);
 800b492:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b496:	461a      	mov	r2, r3
 800b498:	4945      	ldr	r1, [pc, #276]	; (800b5b0 <mg_ws_cb+0x2a0>)
 800b49a:	6978      	ldr	r0, [r7, #20]
 800b49c:	f7f6 fee2 	bl	8002264 <mg_error>
          break;
 800b4a0:	e000      	b.n	800b4a4 <mg_ws_cb+0x194>
          break;
 800b4a2:	bf00      	nop
      }

      // Handle fragmented frames: strip header, keep in c->recv
      if (final == 0 || op == 0) {
 800b4a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d003      	beq.n	800b4b4 <mg_ws_cb+0x1a4>
 800b4ac:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d11e      	bne.n	800b4f2 <mg_ws_cb+0x1e2>
        if (op) ofs++, len--, msg.header_len--;       // First frame
 800b4b4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d008      	beq.n	800b4ce <mg_ws_cb+0x1be>
 800b4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4be:	3301      	adds	r3, #1
 800b4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4c4:	3b01      	subs	r3, #1
 800b4c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800b4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	62bb      	str	r3, [r7, #40]	; 0x28
        mg_iobuf_del(&c->recv, ofs, msg.header_len);  // Strip header
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	3338      	adds	r3, #56	; 0x38
 800b4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b4d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7fa ff6c 	bl	80063b4 <mg_iobuf_del>
        len -= msg.header_len;
 800b4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4e0:	1ad3      	subs	r3, r2, r3
 800b4e2:	63bb      	str	r3, [r7, #56]	; 0x38
        ofs += len;
 800b4e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e8:	4413      	add	r3, r2
 800b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        c->pfn_data = (void *) ofs;
 800b4ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	665a      	str	r2, [r3, #100]	; 0x64
        // MG_INFO(("FRAG %d [%.*s]", (int) ofs, (int) ofs, c->recv.buf));
      }
      // Remove non-fragmented frame
      if (final && op) mg_iobuf_del(&c->recv, ofs, len);
 800b4f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d00a      	beq.n	800b510 <mg_ws_cb+0x200>
 800b4fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d006      	beq.n	800b510 <mg_ws_cb+0x200>
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	3338      	adds	r3, #56	; 0x38
 800b506:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b508:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fa ff52 	bl	80063b4 <mg_iobuf_del>
      // Last chunk of the fragmented frame
      if (final && !op) {
 800b510:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b514:	2b00      	cmp	r3, #0
 800b516:	d02b      	beq.n	800b570 <mg_ws_cb+0x260>
 800b518:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d127      	bne.n	800b570 <mg_ws_cb+0x260>
        m.flags = c->recv.buf[0];
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	f887 3020 	strb.w	r3, [r7, #32]
        m.data = mg_str_n((char *) &c->recv.buf[1], (size_t) (ofs - 1));
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b52e:	1c59      	adds	r1, r3, #1
 800b530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b532:	1e5a      	subs	r2, r3, #1
 800b534:	463b      	mov	r3, r7
 800b536:	4618      	mov	r0, r3
 800b538:	f7fe fdc7 	bl	800a0ca <mg_str_n>
 800b53c:	f107 0318 	add.w	r3, r7, #24
 800b540:	463a      	mov	r2, r7
 800b542:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b546:	e883 0003 	stmia.w	r3, {r0, r1}
        mg_call(c, MG_EV_WS_MSG, &m);
 800b54a:	f107 0318 	add.w	r3, r7, #24
 800b54e:	461a      	mov	r2, r3
 800b550:	210d      	movs	r1, #13
 800b552:	6978      	ldr	r0, [r7, #20]
 800b554:	f7f6 fe64 	bl	8002220 <mg_call>
        mg_iobuf_del(&c->recv, 0, ofs);
 800b558:	697b      	ldr	r3, [r7, #20]
 800b55a:	3338      	adds	r3, #56	; 0x38
 800b55c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b55e:	2100      	movs	r1, #0
 800b560:	4618      	mov	r0, r3
 800b562:	f7fa ff27 	bl	80063b4 <mg_iobuf_del>
        ofs = 0;
 800b566:	2300      	movs	r3, #0
 800b568:	63fb      	str	r3, [r7, #60]	; 0x3c
        c->pfn_data = NULL;
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2200      	movs	r2, #0
 800b56e:	665a      	str	r2, [r3, #100]	; 0x64
    while (ws_process(c->recv.buf + ofs, c->recv.len - ofs, &msg) > 0) {
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b576:	18d0      	adds	r0, r2, r3
 800b578:	697b      	ldr	r3, [r7, #20]
 800b57a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b584:	4619      	mov	r1, r3
 800b586:	f7ff fc9d 	bl	800aec4 <ws_process>
 800b58a:	4603      	mov	r3, r0
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f47f aee7 	bne.w	800b360 <mg_ws_cb+0x50>
 800b592:	e000      	b.n	800b596 <mg_ws_cb+0x286>
    if (c->is_client && !c->is_websocket && mg_ws_client_handshake(c)) return;
 800b594:	bf00      	nop
      }
    }
  }
  (void) fn_data;
  (void) ev_data;
}
 800b596:	3740      	adds	r7, #64	; 0x40
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	080184c8 	.word	0x080184c8
 800b5a0:	0801645c 	.word	0x0801645c
 800b5a4:	08017624 	.word	0x08017624
 800b5a8:	08016578 	.word	0x08016578
 800b5ac:	0801762c 	.word	0x0801762c
 800b5b0:	0801763c 	.word	0x0801763c

0800b5b4 <mg_ws_upgrade>:
  }
  return c;
}

void mg_ws_upgrade(struct mg_connection *c, struct mg_http_message *hm,
                   const char *fmt, ...) {
 800b5b4:	b40c      	push	{r2, r3}
 800b5b6:	b580      	push	{r7, lr}
 800b5b8:	b088      	sub	sp, #32
 800b5ba:	af02      	add	r7, sp, #8
 800b5bc:	6078      	str	r0, [r7, #4]
 800b5be:	6039      	str	r1, [r7, #0]
  struct mg_str *wskey = mg_http_get_header(hm, "Sec-WebSocket-Key");
 800b5c0:	4923      	ldr	r1, [pc, #140]	; (800b650 <mg_ws_upgrade+0x9c>)
 800b5c2:	6838      	ldr	r0, [r7, #0]
 800b5c4:	f7f8 fb4a 	bl	8003c5c <mg_http_get_header>
 800b5c8:	6178      	str	r0, [r7, #20]
  c->pfn = mg_ws_cb;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	4a21      	ldr	r2, [pc, #132]	; (800b654 <mg_ws_upgrade+0xa0>)
 800b5ce:	661a      	str	r2, [r3, #96]	; 0x60
  c->pfn_data = NULL;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	665a      	str	r2, [r3, #100]	; 0x64
  if (wskey == NULL) {
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10e      	bne.n	800b5fa <mg_ws_upgrade+0x46>
    mg_http_reply(c, 426, "", "WS upgrade expected\n");
 800b5dc:	4b1e      	ldr	r3, [pc, #120]	; (800b658 <mg_ws_upgrade+0xa4>)
 800b5de:	4a1f      	ldr	r2, [pc, #124]	; (800b65c <mg_ws_upgrade+0xa8>)
 800b5e0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f7f9 f9ed 	bl	80049c4 <mg_http_reply>
    c->is_draining = 1;
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b5f0:	f043 0310 	orr.w	r3, r3, #16
 800b5f4:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    va_end(ap);
    c->is_websocket = 1;
    c->is_resp = 0;
    mg_call(c, MG_EV_WS_OPEN, hm);
  }
}
 800b5f8:	e023      	b.n	800b642 <mg_ws_upgrade+0x8e>
    struct mg_str *wsproto = mg_http_get_header(hm, "Sec-WebSocket-Protocol");
 800b5fa:	4919      	ldr	r1, [pc, #100]	; (800b660 <mg_ws_upgrade+0xac>)
 800b5fc:	6838      	ldr	r0, [r7, #0]
 800b5fe:	f7f8 fb2d 	bl	8003c5c <mg_http_get_header>
 800b602:	6138      	str	r0, [r7, #16]
    va_start(ap, fmt);
 800b604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b608:	60fb      	str	r3, [r7, #12]
    ws_handshake(c, wskey, wsproto, fmt, &ap);
 800b60a:	f107 030c 	add.w	r3, r7, #12
 800b60e:	9300      	str	r3, [sp, #0]
 800b610:	6a3b      	ldr	r3, [r7, #32]
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	6979      	ldr	r1, [r7, #20]
 800b616:	6878      	ldr	r0, [r7, #4]
 800b618:	f7ff fbd4 	bl	800adc4 <ws_handshake>
    c->is_websocket = 1;
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b622:	f043 0302 	orr.w	r3, r3, #2
 800b626:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    c->is_resp = 0;
 800b62a:	687a      	ldr	r2, [r7, #4]
 800b62c:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800b630:	f36f 13c7 	bfc	r3, #7, #1
 800b634:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    mg_call(c, MG_EV_WS_OPEN, hm);
 800b638:	683a      	ldr	r2, [r7, #0]
 800b63a:	210c      	movs	r1, #12
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f7f6 fdef 	bl	8002220 <mg_call>
}
 800b642:	bf00      	nop
 800b644:	3718      	adds	r7, #24
 800b646:	46bd      	mov	sp, r7
 800b648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b64c:	b002      	add	sp, #8
 800b64e:	4770      	bx	lr
 800b650:	080176cc 	.word	0x080176cc
 800b654:	0800b311 	.word	0x0800b311
 800b658:	080176e0 	.word	0x080176e0
 800b65c:	08016af8 	.word	0x08016af8
 800b660:	080176f8 	.word	0x080176f8

0800b664 <eth_read_phy>:
  PHY_BCR = 0,
  PHY_BSR = 1,
  PHY_CSCR = 31
};  // PHY constants

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	4603      	mov	r3, r0
 800b66c:	460a      	mov	r2, r1
 800b66e:	71fb      	strb	r3, [r7, #7]
 800b670:	4613      	mov	r3, r2
 800b672:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 800b674:	4b17      	ldr	r3, [pc, #92]	; (800b6d4 <eth_read_phy+0x70>)
 800b676:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b67a:	4a16      	ldr	r2, [pc, #88]	; (800b6d4 <eth_read_phy+0x70>)
 800b67c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b680:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 800b684:	4b13      	ldr	r3, [pc, #76]	; (800b6d4 <eth_read_phy+0x70>)
 800b686:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b68a:	79fb      	ldrb	r3, [r7, #7]
 800b68c:	0559      	lsls	r1, r3, #21
 800b68e:	79bb      	ldrb	r3, [r7, #6]
 800b690:	041b      	lsls	r3, r3, #16
 800b692:	430b      	orrs	r3, r1
 800b694:	4313      	orrs	r3, r2
 800b696:	4a0f      	ldr	r2, [pc, #60]	; (800b6d4 <eth_read_phy+0x70>)
 800b698:	f043 030c 	orr.w	r3, r3, #12
 800b69c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= BIT(0);
 800b6a0:	4b0c      	ldr	r3, [pc, #48]	; (800b6d4 <eth_read_phy+0x70>)
 800b6a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b6a6:	4a0b      	ldr	r2, [pc, #44]	; (800b6d4 <eth_read_phy+0x70>)
 800b6a8:	f043 0301 	orr.w	r3, r3, #1
 800b6ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  while (ETH->MACMDIOAR & BIT(0)) (void) 0;
 800b6b0:	bf00      	nop
 800b6b2:	4b08      	ldr	r3, [pc, #32]	; (800b6d4 <eth_read_phy+0x70>)
 800b6b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b6b8:	f003 0301 	and.w	r3, r3, #1
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d1f8      	bne.n	800b6b2 <eth_read_phy+0x4e>
  return ETH->MACMDIODR;
 800b6c0:	4b04      	ldr	r3, [pc, #16]	; (800b6d4 <eth_read_phy+0x70>)
 800b6c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	370c      	adds	r7, #12
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d0:	4770      	bx	lr
 800b6d2:	bf00      	nop
 800b6d4:	40028000 	.word	0x40028000

0800b6d8 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	4603      	mov	r3, r0
 800b6e0:	603a      	str	r2, [r7, #0]
 800b6e2:	71fb      	strb	r3, [r7, #7]
 800b6e4:	460b      	mov	r3, r1
 800b6e6:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIODR = val;
 800b6e8:	4a18      	ldr	r2, [pc, #96]	; (800b74c <eth_write_phy+0x74>)
 800b6ea:	683b      	ldr	r3, [r7, #0]
 800b6ec:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 800b6f0:	4b16      	ldr	r3, [pc, #88]	; (800b74c <eth_write_phy+0x74>)
 800b6f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b6f6:	4a15      	ldr	r2, [pc, #84]	; (800b74c <eth_write_phy+0x74>)
 800b6f8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b6fc:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 800b700:	4b12      	ldr	r3, [pc, #72]	; (800b74c <eth_write_phy+0x74>)
 800b702:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b706:	79fb      	ldrb	r3, [r7, #7]
 800b708:	0559      	lsls	r1, r3, #21
 800b70a:	79bb      	ldrb	r3, [r7, #6]
 800b70c:	041b      	lsls	r3, r3, #16
 800b70e:	430b      	orrs	r3, r1
 800b710:	4313      	orrs	r3, r2
 800b712:	4a0e      	ldr	r2, [pc, #56]	; (800b74c <eth_write_phy+0x74>)
 800b714:	f043 0304 	orr.w	r3, r3, #4
 800b718:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= BIT(0);
 800b71c:	4b0b      	ldr	r3, [pc, #44]	; (800b74c <eth_write_phy+0x74>)
 800b71e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b722:	4a0a      	ldr	r2, [pc, #40]	; (800b74c <eth_write_phy+0x74>)
 800b724:	f043 0301 	orr.w	r3, r3, #1
 800b728:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  while (ETH->MACMDIOAR & BIT(0)) (void) 0;
 800b72c:	bf00      	nop
 800b72e:	4b07      	ldr	r3, [pc, #28]	; (800b74c <eth_write_phy+0x74>)
 800b730:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b734:	f003 0301 	and.w	r3, r3, #1
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d1f8      	bne.n	800b72e <eth_write_phy+0x56>
}
 800b73c:	bf00      	nop
 800b73e:	bf00      	nop
 800b740:	370c      	adds	r7, #12
 800b742:	46bd      	mov	sp, r7
 800b744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	40028000 	.word	0x40028000

0800b750 <get_hclk>:

static uint32_t get_hclk(void) {
 800b750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b754:	b091      	sub	sp, #68	; 0x44
 800b756:	af00      	add	r7, sp, #0
        APB1HRSTR, APB2RSTR, APB4RSTR, GCR, RESERVED8, D3AMR, RESERVED11[9],
        RSR, AHB3ENR, AHB1ENR, AHB2ENR, AHB4ENR, APB3ENR, APB1LENR, APB1HENR,
        APB2ENR, APB4ENR, RESERVED12, AHB3LPENR, AHB1LPENR, AHB2LPENR,
        AHB4LPENR, APB3LPENR, APB1LLPENR, APB1HLPENR, APB2LPENR, APB4LPENR,
        RESERVED13[4];
  } *rcc = ((struct rcc *) (0x40000000 + 0x18020000 + 0x4400));
 800b758:	4e60      	ldr	r6, [pc, #384]	; (800b8dc <get_hclk+0x18c>)
 800b75a:	63be      	str	r6, [r7, #56]	; 0x38
  uint32_t clk = 0, hsi = 64000000 /* 64 MHz */, hse = 8000000 /* 8MHz */,
 800b75c:	2600      	movs	r6, #0
 800b75e:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b760:	4e5f      	ldr	r6, [pc, #380]	; (800b8e0 <get_hclk+0x190>)
 800b762:	637e      	str	r6, [r7, #52]	; 0x34
 800b764:	4e5f      	ldr	r6, [pc, #380]	; (800b8e4 <get_hclk+0x194>)
 800b766:	633e      	str	r6, [r7, #48]	; 0x30
           csi = 4000000 /* 4MHz */;
 800b768:	4e5f      	ldr	r6, [pc, #380]	; (800b8e8 <get_hclk+0x198>)
 800b76a:	62fe      	str	r6, [r7, #44]	; 0x2c
  unsigned int sel = (rcc->CFGR & (7 << 3)) >> 3;
 800b76c:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b76e:	6936      	ldr	r6, [r6, #16]
 800b770:	08f6      	lsrs	r6, r6, #3
 800b772:	f006 0607 	and.w	r6, r6, #7
 800b776:	62be      	str	r6, [r7, #40]	; 0x28

  if (sel == 1) {
 800b778:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800b77a:	2e01      	cmp	r6, #1
 800b77c:	d102      	bne.n	800b784 <get_hclk+0x34>
    clk = csi;
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b782:	e068      	b.n	800b856 <get_hclk+0x106>
  } else if (sel == 2) {
 800b784:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800b786:	2e02      	cmp	r6, #2
 800b788:	d102      	bne.n	800b790 <get_hclk+0x40>
    clk = hse;
 800b78a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b78e:	e062      	b.n	800b856 <get_hclk+0x106>
  } else if (sel == 3) {
 800b790:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800b792:	2e03      	cmp	r6, #3
 800b794:	d157      	bne.n	800b846 <get_hclk+0xf6>
    uint32_t vco, m, n, p;
    unsigned int src = (rcc->PLLCKSELR & (3 << 0)) >> 0;
 800b796:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b798:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800b79a:	f006 0603 	and.w	r6, r6, #3
 800b79e:	627e      	str	r6, [r7, #36]	; 0x24
    m = ((rcc->PLLCKSELR & (0x3F << 4)) >> 4);
 800b7a0:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b7a2:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800b7a4:	0936      	lsrs	r6, r6, #4
 800b7a6:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800b7aa:	623e      	str	r6, [r7, #32]
    n = ((rcc->PLL1DIVR & (0x1FF << 0)) >> 0) + 1 +
 800b7ac:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b7ae:	6b36      	ldr	r6, [r6, #48]	; 0x30
 800b7b0:	f3c6 0c08 	ubfx	ip, r6, #0, #9
        ((rcc->PLLCFGR & BIT(0)) ? 1 : 0);  // round-up in fractional mode
 800b7b4:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b7b6:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 800b7b8:	f006 0601 	and.w	r6, r6, #1
    n = ((rcc->PLL1DIVR & (0x1FF << 0)) >> 0) + 1 +
 800b7bc:	4466      	add	r6, ip
 800b7be:	3601      	adds	r6, #1
 800b7c0:	61fe      	str	r6, [r7, #28]
    p = ((rcc->PLL1DIVR & (0x7F << 9)) >> 9) + 1;
 800b7c2:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b7c4:	6b36      	ldr	r6, [r6, #48]	; 0x30
 800b7c6:	0a76      	lsrs	r6, r6, #9
 800b7c8:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 800b7cc:	3601      	adds	r6, #1
 800b7ce:	61be      	str	r6, [r7, #24]
    if (src == 1) {
 800b7d0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800b7d2:	2e01      	cmp	r6, #1
 800b7d4:	d102      	bne.n	800b7dc <get_hclk+0x8c>
      clk = csi;
 800b7d6:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800b7d8:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b7da:	e00f      	b.n	800b7fc <get_hclk+0xac>
    } else if (src == 2) {
 800b7dc:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800b7de:	2e02      	cmp	r6, #2
 800b7e0:	d102      	bne.n	800b7e8 <get_hclk+0x98>
      clk = hse;
 800b7e2:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800b7e4:	63fe      	str	r6, [r7, #60]	; 0x3c
 800b7e6:	e009      	b.n	800b7fc <get_hclk+0xac>
    } else {
      clk = hsi;
 800b7e8:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800b7ea:	63fe      	str	r6, [r7, #60]	; 0x3c
      clk >>= ((rcc->CR & 3) >> 3);
 800b7ec:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800b7ee:	6836      	ldr	r6, [r6, #0]
 800b7f0:	f04f 0c00 	mov.w	ip, #0
 800b7f4:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800b7f6:	fa26 f60c 	lsr.w	r6, r6, ip
 800b7fa:	63fe      	str	r6, [r7, #60]	; 0x3c
    }
    vco = (uint32_t) ((uint64_t) clk * n / m);
 800b7fc:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800b7fe:	f04f 0c00 	mov.w	ip, #0
 800b802:	4634      	mov	r4, r6
 800b804:	4665      	mov	r5, ip
 800b806:	69fe      	ldr	r6, [r7, #28]
 800b808:	f04f 0c00 	mov.w	ip, #0
 800b80c:	4632      	mov	r2, r6
 800b80e:	4663      	mov	r3, ip
 800b810:	fb02 fc05 	mul.w	ip, r2, r5
 800b814:	fb04 f603 	mul.w	r6, r4, r3
 800b818:	4466      	add	r6, ip
 800b81a:	fba4 0102 	umull	r0, r1, r4, r2
 800b81e:	1873      	adds	r3, r6, r1
 800b820:	4619      	mov	r1, r3
 800b822:	6a3b      	ldr	r3, [r7, #32]
 800b824:	2200      	movs	r2, #0
 800b826:	4698      	mov	r8, r3
 800b828:	4691      	mov	r9, r2
 800b82a:	4642      	mov	r2, r8
 800b82c:	464b      	mov	r3, r9
 800b82e:	f7f4 ffe3 	bl	80007f8 <__aeabi_uldivmod>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	4613      	mov	r3, r2
 800b838:	617b      	str	r3, [r7, #20]
    clk = vco / p;
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	69bb      	ldr	r3, [r7, #24]
 800b83e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b842:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b844:	e007      	b.n	800b856 <get_hclk+0x106>
  } else {
    clk = hsi;
 800b846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b848:	63fb      	str	r3, [r7, #60]	; 0x3c
    clk >>= ((rcc->CR & 3) >> 3);
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2200      	movs	r2, #0
 800b850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b852:	40d3      	lsrs	r3, r2
 800b854:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  const uint8_t cptab[12] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 800b856:	4a25      	ldr	r2, [pc, #148]	; (800b8ec <get_hclk+0x19c>)
 800b858:	463b      	mov	r3, r7
 800b85a:	ca07      	ldmia	r2, {r0, r1, r2}
 800b85c:	c303      	stmia	r3!, {r0, r1}
 800b85e:	701a      	strb	r2, [r3, #0]
 800b860:	f107 0309 	add.w	r3, r7, #9
 800b864:	2200      	movs	r2, #0
 800b866:	801a      	strh	r2, [r3, #0]
 800b868:	709a      	strb	r2, [r3, #2]
  uint32_t d1cpre = (rcc->D1CFGR & (0x0F << 8)) >> 8;
 800b86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b86c:	699b      	ldr	r3, [r3, #24]
 800b86e:	0a1b      	lsrs	r3, r3, #8
 800b870:	f003 030f 	and.w	r3, r3, #15
 800b874:	613b      	str	r3, [r7, #16]
  if (d1cpre >= 8) clk >>= cptab[d1cpre - 8];
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	2b07      	cmp	r3, #7
 800b87a:	d909      	bls.n	800b890 <get_hclk+0x140>
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	3b08      	subs	r3, #8
 800b880:	3340      	adds	r3, #64	; 0x40
 800b882:	443b      	add	r3, r7
 800b884:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800b888:	461a      	mov	r2, r3
 800b88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b88c:	40d3      	lsrs	r3, r2
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
  MG_DEBUG(("D1 CLK: %u", clk));
 800b890:	4b17      	ldr	r3, [pc, #92]	; (800b8f0 <get_hclk+0x1a0>)
 800b892:	f641 3278 	movw	r2, #7032	; 0x1b78
 800b896:	4917      	ldr	r1, [pc, #92]	; (800b8f4 <get_hclk+0x1a4>)
 800b898:	2003      	movs	r0, #3
 800b89a:	f7fb fc9f 	bl	80071dc <mg_log_prefix>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <get_hclk+0x15c>
 800b8a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b8a6:	4814      	ldr	r0, [pc, #80]	; (800b8f8 <get_hclk+0x1a8>)
 800b8a8:	f7fb fcf2 	bl	8007290 <mg_log>
  uint32_t hpre = (rcc->D1CFGR & (0x0F << 0)) >> 0;
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	699b      	ldr	r3, [r3, #24]
 800b8b0:	f003 030f 	and.w	r3, r3, #15
 800b8b4:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	2b07      	cmp	r3, #7
 800b8ba:	d801      	bhi.n	800b8c0 <get_hclk+0x170>
 800b8bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8be:	e008      	b.n	800b8d2 <get_hclk+0x182>
  return ((uint32_t) clk) >> cptab[hpre - 8];
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3b08      	subs	r3, #8
 800b8c4:	3340      	adds	r3, #64	; 0x40
 800b8c6:	443b      	add	r3, r7
 800b8c8:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8d0:	40d3      	lsrs	r3, r2
}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3744      	adds	r7, #68	; 0x44
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b8dc:	58024400 	.word	0x58024400
 800b8e0:	03d09000 	.word	0x03d09000
 800b8e4:	007a1200 	.word	0x007a1200
 800b8e8:	003d0900 	.word	0x003d0900
 800b8ec:	0801771c 	.word	0x0801771c
 800b8f0:	080184d4 	.word	0x080184d4
 800b8f4:	0801645c 	.word	0x0801645c
 800b8f8:	08017710 	.word	0x08017710

0800b8fc <guess_mdc_cr>:
//  series of dividers to keep the MDC clock safely below 2.5MHz. We guess a
//  divider setting based on HCLK with some drift. If the user uses a different
//  clock from our defaults, needs to set the macros on top. Valid for
//  STM32H74xxx/75xxx (58.11.4)(4.5% worst case drift)(CSI clock has a 7.5 %
//  worst case drift @ max temp)
static int guess_mdc_cr(void) {
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af00      	add	r7, sp, #0
  const uint8_t crs[] = {2, 3, 0, 1, 4, 5};  // ETH->MACMDIOAR::CR values
 800b902:	4a2a      	ldr	r2, [pc, #168]	; (800b9ac <guess_mdc_cr+0xb0>)
 800b904:	f107 030c 	add.w	r3, r7, #12
 800b908:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b90c:	6018      	str	r0, [r3, #0]
 800b90e:	3304      	adds	r3, #4
 800b910:	8019      	strh	r1, [r3, #0]
  const uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 800b912:	4a27      	ldr	r2, [pc, #156]	; (800b9b0 <guess_mdc_cr+0xb4>)
 800b914:	1d3b      	adds	r3, r7, #4
 800b916:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b91a:	6018      	str	r0, [r3, #0]
 800b91c:	3304      	adds	r3, #4
 800b91e:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                        // Guess system HCLK
 800b920:	f7ff ff16 	bl	800b750 <get_hclk>
 800b924:	6178      	str	r0, [r7, #20]
  int result = -1;                                   // Invalid CR value
 800b926:	f04f 33ff 	mov.w	r3, #4294967295
 800b92a:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < 6; i++) {
 800b92c:	2300      	movs	r3, #0
 800b92e:	61bb      	str	r3, [r7, #24]
 800b930:	e014      	b.n	800b95c <guess_mdc_cr+0x60>
    if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 800b932:	1d3a      	adds	r2, r7, #4
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	4413      	add	r3, r2
 800b938:	781b      	ldrb	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b942:	4a1c      	ldr	r2, [pc, #112]	; (800b9b4 <guess_mdc_cr+0xb8>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d806      	bhi.n	800b956 <guess_mdc_cr+0x5a>
      result = crs[i];
 800b948:	f107 020c 	add.w	r2, r7, #12
 800b94c:	69bb      	ldr	r3, [r7, #24]
 800b94e:	4413      	add	r3, r2
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	61fb      	str	r3, [r7, #28]
      break;
 800b954:	e005      	b.n	800b962 <guess_mdc_cr+0x66>
  for (int i = 0; i < 6; i++) {
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	3301      	adds	r3, #1
 800b95a:	61bb      	str	r3, [r7, #24]
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	2b05      	cmp	r3, #5
 800b960:	dde7      	ble.n	800b932 <guess_mdc_cr+0x36>
    }
  }
  if (result < 0) MG_ERROR(("HCLK too high"));
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	2b00      	cmp	r3, #0
 800b966:	da0c      	bge.n	800b982 <guess_mdc_cr+0x86>
 800b968:	4b13      	ldr	r3, [pc, #76]	; (800b9b8 <guess_mdc_cr+0xbc>)
 800b96a:	f641 3292 	movw	r2, #7058	; 0x1b92
 800b96e:	4913      	ldr	r1, [pc, #76]	; (800b9bc <guess_mdc_cr+0xc0>)
 800b970:	2001      	movs	r0, #1
 800b972:	f7fb fc33 	bl	80071dc <mg_log_prefix>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <guess_mdc_cr+0x86>
 800b97c:	4810      	ldr	r0, [pc, #64]	; (800b9c0 <guess_mdc_cr+0xc4>)
 800b97e:	f7fb fc87 	bl	8007290 <mg_log>
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <guess_mdc_cr+0xbc>)
 800b984:	f641 3293 	movw	r2, #7059	; 0x1b93
 800b988:	490c      	ldr	r1, [pc, #48]	; (800b9bc <guess_mdc_cr+0xc0>)
 800b98a:	2003      	movs	r0, #3
 800b98c:	f7fb fc26 	bl	80071dc <mg_log_prefix>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d004      	beq.n	800b9a0 <guess_mdc_cr+0xa4>
 800b996:	69fa      	ldr	r2, [r7, #28]
 800b998:	6979      	ldr	r1, [r7, #20]
 800b99a:	480a      	ldr	r0, [pc, #40]	; (800b9c4 <guess_mdc_cr+0xc8>)
 800b99c:	f7fb fc78 	bl	8007290 <mg_log>
  return result;
 800b9a0:	69fb      	ldr	r3, [r7, #28]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3720      	adds	r7, #32
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	0801774c 	.word	0x0801774c
 800b9b0:	08017754 	.word	0x08017754
 800b9b4:	00243d58 	.word	0x00243d58
 800b9b8:	080184e0 	.word	0x080184e0
 800b9bc:	0801645c 	.word	0x0801645c
 800b9c0:	08017728 	.word	0x08017728
 800b9c4:	08017738 	.word	0x08017738

0800b9c8 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b086      	sub	sp, #24
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d4:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 800b9d6:	4a82      	ldr	r2, [pc, #520]	; (800bbe0 <mg_tcpip_driver_stm32h_init+0x218>)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800b9dc:	2300      	movs	r3, #0
 800b9de:	617b      	str	r3, [r7, #20]
 800b9e0:	e017      	b.n	800ba12 <mg_tcpip_driver_stm32h_init+0x4a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	f240 6204 	movw	r2, #1540	; 0x604
 800b9e8:	fb02 f303 	mul.w	r3, r2, r3
 800b9ec:	4a7d      	ldr	r2, [pc, #500]	; (800bbe4 <mg_tcpip_driver_stm32h_init+0x21c>)
 800b9ee:	4413      	add	r3, r2
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4a7d      	ldr	r2, [pc, #500]	; (800bbe8 <mg_tcpip_driver_stm32h_init+0x220>)
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	011b      	lsls	r3, r3, #4
 800b9f8:	4413      	add	r3, r2
 800b9fa:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = BIT(31) | BIT(30) | BIT(24);        // OWN, IOC, BUF1V
 800b9fc:	4a7a      	ldr	r2, [pc, #488]	; (800bbe8 <mg_tcpip_driver_stm32h_init+0x220>)
 800b9fe:	697b      	ldr	r3, [r7, #20]
 800ba00:	011b      	lsls	r3, r3, #4
 800ba02:	4413      	add	r3, r2
 800ba04:	330c      	adds	r3, #12
 800ba06:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800ba0a:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	3301      	adds	r3, #1
 800ba10:	617b      	str	r3, [r7, #20]
 800ba12:	697b      	ldr	r3, [r7, #20]
 800ba14:	2b03      	cmp	r3, #3
 800ba16:	dde4      	ble.n	800b9e2 <mg_tcpip_driver_stm32h_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800ba18:	2300      	movs	r3, #0
 800ba1a:	613b      	str	r3, [r7, #16]
 800ba1c:	e00f      	b.n	800ba3e <mg_tcpip_driver_stm32h_init+0x76>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	f240 6204 	movw	r2, #1540	; 0x604
 800ba24:	fb02 f303 	mul.w	r3, r2, r3
 800ba28:	4a70      	ldr	r2, [pc, #448]	; (800bbec <mg_tcpip_driver_stm32h_init+0x224>)
 800ba2a:	4413      	add	r3, r2
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	4a70      	ldr	r2, [pc, #448]	; (800bbf0 <mg_tcpip_driver_stm32h_init+0x228>)
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	011b      	lsls	r3, r3, #4
 800ba34:	4413      	add	r3, r2
 800ba36:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	613b      	str	r3, [r7, #16]
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	ddec      	ble.n	800ba1e <mg_tcpip_driver_stm32h_init+0x56>
  }

  ETH->DMAMR |= BIT(0);                         // Software reset
 800ba44:	4b6b      	ldr	r3, [pc, #428]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800ba46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a69      	ldr	r2, [pc, #420]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800ba4e:	f043 0301 	orr.w	r3, r3, #1
 800ba52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ba56:	6013      	str	r3, [r2, #0]
  while ((ETH->DMAMR & BIT(0)) != 0) (void) 0;  // Wait until done
 800ba58:	bf00      	nop
 800ba5a:	4b66      	ldr	r3, [pc, #408]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800ba5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d1f7      	bne.n	800ba5a <mg_tcpip_driver_stm32h_init+0x92>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d003      	beq.n	800ba78 <mg_tcpip_driver_stm32h_init+0xb0>
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	da03      	bge.n	800ba80 <mg_tcpip_driver_stm32h_init+0xb8>
 800ba78:	f7ff ff40 	bl	800b8fc <guess_mdc_cr>
 800ba7c:	4603      	mov	r3, r0
 800ba7e:	e001      	b.n	800ba84 <mg_tcpip_driver_stm32h_init+0xbc>
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	60bb      	str	r3, [r7, #8]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	021b      	lsls	r3, r3, #8
 800ba8a:	4a5a      	ldr	r2, [pc, #360]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800ba8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ba90:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;     // use interrupt mode 0 (58.8.1) (reset value)
 800ba94:	4b57      	ldr	r3, [pc, #348]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800ba96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= BIT(12);  // AAL NOTE(scaprile): is this actually needed
 800baa0:	4b54      	ldr	r3, [pc, #336]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800baa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baa6:	685b      	ldr	r3, [r3, #4]
 800baa8:	4a52      	ldr	r2, [pc, #328]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800baaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800baae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bab2:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;        // Do not enable additional irq sources (reset value)
 800bab4:	4b4f      	ldr	r3, [pc, #316]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  ETH->MACTFCR = BIT(7);  // Disable zero-quanta pause
 800babc:	4b4d      	ldr	r3, [pc, #308]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800babe:	2280      	movs	r2, #128	; 0x80
 800bac0:	671a      	str	r2, [r3, #112]	; 0x70
  // ETH->MACPFR = BIT(31);  // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));  // Reset PHY
 800bac2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800bac6:	2100      	movs	r1, #0
 800bac8:	2000      	movs	r0, #0
 800baca:	f7ff fe05 	bl	800b6d8 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));  // Set autonegotiation
 800bace:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bad2:	2100      	movs	r1, #0
 800bad4:	2000      	movs	r0, #0
 800bad6:	f7ff fdff 	bl	800b6d8 <eth_write_phy>
  ETH->DMACRDLAR =
 800bada:	4a46      	ldr	r2, [pc, #280]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 800badc:	4b42      	ldr	r3, [pc, #264]	; (800bbe8 <mg_tcpip_driver_stm32h_init+0x220>)
  ETH->DMACRDLAR =
 800bade:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bae2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 800bae6:	4b43      	ldr	r3, [pc, #268]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800baec:	461a      	mov	r2, r3
 800baee:	2303      	movs	r3, #3
 800baf0:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
  ETH->DMACRDTPR =
 800baf4:	4a3f      	ldr	r2, [pc, #252]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 800baf6:	4b40      	ldr	r3, [pc, #256]	; (800bbf8 <mg_tcpip_driver_stm32h_init+0x230>)
  ETH->DMACRDTPR =
 800baf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bafc:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 800bb00:	4a3c      	ldr	r2, [pc, #240]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 800bb02:	4b3b      	ldr	r3, [pc, #236]	; (800bbf0 <mg_tcpip_driver_stm32h_init+0x228>)
  ETH->DMACTDLAR =
 800bb04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb08:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 800bb0c:	4b39      	ldr	r3, [pc, #228]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb12:	461a      	mov	r2, r3
 800bb14:	2303      	movs	r3, #3
 800bb16:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
  ETH->DMACTDTPR =
 800bb1a:	4a36      	ldr	r2, [pc, #216]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 800bb1c:	4b34      	ldr	r3, [pc, #208]	; (800bbf0 <mg_tcpip_driver_stm32h_init+0x228>)
  ETH->DMACTDTPR =
 800bb1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb22:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 800bb26:	4b33      	ldr	r3, [pc, #204]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	2300      	movs	r3, #0
 800bb30:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  ETH->DMACIER = BIT(6) | BIT(15);  // RIE, NIE
 800bb34:	4b2f      	ldr	r3, [pc, #188]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	f248 0340 	movw	r3, #32832	; 0x8040
 800bb40:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
  ETH->MACCR = BIT(0) | BIT(1) | BIT(13) | BIT(14) |
 800bb44:	4b2b      	ldr	r3, [pc, #172]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb46:	f24e 0203 	movw	r2, #57347	; 0xe003
 800bb4a:	601a      	str	r2, [r3, #0]
               BIT(15);     // RE, TE, Duplex, Fast, Reserved
  ETH->MTLTQOMR |= BIT(1);  // TSF
 800bb4c:	4b29      	ldr	r3, [pc, #164]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb4e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800bb52:	4a28      	ldr	r2, [pc, #160]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb54:	f043 0302 	orr.w	r3, r3, #2
 800bb58:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  ETH->MTLRQOMR |= BIT(5);  // RSF
 800bb5c:	4b25      	ldr	r3, [pc, #148]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb5e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800bb62:	4a24      	ldr	r2, [pc, #144]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb64:	f043 0320 	orr.w	r3, r3, #32
 800bb68:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
  ETH->DMACTCR |= BIT(0);   // ST
 800bb6c:	4b21      	ldr	r3, [pc, #132]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb72:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bb76:	4a1f      	ldr	r2, [pc, #124]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb78:	f043 0301 	orr.w	r3, r3, #1
 800bb7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb80:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  ETH->DMACRCR |= BIT(0);   // SR
 800bb84:	4b1b      	ldr	r3, [pc, #108]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bb8a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800bb8e:	4a19      	ldr	r2, [pc, #100]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bb90:	f043 0301 	orr.w	r3, r3, #1
 800bb94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bb98:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	795b      	ldrb	r3, [r3, #5]
 800bba0:	021b      	lsls	r3, r3, #8
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	7912      	ldrb	r2, [r2, #4]
 800bba6:	4611      	mov	r1, r2
 800bba8:	4a12      	ldr	r2, [pc, #72]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
 800bbaa:	430b      	orrs	r3, r1
 800bbac:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	78db      	ldrb	r3, [r3, #3]
 800bbb4:	061b      	lsls	r3, r3, #24
 800bbb6:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	789b      	ldrb	r3, [r3, #2]
 800bbbc:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800bbbe:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	785b      	ldrb	r3, [r3, #1]
 800bbc4:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 800bbc6:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 800bbc8:	687a      	ldr	r2, [r7, #4]
 800bbca:	7812      	ldrb	r2, [r2, #0]
 800bbcc:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800bbce:	4a09      	ldr	r2, [pc, #36]	; (800bbf4 <mg_tcpip_driver_stm32h_init+0x22c>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 800bbd0:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800bbd2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  return true;
 800bbd6:	2301      	movs	r3, #1
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3718      	adds	r7, #24
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}
 800bbe0:	24003628 	.word	0x24003628
 800bbe4:	24000608 	.word	0x24000608
 800bbe8:	24000588 	.word	0x24000588
 800bbec:	24001e18 	.word	0x24001e18
 800bbf0:	240005c8 	.word	0x240005c8
 800bbf4:	40028000 	.word	0x40028000
 800bbf8:	240005b8 	.word	0x240005b8

0800bbfc <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b088      	sub	sp, #32
 800bc00:	af02      	add	r7, sp, #8
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	f240 6204 	movw	r2, #1540	; 0x604
 800bc0e:	4293      	cmp	r3, r2
 800bc10:	d911      	bls.n	800bc36 <mg_tcpip_driver_stm32h_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 800bc12:	4b59      	ldr	r3, [pc, #356]	; (800bd78 <mg_tcpip_driver_stm32h_tx+0x17c>)
 800bc14:	f641 32d7 	movw	r2, #7127	; 0x1bd7
 800bc18:	4958      	ldr	r1, [pc, #352]	; (800bd7c <mg_tcpip_driver_stm32h_tx+0x180>)
 800bc1a:	2001      	movs	r0, #1
 800bc1c:	f7fb fade 	bl	80071dc <mg_log_prefix>
 800bc20:	4603      	mov	r3, r0
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d004      	beq.n	800bc30 <mg_tcpip_driver_stm32h_tx+0x34>
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4855      	ldr	r0, [pc, #340]	; (800bd80 <mg_tcpip_driver_stm32h_tx+0x184>)
 800bc2c:	f7fb fb30 	bl	8007290 <mg_log>
    len = 0;  // Frame is too big
 800bc30:	2300      	movs	r3, #0
 800bc32:	60bb      	str	r3, [r7, #8]
 800bc34:	e084      	b.n	800bd40 <mg_tcpip_driver_stm32h_tx+0x144>
  } else if ((s_txdesc[s_txno][3] & BIT(31))) {
 800bc36:	4b53      	ldr	r3, [pc, #332]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a53      	ldr	r2, [pc, #332]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bc3c:	011b      	lsls	r3, r3, #4
 800bc3e:	4413      	add	r3, r2
 800bc40:	330c      	adds	r3, #12
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	da41      	bge.n	800bccc <mg_tcpip_driver_stm32h_tx+0xd0>
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 800bc48:	4b4b      	ldr	r3, [pc, #300]	; (800bd78 <mg_tcpip_driver_stm32h_tx+0x17c>)
 800bc4a:	f641 32da 	movw	r2, #7130	; 0x1bda
 800bc4e:	494b      	ldr	r1, [pc, #300]	; (800bd7c <mg_tcpip_driver_stm32h_tx+0x180>)
 800bc50:	2001      	movs	r0, #1
 800bc52:	f7fb fac3 	bl	80071dc <mg_log_prefix>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d017      	beq.n	800bc8c <mg_tcpip_driver_stm32h_tx+0x90>
 800bc5c:	4b49      	ldr	r3, [pc, #292]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bc5e:	6819      	ldr	r1, [r3, #0]
 800bc60:	4b48      	ldr	r3, [pc, #288]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a48      	ldr	r2, [pc, #288]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bc66:	011b      	lsls	r3, r3, #4
 800bc68:	4413      	add	r3, r2
 800bc6a:	330c      	adds	r3, #12
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	4b47      	ldr	r3, [pc, #284]	; (800bd8c <mg_tcpip_driver_stm32h_tx+0x190>)
 800bc70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc74:	f8d3 0160 	ldr.w	r0, [r3, #352]	; 0x160
 800bc78:	4b44      	ldr	r3, [pc, #272]	; (800bd8c <mg_tcpip_driver_stm32h_tx+0x190>)
 800bc7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800bc82:	9300      	str	r3, [sp, #0]
 800bc84:	4603      	mov	r3, r0
 800bc86:	4842      	ldr	r0, [pc, #264]	; (800bd90 <mg_tcpip_driver_stm32h_tx+0x194>)
 800bc88:	f7fb fb02 	bl	8007290 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	617b      	str	r3, [r7, #20]
 800bc90:	e016      	b.n	800bcc0 <mg_tcpip_driver_stm32h_tx+0xc4>
 800bc92:	4b39      	ldr	r3, [pc, #228]	; (800bd78 <mg_tcpip_driver_stm32h_tx+0x17c>)
 800bc94:	f641 32dc 	movw	r2, #7132	; 0x1bdc
 800bc98:	4938      	ldr	r1, [pc, #224]	; (800bd7c <mg_tcpip_driver_stm32h_tx+0x180>)
 800bc9a:	2001      	movs	r0, #1
 800bc9c:	f7fb fa9e 	bl	80071dc <mg_log_prefix>
 800bca0:	4603      	mov	r3, r0
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d009      	beq.n	800bcba <mg_tcpip_driver_stm32h_tx+0xbe>
 800bca6:	4a38      	ldr	r2, [pc, #224]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	011b      	lsls	r3, r3, #4
 800bcac:	4413      	add	r3, r2
 800bcae:	330c      	adds	r3, #12
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	4837      	ldr	r0, [pc, #220]	; (800bd94 <mg_tcpip_driver_stm32h_tx+0x198>)
 800bcb6:	f7fb faeb 	bl	8007290 <mg_log>
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	3301      	adds	r3, #1
 800bcbe:	617b      	str	r3, [r7, #20]
 800bcc0:	697b      	ldr	r3, [r7, #20]
 800bcc2:	2b03      	cmp	r3, #3
 800bcc4:	dde5      	ble.n	800bc92 <mg_tcpip_driver_stm32h_tx+0x96>
    len = 0;  // All descriptors are busy, fail
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	60bb      	str	r3, [r7, #8]
 800bcca:	e039      	b.n	800bd40 <mg_tcpip_driver_stm32h_tx+0x144>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);        // Copy data
 800bccc:	4b2d      	ldr	r3, [pc, #180]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f240 6204 	movw	r2, #1540	; 0x604
 800bcd4:	fb02 f303 	mul.w	r3, r2, r3
 800bcd8:	4a2f      	ldr	r2, [pc, #188]	; (800bd98 <mg_tcpip_driver_stm32h_tx+0x19c>)
 800bcda:	4413      	add	r3, r2
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	68f9      	ldr	r1, [r7, #12]
 800bce0:	4618      	mov	r0, r3
 800bce2:	f009 fd9f 	bl	8015824 <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;     // Set data len
 800bce6:	4b27      	ldr	r3, [pc, #156]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a27      	ldr	r2, [pc, #156]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bcec:	011b      	lsls	r3, r3, #4
 800bcee:	4413      	add	r3, r2
 800bcf0:	3308      	adds	r3, #8
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = BIT(28) | BIT(29);  // FD, LD
 800bcf6:	4b23      	ldr	r3, [pc, #140]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	4a23      	ldr	r2, [pc, #140]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bcfc:	011b      	lsls	r3, r3, #4
 800bcfe:	4413      	add	r3, r2
 800bd00:	330c      	adds	r3, #12
 800bd02:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800bd06:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= BIT(31);           // Set OWN bit - let DMA take over
 800bd08:	4b1e      	ldr	r3, [pc, #120]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	4a1e      	ldr	r2, [pc, #120]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bd0e:	011b      	lsls	r3, r3, #4
 800bd10:	4413      	add	r3, r2
 800bd12:	330c      	adds	r3, #12
 800bd14:	681a      	ldr	r2, [r3, #0]
 800bd16:	4b1b      	ldr	r3, [pc, #108]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800bd1e:	491a      	ldr	r1, [pc, #104]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bd20:	011b      	lsls	r3, r3, #4
 800bd22:	440b      	add	r3, r1
 800bd24:	330c      	adds	r3, #12
 800bd26:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 800bd28:	4b16      	ldr	r3, [pc, #88]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	4a15      	ldr	r2, [pc, #84]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bd30:	6013      	str	r3, [r2, #0]
 800bd32:	4b14      	ldr	r3, [pc, #80]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b03      	cmp	r3, #3
 800bd38:	d902      	bls.n	800bd40 <mg_tcpip_driver_stm32h_tx+0x144>
 800bd3a:	4b12      	ldr	r3, [pc, #72]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= BIT(2) | BIT(1);  // Clear any prior TBU, TPS
 800bd40:	4b12      	ldr	r3, [pc, #72]	; (800bd8c <mg_tcpip_driver_stm32h_tx+0x190>)
 800bd42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd46:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800bd4a:	4a10      	ldr	r2, [pc, #64]	; (800bd8c <mg_tcpip_driver_stm32h_tx+0x190>)
 800bd4c:	f043 0306 	orr.w	r3, r3, #6
 800bd50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bd54:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 800bd58:	4b0a      	ldr	r3, [pc, #40]	; (800bd84 <mg_tcpip_driver_stm32h_tx+0x188>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	011b      	lsls	r3, r3, #4
 800bd5e:	4a0a      	ldr	r2, [pc, #40]	; (800bd88 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800bd60:	441a      	add	r2, r3
 800bd62:	4b0a      	ldr	r3, [pc, #40]	; (800bd8c <mg_tcpip_driver_stm32h_tx+0x190>)
 800bd64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd68:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  return len;
 800bd6c:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 800bd6e:	4618      	mov	r0, r3
 800bd70:	3718      	adds	r7, #24
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}
 800bd76:	bf00      	nop
 800bd78:	080184f0 	.word	0x080184f0
 800bd7c:	0801645c 	.word	0x0801645c
 800bd80:	0801775c 	.word	0x0801775c
 800bd84:	2400362c 	.word	0x2400362c
 800bd88:	240005c8 	.word	0x240005c8
 800bd8c:	40028000 	.word	0x40028000
 800bd90:	08017770 	.word	0x08017770
 800bd94:	08017798 	.word	0x08017798
 800bd98:	24001e18 	.word	0x24001e18

0800bd9c <mg_tcpip_driver_stm32h_up>:

static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {
 800bd9c:	b580      	push	{r7, lr}
 800bd9e:	b086      	sub	sp, #24
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 800bda4:	2101      	movs	r1, #1
 800bda6:	2000      	movs	r0, #0
 800bda8:	f7ff fc5c 	bl	800b664 <eth_read_phy>
 800bdac:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	089b      	lsrs	r3, r3, #2
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	bf14      	ite	ne
 800bdba:	2301      	movne	r3, #1
 800bdbc:	2300      	moveq	r3, #0
 800bdbe:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	d13f      	bne.n	800be4a <mg_tcpip_driver_stm32h_up+0xae>
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d03c      	beq.n	800be4a <mg_tcpip_driver_stm32h_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 800bdd0:	211f      	movs	r1, #31
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	f7ff fc46 	bl	800b664 <eth_read_phy>
 800bdd8:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(13);  // 100M, Full-duplex
 800bdda:	4b1e      	ldr	r3, [pc, #120]	; (800be54 <mg_tcpip_driver_stm32h_up+0xb8>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800bde2:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 800bde4:	68bb      	ldr	r3, [r7, #8]
 800bde6:	f003 0308 	and.w	r3, r3, #8
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d103      	bne.n	800bdf6 <mg_tcpip_driver_stm32h_up+0x5a>
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdf4:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(13);      // Half-duplex
 800bdf6:	68bb      	ldr	r3, [r7, #8]
 800bdf8:	f003 0310 	and.w	r3, r3, #16
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d103      	bne.n	800be08 <mg_tcpip_driver_stm32h_up+0x6c>
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800be06:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 800be08:	4a12      	ldr	r2, [pc, #72]	; (800be54 <mg_tcpip_driver_stm32h_up+0xb8>)
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 800be0e:	4b12      	ldr	r3, [pc, #72]	; (800be58 <mg_tcpip_driver_stm32h_up+0xbc>)
 800be10:	f641 32f4 	movw	r2, #7156	; 0x1bf4
 800be14:	4911      	ldr	r1, [pc, #68]	; (800be5c <mg_tcpip_driver_stm32h_up+0xc0>)
 800be16:	2003      	movs	r0, #3
 800be18:	f7fb f9e0 	bl	80071dc <mg_log_prefix>
 800be1c:	4603      	mov	r3, r0
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d013      	beq.n	800be4a <mg_tcpip_driver_stm32h_up+0xae>
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d001      	beq.n	800be30 <mg_tcpip_driver_stm32h_up+0x94>
 800be2c:	2164      	movs	r1, #100	; 0x64
 800be2e:	e000      	b.n	800be32 <mg_tcpip_driver_stm32h_up+0x96>
 800be30:	210a      	movs	r1, #10
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d001      	beq.n	800be40 <mg_tcpip_driver_stm32h_up+0xa4>
 800be3c:	4b08      	ldr	r3, [pc, #32]	; (800be60 <mg_tcpip_driver_stm32h_up+0xc4>)
 800be3e:	e000      	b.n	800be42 <mg_tcpip_driver_stm32h_up+0xa6>
 800be40:	4b08      	ldr	r3, [pc, #32]	; (800be64 <mg_tcpip_driver_stm32h_up+0xc8>)
 800be42:	461a      	mov	r2, r3
 800be44:	4808      	ldr	r0, [pc, #32]	; (800be68 <mg_tcpip_driver_stm32h_up+0xcc>)
 800be46:	f7fb fa23 	bl	8007290 <mg_log>
              maccr & BIT(13) ? "full" : "half"));
  }
  return up;
 800be4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3718      	adds	r7, #24
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}
 800be54:	40028000 	.word	0x40028000
 800be58:	0801850c 	.word	0x0801850c
 800be5c:	0801645c 	.word	0x0801645c
 800be60:	080177a0 	.word	0x080177a0
 800be64:	080177a8 	.word	0x080177a8
 800be68:	080177b0 	.word	0x080177b0

0800be6c <ETH_IRQHandler>:

void ETH_IRQHandler(void);
static uint32_t s_rxno;
void ETH_IRQHandler(void) {
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
  if (ETH->DMACSR & BIT(6)) {            // Frame received, loop
 800be72:	4b40      	ldr	r3, [pc, #256]	; (800bf74 <ETH_IRQHandler+0x108>)
 800be74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be78:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800be7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be80:	2b00      	cmp	r3, #0
 800be82:	d065      	beq.n	800bf50 <ETH_IRQHandler+0xe4>
    ETH->DMACSR = BIT(15) | BIT(6);      // Clear flag
 800be84:	4b3b      	ldr	r3, [pc, #236]	; (800bf74 <ETH_IRQHandler+0x108>)
 800be86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800be8a:	461a      	mov	r2, r3
 800be8c:	f248 0340 	movw	r3, #32832	; 0x8040
 800be90:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 800be94:	2300      	movs	r3, #0
 800be96:	607b      	str	r3, [r7, #4]
 800be98:	e055      	b.n	800bf46 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & BIT(31)) break;  // exit when done
 800be9a:	4b37      	ldr	r3, [pc, #220]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4a37      	ldr	r2, [pc, #220]	; (800bf7c <ETH_IRQHandler+0x110>)
 800bea0:	011b      	lsls	r3, r3, #4
 800bea2:	4413      	add	r3, r2
 800bea4:	330c      	adds	r3, #12
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	db50      	blt.n	800bf4e <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (BIT(28) | BIT(29))) ==
 800beac:	4b32      	ldr	r3, [pc, #200]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	4a32      	ldr	r2, [pc, #200]	; (800bf7c <ETH_IRQHandler+0x110>)
 800beb2:	011b      	lsls	r3, r3, #4
 800beb4:	4413      	add	r3, r2
 800beb6:	330c      	adds	r3, #12
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bec2:	d128      	bne.n	800bf16 <ETH_IRQHandler+0xaa>
           (BIT(28) | BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & BIT(15))) {  // skip partial/errored frames
 800bec4:	4b2c      	ldr	r3, [pc, #176]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a2c      	ldr	r2, [pc, #176]	; (800bf7c <ETH_IRQHandler+0x110>)
 800beca:	011b      	lsls	r3, r3, #4
 800becc:	4413      	add	r3, r2
 800bece:	330c      	adds	r3, #12
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
           (BIT(28) | BIT(29))) &&
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d11d      	bne.n	800bf16 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (BIT(15) - 1);
 800beda:	4b27      	ldr	r3, [pc, #156]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	4a27      	ldr	r2, [pc, #156]	; (800bf7c <ETH_IRQHandler+0x110>)
 800bee0:	011b      	lsls	r3, r3, #4
 800bee2:	4413      	add	r3, r2
 800bee4:	330c      	adds	r3, #12
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800beec:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 800beee:	4b22      	ldr	r3, [pc, #136]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f240 6204 	movw	r2, #1540	; 0x604
 800bef6:	fb02 f303 	mul.w	r3, r2, r3
 800befa:	4a21      	ldr	r2, [pc, #132]	; (800bf80 <ETH_IRQHandler+0x114>)
 800befc:	1898      	adds	r0, r3, r2
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	2b04      	cmp	r3, #4
 800bf02:	d902      	bls.n	800bf0a <ETH_IRQHandler+0x9e>
 800bf04:	683b      	ldr	r3, [r7, #0]
 800bf06:	3b04      	subs	r3, #4
 800bf08:	e000      	b.n	800bf0c <ETH_IRQHandler+0xa0>
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	4a1d      	ldr	r2, [pc, #116]	; (800bf84 <ETH_IRQHandler+0x118>)
 800bf0e:	6812      	ldr	r2, [r2, #0]
 800bf10:	4619      	mov	r1, r3
 800bf12:	f002 fa5d 	bl	800e3d0 <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] = BIT(31) | BIT(30) | BIT(24);  // OWN, IOC, BUF1V
 800bf16:	4b18      	ldr	r3, [pc, #96]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a18      	ldr	r2, [pc, #96]	; (800bf7c <ETH_IRQHandler+0x110>)
 800bf1c:	011b      	lsls	r3, r3, #4
 800bf1e:	4413      	add	r3, r2
 800bf20:	330c      	adds	r3, #12
 800bf22:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800bf26:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 800bf28:	4b13      	ldr	r3, [pc, #76]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	3301      	adds	r3, #1
 800bf2e:	4a12      	ldr	r2, [pc, #72]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	4b11      	ldr	r3, [pc, #68]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	2b03      	cmp	r3, #3
 800bf38:	d902      	bls.n	800bf40 <ETH_IRQHandler+0xd4>
 800bf3a:	4b0f      	ldr	r3, [pc, #60]	; (800bf78 <ETH_IRQHandler+0x10c>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	3301      	adds	r3, #1
 800bf44:	607b      	str	r3, [r7, #4]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2b09      	cmp	r3, #9
 800bf4a:	d9a6      	bls.n	800be9a <ETH_IRQHandler+0x2e>
 800bf4c:	e000      	b.n	800bf50 <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & BIT(31)) break;  // exit when done
 800bf4e:	bf00      	nop
    }
  }
  ETH->DMACSR = BIT(7) | BIT(8);  // Clear possible RBU RPS while processing
 800bf50:	4b08      	ldr	r3, [pc, #32]	; (800bf74 <ETH_IRQHandler+0x108>)
 800bf52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bf56:	461a      	mov	r2, r3
 800bf58:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800bf5c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
  ETH->DMACRDTPR =
 800bf60:	4a04      	ldr	r2, [pc, #16]	; (800bf74 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 800bf62:	4b09      	ldr	r3, [pc, #36]	; (800bf88 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 800bf64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800bf68:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
}
 800bf6c:	bf00      	nop
 800bf6e:	3708      	adds	r7, #8
 800bf70:	46bd      	mov	sp, r7
 800bf72:	bd80      	pop	{r7, pc}
 800bf74:	40028000 	.word	0x40028000
 800bf78:	24003630 	.word	0x24003630
 800bf7c:	24000588 	.word	0x24000588
 800bf80:	24000608 	.word	0x24000608
 800bf84:	24003628 	.word	0x24003628
 800bf88:	240005b8 	.word	0x240005b8

0800bf8c <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 800bf8c:	b590      	push	{r4, r7, lr}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681a      	ldr	r2, [r3, #0]
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	685b      	ldr	r3, [r3, #4]
 800bf9e:	441a      	add	r2, r3
 800bfa0:	68bb      	ldr	r3, [r7, #8]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	68fc      	ldr	r4, [r7, #12]
 800bfa8:	463b      	mov	r3, r7
 800bfaa:	68b9      	ldr	r1, [r7, #8]
 800bfac:	4618      	mov	r0, r3
 800bfae:	f7fe f88c 	bl	800a0ca <mg_str_n>
 800bfb2:	f104 0308 	add.w	r3, r4, #8
 800bfb6:	463a      	mov	r2, r7
 800bfb8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bfbc:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800bfc0:	bf00      	nop
 800bfc2:	3714      	adds	r7, #20
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd90      	pop	{r4, r7, pc}

0800bfc8 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800bfc8:	b480      	push	{r7}
 800bfca:	b087      	sub	sp, #28
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 800bfd8:	2300      	movs	r3, #0
 800bfda:	617b      	str	r3, [r7, #20]
 800bfdc:	e016      	b.n	800c00c <csumup+0x44>
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d005      	beq.n	800bff4 <csumup+0x2c>
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	4413      	add	r3, r2
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	461a      	mov	r2, r3
 800bff2:	e005      	b.n	800c000 <csumup+0x38>
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	697b      	ldr	r3, [r7, #20]
 800bff8:	4413      	add	r3, r2
 800bffa:	781b      	ldrb	r3, [r3, #0]
 800bffc:	021b      	lsls	r3, r3, #8
 800bffe:	461a      	mov	r2, r3
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	4413      	add	r3, r2
 800c004:	60fb      	str	r3, [r7, #12]
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	3301      	adds	r3, #1
 800c00a:	617b      	str	r3, [r7, #20]
 800c00c:	697a      	ldr	r2, [r7, #20]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	429a      	cmp	r2, r3
 800c012:	d3e4      	bcc.n	800bfde <csumup+0x16>
  return sum;
 800c014:	68fb      	ldr	r3, [r7, #12]
}
 800c016:	4618      	mov	r0, r3
 800c018:	371c      	adds	r7, #28
 800c01a:	46bd      	mov	sp, r7
 800c01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c020:	4770      	bx	lr

0800c022 <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800c022:	b580      	push	{r7, lr}
 800c024:	b082      	sub	sp, #8
 800c026:	af00      	add	r7, sp, #0
 800c028:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800c02a:	e005      	b.n	800c038 <csumfin+0x16>
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	b29a      	uxth	r2, r3
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	0c1b      	lsrs	r3, r3, #16
 800c034:	4413      	add	r3, r2
 800c036:	607b      	str	r3, [r7, #4]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	0c1b      	lsrs	r3, r3, #16
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d1f5      	bne.n	800c02c <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	b29b      	uxth	r3, r3
 800c044:	43db      	mvns	r3, r3
 800c046:	b29b      	uxth	r3, r3
 800c048:	4618      	mov	r0, r3
 800c04a:	f7fe fe6a 	bl	800ad22 <mg_ntohs>
 800c04e:	4603      	mov	r3, r0
}
 800c050:	4618      	mov	r0, r3
 800c052:	3708      	adds	r7, #8
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800c058:	b580      	push	{r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	2000      	movs	r0, #0
 800c068:	f7ff ffae 	bl	800bfc8 <csumup>
 800c06c:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f7ff ffd7 	bl	800c022 <csumfin>
 800c074:	4603      	mov	r3, r0
}
 800c076:	4618      	mov	r0, r3
 800c078:	3710      	adds	r7, #16
 800c07a:	46bd      	mov	sp, r7
 800c07c:	bd80      	pop	{r7, pc}

0800c07e <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800c07e:	b580      	push	{r7, lr}
 800c080:	b084      	sub	sp, #16
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
 800c086:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	6a1b      	ldr	r3, [r3, #32]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	687a      	ldr	r2, [r7, #4]
 800c090:	6950      	ldr	r0, [r2, #20]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	4798      	blx	r3
 800c098:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800c09a:	68fa      	ldr	r2, [r7, #12]
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	429a      	cmp	r2, r3
 800c0a0:	d104      	bne.n	800c0ac <ether_output+0x2e>
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a6:	1c5a      	adds	r2, r3, #1
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3710      	adds	r7, #16
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 800c0b6:	b580      	push	{r7, lr}
 800c0b8:	b084      	sub	sp, #16
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
 800c0be:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	695b      	ldr	r3, [r3, #20]
 800c0c4:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	330e      	adds	r3, #14
 800c0ca:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2206      	movs	r2, #6
 800c0d0:	21ff      	movs	r1, #255	; 0xff
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f009 fabf 	bl	8015656 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3306      	adds	r3, #6
 800c0dc:	6879      	ldr	r1, [r7, #4]
 800c0de:	2206      	movs	r2, #6
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f009 fb9f 	bl	8015824 <memcpy>
  eth->type = mg_htons(0x806);
 800c0e6:	f640 0006 	movw	r0, #2054	; 0x806
 800c0ea:	f7fe fe1a 	bl	800ad22 <mg_ntohs>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	461a      	mov	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800c0f6:	221c      	movs	r2, #28
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	68b8      	ldr	r0, [r7, #8]
 800c0fc:	f009 faab 	bl	8015656 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800c100:	2001      	movs	r0, #1
 800c102:	f7fe fe0e 	bl	800ad22 <mg_ntohs>
 800c106:	4603      	mov	r3, r0
 800c108:	461a      	mov	r2, r3
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	801a      	strh	r2, [r3, #0]
 800c10e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c112:	f7fe fe06 	bl	800ad22 <mg_ntohs>
 800c116:	4603      	mov	r3, r0
 800c118:	461a      	mov	r2, r3
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	805a      	strh	r2, [r3, #2]
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2206      	movs	r2, #6
 800c122:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	2204      	movs	r2, #4
 800c128:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800c12a:	2001      	movs	r0, #1
 800c12c:	f7fe fdf9 	bl	800ad22 <mg_ntohs>
 800c130:	4603      	mov	r3, r0
 800c132:	461a      	mov	r2, r3
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	80da      	strh	r2, [r3, #6]
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	619a      	str	r2, [r3, #24]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	689a      	ldr	r2, [r3, #8]
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800c148:	68bb      	ldr	r3, [r7, #8]
 800c14a:	3308      	adds	r3, #8
 800c14c:	6879      	ldr	r1, [r7, #4]
 800c14e:	2206      	movs	r2, #6
 800c150:	4618      	mov	r0, r3
 800c152:	f009 fb67 	bl	8015824 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	f103 021c 	add.w	r2, r3, #28
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	4619      	mov	r1, r3
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f7ff ff8b 	bl	800c07e <ether_output>
}
 800c168:	bf00      	nop
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d138      	bne.n	800c1f4 <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800c182:	4b35      	ldr	r3, [pc, #212]	; (800c258 <onstatechange+0xe8>)
 800c184:	f641 6224 	movw	r2, #7716	; 0x1e24
 800c188:	4934      	ldr	r1, [pc, #208]	; (800c25c <onstatechange+0xec>)
 800c18a:	2002      	movs	r0, #2
 800c18c:	f7fb f826 	bl	80071dc <mg_log_prefix>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d006      	beq.n	800c1a4 <onstatechange+0x34>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	3308      	adds	r3, #8
 800c19a:	461a      	mov	r2, r3
 800c19c:	4930      	ldr	r1, [pc, #192]	; (800c260 <onstatechange+0xf0>)
 800c19e:	4831      	ldr	r0, [pc, #196]	; (800c264 <onstatechange+0xf4>)
 800c1a0:	f7fb f876 	bl	8007290 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800c1a4:	4b2c      	ldr	r3, [pc, #176]	; (800c258 <onstatechange+0xe8>)
 800c1a6:	f641 6225 	movw	r2, #7717	; 0x1e25
 800c1aa:	492c      	ldr	r1, [pc, #176]	; (800c25c <onstatechange+0xec>)
 800c1ac:	2002      	movs	r0, #2
 800c1ae:	f7fb f815 	bl	80071dc <mg_log_prefix>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d006      	beq.n	800c1c6 <onstatechange+0x56>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	3310      	adds	r3, #16
 800c1bc:	461a      	mov	r2, r3
 800c1be:	4928      	ldr	r1, [pc, #160]	; (800c260 <onstatechange+0xf0>)
 800c1c0:	4829      	ldr	r0, [pc, #164]	; (800c268 <onstatechange+0xf8>)
 800c1c2:	f7fb f865 	bl	8007290 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800c1c6:	4b24      	ldr	r3, [pc, #144]	; (800c258 <onstatechange+0xe8>)
 800c1c8:	f641 6226 	movw	r2, #7718	; 0x1e26
 800c1cc:	4923      	ldr	r1, [pc, #140]	; (800c25c <onstatechange+0xec>)
 800c1ce:	2002      	movs	r0, #2
 800c1d0:	f7fb f804 	bl	80071dc <mg_log_prefix>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <onstatechange+0x76>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	461a      	mov	r2, r3
 800c1de:	4923      	ldr	r1, [pc, #140]	; (800c26c <onstatechange+0xfc>)
 800c1e0:	4823      	ldr	r0, [pc, #140]	; (800c270 <onstatechange+0x100>)
 800c1e2:	f7fb f855 	bl	8007290 <mg_log>
    arp_ask(ifp, ifp->gw);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f7ff ff62 	bl	800c0b6 <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 800c1f2:	e02c      	b.n	800c24e <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c1fa:	2b01      	cmp	r3, #1
 800c1fc:	d115      	bne.n	800c22a <onstatechange+0xba>
    MG_ERROR(("Link up"));
 800c1fe:	4b16      	ldr	r3, [pc, #88]	; (800c258 <onstatechange+0xe8>)
 800c200:	f641 6229 	movw	r2, #7721	; 0x1e29
 800c204:	4915      	ldr	r1, [pc, #84]	; (800c25c <onstatechange+0xec>)
 800c206:	2001      	movs	r0, #1
 800c208:	f7fa ffe8 	bl	80071dc <mg_log_prefix>
 800c20c:	4603      	mov	r3, r0
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d002      	beq.n	800c218 <onstatechange+0xa8>
 800c212:	4818      	ldr	r0, [pc, #96]	; (800c274 <onstatechange+0x104>)
 800c214:	f7fb f83c 	bl	8007290 <mg_log>
    srand((unsigned int) mg_millis());
 800c218:	f7f4 fcc2 	bl	8000ba0 <mg_millis>
 800c21c:	4602      	mov	r2, r0
 800c21e:	460b      	mov	r3, r1
 800c220:	4613      	mov	r3, r2
 800c222:	4618      	mov	r0, r3
 800c224:	f008 ffe8 	bl	80151f8 <srand>
}
 800c228:	e011      	b.n	800c24e <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10c      	bne.n	800c24e <onstatechange+0xde>
    MG_ERROR(("Link down"));
 800c234:	4b08      	ldr	r3, [pc, #32]	; (800c258 <onstatechange+0xe8>)
 800c236:	f641 622c 	movw	r2, #7724	; 0x1e2c
 800c23a:	4908      	ldr	r1, [pc, #32]	; (800c25c <onstatechange+0xec>)
 800c23c:	2001      	movs	r0, #1
 800c23e:	f7fa ffcd 	bl	80071dc <mg_log_prefix>
 800c242:	4603      	mov	r3, r0
 800c244:	2b00      	cmp	r3, #0
 800c246:	d002      	beq.n	800c24e <onstatechange+0xde>
 800c248:	480b      	ldr	r0, [pc, #44]	; (800c278 <onstatechange+0x108>)
 800c24a:	f7fb f821 	bl	8007290 <mg_log>
}
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
 800c256:	bf00      	nop
 800c258:	08018528 	.word	0x08018528
 800c25c:	0801645c 	.word	0x0801645c
 800c260:	08007f99 	.word	0x08007f99
 800c264:	080177c8 	.word	0x080177c8
 800c268:	080177d8 	.word	0x080177d8
 800c26c:	0800805d 	.word	0x0800805d
 800c270:	080177e8 	.word	0x080177e8
 800c274:	080177f8 	.word	0x080177f8
 800c278:	08017800 	.word	0x08017800

0800c27c <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	603b      	str	r3, [r7, #0]
 800c288:	4613      	mov	r3, r2
 800c28a:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	695b      	ldr	r3, [r3, #20]
 800c290:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	330e      	adds	r3, #14
 800c296:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	2206      	movs	r2, #6
 800c29c:	68b9      	ldr	r1, [r7, #8]
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f009 fac0 	bl	8015824 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	3306      	adds	r3, #6
 800c2a8:	68f9      	ldr	r1, [r7, #12]
 800c2aa:	2206      	movs	r2, #6
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f009 fab9 	bl	8015824 <memcpy>
  eth->type = mg_htons(0x800);
 800c2b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c2b6:	f7fe fd34 	bl	800ad22 <mg_ntohs>
 800c2ba:	4603      	mov	r3, r0
 800c2bc:	461a      	mov	r2, r3
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800c2c2:	2214      	movs	r2, #20
 800c2c4:	2100      	movs	r1, #0
 800c2c6:	6938      	ldr	r0, [r7, #16]
 800c2c8:	f009 f9c5 	bl	8015656 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	2245      	movs	r2, #69	; 0x45
 800c2d0:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2da:	719a      	strb	r2, [r3, #6]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800c2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	3314      	adds	r3, #20
 800c2e6:	b29b      	uxth	r3, r3
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f7fe fd1a 	bl	800ad22 <mg_ntohs>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	2240      	movs	r2, #64	; 0x40
 800c2fa:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	79fa      	ldrb	r2, [r7, #7]
 800c300:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800c302:	693b      	ldr	r3, [r7, #16]
 800c304:	683a      	ldr	r2, [r7, #0]
 800c306:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	6a3a      	ldr	r2, [r7, #32]
 800c30c:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800c30e:	2114      	movs	r1, #20
 800c310:	6938      	ldr	r0, [r7, #16]
 800c312:	f7ff fea1 	bl	800c058 <ipcsum>
 800c316:	4603      	mov	r3, r0
 800c318:	461a      	mov	r2, r3
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	815a      	strh	r2, [r3, #10]
  return ip;
 800c31e:	693b      	ldr	r3, [r7, #16]
}
 800c320:	4618      	mov	r0, r3
 800c322:	3718      	adds	r7, #24
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800c328:	b580      	push	{r7, lr}
 800c32a:	b08a      	sub	sp, #40	; 0x28
 800c32c:	af02      	add	r7, sp, #8
 800c32e:	60f8      	str	r0, [r7, #12]
 800c330:	60b9      	str	r1, [r7, #8]
 800c332:	607a      	str	r2, [r7, #4]
 800c334:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800c336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c338:	3308      	adds	r3, #8
 800c33a:	9301      	str	r3, [sp, #4]
 800c33c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2211      	movs	r2, #17
 800c344:	68b9      	ldr	r1, [r7, #8]
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f7ff ff98 	bl	800c27c <tx_ip>
 800c34c:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800c34e:	69fb      	ldr	r3, [r7, #28]
 800c350:	3314      	adds	r3, #20
 800c352:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	887a      	ldrh	r2, [r7, #2]
 800c358:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800c35e:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800c360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c362:	b29b      	uxth	r3, r3
 800c364:	3308      	adds	r3, #8
 800c366:	b29b      	uxth	r3, r3
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe fcda 	bl	800ad22 <mg_ntohs>
 800c36e:	4603      	mov	r3, r0
 800c370:	461a      	mov	r2, r3
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	2200      	movs	r2, #0
 800c37a:	719a      	strb	r2, [r3, #6]
 800c37c:	2200      	movs	r2, #0
 800c37e:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800c380:	2208      	movs	r2, #8
 800c382:	69b9      	ldr	r1, [r7, #24]
 800c384:	2000      	movs	r0, #0
 800c386:	f7ff fe1f 	bl	800bfc8 <csumup>
 800c38a:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800c38c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c38e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c390:	6978      	ldr	r0, [r7, #20]
 800c392:	f7ff fe19 	bl	800bfc8 <csumup>
 800c396:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800c398:	69fb      	ldr	r3, [r7, #28]
 800c39a:	330c      	adds	r3, #12
 800c39c:	2204      	movs	r2, #4
 800c39e:	4619      	mov	r1, r3
 800c3a0:	6978      	ldr	r0, [r7, #20]
 800c3a2:	f7ff fe11 	bl	800bfc8 <csumup>
 800c3a6:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800c3a8:	69fb      	ldr	r3, [r7, #28]
 800c3aa:	3310      	adds	r3, #16
 800c3ac:	2204      	movs	r2, #4
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6978      	ldr	r0, [r7, #20]
 800c3b2:	f7ff fe09 	bl	800bfc8 <csumup>
 800c3b6:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	7a5b      	ldrb	r3, [r3, #9]
 800c3bc:	461a      	mov	r2, r3
 800c3be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3c0:	441a      	add	r2, r3
 800c3c2:	697b      	ldr	r3, [r7, #20]
 800c3c4:	4413      	add	r3, r2
 800c3c6:	3308      	adds	r3, #8
 800c3c8:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800c3ca:	6978      	ldr	r0, [r7, #20]
 800c3cc:	f7ff fe29 	bl	800c022 <csumfin>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	3308      	adds	r3, #8
 800c3dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	f009 f91e 	bl	8015622 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800c3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e8:	332a      	adds	r3, #42	; 0x2a
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	68f8      	ldr	r0, [r7, #12]
 800c3ee:	f7ff fe46 	bl	800c07e <ether_output>
}
 800c3f2:	bf00      	nop
 800c3f4:	3720      	adds	r7, #32
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}
	...

0800c3fc <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800c3fc:	b5b0      	push	{r4, r5, r7, lr}
 800c3fe:	b0cc      	sub	sp, #304	; 0x130
 800c400:	af04      	add	r7, sp, #16
 800c402:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800c406:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800c40a:	6020      	str	r0, [r4, #0]
 800c40c:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800c410:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800c414:	6001      	str	r1, [r0, #0]
 800c416:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800c41a:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800c41e:	600a      	str	r2, [r1, #0]
 800c420:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800c424:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800c428:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800c42a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c42e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c432:	4a38      	ldr	r2, [pc, #224]	; (800c514 <tx_dhcp+0x118>)
 800c434:	4618      	mov	r0, r3
 800c436:	4611      	mov	r1, r2
 800c438:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c43c:	461a      	mov	r2, r3
 800c43e:	f009 f9f1 	bl	8015824 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800c442:	4835      	ldr	r0, [pc, #212]	; (800c518 <tx_dhcp+0x11c>)
 800c444:	f7fe fc54 	bl	800acf0 <mg_ntohl>
 800c448:	4602      	mov	r2, r0
 800c44a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c44e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c452:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800c456:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c45a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c45e:	6819      	ldr	r1, [r3, #0]
 800c460:	f107 0310 	add.w	r3, r7, #16
 800c464:	331c      	adds	r3, #28
 800c466:	2206      	movs	r2, #6
 800c468:	4618      	mov	r0, r3
 800c46a:	f009 f9db 	bl	8015824 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800c46e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c472:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	3302      	adds	r3, #2
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	461a      	mov	r2, r3
 800c47e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c482:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c486:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800c488:	f107 0310 	add.w	r3, r7, #16
 800c48c:	33f0      	adds	r3, #240	; 0xf0
 800c48e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800c492:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800c496:	4618      	mov	r0, r3
 800c498:	f009 f9c4 	bl	8015824 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800c49c:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d009      	beq.n	800c4b8 <tx_dhcp+0xbc>
 800c4a4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c4a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800c4ac:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800c4b0:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800c4b4:	6812      	ldr	r2, [r2, #0]
 800c4b6:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800c4b8:	2044      	movs	r0, #68	; 0x44
 800c4ba:	f7fe fc32 	bl	800ad22 <mg_ntohs>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	461d      	mov	r5, r3
 800c4c2:	2043      	movs	r0, #67	; 0x43
 800c4c4:	f7fe fc2d 	bl	800ad22 <mg_ntohs>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	461c      	mov	r4, r3
 800c4cc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c4d0:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800c4d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c4d8:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 800c4dc:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c4e0:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800c4e4:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c4e8:	9303      	str	r3, [sp, #12]
 800c4ea:	f107 0310 	add.w	r3, r7, #16
 800c4ee:	9302      	str	r3, [sp, #8]
 800c4f0:	9401      	str	r4, [sp, #4]
 800c4f2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800c4f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	462b      	mov	r3, r5
 800c500:	6812      	ldr	r2, [r2, #0]
 800c502:	6809      	ldr	r1, [r1, #0]
 800c504:	6800      	ldr	r0, [r0, #0]
 800c506:	f7ff ff0f 	bl	800c328 <tx_udp>
         sizeof(dhcp));
}
 800c50a:	bf00      	nop
 800c50c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800c510:	46bd      	mov	sp, r7
 800c512:	bdb0      	pop	{r4, r5, r7, pc}
 800c514:	0801780c 	.word	0x0801780c
 800c518:	63825363 	.word	0x63825363

0800c51c <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800c51c:	b5b0      	push	{r4, r5, r7, lr}
 800c51e:	b090      	sub	sp, #64	; 0x40
 800c520:	af04      	add	r7, sp, #16
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	60b9      	str	r1, [r7, #8]
 800c526:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800c528:	4b19      	ldr	r3, [pc, #100]	; (800c590 <tx_dhcp_request_sel+0x74>)
 800c52a:	f107 0414 	add.w	r4, r7, #20
 800c52e:	461d      	mov	r5, r3
 800c530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c534:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c538:	c403      	stmia	r4!, {r0, r1}
 800c53a:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 800c53c:	f107 0314 	add.w	r3, r7, #20
 800c540:	330e      	adds	r3, #14
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 800c546:	f107 0314 	add.w	r3, r7, #20
 800c54a:	3314      	adds	r3, #20
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800c550:	2300      	movs	r3, #0
 800c552:	9302      	str	r3, [sp, #8]
 800c554:	2319      	movs	r3, #25
 800c556:	9301      	str	r3, [sp, #4]
 800c558:	f107 0314 	add.w	r3, r7, #20
 800c55c:	9300      	str	r3, [sp, #0]
 800c55e:	f04f 33ff 	mov.w	r3, #4294967295
 800c562:	2200      	movs	r2, #0
 800c564:	490b      	ldr	r1, [pc, #44]	; (800c594 <tx_dhcp_request_sel+0x78>)
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7ff ff48 	bl	800c3fc <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800c56c:	4b0a      	ldr	r3, [pc, #40]	; (800c598 <tx_dhcp_request_sel+0x7c>)
 800c56e:	f641 6278 	movw	r2, #7800	; 0x1e78
 800c572:	490a      	ldr	r1, [pc, #40]	; (800c59c <tx_dhcp_request_sel+0x80>)
 800c574:	2003      	movs	r0, #3
 800c576:	f7fa fe31 	bl	80071dc <mg_log_prefix>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d002      	beq.n	800c586 <tx_dhcp_request_sel+0x6a>
 800c580:	4807      	ldr	r0, [pc, #28]	; (800c5a0 <tx_dhcp_request_sel+0x84>)
 800c582:	f7fa fe85 	bl	8007290 <mg_log>
}
 800c586:	bf00      	nop
 800c588:	3730      	adds	r7, #48	; 0x30
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bdb0      	pop	{r4, r5, r7, pc}
 800c58e:	bf00      	nop
 800c590:	0801792c 	.word	0x0801792c
 800c594:	08018390 	.word	0x08018390
 800c598:	08018538 	.word	0x08018538
 800c59c:	0801645c 	.word	0x0801645c
 800c5a0:	0801791c 	.word	0x0801791c

0800c5a4 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08a      	sub	sp, #40	; 0x28
 800c5a8:	af04      	add	r7, sp, #16
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800c5b2:	4b10      	ldr	r3, [pc, #64]	; (800c5f4 <tx_dhcp_request_re+0x50>)
 800c5b4:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800c5b6:	2301      	movs	r3, #1
 800c5b8:	9302      	str	r3, [sp, #8]
 800c5ba:	2304      	movs	r3, #4
 800c5bc:	9301      	str	r3, [sp, #4]
 800c5be:	f107 0314 	add.w	r3, r7, #20
 800c5c2:	9300      	str	r3, [sp, #0]
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	68b9      	ldr	r1, [r7, #8]
 800c5ca:	68f8      	ldr	r0, [r7, #12]
 800c5cc:	f7ff ff16 	bl	800c3fc <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800c5d0:	4b09      	ldr	r3, [pc, #36]	; (800c5f8 <tx_dhcp_request_re+0x54>)
 800c5d2:	f641 6283 	movw	r2, #7811	; 0x1e83
 800c5d6:	4909      	ldr	r1, [pc, #36]	; (800c5fc <tx_dhcp_request_re+0x58>)
 800c5d8:	2003      	movs	r0, #3
 800c5da:	f7fa fdff 	bl	80071dc <mg_log_prefix>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d002      	beq.n	800c5ea <tx_dhcp_request_re+0x46>
 800c5e4:	4806      	ldr	r0, [pc, #24]	; (800c600 <tx_dhcp_request_re+0x5c>)
 800c5e6:	f7fa fe53 	bl	8007290 <mg_log>
}
 800c5ea:	bf00      	nop
 800c5ec:	3718      	adds	r7, #24
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	ff030135 	.word	0xff030135
 800c5f8:	0801854c 	.word	0x0801854c
 800c5fc:	0801645c 	.word	0x0801645c
 800c600:	0801791c 	.word	0x0801791c

0800c604 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800c604:	b580      	push	{r7, lr}
 800c606:	b088      	sub	sp, #32
 800c608:	af04      	add	r7, sp, #16
 800c60a:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800c60c:	4a14      	ldr	r2, [pc, #80]	; (800c660 <tx_dhcp_discover+0x5c>)
 800c60e:	f107 0308 	add.w	r3, r7, #8
 800c612:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c616:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800c61a:	2300      	movs	r3, #0
 800c61c:	9302      	str	r3, [sp, #8]
 800c61e:	2308      	movs	r3, #8
 800c620:	9301      	str	r3, [sp, #4]
 800c622:	f107 0308 	add.w	r3, r7, #8
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	f04f 33ff 	mov.w	r3, #4294967295
 800c62c:	2200      	movs	r2, #0
 800c62e:	490d      	ldr	r1, [pc, #52]	; (800c664 <tx_dhcp_discover+0x60>)
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	f7ff fee3 	bl	800c3fc <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800c636:	4b0c      	ldr	r3, [pc, #48]	; (800c668 <tx_dhcp_discover+0x64>)
 800c638:	f641 628d 	movw	r2, #7821	; 0x1e8d
 800c63c:	490b      	ldr	r1, [pc, #44]	; (800c66c <tx_dhcp_discover+0x68>)
 800c63e:	2003      	movs	r0, #3
 800c640:	f7fa fdcc 	bl	80071dc <mg_log_prefix>
 800c644:	4603      	mov	r3, r0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d005      	beq.n	800c656 <tx_dhcp_discover+0x52>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	461a      	mov	r2, r3
 800c64e:	4908      	ldr	r1, [pc, #32]	; (800c670 <tx_dhcp_discover+0x6c>)
 800c650:	4808      	ldr	r0, [pc, #32]	; (800c674 <tx_dhcp_discover+0x70>)
 800c652:	f7fa fe1d 	bl	8007290 <mg_log>
}
 800c656:	bf00      	nop
 800c658:	3710      	adds	r7, #16
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	08017968 	.word	0x08017968
 800c664:	08018390 	.word	0x08018390
 800c668:	08018560 	.word	0x08018560
 800c66c:	0801645c 	.word	0x0801645c
 800c670:	0800805d 	.word	0x0800805d
 800c674:	08017948 	.word	0x08017948

0800c678 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800c678:	b480      	push	{r7}
 800c67a:	b087      	sub	sp, #28
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	60f8      	str	r0, [r7, #12]
 800c680:	60b9      	str	r1, [r7, #8]
 800c682:	4613      	mov	r3, r2
 800c684:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800c686:	2300      	movs	r3, #0
 800c688:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	617b      	str	r3, [r7, #20]
 800c690:	e03e      	b.n	800c710 <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c698:	f003 0301 	and.w	r3, r3, #1
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <getpeer+0x42>
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d007      	beq.n	800c6ba <getpeer+0x42>
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	8b1a      	ldrh	r2, [r3, #24]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b2:	885b      	ldrh	r3, [r3, #2]
 800c6b4:	b29b      	uxth	r3, r3
 800c6b6:	429a      	cmp	r2, r3
 800c6b8:	d02e      	beq.n	800c718 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c6c0:	f003 0301 	and.w	r3, r3, #1
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d11f      	bne.n	800c70a <getpeer+0x92>
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d01b      	beq.n	800c70a <getpeer+0x92>
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	8b1a      	ldrh	r2, [r3, #24]
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6da:	885b      	ldrh	r3, [r3, #2]
 800c6dc:	b29b      	uxth	r3, r3
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d113      	bne.n	800c70a <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800c6e2:	697b      	ldr	r3, [r7, #20]
 800c6e4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c6e8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c6ec:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800c6ee:	79fa      	ldrb	r2, [r7, #7]
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d10a      	bne.n	800c70a <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800c6f4:	79fb      	ldrb	r3, [r7, #7]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d10f      	bne.n	800c71a <getpeer+0xa2>
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c702:	881b      	ldrh	r3, [r3, #0]
 800c704:	b29b      	uxth	r3, r3
 800c706:	429a      	cmp	r2, r3
 800c708:	d007      	beq.n	800c71a <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	617b      	str	r3, [r7, #20]
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d1bd      	bne.n	800c692 <getpeer+0x1a>
 800c716:	e000      	b.n	800c71a <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800c718:	bf00      	nop
      break;
  }
  return c;
 800c71a:	697b      	ldr	r3, [r7, #20]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	371c      	adds	r7, #28
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800c728:	b5b0      	push	{r4, r5, r7, lr}
 800c72a:	b088      	sub	sp, #32
 800c72c:	af02      	add	r7, sp, #8
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	88db      	ldrh	r3, [r3, #6]
 800c738:	b29c      	uxth	r4, r3
 800c73a:	2001      	movs	r0, #1
 800c73c:	f7fe faf1 	bl	800ad22 <mg_ntohs>
 800c740:	4603      	mov	r3, r0
 800c742:	429c      	cmp	r4, r3
 800c744:	d176      	bne.n	800c834 <rx_arp+0x10c>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	699a      	ldr	r2, [r3, #24]
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	429a      	cmp	r2, r3
 800c752:	d16f      	bne.n	800c834 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	695b      	ldr	r3, [r3, #20]
 800c758:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800c75a:	697b      	ldr	r3, [r7, #20]
 800c75c:	330e      	adds	r3, #14
 800c75e:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800c760:	6978      	ldr	r0, [r7, #20]
 800c762:	683b      	ldr	r3, [r7, #0]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	3306      	adds	r3, #6
 800c768:	2206      	movs	r2, #6
 800c76a:	4619      	mov	r1, r3
 800c76c:	f009 f85a 	bl	8015824 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	3306      	adds	r3, #6
 800c774:	6879      	ldr	r1, [r7, #4]
 800c776:	2206      	movs	r2, #6
 800c778:	4618      	mov	r0, r3
 800c77a:	f009 f853 	bl	8015824 <memcpy>
    eth->type = mg_htons(0x806);
 800c77e:	f640 0006 	movw	r0, #2054	; 0x806
 800c782:	f7fe face 	bl	800ad22 <mg_ntohs>
 800c786:	4603      	mov	r3, r0
 800c788:	461a      	mov	r2, r3
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	699a      	ldr	r2, [r3, #24]
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	6814      	ldr	r4, [r2, #0]
 800c796:	6850      	ldr	r0, [r2, #4]
 800c798:	6891      	ldr	r1, [r2, #8]
 800c79a:	68d5      	ldr	r5, [r2, #12]
 800c79c:	601c      	str	r4, [r3, #0]
 800c79e:	6058      	str	r0, [r3, #4]
 800c7a0:	6099      	str	r1, [r3, #8]
 800c7a2:	60dd      	str	r5, [r3, #12]
 800c7a4:	6914      	ldr	r4, [r2, #16]
 800c7a6:	6950      	ldr	r0, [r2, #20]
 800c7a8:	6991      	ldr	r1, [r2, #24]
 800c7aa:	611c      	str	r4, [r3, #16]
 800c7ac:	6158      	str	r0, [r3, #20]
 800c7ae:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800c7b0:	2002      	movs	r0, #2
 800c7b2:	f7fe fab6 	bl	800ad22 <mg_ntohs>
 800c7b6:	4603      	mov	r3, r0
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f103 0012 	add.w	r0, r3, #18
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	699b      	ldr	r3, [r3, #24]
 800c7c8:	3308      	adds	r3, #8
 800c7ca:	2206      	movs	r2, #6
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	f009 f829 	bl	8015824 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	6879      	ldr	r1, [r7, #4]
 800c7d8:	2206      	movs	r2, #6
 800c7da:	4618      	mov	r0, r3
 800c7dc:	f009 f822 	bl	8015824 <memcpy>
    arp->tpa = pkt->arp->spa;
 800c7e0:	683b      	ldr	r3, [r7, #0]
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800c7e8:	693b      	ldr	r3, [r7, #16]
 800c7ea:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	689a      	ldr	r2, [r3, #8]
 800c7f0:	693b      	ldr	r3, [r7, #16]
 800c7f2:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 800c7f6:	4b46      	ldr	r3, [pc, #280]	; (800c910 <rx_arp+0x1e8>)
 800c7f8:	f641 62ac 	movw	r2, #7852	; 0x1eac
 800c7fc:	4945      	ldr	r1, [pc, #276]	; (800c914 <rx_arp+0x1ec>)
 800c7fe:	2003      	movs	r0, #3
 800c800:	f7fa fcec 	bl	80071dc <mg_log_prefix>
 800c804:	4603      	mov	r3, r0
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <rx_arp+0xf8>
 800c80a:	693b      	ldr	r3, [r7, #16]
 800c80c:	f103 0218 	add.w	r2, r3, #24
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	3308      	adds	r3, #8
 800c814:	9300      	str	r3, [sp, #0]
 800c816:	4b40      	ldr	r3, [pc, #256]	; (800c918 <rx_arp+0x1f0>)
 800c818:	493f      	ldr	r1, [pc, #252]	; (800c918 <rx_arp+0x1f0>)
 800c81a:	4840      	ldr	r0, [pc, #256]	; (800c91c <rx_arp+0x1f4>)
 800c81c:	f7fa fd38 	bl	8007290 <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f103 021c 	add.w	r2, r3, #28
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	1ad3      	subs	r3, r2, r3
 800c82a:	4619      	mov	r1, r3
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f7ff fc26 	bl	800c07e <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800c832:	e069      	b.n	800c908 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 800c834:	683b      	ldr	r3, [r7, #0]
 800c836:	699b      	ldr	r3, [r3, #24]
 800c838:	88db      	ldrh	r3, [r3, #6]
 800c83a:	b29c      	uxth	r4, r3
 800c83c:	2002      	movs	r0, #2
 800c83e:	f7fe fa70 	bl	800ad22 <mg_ntohs>
 800c842:	4603      	mov	r3, r0
 800c844:	429c      	cmp	r4, r3
 800c846:	d15f      	bne.n	800c908 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	3312      	adds	r3, #18
 800c84e:	6879      	ldr	r1, [r7, #4]
 800c850:	2206      	movs	r2, #6
 800c852:	4618      	mov	r0, r3
 800c854:	f008 fed5 	bl	8015602 <memcmp>
 800c858:	4603      	mov	r3, r0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d153      	bne.n	800c906 <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	699b      	ldr	r3, [r3, #24]
 800c862:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	691b      	ldr	r3, [r3, #16]
 800c86a:	429a      	cmp	r2, r3
 800c86c:	d10a      	bne.n	800c884 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800c874:	683b      	ldr	r3, [r7, #0]
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	3308      	adds	r3, #8
 800c87a:	2206      	movs	r2, #6
 800c87c:	4619      	mov	r1, r3
 800c87e:	f008 ffd1 	bl	8015824 <memcpy>
 800c882:	e041      	b.n	800c908 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c888:	2200      	movs	r2, #0
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	4618      	mov	r0, r3
 800c88e:	f7ff fef3 	bl	800c678 <getpeer>
 800c892:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d036      	beq.n	800c908 <rx_arp+0x1e0>
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c8a0:	f003 0310 	and.w	r3, r3, #16
 800c8a4:	b2db      	uxtb	r3, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d02e      	beq.n	800c908 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	3390      	adds	r3, #144	; 0x90
 800c8ae:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	f103 0010 	add.w	r0, r3, #16
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	3308      	adds	r3, #8
 800c8bc:	2206      	movs	r2, #6
 800c8be:	4619      	mov	r1, r3
 800c8c0:	f008 ffb0 	bl	8015824 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800c8c4:	4b12      	ldr	r3, [pc, #72]	; (800c910 <rx_arp+0x1e8>)
 800c8c6:	f641 62b9 	movw	r2, #7865	; 0x1eb9
 800c8ca:	4912      	ldr	r1, [pc, #72]	; (800c914 <rx_arp+0x1ec>)
 800c8cc:	2003      	movs	r0, #3
 800c8ce:	f7fa fc85 	bl	80071dc <mg_log_prefix>
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d00e      	beq.n	800c8f6 <rx_arp+0x1ce>
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f103 021c 	add.w	r2, r3, #28
 800c8e2:	68bb      	ldr	r3, [r7, #8]
 800c8e4:	3310      	adds	r3, #16
 800c8e6:	9301      	str	r3, [sp, #4]
 800c8e8:	4b0d      	ldr	r3, [pc, #52]	; (800c920 <rx_arp+0x1f8>)
 800c8ea:	9300      	str	r3, [sp, #0]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	4a0a      	ldr	r2, [pc, #40]	; (800c918 <rx_arp+0x1f0>)
 800c8f0:	480c      	ldr	r0, [pc, #48]	; (800c924 <rx_arp+0x1fc>)
 800c8f2:	f7fa fccd 	bl	8007290 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800c8f6:	68fa      	ldr	r2, [r7, #12]
 800c8f8:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800c8fc:	f36f 1304 	bfc	r3, #4, #1
 800c900:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 800c904:	e000      	b.n	800c908 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800c906:	bf00      	nop
      }
    }
  }
}
 800c908:	3718      	adds	r7, #24
 800c90a:	46bd      	mov	sp, r7
 800c90c:	bdb0      	pop	{r4, r5, r7, pc}
 800c90e:	bf00      	nop
 800c910:	08018574 	.word	0x08018574
 800c914:	0801645c 	.word	0x0801645c
 800c918:	08007f99 	.word	0x08007f99
 800c91c:	08017970 	.word	0x08017970
 800c920:	0800805d 	.word	0x0800805d
 800c924:	08017988 	.word	0x08017988

0800c928 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800c928:	b580      	push	{r7, lr}
 800c92a:	b08a      	sub	sp, #40	; 0x28
 800c92c:	af02      	add	r7, sp, #8
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c936:	781b      	ldrb	r3, [r3, #0]
 800c938:	2b08      	cmp	r3, #8
 800c93a:	d14d      	bne.n	800c9d8 <rx_icmp+0xb0>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	69db      	ldr	r3, [r3, #28]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d049      	beq.n	800c9d8 <rx_icmp+0xb0>
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	69db      	ldr	r3, [r3, #28]
 800c948:	691a      	ldr	r2, [r3, #16]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	689b      	ldr	r3, [r3, #8]
 800c94e:	429a      	cmp	r2, r3
 800c950:	d142      	bne.n	800c9d8 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800c952:	2326      	movs	r3, #38	; 0x26
 800c954:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	699a      	ldr	r2, [r3, #24]
 800c95a:	69bb      	ldr	r3, [r7, #24]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	68db      	ldr	r3, [r3, #12]
 800c964:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800c966:	69fa      	ldr	r2, [r7, #28]
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d901      	bls.n	800c972 <rx_icmp+0x4a>
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	1d99      	adds	r1, r3, #6
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6898      	ldr	r0, [r3, #8]
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	69db      	ldr	r3, [r3, #28]
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	69fa      	ldr	r2, [r7, #28]
 800c984:	3204      	adds	r2, #4
 800c986:	9201      	str	r2, [sp, #4]
 800c988:	9300      	str	r3, [sp, #0]
 800c98a:	4603      	mov	r3, r0
 800c98c:	2201      	movs	r2, #1
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f7ff fc74 	bl	800c27c <tx_ip>
 800c994:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	3314      	adds	r3, #20
 800c99a:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800c99c:	2204      	movs	r2, #4
 800c99e:	2100      	movs	r1, #0
 800c9a0:	68f8      	ldr	r0, [r7, #12]
 800c9a2:	f008 fe58 	bl	8015656 <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 800c9a6:	68fb      	ldr	r3, [r7, #12]
 800c9a8:	1d18      	adds	r0, r3, #4
 800c9aa:	683b      	ldr	r3, [r7, #0]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	69fa      	ldr	r2, [r7, #28]
 800c9b0:	4619      	mov	r1, r3
 800c9b2:	f008 ff37 	bl	8015824 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800c9b6:	69fb      	ldr	r3, [r7, #28]
 800c9b8:	3304      	adds	r3, #4
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f7ff fb4b 	bl	800c058 <ipcsum>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	461a      	mov	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800c9ca:	69ba      	ldr	r2, [r7, #24]
 800c9cc:	69fb      	ldr	r3, [r7, #28]
 800c9ce:	4413      	add	r3, r2
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff fb53 	bl	800c07e <ether_output>
  }
}
 800c9d8:	bf00      	nop
 800c9da:	3720      	adds	r7, #32
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800c9e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9e4:	b08e      	sub	sp, #56	; 0x38
 800c9e6:	af00      	add	r7, sp, #0
 800c9e8:	60f8      	str	r0, [r7, #12]
 800c9ea:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 800c9ec:	2300      	movs	r3, #0
 800c9ee:	637b      	str	r3, [r7, #52]	; 0x34
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	623b      	str	r3, [r7, #32]
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	61fb      	str	r3, [r7, #28]
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ca08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800ca0c:	68bb      	ldr	r3, [r7, #8]
 800ca0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca10:	33f0      	adds	r3, #240	; 0xf0
 800ca12:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ca20:	68bb      	ldr	r3, [r7, #8]
 800ca22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca24:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800ca28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	f0c0 8151 	bcc.w	800ccd2 <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca34:	1d18      	adds	r0, r3, #4
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	3302      	adds	r3, #2
 800ca3a:	2204      	movs	r2, #4
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f008 fde0 	bl	8015602 <memcmp>
 800ca42:	4603      	mov	r3, r0
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f040 8146 	bne.w	800ccd6 <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800ca4a:	e05b      	b.n	800cb04 <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800ca4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca4e:	781b      	ldrb	r3, [r3, #0]
 800ca50:	2b01      	cmp	r3, #1
 800ca52:	d10e      	bne.n	800ca72 <rx_dhcp_client+0x92>
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	3301      	adds	r3, #1
 800ca58:	781b      	ldrb	r3, [r3, #0]
 800ca5a:	2b04      	cmp	r3, #4
 800ca5c:	d109      	bne.n	800ca72 <rx_dhcp_client+0x92>
 800ca5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca60:	3306      	adds	r3, #6
 800ca62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d904      	bls.n	800ca72 <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	3302      	adds	r3, #2
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	61fb      	str	r3, [r7, #28]
 800ca70:	e041      	b.n	800caf6 <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	781b      	ldrb	r3, [r3, #0]
 800ca76:	2b03      	cmp	r3, #3
 800ca78:	d112      	bne.n	800caa0 <rx_dhcp_client+0xc0>
 800ca7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b04      	cmp	r3, #4
 800ca82:	d10d      	bne.n	800caa0 <rx_dhcp_client+0xc0>
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	3306      	adds	r3, #6
 800ca88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d908      	bls.n	800caa0 <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 800ca8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca90:	3302      	adds	r3, #2
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 800ca96:	68bb      	ldr	r3, [r7, #8]
 800ca98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca9a:	691b      	ldr	r3, [r3, #16]
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca9e:	e02a      	b.n	800caf6 <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800caa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	2b33      	cmp	r3, #51	; 0x33
 800caa6:	d114      	bne.n	800cad2 <rx_dhcp_client+0xf2>
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	3301      	adds	r3, #1
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b04      	cmp	r3, #4
 800cab0:	d10f      	bne.n	800cad2 <rx_dhcp_client+0xf2>
 800cab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab4:	3306      	adds	r3, #6
 800cab6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cab8:	429a      	cmp	r2, r3
 800caba:	d90a      	bls.n	800cad2 <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 800cabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabe:	3302      	adds	r3, #2
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 800cac4:	69bb      	ldr	r3, [r7, #24]
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe f912 	bl	800acf0 <mg_ntohl>
 800cacc:	4603      	mov	r3, r0
 800cace:	61bb      	str	r3, [r7, #24]
 800cad0:	e011      	b.n	800caf6 <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800cad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	2b35      	cmp	r3, #53	; 0x35
 800cad8:	d10d      	bne.n	800caf6 <rx_dhcp_client+0x116>
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	3301      	adds	r3, #1
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	2b01      	cmp	r3, #1
 800cae2:	d108      	bne.n	800caf6 <rx_dhcp_client+0x116>
 800cae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae6:	3306      	adds	r3, #6
 800cae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800caea:	429a      	cmp	r2, r3
 800caec:	d903      	bls.n	800caf6 <rx_dhcp_client+0x116>
      msgtype = p[2];
 800caee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf0:	789b      	ldrb	r3, [r3, #2]
 800caf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 800caf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf8:	3301      	adds	r3, #1
 800cafa:	781b      	ldrb	r3, [r3, #0]
 800cafc:	3302      	adds	r3, #2
 800cafe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb00:	4413      	add	r3, r2
 800cb02:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	3301      	adds	r3, #1
 800cb08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d903      	bls.n	800cb16 <rx_dhcp_client+0x136>
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	2bff      	cmp	r3, #255	; 0xff
 800cb14:	d19a      	bne.n	800ca4c <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800cb16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb1a:	2b06      	cmp	r3, #6
 800cb1c:	d10c      	bne.n	800cb38 <rx_dhcp_client+0x158>
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d107      	bne.n	800cb38 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	2200      	movs	r2, #0
 800cb34:	609a      	str	r2, [r3, #8]
 800cb36:	e0c1      	b.n	800ccbc <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800cb38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d11a      	bne.n	800cb76 <rx_dhcp_client+0x196>
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d115      	bne.n	800cb76 <rx_dhcp_client+0x196>
 800cb4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d012      	beq.n	800cb76 <rx_dhcp_client+0x196>
 800cb50:	6a3b      	ldr	r3, [r7, #32]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00f      	beq.n	800cb76 <rx_dhcp_client+0x196>
 800cb56:	69bb      	ldr	r3, [r7, #24]
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00c      	beq.n	800cb76 <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb60:	695b      	ldr	r3, [r3, #20]
 800cb62:	461a      	mov	r2, r3
 800cb64:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cb66:	68f8      	ldr	r0, [r7, #12]
 800cb68:	f7ff fcd8 	bl	800c51c <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2202      	movs	r2, #2
 800cb70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800cb74:	e0a2      	b.n	800ccbc <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 800cb76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cb7a:	2b05      	cmp	r3, #5
 800cb7c:	f040 809e 	bne.w	800ccbc <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cb86:	2b02      	cmp	r3, #2
 800cb88:	d162      	bne.n	800cc50 <rx_dhcp_client+0x270>
 800cb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d05f      	beq.n	800cc50 <rx_dhcp_client+0x270>
 800cb90:	6a3b      	ldr	r3, [r7, #32]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d05c      	beq.n	800cc50 <rx_dhcp_client+0x270>
 800cb96:	69bb      	ldr	r3, [r7, #24]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d059      	beq.n	800cc50 <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cba2:	69b9      	ldr	r1, [r7, #24]
 800cba4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cba8:	fb00 f101 	mul.w	r1, r0, r1
 800cbac:	2000      	movs	r0, #0
 800cbae:	4688      	mov	r8, r1
 800cbb0:	4681      	mov	r9, r0
 800cbb2:	eb12 0108 	adds.w	r1, r2, r8
 800cbb6:	6039      	str	r1, [r7, #0]
 800cbb8:	eb43 0309 	adc.w	r3, r3, r9
 800cbbc:	607b      	str	r3, [r7, #4]
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cbc4:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800cbc8:	4b45      	ldr	r3, [pc, #276]	; (800cce0 <rx_dhcp_client+0x300>)
 800cbca:	f641 62f1 	movw	r2, #7921	; 0x1ef1
 800cbce:	4945      	ldr	r1, [pc, #276]	; (800cce4 <rx_dhcp_client+0x304>)
 800cbd0:	2002      	movs	r0, #2
 800cbd2:	f7fa fb03 	bl	80071dc <mg_log_prefix>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d00f      	beq.n	800cbfc <rx_dhcp_client+0x21c>
 800cbdc:	69bc      	ldr	r4, [r7, #24]
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800cbe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cbe8:	f04f 0300 	mov.w	r3, #0
 800cbec:	f7f3 fe04 	bl	80007f8 <__aeabi_uldivmod>
 800cbf0:	4602      	mov	r2, r0
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	483c      	ldr	r0, [pc, #240]	; (800cce8 <rx_dhcp_client+0x308>)
 800cbf8:	f7fa fb4a 	bl	8007290 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	691b      	ldr	r3, [r3, #16]
 800cc06:	3306      	adds	r3, #6
 800cc08:	2206      	movs	r2, #6
 800cc0a:	4619      	mov	r1, r3
 800cc0c:	f008 fe0a 	bl	8015824 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc14:	609a      	str	r2, [r3, #8]
 800cc16:	6a3a      	ldr	r2, [r7, #32]
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	611a      	str	r2, [r3, #16]
 800cc1c:	69fa      	ldr	r2, [r7, #28]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	2203      	movs	r2, #3
 800cc26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800cc2a:	f107 0310 	add.w	r3, r7, #16
 800cc2e:	2108      	movs	r1, #8
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7f3 ffc3 	bl	8000bbc <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800cc36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800cc3a:	4614      	mov	r4, r2
 800cc3c:	f7f3 ffb0 	bl	8000ba0 <mg_millis>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4613      	mov	r3, r2
 800cc46:	4423      	add	r3, r4
 800cc48:	4618      	mov	r0, r3
 800cc4a:	f008 fad5 	bl	80151f8 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800cc4e:	e035      	b.n	800ccbc <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d130      	bne.n	800ccbc <rx_dhcp_client+0x2dc>
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	689b      	ldr	r3, [r3, #8]
 800cc5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d12b      	bne.n	800ccbc <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800cc6a:	69b9      	ldr	r1, [r7, #24]
 800cc6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800cc70:	fb00 f101 	mul.w	r1, r0, r1
 800cc74:	2000      	movs	r0, #0
 800cc76:	460c      	mov	r4, r1
 800cc78:	4605      	mov	r5, r0
 800cc7a:	eb12 0a04 	adds.w	sl, r2, r4
 800cc7e:	eb43 0b05 	adc.w	fp, r3, r5
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800cc88:	4b15      	ldr	r3, [pc, #84]	; (800cce0 <rx_dhcp_client+0x300>)
 800cc8a:	f641 62fb 	movw	r2, #7931	; 0x1efb
 800cc8e:	4915      	ldr	r1, [pc, #84]	; (800cce4 <rx_dhcp_client+0x304>)
 800cc90:	2002      	movs	r0, #2
 800cc92:	f7fa faa3 	bl	80071dc <mg_log_prefix>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d00f      	beq.n	800ccbc <rx_dhcp_client+0x2dc>
 800cc9c:	69bc      	ldr	r4, [r7, #24]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800cca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cca8:	f04f 0300 	mov.w	r3, #0
 800ccac:	f7f3 fda4 	bl	80007f8 <__aeabi_uldivmod>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	480c      	ldr	r0, [pc, #48]	; (800cce8 <rx_dhcp_client+0x308>)
 800ccb8:	f7fa faea 	bl	8007290 <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ccc2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d006      	beq.n	800ccd8 <rx_dhcp_client+0x2f8>
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7ff fa50 	bl	800c170 <onstatechange>
 800ccd0:	e002      	b.n	800ccd8 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800ccd2:	bf00      	nop
 800ccd4:	e000      	b.n	800ccd8 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800ccd6:	bf00      	nop
}
 800ccd8:	3738      	adds	r7, #56	; 0x38
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cce0:	0801857c 	.word	0x0801857c
 800cce4:	0801645c 	.word	0x0801645c
 800cce8:	080179a4 	.word	0x080179a4

0800ccec <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ccec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccf0:	b0d6      	sub	sp, #344	; 0x158
 800ccf2:	af04      	add	r7, sp, #16
 800ccf4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ccf8:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800ccfc:	6018      	str	r0, [r3, #0]
 800ccfe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd02:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cd06:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800cd0e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd12:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd1a:	33f0      	adds	r3, #240	; 0xf0
 800cd1c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800cd20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd24:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	681a      	ldr	r2, [r3, #0]
 800cd2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd30:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	685b      	ldr	r3, [r3, #4]
 800cd38:	4413      	add	r3, r2
 800cd3a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800cd3e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd42:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd4a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800cd4e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cd52:	429a      	cmp	r2, r3
 800cd54:	f0c0 818b 	bcc.w	800d06e <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800cd58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd5c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cd60:	4ac6      	ldr	r2, [pc, #792]	; (800d07c <rx_dhcp_server+0x390>)
 800cd62:	4618      	mov	r0, r3
 800cd64:	4611      	mov	r1, r2
 800cd66:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	f008 fd5a 	bl	8015824 <memcpy>
  res.yiaddr = ifp->ip;
 800cd70:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd74:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	689a      	ldr	r2, [r3, #8]
 800cd7c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cd80:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cd84:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800cd86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cd8a:	3310      	adds	r3, #16
 800cd8c:	3303      	adds	r3, #3
 800cd8e:	781a      	ldrb	r2, [r3, #0]
 800cd90:	3201      	adds	r2, #1
 800cd92:	b2d2      	uxtb	r2, r2
 800cd94:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800cd96:	e020      	b.n	800cdda <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800cd98:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	2b35      	cmp	r3, #53	; 0x35
 800cda0:	d111      	bne.n	800cdc6 <rx_dhcp_server+0xda>
 800cda2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cda6:	3301      	adds	r3, #1
 800cda8:	781b      	ldrb	r3, [r3, #0]
 800cdaa:	2b01      	cmp	r3, #1
 800cdac:	d10b      	bne.n	800cdc6 <rx_dhcp_server+0xda>
 800cdae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cdb2:	3302      	adds	r3, #2
 800cdb4:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d904      	bls.n	800cdc6 <rx_dhcp_server+0xda>
      op = p[2];
 800cdbc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cdc0:	789b      	ldrb	r3, [r3, #2]
 800cdc2:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 800cdc6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cdca:	3301      	adds	r3, #1
 800cdcc:	781b      	ldrb	r3, [r3, #0]
 800cdce:	3302      	adds	r3, #2
 800cdd0:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800cdd4:	4413      	add	r3, r2
 800cdd6:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800cdda:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cdde:	3301      	adds	r3, #1
 800cde0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d904      	bls.n	800cdf2 <rx_dhcp_server+0x106>
 800cde8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	2bff      	cmp	r3, #255	; 0xff
 800cdf0:	d1d2      	bne.n	800cd98 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800cdf2:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800cdf6:	2b01      	cmp	r3, #1
 800cdf8:	d004      	beq.n	800ce04 <rx_dhcp_server+0x118>
 800cdfa:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	f040 8136 	bne.w	800d070 <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800ce04:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800ce08:	2b01      	cmp	r3, #1
 800ce0a:	d101      	bne.n	800ce10 <rx_dhcp_server+0x124>
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	e000      	b.n	800ce12 <rx_dhcp_server+0x126>
 800ce10:	2305      	movs	r3, #5
 800ce12:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 800ce16:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce1a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce1e:	2235      	movs	r2, #53	; 0x35
 800ce20:	701a      	strb	r2, [r3, #0]
 800ce22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce26:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce2a:	2201      	movs	r2, #1
 800ce2c:	705a      	strb	r2, [r3, #1]
 800ce2e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce32:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce36:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800ce3a:	709a      	strb	r2, [r3, #2]
 800ce3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce40:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce44:	2201      	movs	r2, #1
 800ce46:	70da      	strb	r2, [r3, #3]
 800ce48:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce4c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce50:	2204      	movs	r2, #4
 800ce52:	711a      	strb	r2, [r3, #4]
 800ce54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce58:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	715a      	strb	r2, [r3, #5]
 800ce60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce64:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce68:	2200      	movs	r2, #0
 800ce6a:	719a      	strb	r2, [r3, #6]
 800ce6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce70:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce74:	2200      	movs	r2, #0
 800ce76:	71da      	strb	r2, [r3, #7]
 800ce78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce7c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce80:	2200      	movs	r2, #0
 800ce82:	721a      	strb	r2, [r3, #8]
 800ce84:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce88:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce8c:	2236      	movs	r2, #54	; 0x36
 800ce8e:	725a      	strb	r2, [r3, #9]
 800ce90:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ce94:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ce98:	2204      	movs	r2, #4
 800ce9a:	729a      	strb	r2, [r3, #10]
 800ce9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cea0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cea4:	2200      	movs	r2, #0
 800cea6:	72da      	strb	r2, [r3, #11]
 800cea8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ceac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	731a      	strb	r2, [r3, #12]
 800ceb4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ceb8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cebc:	2200      	movs	r2, #0
 800cebe:	735a      	strb	r2, [r3, #13]
 800cec0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cec4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cec8:	2200      	movs	r2, #0
 800ceca:	739a      	strb	r2, [r3, #14]
 800cecc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800ced0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ced4:	220c      	movs	r2, #12
 800ced6:	73da      	strb	r2, [r3, #15]
 800ced8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cedc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cee0:	2203      	movs	r2, #3
 800cee2:	741a      	strb	r2, [r3, #16]
 800cee4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cee8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ceec:	226d      	movs	r2, #109	; 0x6d
 800ceee:	745a      	strb	r2, [r3, #17]
 800cef0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cef4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cef8:	2269      	movs	r2, #105	; 0x69
 800cefa:	749a      	strb	r2, [r3, #18]
 800cefc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf00:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf04:	2270      	movs	r2, #112	; 0x70
 800cf06:	74da      	strb	r2, [r3, #19]
 800cf08:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf0c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf10:	2233      	movs	r2, #51	; 0x33
 800cf12:	751a      	strb	r2, [r3, #20]
 800cf14:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf18:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf1c:	2204      	movs	r2, #4
 800cf1e:	755a      	strb	r2, [r3, #21]
 800cf20:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf24:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf28:	22ff      	movs	r2, #255	; 0xff
 800cf2a:	759a      	strb	r2, [r3, #22]
 800cf2c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf30:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf34:	22ff      	movs	r2, #255	; 0xff
 800cf36:	75da      	strb	r2, [r3, #23]
 800cf38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf40:	22ff      	movs	r2, #255	; 0xff
 800cf42:	761a      	strb	r2, [r3, #24]
 800cf44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf4c:	22ff      	movs	r2, #255	; 0xff
 800cf4e:	765a      	strb	r2, [r3, #25]
 800cf50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800cf58:	22ff      	movs	r2, #255	; 0xff
 800cf5a:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800cf5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cf60:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf68:	f103 011c 	add.w	r1, r3, #28
 800cf6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cf70:	331c      	adds	r3, #28
 800cf72:	2206      	movs	r2, #6
 800cf74:	4618      	mov	r0, r3
 800cf76:	f008 fc55 	bl	8015824 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800cf7a:	f107 030c 	add.w	r3, r7, #12
 800cf7e:	3305      	adds	r3, #5
 800cf80:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800cf84:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800cf88:	6812      	ldr	r2, [r2, #0]
 800cf8a:	320c      	adds	r2, #12
 800cf8c:	6812      	ldr	r2, [r2, #0]
 800cf8e:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800cf90:	f107 030c 	add.w	r3, r7, #12
 800cf94:	330b      	adds	r3, #11
 800cf96:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800cf9a:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800cf9e:	6812      	ldr	r2, [r2, #0]
 800cfa0:	3208      	adds	r2, #8
 800cfa2:	6812      	ldr	r2, [r2, #0]
 800cfa4:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800cfa6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cfaa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cfae:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800cfb2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800cfb6:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800cfba:	4615      	mov	r5, r2
 800cfbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cfbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cfc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800cfc4:	c403      	stmia	r4!, {r0, r1}
 800cfc6:	8022      	strh	r2, [r4, #0]
 800cfc8:	3402      	adds	r4, #2
 800cfca:	0c13      	lsrs	r3, r2, #16
 800cfcc:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800cfce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cfd2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfda:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800cfde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cfe2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800cfe6:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 800cfea:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cfee:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff6:	685a      	ldr	r2, [r3, #4]
 800cff8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800cffc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d000:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800d002:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d006:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	691b      	ldr	r3, [r3, #16]
 800d00e:	1d9d      	adds	r5, r3, #6
 800d010:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d014:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	689e      	ldr	r6, [r3, #8]
 800d01c:	2043      	movs	r0, #67	; 0x43
 800d01e:	f7fd fe80 	bl	800ad22 <mg_ntohs>
 800d022:	4603      	mov	r3, r0
 800d024:	4698      	mov	r8, r3
 800d026:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d005      	beq.n	800d03a <rx_dhcp_server+0x34e>
 800d02e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d032:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800d036:	691c      	ldr	r4, [r3, #16]
 800d038:	e001      	b.n	800d03e <rx_dhcp_server+0x352>
 800d03a:	f04f 34ff 	mov.w	r4, #4294967295
 800d03e:	2044      	movs	r0, #68	; 0x44
 800d040:	f7fd fe6f 	bl	800ad22 <mg_ntohs>
 800d044:	4603      	mov	r3, r0
 800d046:	461a      	mov	r2, r3
 800d048:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800d04c:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800d050:	f44f 7388 	mov.w	r3, #272	; 0x110
 800d054:	9303      	str	r3, [sp, #12]
 800d056:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d05a:	9302      	str	r3, [sp, #8]
 800d05c:	9201      	str	r2, [sp, #4]
 800d05e:	9400      	str	r4, [sp, #0]
 800d060:	4643      	mov	r3, r8
 800d062:	4632      	mov	r2, r6
 800d064:	4629      	mov	r1, r5
 800d066:	6800      	ldr	r0, [r0, #0]
 800d068:	f7ff f95e 	bl	800c328 <tx_udp>
 800d06c:	e000      	b.n	800d070 <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800d06e:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800d070:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800d074:	46bd      	mov	sp, r7
 800d076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d07a:	bf00      	nop
 800d07c:	080179bc 	.word	0x080179bc

0800d080 <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800d080:	b580      	push	{r7, lr}
 800d082:	b084      	sub	sp, #16
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d08e:	2201      	movs	r2, #1
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	4618      	mov	r0, r3
 800d094:	f7ff faf0 	bl	800c678 <getpeer>
 800d098:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d059      	beq.n	800d154 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a4:	881b      	ldrh	r3, [r3, #0]
 800d0a6:	b29a      	uxth	r2, r3
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	331c      	adds	r3, #28
 800d0b0:	683a      	ldr	r2, [r7, #0]
 800d0b2:	69d2      	ldr	r2, [r2, #28]
 800d0b4:	320c      	adds	r2, #12
 800d0b6:	6812      	ldr	r2, [r2, #0]
 800d0b8:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	3390      	adds	r3, #144	; 0x90
 800d0be:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	f103 0010 	add.w	r0, r3, #16
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	3306      	adds	r3, #6
 800d0cc:	2206      	movs	r2, #6
 800d0ce:	4619      	mov	r1, r3
 800d0d0:	f008 fba8 	bl	8015824 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800d0d4:	68fb      	ldr	r3, [r7, #12]
 800d0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d0dc:	d304      	bcc.n	800d0e8 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800d0de:	491f      	ldr	r1, [pc, #124]	; (800d15c <rx_udp+0xdc>)
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f7f5 f8bf 	bl	8002264 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800d0e6:	e035      	b.n	800d154 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0ec:	68fb      	ldr	r3, [r7, #12]
 800d0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f0:	1ad2      	subs	r2, r2, r3
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	429a      	cmp	r2, r3
 800d0f8:	d212      	bcs.n	800d120 <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	68db      	ldr	r3, [r3, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	4619      	mov	r1, r3
 800d10c:	f7f9 f876 	bl	80061fc <mg_iobuf_resize>
 800d110:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800d112:	2b00      	cmp	r3, #0
 800d114:	d104      	bne.n	800d120 <rx_udp+0xa0>
      mg_error(c, "oom");
 800d116:	4912      	ldr	r1, [pc, #72]	; (800d160 <rx_udp+0xe0>)
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	f7f5 f8a3 	bl	8002264 <mg_error>
}
 800d11e:	e019      	b.n	800d154 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d128:	18d0      	adds	r0, r2, r3
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	6899      	ldr	r1, [r3, #8]
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	461a      	mov	r2, r3
 800d134:	f008 fb76 	bl	8015824 <memcpy>
      c->recv.len += pkt->pay.len;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	68db      	ldr	r3, [r3, #12]
 800d140:	441a      	add	r2, r3
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	330c      	adds	r3, #12
 800d14a:	461a      	mov	r2, r3
 800d14c:	2107      	movs	r1, #7
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f7f5 f866 	bl	8002220 <mg_call>
}
 800d154:	bf00      	nop
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	08017acc 	.word	0x08017acc
 800d160:	08017ae8 	.word	0x08017ae8

0800d164 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800d164:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d166:	b091      	sub	sp, #68	; 0x44
 800d168:	af06      	add	r7, sp, #24
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
 800d170:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	689a      	ldr	r2, [r3, #8]
 800d176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d178:	3314      	adds	r3, #20
 800d17a:	9301      	str	r3, [sp, #4]
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	9300      	str	r3, [sp, #0]
 800d180:	4613      	mov	r3, r2
 800d182:	2206      	movs	r2, #6
 800d184:	68b9      	ldr	r1, [r7, #8]
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7ff f878 	bl	800c27c <tx_ip>
 800d18c:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800d18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d190:	3314      	adds	r3, #20
 800d192:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800d194:	2214      	movs	r2, #20
 800d196:	2100      	movs	r1, #0
 800d198:	6a38      	ldr	r0, [r7, #32]
 800d19a:	f008 fa5c 	bl	8015656 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800d19e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d009      	beq.n	800d1b8 <tx_tcp+0x54>
 800d1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d006      	beq.n	800d1b8 <tx_tcp+0x54>
 800d1aa:	6a3b      	ldr	r3, [r7, #32]
 800d1ac:	3314      	adds	r3, #20
 800d1ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1b0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f008 fa35 	bl	8015622 <memmove>
  tcp->sport = sport;
 800d1b8:	6a3b      	ldr	r3, [r7, #32]
 800d1ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800d1be:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800d1c6:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800d1c8:	6a3b      	ldr	r3, [r7, #32]
 800d1ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d1cc:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800d1ce:	6a3b      	ldr	r3, [r7, #32]
 800d1d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1d2:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800d1d4:	6a3b      	ldr	r3, [r7, #32]
 800d1d6:	78fa      	ldrb	r2, [r7, #3]
 800d1d8:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 800d1da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d1de:	f7fd fda0 	bl	800ad22 <mg_ntohs>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	461a      	mov	r2, r3
 800d1e6:	6a3b      	ldr	r3, [r7, #32]
 800d1e8:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800d1ea:	6a3b      	ldr	r3, [r7, #32]
 800d1ec:	2250      	movs	r2, #80	; 0x50
 800d1ee:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800d1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	3314      	adds	r3, #20
 800d1fa:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	753b      	strb	r3, [r7, #20]
 800d200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d202:	7a5b      	ldrb	r3, [r3, #9]
 800d204:	757b      	strb	r3, [r7, #21]
 800d206:	8b7b      	ldrh	r3, [r7, #26]
 800d208:	0a1b      	lsrs	r3, r3, #8
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	75bb      	strb	r3, [r7, #22]
 800d210:	8b7b      	ldrh	r3, [r7, #26]
 800d212:	b2db      	uxtb	r3, r3
 800d214:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800d216:	8b7b      	ldrh	r3, [r7, #26]
 800d218:	461a      	mov	r2, r3
 800d21a:	6a39      	ldr	r1, [r7, #32]
 800d21c:	69f8      	ldr	r0, [r7, #28]
 800d21e:	f7fe fed3 	bl	800bfc8 <csumup>
 800d222:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800d224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d226:	330c      	adds	r3, #12
 800d228:	2204      	movs	r2, #4
 800d22a:	4619      	mov	r1, r3
 800d22c:	69f8      	ldr	r0, [r7, #28]
 800d22e:	f7fe fecb 	bl	800bfc8 <csumup>
 800d232:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	3310      	adds	r3, #16
 800d238:	2204      	movs	r2, #4
 800d23a:	4619      	mov	r1, r3
 800d23c:	69f8      	ldr	r0, [r7, #28]
 800d23e:	f7fe fec3 	bl	800bfc8 <csumup>
 800d242:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800d244:	f107 0314 	add.w	r3, r7, #20
 800d248:	2204      	movs	r2, #4
 800d24a:	4619      	mov	r1, r3
 800d24c:	69f8      	ldr	r0, [r7, #28]
 800d24e:	f7fe febb 	bl	800bfc8 <csumup>
 800d252:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800d254:	69f8      	ldr	r0, [r7, #28]
 800d256:	f7fe fee4 	bl	800c022 <csumfin>
 800d25a:	4603      	mov	r3, r0
 800d25c:	461a      	mov	r2, r3
 800d25e:	6a3b      	ldr	r3, [r7, #32]
 800d260:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800d262:	4b21      	ldr	r3, [pc, #132]	; (800d2e8 <tx_tcp+0x184>)
 800d264:	f641 7253 	movw	r2, #8019	; 0x1f53
 800d268:	4920      	ldr	r1, [pc, #128]	; (800d2ec <tx_tcp+0x188>)
 800d26a:	2003      	movs	r0, #3
 800d26c:	f7f9 ffb6 	bl	80071dc <mg_log_prefix>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	d025      	beq.n	800d2c2 <tx_tcp+0x15e>
 800d276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d278:	f103 050c 	add.w	r5, r3, #12
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	881b      	ldrh	r3, [r3, #0]
 800d280:	b29b      	uxth	r3, r3
 800d282:	4618      	mov	r0, r3
 800d284:	f7fd fd4d 	bl	800ad22 <mg_ntohs>
 800d288:	4603      	mov	r3, r0
 800d28a:	461e      	mov	r6, r3
 800d28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28e:	f103 0410 	add.w	r4, r3, #16
 800d292:	6a3b      	ldr	r3, [r7, #32]
 800d294:	885b      	ldrh	r3, [r3, #2]
 800d296:	b29b      	uxth	r3, r3
 800d298:	4618      	mov	r0, r3
 800d29a:	f7fd fd42 	bl	800ad22 <mg_ntohs>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	461a      	mov	r2, r3
 800d2a2:	6a3b      	ldr	r3, [r7, #32]
 800d2a4:	7b5b      	ldrb	r3, [r3, #13]
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2aa:	9304      	str	r3, [sp, #16]
 800d2ac:	9103      	str	r1, [sp, #12]
 800d2ae:	9202      	str	r2, [sp, #8]
 800d2b0:	9401      	str	r4, [sp, #4]
 800d2b2:	4b0f      	ldr	r3, [pc, #60]	; (800d2f0 <tx_tcp+0x18c>)
 800d2b4:	9300      	str	r3, [sp, #0]
 800d2b6:	4633      	mov	r3, r6
 800d2b8:	462a      	mov	r2, r5
 800d2ba:	490d      	ldr	r1, [pc, #52]	; (800d2f0 <tx_tcp+0x18c>)
 800d2bc:	480d      	ldr	r0, [pc, #52]	; (800d2f4 <tx_tcp+0x190>)
 800d2be:	f7f9 ffe7 	bl	8007290 <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 800d2c2:	6a3b      	ldr	r3, [r7, #32]
 800d2c4:	f103 0214 	add.w	r2, r3, #20
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	695b      	ldr	r3, [r3, #20]
 800d2cc:	1ad3      	subs	r3, r2, r3
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2d2:	4413      	add	r3, r2
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	68f8      	ldr	r0, [r7, #12]
 800d2d8:	f7fe fed1 	bl	800c07e <ether_output>
 800d2dc:	4603      	mov	r3, r0
}
 800d2de:	4618      	mov	r0, r3
 800d2e0:	372c      	adds	r7, #44	; 0x2c
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	0801858c 	.word	0x0801858c
 800d2ec:	0801645c 	.word	0x0801645c
 800d2f0:	08007f99 	.word	0x08007f99
 800d2f4:	08017aec 	.word	0x08017aec

0800d2f8 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800d2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2fc:	b08c      	sub	sp, #48	; 0x30
 800d2fe:	af06      	add	r7, sp, #24
 800d300:	60f8      	str	r0, [r7, #12]
 800d302:	60b9      	str	r1, [r7, #8]
 800d304:	603b      	str	r3, [r7, #0]
 800d306:	4613      	mov	r3, r2
 800d308:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30e:	7b5b      	ldrb	r3, [r3, #13]
 800d310:	f003 0303 	and.w	r3, r3, #3
 800d314:	2b00      	cmp	r3, #0
 800d316:	bf14      	ite	ne
 800d318:	2301      	movne	r3, #1
 800d31a:	2300      	moveq	r3, #0
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800d320:	68bb      	ldr	r3, [r7, #8]
 800d322:	691b      	ldr	r3, [r3, #16]
 800d324:	1d9e      	adds	r6, r3, #6
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d332:	885b      	ldrh	r3, [r3, #2]
 800d334:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800d33a:	881b      	ldrh	r3, [r3, #0]
 800d33c:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	4618      	mov	r0, r3
 800d346:	f7fd fcd3 	bl	800acf0 <mg_ntohl>
 800d34a:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	4413      	add	r3, r2
 800d350:	4618      	mov	r0, r3
 800d352:	f7fd fccd 	bl	800acf0 <mg_ntohl>
 800d356:	4601      	mov	r1, r0
 800d358:	79fa      	ldrb	r2, [r7, #7]
 800d35a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35c:	9305      	str	r3, [sp, #20]
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	9304      	str	r3, [sp, #16]
 800d362:	9103      	str	r1, [sp, #12]
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	9302      	str	r3, [sp, #8]
 800d368:	9501      	str	r5, [sp, #4]
 800d36a:	9400      	str	r4, [sp, #0]
 800d36c:	4613      	mov	r3, r2
 800d36e:	4642      	mov	r2, r8
 800d370:	4631      	mov	r1, r6
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f7ff fef6 	bl	800d164 <tx_tcp>
 800d378:	4603      	mov	r3, r0
                buf, len);
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d384 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800d384:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800d388:	b088      	sub	sp, #32
 800d38a:	af02      	add	r7, sp, #8
 800d38c:	6078      	str	r0, [r7, #4]
 800d38e:	460b      	mov	r3, r1
 800d390:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685b      	ldr	r3, [r3, #4]
 800d396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d398:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	3390      	adds	r3, #144	; 0x90
 800d39e:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	2b01      	cmp	r3, #1
 800d3a4:	d101      	bne.n	800d3aa <settmout+0x26>
 800d3a6:	2396      	movs	r3, #150	; 0x96
 800d3a8:	e001      	b.n	800d3ae <settmout+0x2a>
 800d3aa:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800d3ae:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d3b6:	68f9      	ldr	r1, [r7, #12]
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	460c      	mov	r4, r1
 800d3bc:	4605      	mov	r5, r0
 800d3be:	eb12 0804 	adds.w	r8, r2, r4
 800d3c2:	eb43 0905 	adc.w	r9, r3, r5
 800d3c6:	693b      	ldr	r3, [r7, #16]
 800d3c8:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	78fa      	ldrb	r2, [r7, #3]
 800d3d0:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800d3d2:	4b0d      	ldr	r3, [pc, #52]	; (800d408 <settmout+0x84>)
 800d3d4:	f641 7268 	movw	r2, #8040	; 0x1f68
 800d3d8:	490c      	ldr	r1, [pc, #48]	; (800d40c <settmout+0x88>)
 800d3da:	2004      	movs	r0, #4
 800d3dc:	f7f9 fefe 	bl	80071dc <mg_log_prefix>
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d00b      	beq.n	800d3fe <settmout+0x7a>
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d3ea:	78f8      	ldrb	r0, [r7, #3]
 800d3ec:	693b      	ldr	r3, [r7, #16]
 800d3ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800d3f2:	e9cd 2300 	strd	r2, r3, [sp]
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	4805      	ldr	r0, [pc, #20]	; (800d410 <settmout+0x8c>)
 800d3fa:	f7f9 ff49 	bl	8007290 <mg_log>
}
 800d3fe:	bf00      	nop
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d408:	08018594 	.word	0x08018594
 800d40c:	0801645c 	.word	0x0801645c
 800d410:	08017b10 	.word	0x08017b10

0800d414 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800d414:	b5b0      	push	{r4, r5, r7, lr}
 800d416:	b084      	sub	sp, #16
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
 800d41c:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	685b      	ldr	r3, [r3, #4]
 800d422:	4618      	mov	r0, r3
 800d424:	f7fa fa8e 	bl	8007944 <mg_alloc_conn>
 800d428:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10e      	bne.n	800d44e <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 800d430:	4b4b      	ldr	r3, [pc, #300]	; (800d560 <accept_conn+0x14c>)
 800d432:	f641 726f 	movw	r2, #8047	; 0x1f6f
 800d436:	494b      	ldr	r1, [pc, #300]	; (800d564 <accept_conn+0x150>)
 800d438:	2001      	movs	r0, #1
 800d43a:	f7f9 fecf 	bl	80071dc <mg_log_prefix>
 800d43e:	4603      	mov	r3, r0
 800d440:	2b00      	cmp	r3, #0
 800d442:	d002      	beq.n	800d44a <accept_conn+0x36>
 800d444:	4848      	ldr	r0, [pc, #288]	; (800d568 <accept_conn+0x154>)
 800d446:	f7f9 ff23 	bl	8007290 <mg_log>
    return NULL;
 800d44a:	2300      	movs	r3, #0
 800d44c:	e083      	b.n	800d556 <accept_conn+0x142>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	3390      	adds	r3, #144	; 0x90
 800d452:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d458:	689b      	ldr	r3, [r3, #8]
 800d45a:	4618      	mov	r0, r3
 800d45c:	f7fd fc48 	bl	800acf0 <mg_ntohl>
 800d460:	4602      	mov	r2, r0
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	601a      	str	r2, [r3, #0]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	4618      	mov	r0, r3
 800d46e:	f7fd fc3f 	bl	800acf0 <mg_ntohl>
 800d472:	4602      	mov	r2, r0
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	f103 0010 	add.w	r0, r3, #16
 800d47e:	683b      	ldr	r3, [r7, #0]
 800d480:	691b      	ldr	r3, [r3, #16]
 800d482:	3306      	adds	r3, #6
 800d484:	2206      	movs	r2, #6
 800d486:	4619      	mov	r1, r3
 800d488:	f008 f9cc 	bl	8015824 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800d48c:	2100      	movs	r1, #0
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f7ff ff78 	bl	800d384 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	331c      	adds	r3, #28
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	69d2      	ldr	r2, [r2, #28]
 800d49c:	320c      	adds	r2, #12
 800d49e:	6812      	ldr	r2, [r2, #0]
 800d4a0:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4a6:	881b      	ldrh	r3, [r3, #0]
 800d4a8:	b29a      	uxth	r2, r3
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800d4ae:	4b2c      	ldr	r3, [pc, #176]	; (800d560 <accept_conn+0x14c>)
 800d4b0:	f641 7278 	movw	r2, #8056	; 0x1f78
 800d4b4:	492b      	ldr	r1, [pc, #172]	; (800d564 <accept_conn+0x150>)
 800d4b6:	2003      	movs	r0, #3
 800d4b8:	f7f9 fe90 	bl	80071dc <mg_log_prefix>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d007      	beq.n	800d4d2 <accept_conn+0xbe>
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	331c      	adds	r3, #28
 800d4ca:	4a28      	ldr	r2, [pc, #160]	; (800d56c <accept_conn+0x158>)
 800d4cc:	4828      	ldr	r0, [pc, #160]	; (800d570 <accept_conn+0x15c>)
 800d4ce:	f7f9 fedf 	bl	8007290 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	681a      	ldr	r2, [r3, #0]
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	601a      	str	r2, [r3, #0]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	685b      	ldr	r3, [r3, #4]
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800d4e4:	68fa      	ldr	r2, [r7, #12]
 800d4e6:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800d4ea:	f043 0304 	orr.w	r3, r3, #4
 800d4ee:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d4f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800d4fc:	b2d9      	uxtb	r1, r3
 800d4fe:	68fa      	ldr	r2, [r7, #12]
 800d500:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800d504:	f361 03c3 	bfi	r3, r1, #3, #1
 800d508:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 800d514:	68fa      	ldr	r2, [r7, #12]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f102 0408 	add.w	r4, r2, #8
 800d51c:	f103 0508 	add.w	r5, r3, #8
 800d520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 800d540:	2200      	movs	r2, #0
 800d542:	2101      	movs	r1, #1
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f7f4 fe6b 	bl	8002220 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800d54a:	2200      	movs	r2, #0
 800d54c:	2105      	movs	r1, #5
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7f4 fe66 	bl	8002220 <mg_call>
  return c;
 800d554:	68fb      	ldr	r3, [r7, #12]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bdb0      	pop	{r4, r5, r7, pc}
 800d55e:	bf00      	nop
 800d560:	080185a0 	.word	0x080185a0
 800d564:	0801645c 	.word	0x0801645c
 800d568:	08017188 	.word	0x08017188
 800d56c:	08008011 	.word	0x08008011
 800d570:	08017b20 	.word	0x08017b20

0800d574 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800d574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d576:	b093      	sub	sp, #76	; 0x4c
 800d578:	af06      	add	r7, sp, #24
 800d57a:	6178      	str	r0, [r7, #20]
 800d57c:	6139      	str	r1, [r7, #16]
 800d57e:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	685b      	ldr	r3, [r3, #4]
 800d584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d586:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 800d588:	697b      	ldr	r3, [r7, #20]
 800d58a:	3390      	adds	r3, #144	; 0x90
 800d58c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800d58e:	697b      	ldr	r3, [r7, #20]
 800d590:	331c      	adds	r3, #28
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d59c:	f003 0301 	and.w	r3, r3, #1
 800d5a0:	b2db      	uxtb	r3, r3
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d024      	beq.n	800d5f0 <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 800d5a6:	232e      	movs	r3, #46	; 0x2e
 800d5a8:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 800d5aa:	68fa      	ldr	r2, [r7, #12]
 800d5ac:	6a3b      	ldr	r3, [r7, #32]
 800d5ae:	441a      	add	r2, r3
 800d5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5b2:	699b      	ldr	r3, [r3, #24]
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d904      	bls.n	800d5c2 <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 800d5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ba:	699a      	ldr	r2, [r3, #24]
 800d5bc:	6a3b      	ldr	r3, [r7, #32]
 800d5be:	1ad3      	subs	r3, r2, r3
 800d5c0:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800d5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5c4:	f103 0010 	add.w	r0, r3, #16
 800d5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5ca:	689c      	ldr	r4, [r3, #8]
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	8b1d      	ldrh	r5, [r3, #24]
 800d5d0:	69fb      	ldr	r3, [r7, #28]
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800d5d6:	68f9      	ldr	r1, [r7, #12]
 800d5d8:	9103      	str	r1, [sp, #12]
 800d5da:	6939      	ldr	r1, [r7, #16]
 800d5dc:	9102      	str	r1, [sp, #8]
 800d5de:	9201      	str	r2, [sp, #4]
 800d5e0:	9300      	str	r3, [sp, #0]
 800d5e2:	462b      	mov	r3, r5
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	4601      	mov	r1, r0
 800d5e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d5ea:	f7fe fe9d 	bl	800c328 <tx_udp>
 800d5ee:	e046      	b.n	800d67e <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 800d5f0:	2362      	movs	r3, #98	; 0x62
 800d5f2:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 800d5f4:	68fa      	ldr	r2, [r7, #12]
 800d5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f8:	441a      	add	r2, r3
 800d5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5fc:	699b      	ldr	r3, [r3, #24]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d904      	bls.n	800d60c <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	699a      	ldr	r2, [r3, #24]
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800d60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d60e:	f103 0610 	add.w	r6, r3, #16
 800d612:	69fb      	ldr	r3, [r7, #28]
 800d614:	60bb      	str	r3, [r7, #8]
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	8b1c      	ldrh	r4, [r3, #24]
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	4618      	mov	r0, r3
 800d624:	f7fd fb64 	bl	800acf0 <mg_ntohl>
 800d628:	6078      	str	r0, [r7, #4]
 800d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62c:	685b      	ldr	r3, [r3, #4]
 800d62e:	4618      	mov	r0, r3
 800d630:	f7fd fb5e 	bl	800acf0 <mg_ntohl>
 800d634:	4602      	mov	r2, r0
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	9305      	str	r3, [sp, #20]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	9304      	str	r3, [sp, #16]
 800d63e:	9203      	str	r2, [sp, #12]
 800d640:	6879      	ldr	r1, [r7, #4]
 800d642:	9102      	str	r1, [sp, #8]
 800d644:	9501      	str	r5, [sp, #4]
 800d646:	9400      	str	r4, [sp, #0]
 800d648:	2318      	movs	r3, #24
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	4631      	mov	r1, r6
 800d64e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d650:	f7ff fd88 	bl	800d164 <tx_tcp>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d00e      	beq.n	800d678 <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 800d65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d65c:	681a      	ldr	r2, [r3, #0]
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	441a      	add	r2, r3
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800d666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d668:	7d9b      	ldrb	r3, [r3, #22]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	d107      	bne.n	800d67e <mg_io_send+0x10a>
 800d66e:	2100      	movs	r1, #0
 800d670:	6978      	ldr	r0, [r7, #20]
 800d672:	f7ff fe87 	bl	800d384 <settmout>
 800d676:	e002      	b.n	800d67e <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 800d678:	f04f 33ff 	mov.w	r3, #4294967295
 800d67c:	e000      	b.n	800d680 <mg_io_send+0x10c>
    }
  }
  return (long) len;
 800d67e:	68fb      	ldr	r3, [r7, #12]
}
 800d680:	4618      	mov	r0, r3
 800d682:	3734      	adds	r7, #52	; 0x34
 800d684:	46bd      	mov	sp, r7
 800d686:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d688 <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b08b      	sub	sp, #44	; 0x2c
 800d68c:	af02      	add	r7, sp, #8
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  struct connstate *s = (struct connstate *) (c + 1);
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	3390      	adds	r3, #144	; 0x90
 800d696:	61fb      	str	r3, [r7, #28]
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d69e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <read_conn+0x26>
 800d6a8:	69fb      	ldr	r3, [r7, #28]
 800d6aa:	3318      	adds	r3, #24
 800d6ac:	e001      	b.n	800d6b2 <read_conn+0x2a>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	3338      	adds	r3, #56	; 0x38
 800d6b2:	61bb      	str	r3, [r7, #24]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7fd fb18 	bl	800acf0 <mg_ntohl>
 800d6c0:	6178      	str	r0, [r7, #20]
  s->raw.align = c->recv.align;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6ce:	7b5b      	ldrb	r3, [r3, #13]
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01a      	beq.n	800d70e <read_conn+0x86>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	4618      	mov	r0, r3
 800d6e0:	f7fd fb06 	bl	800acf0 <mg_ntohl>
 800d6e4:	4603      	mov	r3, r0
 800d6e6:	1c5a      	adds	r2, r3, #1
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	605a      	str	r2, [r3, #4]
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7fd fafc 	bl	800acf0 <mg_ntohl>
 800d6f8:	4602      	mov	r2, r0
 800d6fa:	69fb      	ldr	r3, [r7, #28]
 800d6fc:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800d704:	f043 0320 	orr.w	r3, r3, #32
 800d708:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800d70c:	e0e4      	b.n	800d8d8 <read_conn+0x250>
  } else if (pkt->pay.len == 0) {
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	68db      	ldr	r3, [r3, #12]
 800d712:	2b00      	cmp	r3, #0
 800d714:	f000 80e0 	beq.w	800d8d8 <read_conn+0x250>
  } else if (seq != s->ack) {
 800d718:	69fb      	ldr	r3, [r7, #28]
 800d71a:	685b      	ldr	r3, [r3, #4]
 800d71c:	697a      	ldr	r2, [r7, #20]
 800d71e:	429a      	cmp	r2, r3
 800d720:	d029      	beq.n	800d776 <read_conn+0xee>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800d722:	683b      	ldr	r3, [r7, #0]
 800d724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d726:	685b      	ldr	r3, [r3, #4]
 800d728:	4618      	mov	r0, r3
 800d72a:	f7fd fae1 	bl	800acf0 <mg_ntohl>
 800d72e:	4602      	mov	r2, r0
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	4413      	add	r3, r2
 800d736:	613b      	str	r3, [r7, #16]
    if (s->ack == ack) {
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	693a      	ldr	r2, [r7, #16]
 800d73e:	429a      	cmp	r2, r3
 800d740:	d10e      	bne.n	800d760 <read_conn+0xd8>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800d742:	4b67      	ldr	r3, [pc, #412]	; (800d8e0 <read_conn+0x258>)
 800d744:	f641 72b7 	movw	r2, #8119	; 0x1fb7
 800d748:	4966      	ldr	r1, [pc, #408]	; (800d8e4 <read_conn+0x25c>)
 800d74a:	2004      	movs	r0, #4
 800d74c:	f7f9 fd46 	bl	80071dc <mg_log_prefix>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	f000 80c0 	beq.w	800d8d8 <read_conn+0x250>
 800d758:	4863      	ldr	r0, [pc, #396]	; (800d8e8 <read_conn+0x260>)
 800d75a:	f7f9 fd99 	bl	8007290 <mg_log>
}
 800d75e:	e0bb      	b.n	800d8d8 <read_conn+0x250>
      mg_error(c, "SEQ != ACK: %x %x %x", seq, s->ack, ack);
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	685a      	ldr	r2, [r3, #4]
 800d764:	693b      	ldr	r3, [r7, #16]
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	4613      	mov	r3, r2
 800d76a:	697a      	ldr	r2, [r7, #20]
 800d76c:	495f      	ldr	r1, [pc, #380]	; (800d8ec <read_conn+0x264>)
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f7f4 fd78 	bl	8002264 <mg_error>
}
 800d774:	e0b0      	b.n	800d8d8 <read_conn+0x250>
  } else if (io->size - io->len < pkt->pay.len &&
 800d776:	69bb      	ldr	r3, [r7, #24]
 800d778:	685a      	ldr	r2, [r3, #4]
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	689b      	ldr	r3, [r3, #8]
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	429a      	cmp	r2, r3
 800d786:	d210      	bcs.n	800d7aa <read_conn+0x122>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	689a      	ldr	r2, [r3, #8]
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	4413      	add	r3, r2
 800d792:	4619      	mov	r1, r3
 800d794:	69b8      	ldr	r0, [r7, #24]
 800d796:	f7f8 fd31 	bl	80061fc <mg_iobuf_resize>
 800d79a:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d104      	bne.n	800d7aa <read_conn+0x122>
    mg_error(c, "oom");
 800d7a0:	4953      	ldr	r1, [pc, #332]	; (800d8f0 <read_conn+0x268>)
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f7f4 fd5e 	bl	8002264 <mg_error>
 800d7a8:	e096      	b.n	800d8d8 <read_conn+0x250>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 800d7aa:	69bb      	ldr	r3, [r7, #24]
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	689b      	ldr	r3, [r3, #8]
 800d7b2:	18d0      	adds	r0, r2, r3
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	6899      	ldr	r1, [r3, #8]
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	68db      	ldr	r3, [r3, #12]
 800d7bc:	461a      	mov	r2, r3
 800d7be:	f008 f831 	bl	8015824 <memcpy>
    io->len += pkt->pay.len;
 800d7c2:	69bb      	ldr	r3, [r7, #24]
 800d7c4:	689a      	ldr	r2, [r3, #8]
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	68db      	ldr	r3, [r3, #12]
 800d7ca:	441a      	add	r2, r3
 800d7cc:	69bb      	ldr	r3, [r7, #24]
 800d7ce:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800d7d0:	4b43      	ldr	r3, [pc, #268]	; (800d8e0 <read_conn+0x258>)
 800d7d2:	f641 72c9 	movw	r2, #8137	; 0x1fc9
 800d7d6:	4943      	ldr	r1, [pc, #268]	; (800d8e4 <read_conn+0x25c>)
 800d7d8:	2003      	movs	r0, #3
 800d7da:	f7f9 fcff 	bl	80071dc <mg_log_prefix>
 800d7de:	4603      	mov	r3, r0
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00e      	beq.n	800d802 <read_conn+0x17a>
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800d7e8:	683b      	ldr	r3, [r7, #0]
 800d7ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fd fa7e 	bl	800acf0 <mg_ntohl>
 800d7f4:	4602      	mov	r2, r0
 800d7f6:	69fb      	ldr	r3, [r7, #28]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	4621      	mov	r1, r4
 800d7fc:	483d      	ldr	r0, [pc, #244]	; (800d8f4 <read_conn+0x26c>)
 800d7fe:	f7f9 fd47 	bl	8007290 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	4618      	mov	r0, r3
 800d80a:	f7fd fa71 	bl	800acf0 <mg_ntohl>
 800d80e:	4602      	mov	r2, r0
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	441a      	add	r2, r3
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	7d9b      	ldrb	r3, [r3, #22]
 800d81e:	2b01      	cmp	r3, #1
 800d820:	d003      	beq.n	800d82a <read_conn+0x1a2>
 800d822:	2101      	movs	r1, #1
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7ff fdad 	bl	800d384 <settmout>
    if (c->is_tls) {
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d834:	b2db      	uxtb	r3, r3
 800d836:	2b00      	cmp	r3, #0
 800d838:	d046      	beq.n	800d8c8 <read_conn+0x240>
      io = &c->recv;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	3338      	adds	r3, #56	; 0x38
 800d83e:	61bb      	str	r3, [r7, #24]
      if (io->size - io->len < pkt->pay.len &&
 800d840:	69bb      	ldr	r3, [r7, #24]
 800d842:	685a      	ldr	r2, [r3, #4]
 800d844:	69bb      	ldr	r3, [r7, #24]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	1ad2      	subs	r2, r2, r3
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	429a      	cmp	r2, r3
 800d850:	d210      	bcs.n	800d874 <read_conn+0x1ec>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	689a      	ldr	r2, [r3, #8]
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	68db      	ldr	r3, [r3, #12]
 800d85a:	4413      	add	r3, r2
 800d85c:	4619      	mov	r1, r3
 800d85e:	69b8      	ldr	r0, [r7, #24]
 800d860:	f7f8 fccc 	bl	80061fc <mg_iobuf_resize>
 800d864:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800d866:	2b00      	cmp	r3, #0
 800d868:	d104      	bne.n	800d874 <read_conn+0x1ec>
        mg_error(c, "oom");
 800d86a:	4921      	ldr	r1, [pc, #132]	; (800d8f0 <read_conn+0x268>)
 800d86c:	6878      	ldr	r0, [r7, #4]
 800d86e:	f7f4 fcf9 	bl	8002264 <mg_error>
 800d872:	e031      	b.n	800d8d8 <read_conn+0x250>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800d874:	69bb      	ldr	r3, [r7, #24]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	69bb      	ldr	r3, [r7, #24]
 800d87a:	689b      	ldr	r3, [r3, #8]
 800d87c:	18d1      	adds	r1, r2, r3
 800d87e:	69bb      	ldr	r3, [r7, #24]
 800d880:	685a      	ldr	r2, [r3, #4]
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	1ad3      	subs	r3, r2, r3
 800d888:	461a      	mov	r2, r3
 800d88a:	6878      	ldr	r0, [r7, #4]
 800d88c:	f7fd f8e6 	bl	800aa5c <mg_tls_recv>
 800d890:	4603      	mov	r3, r0
 800d892:	60fb      	str	r3, [r7, #12]
        if (n == MG_IO_ERR) {
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d89a:	d104      	bne.n	800d8a6 <read_conn+0x21e>
          mg_error(c, "TLS recv error");
 800d89c:	4916      	ldr	r1, [pc, #88]	; (800d8f8 <read_conn+0x270>)
 800d89e:	6878      	ldr	r0, [r7, #4]
 800d8a0:	f7f4 fce0 	bl	8002264 <mg_error>
}
 800d8a4:	e018      	b.n	800d8d8 <read_conn+0x250>
        } else if (n > 0) {
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	dd15      	ble.n	800d8d8 <read_conn+0x250>
          io->len += (size_t) n;
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	68fa      	ldr	r2, [r7, #12]
 800d8b2:	441a      	add	r2, r3
 800d8b4:	69bb      	ldr	r3, [r7, #24]
 800d8b6:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 800d8b8:	f107 030c 	add.w	r3, r7, #12
 800d8bc:	461a      	mov	r2, r3
 800d8be:	2107      	movs	r1, #7
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7f4 fcad 	bl	8002220 <mg_call>
}
 800d8c6:	e007      	b.n	800d8d8 <read_conn+0x250>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	330c      	adds	r3, #12
 800d8cc:	461a      	mov	r2, r3
 800d8ce:	2107      	movs	r1, #7
 800d8d0:	6878      	ldr	r0, [r7, #4]
 800d8d2:	f7f4 fca5 	bl	8002220 <mg_call>
}
 800d8d6:	e7ff      	b.n	800d8d8 <read_conn+0x250>
 800d8d8:	bf00      	nop
 800d8da:	3724      	adds	r7, #36	; 0x24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd90      	pop	{r4, r7, pc}
 800d8e0:	080185ac 	.word	0x080185ac
 800d8e4:	0801645c 	.word	0x0801645c
 800d8e8:	08017b34 	.word	0x08017b34
 800d8ec:	08017b4c 	.word	0x08017b4c
 800d8f0:	08017ae8 	.word	0x08017ae8
 800d8f4:	08017b64 	.word	0x08017b64
 800d8f8:	08017b78 	.word	0x08017b78

0800d8fc <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800d8fc:	b590      	push	{r4, r7, lr}
 800d8fe:	b089      	sub	sp, #36	; 0x24
 800d900:	af02      	add	r7, sp, #8
 800d902:	6078      	str	r0, [r7, #4]
 800d904:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d90a:	2200      	movs	r2, #0
 800d90c:	6839      	ldr	r1, [r7, #0]
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fe feb2 	bl	800c678 <getpeer>
 800d914:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d002      	beq.n	800d922 <rx_tcp+0x26>
 800d91c:	697b      	ldr	r3, [r7, #20]
 800d91e:	3390      	adds	r3, #144	; 0x90
 800d920:	e000      	b.n	800d924 <rx_tcp+0x28>
 800d922:	2300      	movs	r3, #0
 800d924:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 800d926:	697b      	ldr	r3, [r7, #20]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d03e      	beq.n	800d9aa <rx_tcp+0xae>
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d932:	f003 0320 	and.w	r3, r3, #32
 800d936:	b2db      	uxtb	r3, r3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d036      	beq.n	800d9aa <rx_tcp+0xae>
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d940:	7b5b      	ldrb	r3, [r3, #13]
 800d942:	f003 0312 	and.w	r3, r3, #18
 800d946:	2b00      	cmp	r3, #0
 800d948:	d02f      	beq.n	800d9aa <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d94e:	689b      	ldr	r3, [r3, #8]
 800d950:	4618      	mov	r0, r3
 800d952:	f7fd f9cd 	bl	800acf0 <mg_ntohl>
 800d956:	4602      	mov	r2, r0
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	601a      	str	r2, [r3, #0]
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d960:	685b      	ldr	r3, [r3, #4]
 800d962:	4618      	mov	r0, r3
 800d964:	f7fd f9c4 	bl	800acf0 <mg_ntohl>
 800d968:	4603      	mov	r3, r0
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d974:	689b      	ldr	r3, [r3, #8]
 800d976:	2200      	movs	r2, #0
 800d978:	9201      	str	r2, [sp, #4]
 800d97a:	2200      	movs	r2, #0
 800d97c:	9200      	str	r2, [sp, #0]
 800d97e:	2210      	movs	r2, #16
 800d980:	6839      	ldr	r1, [r7, #0]
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7ff fcb8 	bl	800d2f8 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800d988:	697a      	ldr	r2, [r7, #20]
 800d98a:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800d98e:	f36f 1345 	bfc	r3, #5, #1
 800d992:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800d996:	2100      	movs	r1, #0
 800d998:	6978      	ldr	r0, [r7, #20]
 800d99a:	f7ff fcf3 	bl	800d384 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800d99e:	2200      	movs	r2, #0
 800d9a0:	2104      	movs	r1, #4
 800d9a2:	6978      	ldr	r0, [r7, #20]
 800d9a4:	f7f4 fc3c 	bl	8002220 <mg_call>
 800d9a8:	e0c3      	b.n	800db32 <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800d9aa:	697b      	ldr	r3, [r7, #20]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d014      	beq.n	800d9da <rx_tcp+0xde>
 800d9b0:	697b      	ldr	r3, [r7, #20]
 800d9b2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d9b6:	f003 0320 	and.w	r3, r3, #32
 800d9ba:	b2db      	uxtb	r3, r3
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d00c      	beq.n	800d9da <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	9201      	str	r2, [sp, #4]
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	9200      	str	r2, [sp, #0]
 800d9ce:	2214      	movs	r2, #20
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f7ff fc90 	bl	800d2f8 <tx_tcp_pkt>
 800d9d8:	e0ab      	b.n	800db32 <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800d9da:	697b      	ldr	r3, [r7, #20]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <rx_tcp+0xfc>
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9e4:	7b5b      	ldrb	r3, [r3, #13]
 800d9e6:	f003 0304 	and.w	r3, r3, #4
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d004      	beq.n	800d9f8 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800d9ee:	4953      	ldr	r1, [pc, #332]	; (800db3c <rx_tcp+0x240>)
 800d9f0:	6978      	ldr	r0, [r7, #20]
 800d9f2:	f7f4 fc37 	bl	8002264 <mg_error>
 800d9f6:	e09c      	b.n	800db32 <rx_tcp+0x236>
  } else if (c != NULL) {
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00f      	beq.n	800da1e <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	2200      	movs	r2, #0
 800da02:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	7d9b      	ldrb	r3, [r3, #22]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d103      	bne.n	800da14 <rx_tcp+0x118>
      settmout(c,
 800da0c:	2100      	movs	r1, #0
 800da0e:	6978      	ldr	r0, [r7, #20]
 800da10:	f7ff fcb8 	bl	800d384 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800da14:	6839      	ldr	r1, [r7, #0]
 800da16:	6978      	ldr	r0, [r7, #20]
 800da18:	f7ff fe36 	bl	800d688 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800da1c:	e089      	b.n	800db32 <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da22:	2201      	movs	r2, #1
 800da24:	6839      	ldr	r1, [r7, #0]
 800da26:	4618      	mov	r0, r3
 800da28:	f7fe fe26 	bl	800c678 <getpeer>
 800da2c:	6178      	str	r0, [r7, #20]
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d10c      	bne.n	800da4e <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da38:	689b      	ldr	r3, [r3, #8]
 800da3a:	2200      	movs	r2, #0
 800da3c:	9201      	str	r2, [sp, #4]
 800da3e:	2200      	movs	r2, #0
 800da40:	9200      	str	r2, [sp, #0]
 800da42:	2214      	movs	r2, #20
 800da44:	6839      	ldr	r1, [r7, #0]
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f7ff fc56 	bl	800d2f8 <tx_tcp_pkt>
}
 800da4c:	e071      	b.n	800db32 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da52:	7b5b      	ldrb	r3, [r3, #13]
 800da54:	f003 0304 	and.w	r3, r3, #4
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d00c      	beq.n	800da76 <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800da62:	f003 0304 	and.w	r3, r3, #4
 800da66:	b2db      	uxtb	r3, r3
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d062      	beq.n	800db32 <rx_tcp+0x236>
 800da6c:	4933      	ldr	r1, [pc, #204]	; (800db3c <rx_tcp+0x240>)
 800da6e:	6978      	ldr	r0, [r7, #20]
 800da70:	f7f4 fbf8 	bl	8002264 <mg_error>
}
 800da74:	e05d      	b.n	800db32 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da7a:	7b5b      	ldrb	r3, [r3, #13]
 800da7c:	f003 0302 	and.w	r3, r3, #2
 800da80:	2b00      	cmp	r3, #0
 800da82:	d016      	beq.n	800dab2 <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4618      	mov	r0, r3
 800da8e:	f7fd f948 	bl	800ad22 <mg_ntohs>
 800da92:	4603      	mov	r3, r0
 800da94:	4618      	mov	r0, r3
 800da96:	f7fd f92b 	bl	800acf0 <mg_ntohl>
 800da9a:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800da9c:	2300      	movs	r3, #0
 800da9e:	9301      	str	r3, [sp, #4]
 800daa0:	2300      	movs	r3, #0
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2212      	movs	r2, #18
 800daa8:	6839      	ldr	r1, [r7, #0]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	f7ff fc24 	bl	800d2f8 <tx_tcp_pkt>
}
 800dab0:	e03f      	b.n	800db32 <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dab6:	7b5b      	ldrb	r3, [r3, #13]
 800dab8:	f003 0301 	and.w	r3, r3, #1
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d00c      	beq.n	800dada <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dac4:	689b      	ldr	r3, [r3, #8]
 800dac6:	2200      	movs	r2, #0
 800dac8:	9201      	str	r2, [sp, #4]
 800daca:	2200      	movs	r2, #0
 800dacc:	9200      	str	r2, [sp, #0]
 800dace:	2211      	movs	r2, #17
 800dad0:	6839      	ldr	r1, [r7, #0]
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7ff fc10 	bl	800d2f8 <tx_tcp_pkt>
}
 800dad8:	e02b      	b.n	800db32 <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dade:	689b      	ldr	r3, [r3, #8]
 800dae0:	4618      	mov	r0, r3
 800dae2:	f7fd f905 	bl	800acf0 <mg_ntohl>
 800dae6:	4604      	mov	r4, r0
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	b29b      	uxth	r3, r3
 800daf0:	4618      	mov	r0, r3
 800daf2:	f7fd f916 	bl	800ad22 <mg_ntohs>
 800daf6:	4603      	mov	r3, r0
 800daf8:	3301      	adds	r3, #1
 800dafa:	429c      	cmp	r4, r3
 800dafc:	d104      	bne.n	800db08 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800dafe:	6839      	ldr	r1, [r7, #0]
 800db00:	6978      	ldr	r0, [r7, #20]
 800db02:	f7ff fc87 	bl	800d414 <accept_conn>
}
 800db06:	e014      	b.n	800db32 <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800db0e:	f003 0304 	and.w	r3, r3, #4
 800db12:	b2db      	uxtb	r3, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10c      	bne.n	800db32 <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	2200      	movs	r2, #0
 800db20:	9201      	str	r2, [sp, #4]
 800db22:	2200      	movs	r2, #0
 800db24:	9200      	str	r2, [sp, #0]
 800db26:	2214      	movs	r2, #20
 800db28:	6839      	ldr	r1, [r7, #0]
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f7ff fbe4 	bl	800d2f8 <tx_tcp_pkt>
}
 800db30:	e7ff      	b.n	800db32 <rx_tcp+0x236>
 800db32:	bf00      	nop
 800db34:	371c      	adds	r7, #28
 800db36:	46bd      	mov	sp, r7
 800db38:	bd90      	pop	{r4, r7, pc}
 800db3a:	bf00      	nop
 800db3c:	08017b88 	.word	0x08017b88

0800db40 <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800db40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db42:	b089      	sub	sp, #36	; 0x24
 800db44:	af04      	add	r7, sp, #16
 800db46:	6078      	str	r0, [r7, #4]
 800db48:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	69db      	ldr	r3, [r3, #28]
 800db4e:	7a5b      	ldrb	r3, [r3, #9]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d116      	bne.n	800db82 <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	69db      	ldr	r3, [r3, #28]
 800db58:	f103 0214 	add.w	r2, r3, #20
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	68db      	ldr	r3, [r3, #12]
 800db64:	2b03      	cmp	r3, #3
 800db66:	f240 8101 	bls.w	800dd6c <rx_ip+0x22c>
    mkpay(pkt, pkt->icmp + 1);
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6e:	3304      	adds	r3, #4
 800db70:	4619      	mov	r1, r3
 800db72:	6838      	ldr	r0, [r7, #0]
 800db74:	f7fe fa0a 	bl	800bf8c <mkpay>
    rx_icmp(ifp, pkt);
 800db78:	6839      	ldr	r1, [r7, #0]
 800db7a:	6878      	ldr	r0, [r7, #4]
 800db7c:	f7fe fed4 	bl	800c928 <rx_icmp>
 800db80:	e0f9      	b.n	800dd76 <rx_ip+0x236>
  } else if (pkt->ip->proto == 17) {
 800db82:	683b      	ldr	r3, [r7, #0]
 800db84:	69db      	ldr	r3, [r3, #28]
 800db86:	7a5b      	ldrb	r3, [r3, #9]
 800db88:	2b11      	cmp	r3, #17
 800db8a:	f040 8086 	bne.w	800dc9a <rx_ip+0x15a>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	69db      	ldr	r3, [r3, #28]
 800db92:	f103 0214 	add.w	r2, r3, #20
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	68db      	ldr	r3, [r3, #12]
 800db9e:	2b07      	cmp	r3, #7
 800dba0:	f240 80e6 	bls.w	800dd70 <rx_ip+0x230>
    mkpay(pkt, pkt->udp + 1);
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba8:	3308      	adds	r3, #8
 800dbaa:	4619      	mov	r1, r3
 800dbac:	6838      	ldr	r0, [r7, #0]
 800dbae:	f7fe f9ed 	bl	800bf8c <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800dbb2:	4b72      	ldr	r3, [pc, #456]	; (800dd7c <rx_ip+0x23c>)
 800dbb4:	f242 0229 	movw	r2, #8233	; 0x2029
 800dbb8:	4971      	ldr	r1, [pc, #452]	; (800dd80 <rx_ip+0x240>)
 800dbba:	2003      	movs	r0, #3
 800dbbc:	f7f9 fb0e 	bl	80071dc <mg_log_prefix>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d026      	beq.n	800dc14 <rx_ip+0xd4>
 800dbc6:	683b      	ldr	r3, [r7, #0]
 800dbc8:	69db      	ldr	r3, [r3, #28]
 800dbca:	f103 050c 	add.w	r5, r3, #12
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd2:	881b      	ldrh	r3, [r3, #0]
 800dbd4:	b29b      	uxth	r3, r3
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fd f8a3 	bl	800ad22 <mg_ntohs>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	461e      	mov	r6, r3
 800dbe0:	683b      	ldr	r3, [r7, #0]
 800dbe2:	69db      	ldr	r3, [r3, #28]
 800dbe4:	f103 0410 	add.w	r4, r3, #16
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbec:	885b      	ldrh	r3, [r3, #2]
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fd f896 	bl	800ad22 <mg_ntohs>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	68db      	ldr	r3, [r3, #12]
 800dbfe:	9303      	str	r3, [sp, #12]
 800dc00:	9202      	str	r2, [sp, #8]
 800dc02:	9401      	str	r4, [sp, #4]
 800dc04:	4b5f      	ldr	r3, [pc, #380]	; (800dd84 <rx_ip+0x244>)
 800dc06:	9300      	str	r3, [sp, #0]
 800dc08:	4633      	mov	r3, r6
 800dc0a:	462a      	mov	r2, r5
 800dc0c:	495d      	ldr	r1, [pc, #372]	; (800dd84 <rx_ip+0x244>)
 800dc0e:	485e      	ldr	r0, [pc, #376]	; (800dd88 <rx_ip+0x248>)
 800dc10:	f7f9 fb3e 	bl	8007290 <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (pkt->udp->dport == mg_htons(68)) {
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc18:	885b      	ldrh	r3, [r3, #2]
 800dc1a:	b29c      	uxth	r4, r3
 800dc1c:	2044      	movs	r0, #68	; 0x44
 800dc1e:	f7fd f880 	bl	800ad22 <mg_ntohs>
 800dc22:	4603      	mov	r3, r0
 800dc24:	429c      	cmp	r4, r3
 800dc26:	d112      	bne.n	800dc4e <rx_ip+0x10e>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2c:	f103 0208 	add.w	r2, r3, #8
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc38:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800dc3c:	4619      	mov	r1, r3
 800dc3e:	6838      	ldr	r0, [r7, #0]
 800dc40:	f7fe f9a4 	bl	800bf8c <mkpay>
      rx_dhcp_client(ifp, pkt);
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f7fe feca 	bl	800c9e0 <rx_dhcp_client>
 800dc4c:	e093      	b.n	800dd76 <rx_ip+0x236>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	7f5b      	ldrb	r3, [r3, #29]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d01c      	beq.n	800dc90 <rx_ip+0x150>
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc5a:	885b      	ldrh	r3, [r3, #2]
 800dc5c:	b29c      	uxth	r4, r3
 800dc5e:	2043      	movs	r0, #67	; 0x43
 800dc60:	f7fd f85f 	bl	800ad22 <mg_ntohs>
 800dc64:	4603      	mov	r3, r0
 800dc66:	429c      	cmp	r4, r3
 800dc68:	d112      	bne.n	800dc90 <rx_ip+0x150>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc6e:	f103 0208 	add.w	r2, r3, #8
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc7a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6838      	ldr	r0, [r7, #0]
 800dc82:	f7fe f983 	bl	800bf8c <mkpay>
      rx_dhcp_server(ifp, pkt);
 800dc86:	6839      	ldr	r1, [r7, #0]
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f7ff f82f 	bl	800ccec <rx_dhcp_server>
 800dc8e:	e072      	b.n	800dd76 <rx_ip+0x236>
    } else {
      rx_udp(ifp, pkt);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f7ff f9f4 	bl	800d080 <rx_udp>
 800dc98:	e06d      	b.n	800dd76 <rx_ip+0x236>
    }
  } else if (pkt->ip->proto == 6) {
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	69db      	ldr	r3, [r3, #28]
 800dc9e:	7a5b      	ldrb	r3, [r3, #9]
 800dca0:	2b06      	cmp	r3, #6
 800dca2:	d168      	bne.n	800dd76 <rx_ip+0x236>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	69db      	ldr	r3, [r3, #28]
 800dca8:	f103 0214 	add.w	r2, r3, #20
 800dcac:	683b      	ldr	r3, [r7, #0]
 800dcae:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800dcb0:	683b      	ldr	r3, [r7, #0]
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	2b13      	cmp	r3, #19
 800dcb6:	d95d      	bls.n	800dd74 <rx_ip+0x234>
    mkpay(pkt, pkt->tcp + 1);
 800dcb8:	683b      	ldr	r3, [r7, #0]
 800dcba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcbc:	3314      	adds	r3, #20
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	6838      	ldr	r0, [r7, #0]
 800dcc2:	f7fe f963 	bl	800bf8c <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	69db      	ldr	r3, [r3, #28]
 800dcca:	885b      	ldrh	r3, [r3, #2]
 800dccc:	b29b      	uxth	r3, r3
 800dcce:	4618      	mov	r0, r3
 800dcd0:	f7fd f827 	bl	800ad22 <mg_ntohs>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcdc:	7b1b      	ldrb	r3, [r3, #12]
 800dcde:	091b      	lsrs	r3, r3, #4
 800dce0:	b2db      	uxtb	r3, r3
 800dce2:	b29b      	uxth	r3, r3
 800dce4:	3305      	adds	r3, #5
 800dce6:	b29b      	uxth	r3, r3
 800dce8:	009b      	lsls	r3, r3, #2
 800dcea:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800dcec:	89fa      	ldrh	r2, [r7, #14]
 800dcee:	89bb      	ldrh	r3, [r7, #12]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d305      	bcc.n	800dd00 <rx_ip+0x1c0>
 800dcf4:	89fa      	ldrh	r2, [r7, #14]
 800dcf6:	89bb      	ldrh	r3, [r7, #12]
 800dcf8:	1ad3      	subs	r3, r2, r3
 800dcfa:	461a      	mov	r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800dd00:	4b1e      	ldr	r3, [pc, #120]	; (800dd7c <rx_ip+0x23c>)
 800dd02:	f242 023e 	movw	r2, #8254	; 0x203e
 800dd06:	491e      	ldr	r1, [pc, #120]	; (800dd80 <rx_ip+0x240>)
 800dd08:	2003      	movs	r0, #3
 800dd0a:	f7f9 fa67 	bl	80071dc <mg_log_prefix>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d026      	beq.n	800dd62 <rx_ip+0x222>
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	69db      	ldr	r3, [r3, #28]
 800dd18:	f103 050c 	add.w	r5, r3, #12
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd20:	881b      	ldrh	r3, [r3, #0]
 800dd22:	b29b      	uxth	r3, r3
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fc fffc 	bl	800ad22 <mg_ntohs>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	461e      	mov	r6, r3
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	69db      	ldr	r3, [r3, #28]
 800dd32:	f103 0410 	add.w	r4, r3, #16
 800dd36:	683b      	ldr	r3, [r7, #0]
 800dd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd3a:	885b      	ldrh	r3, [r3, #2]
 800dd3c:	b29b      	uxth	r3, r3
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fc ffef 	bl	800ad22 <mg_ntohs>
 800dd44:	4603      	mov	r3, r0
 800dd46:	461a      	mov	r2, r3
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	68db      	ldr	r3, [r3, #12]
 800dd4c:	9303      	str	r3, [sp, #12]
 800dd4e:	9202      	str	r2, [sp, #8]
 800dd50:	9401      	str	r4, [sp, #4]
 800dd52:	4b0c      	ldr	r3, [pc, #48]	; (800dd84 <rx_ip+0x244>)
 800dd54:	9300      	str	r3, [sp, #0]
 800dd56:	4633      	mov	r3, r6
 800dd58:	462a      	mov	r2, r5
 800dd5a:	490a      	ldr	r1, [pc, #40]	; (800dd84 <rx_ip+0x244>)
 800dd5c:	480b      	ldr	r0, [pc, #44]	; (800dd8c <rx_ip+0x24c>)
 800dd5e:	f7f9 fa97 	bl	8007290 <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800dd62:	6839      	ldr	r1, [r7, #0]
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff fdc9 	bl	800d8fc <rx_tcp>
 800dd6a:	e004      	b.n	800dd76 <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800dd6c:	bf00      	nop
 800dd6e:	e002      	b.n	800dd76 <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800dd70:	bf00      	nop
 800dd72:	e000      	b.n	800dd76 <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800dd74:	bf00      	nop
  }
}
 800dd76:	3714      	adds	r7, #20
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dd7c:	080185b8 	.word	0x080185b8
 800dd80:	0801645c 	.word	0x0801645c
 800dd84:	08007f99 	.word	0x08007f99
 800dd88:	08017b94 	.word	0x08017b94
 800dd8c:	08017bb0 	.word	0x08017bb0

0800dd90 <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800dd90:	b580      	push	{r7, lr}
 800dd92:	b082      	sub	sp, #8
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	799b      	ldrb	r3, [r3, #6]
 800dda0:	2b01      	cmp	r3, #1
 800dda2:	d004      	beq.n	800ddae <rx_ip6+0x1e>
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	6a1b      	ldr	r3, [r3, #32]
 800dda8:	799b      	ldrb	r3, [r3, #6]
 800ddaa:	2b3a      	cmp	r3, #58	; 0x3a
 800ddac:	d115      	bne.n	800ddda <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	6a1b      	ldr	r3, [r3, #32]
 800ddb2:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	68db      	ldr	r3, [r3, #12]
 800ddbe:	2b03      	cmp	r3, #3
 800ddc0:	d922      	bls.n	800de08 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddc6:	3304      	adds	r3, #4
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6838      	ldr	r0, [r7, #0]
 800ddcc:	f7fe f8de 	bl	800bf8c <mkpay>
    rx_icmp(ifp, pkt);
 800ddd0:	6839      	ldr	r1, [r7, #0]
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f7fe fda8 	bl	800c928 <rx_icmp>
 800ddd8:	e019      	b.n	800de0e <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	6a1b      	ldr	r3, [r3, #32]
 800ddde:	799b      	ldrb	r3, [r3, #6]
 800dde0:	2b11      	cmp	r3, #17
 800dde2:	d114      	bne.n	800de0e <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	6a1b      	ldr	r3, [r3, #32]
 800dde8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ddec:	683b      	ldr	r3, [r7, #0]
 800ddee:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	2b07      	cmp	r3, #7
 800ddf6:	d909      	bls.n	800de0c <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddfc:	3308      	adds	r3, #8
 800ddfe:	4619      	mov	r1, r3
 800de00:	6838      	ldr	r0, [r7, #0]
 800de02:	f7fe f8c3 	bl	800bf8c <mkpay>
 800de06:	e002      	b.n	800de0e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800de08:	bf00      	nop
 800de0a:	e000      	b.n	800de0e <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800de0c:	bf00      	nop
  }
}
 800de0e:	3708      	adds	r7, #8
 800de10:	46bd      	mov	sp, r7
 800de12:	bd80      	pop	{r7, pc}

0800de14 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800de14:	b590      	push	{r4, r7, lr}
 800de16:	b093      	sub	sp, #76	; 0x4c
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800de20:	f107 0314 	add.w	r3, r7, #20
 800de24:	2234      	movs	r2, #52	; 0x34
 800de26:	2100      	movs	r1, #0
 800de28:	4618      	mov	r0, r3
 800de2a:	f007 fc14 	bl	8015656 <memset>
  pkt.raw.ptr = (char *) buf;
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800de36:	68bb      	ldr	r3, [r7, #8]
 800de38:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	2b0d      	cmp	r3, #13
 800de3e:	f240 80d1 	bls.w	800dfe4 <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	7fdb      	ldrb	r3, [r3, #31]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d013      	beq.n	800de72 <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800de4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de4c:	4618      	mov	r0, r3
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	2206      	movs	r2, #6
 800de52:	4619      	mov	r1, r3
 800de54:	f007 fbd5 	bl	8015602 <memcmp>
 800de58:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d009      	beq.n	800de72 <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800de5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de60:	2206      	movs	r2, #6
 800de62:	496a      	ldr	r1, [pc, #424]	; (800e00c <mg_tcpip_rx+0x1f8>)
 800de64:	4618      	mov	r0, r3
 800de66:	f007 fbcc 	bl	8015602 <memcmp>
 800de6a:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f040 80bb 	bne.w	800dfe8 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	7f9b      	ldrb	r3, [r3, #30]
 800de76:	2b00      	cmp	r3, #0
 800de78:	d01a      	beq.n	800deb0 <mg_tcpip_rx+0x9c>
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2b04      	cmp	r3, #4
 800de7e:	d917      	bls.n	800deb0 <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	3b04      	subs	r3, #4
 800de84:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	68b9      	ldr	r1, [r7, #8]
 800de8a:	2000      	movs	r0, #0
 800de8c:	f7fc ff60 	bl	800ad50 <mg_crc32>
 800de90:	4603      	mov	r3, r0
 800de92:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	4413      	add	r3, r2
 800de9a:	4618      	mov	r0, r3
 800de9c:	f107 0310 	add.w	r3, r7, #16
 800dea0:	2204      	movs	r2, #4
 800dea2:	4619      	mov	r1, r3
 800dea4:	f007 fbad 	bl	8015602 <memcmp>
 800dea8:	4603      	mov	r3, r0
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f040 809e 	bne.w	800dfec <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800deb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deb2:	899b      	ldrh	r3, [r3, #12]
 800deb4:	b29c      	uxth	r4, r3
 800deb6:	f640 0006 	movw	r0, #2054	; 0x806
 800deba:	f7fc ff32 	bl	800ad22 <mg_ntohs>
 800debe:	4603      	mov	r3, r0
 800dec0:	429c      	cmp	r4, r3
 800dec2:	d10d      	bne.n	800dee0 <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800dec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec6:	330e      	adds	r3, #14
 800dec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	2b29      	cmp	r3, #41	; 0x29
 800dece:	f240 808f 	bls.w	800dff0 <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800ded2:	f107 0314 	add.w	r3, r7, #20
 800ded6:	4619      	mov	r1, r3
 800ded8:	68f8      	ldr	r0, [r7, #12]
 800deda:	f7fe fc25 	bl	800c728 <rx_arp>
 800dede:	e092      	b.n	800e006 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee2:	899b      	ldrh	r3, [r3, #12]
 800dee4:	b29c      	uxth	r4, r3
 800dee6:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800deea:	f7fc ff1a 	bl	800ad22 <mg_ntohs>
 800deee:	4603      	mov	r3, r0
 800def0:	429c      	cmp	r4, r3
 800def2:	d11b      	bne.n	800df2c <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800def4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800def6:	330e      	adds	r3, #14
 800def8:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800defa:	69bb      	ldr	r3, [r7, #24]
 800defc:	2b35      	cmp	r3, #53	; 0x35
 800defe:	d979      	bls.n	800dff4 <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800df00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df02:	781b      	ldrb	r3, [r3, #0]
 800df04:	091b      	lsrs	r3, r3, #4
 800df06:	b2db      	uxtb	r3, r3
 800df08:	2b06      	cmp	r3, #6
 800df0a:	d175      	bne.n	800dff8 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800df0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df0e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800df12:	f107 0314 	add.w	r3, r7, #20
 800df16:	4611      	mov	r1, r2
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fe f837 	bl	800bf8c <mkpay>
    rx_ip6(ifp, &pkt);
 800df1e:	f107 0314 	add.w	r3, r7, #20
 800df22:	4619      	mov	r1, r3
 800df24:	68f8      	ldr	r0, [r7, #12]
 800df26:	f7ff ff33 	bl	800dd90 <rx_ip6>
 800df2a:	e06c      	b.n	800e006 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800df2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df2e:	899b      	ldrh	r3, [r3, #12]
 800df30:	b29c      	uxth	r4, r3
 800df32:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800df36:	f7fc fef4 	bl	800ad22 <mg_ntohs>
 800df3a:	4603      	mov	r3, r0
 800df3c:	429c      	cmp	r4, r3
 800df3e:	d133      	bne.n	800dfa8 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	330e      	adds	r3, #14
 800df44:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	2b21      	cmp	r3, #33	; 0x21
 800df4a:	d957      	bls.n	800dffc <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800df4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4e:	885b      	ldrh	r3, [r3, #2]
 800df50:	b29b      	uxth	r3, r3
 800df52:	4618      	mov	r0, r3
 800df54:	f7fc fee5 	bl	800ad22 <mg_ntohs>
 800df58:	4603      	mov	r3, r0
 800df5a:	f103 020e 	add.w	r2, r3, #14
 800df5e:	69bb      	ldr	r3, [r7, #24]
 800df60:	429a      	cmp	r2, r3
 800df62:	d208      	bcs.n	800df76 <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800df64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df66:	885b      	ldrh	r3, [r3, #2]
 800df68:	b29b      	uxth	r3, r3
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fc fed9 	bl	800ad22 <mg_ntohs>
 800df70:	4603      	mov	r3, r0
 800df72:	330e      	adds	r3, #14
 800df74:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800df76:	69bb      	ldr	r3, [r7, #24]
 800df78:	2b21      	cmp	r3, #33	; 0x21
 800df7a:	d941      	bls.n	800e000 <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800df7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df7e:	781b      	ldrb	r3, [r3, #0]
 800df80:	091b      	lsrs	r3, r3, #4
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b04      	cmp	r3, #4
 800df86:	d13d      	bne.n	800e004 <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800df88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df8a:	f103 0214 	add.w	r2, r3, #20
 800df8e:	f107 0314 	add.w	r3, r7, #20
 800df92:	4611      	mov	r1, r2
 800df94:	4618      	mov	r0, r3
 800df96:	f7fd fff9 	bl	800bf8c <mkpay>
    rx_ip(ifp, &pkt);
 800df9a:	f107 0314 	add.w	r3, r7, #20
 800df9e:	4619      	mov	r1, r3
 800dfa0:	68f8      	ldr	r0, [r7, #12]
 800dfa2:	f7ff fdcd 	bl	800db40 <rx_ip>
 800dfa6:	e02e      	b.n	800e006 <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800dfa8:	4b19      	ldr	r3, [pc, #100]	; (800e010 <mg_tcpip_rx+0x1fc>)
 800dfaa:	f242 027b 	movw	r2, #8315	; 0x207b
 800dfae:	4919      	ldr	r1, [pc, #100]	; (800e014 <mg_tcpip_rx+0x200>)
 800dfb0:	2003      	movs	r0, #3
 800dfb2:	f7f9 f913 	bl	80071dc <mg_log_prefix>
 800dfb6:	4603      	mov	r3, r0
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00a      	beq.n	800dfd2 <mg_tcpip_rx+0x1be>
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	899b      	ldrh	r3, [r3, #12]
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	f7fc fead 	bl	800ad22 <mg_ntohs>
 800dfc8:	4603      	mov	r3, r0
 800dfca:	4619      	mov	r1, r3
 800dfcc:	4812      	ldr	r0, [pc, #72]	; (800e018 <mg_tcpip_rx+0x204>)
 800dfce:	f7f9 f95f 	bl	8007290 <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2b10      	cmp	r3, #16
 800dfd6:	bf28      	it	cs
 800dfd8:	2310      	movcs	r3, #16
 800dfda:	4619      	mov	r1, r3
 800dfdc:	68b8      	ldr	r0, [r7, #8]
 800dfde:	f7f9 f98b 	bl	80072f8 <mg_hexdump>
 800dfe2:	e010      	b.n	800e006 <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800dfe4:	bf00      	nop
 800dfe6:	e00e      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    return;
 800dfe8:	bf00      	nop
 800dfea:	e00c      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800dfec:	bf00      	nop
 800dfee:	e00a      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800dff0:	bf00      	nop
 800dff2:	e008      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800dff4:	bf00      	nop
 800dff6:	e006      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800dff8:	bf00      	nop
 800dffa:	e004      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800dffc:	bf00      	nop
 800dffe:	e002      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800e000:	bf00      	nop
 800e002:	e000      	b.n	800e006 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800e004:	bf00      	nop
  }
}
 800e006:	374c      	adds	r7, #76	; 0x4c
 800e008:	46bd      	mov	sp, r7
 800e00a:	bd90      	pop	{r4, r7, pc}
 800e00c:	08018390 	.word	0x08018390
 800e010:	080185c0 	.word	0x080185c0
 800e014:	0801645c 	.word	0x0801645c
 800e018:	08017bcc 	.word	0x08017bcc

0800e01c <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800e01c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e01e:	b095      	sub	sp, #84	; 0x54
 800e020:	af06      	add	r7, sp, #24
 800e022:	6178      	str	r0, [r7, #20]
 800e024:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800e028:	697b      	ldr	r3, [r7, #20]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 81b9 	beq.w	800e3a2 <mg_tcpip_poll+0x386>
 800e030:	697b      	ldr	r3, [r7, #20]
 800e032:	6a1b      	ldr	r3, [r3, #32]
 800e034:	2b00      	cmp	r3, #0
 800e036:	f000 81b4 	beq.w	800e3a2 <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800e040:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e044:	e9cd 2300 	strd	r2, r3, [sp]
 800e048:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e04c:	f04f 0300 	mov.w	r3, #0
 800e050:	4608      	mov	r0, r1
 800e052:	f7fc fc14 	bl	800a87e <mg_timer_expired>
 800e056:	4603      	mov	r3, r0
 800e058:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800e05c:	6979      	ldr	r1, [r7, #20]
 800e05e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e062:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800e066:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d03f      	beq.n	800e0ee <mg_tcpip_poll+0xd2>
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	6a1b      	ldr	r3, [r3, #32]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d03a      	beq.n	800e0ee <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800e078:	697b      	ldr	r3, [r7, #20]
 800e07a:	6a1b      	ldr	r3, [r3, #32]
 800e07c:	68db      	ldr	r3, [r3, #12]
 800e07e:	6978      	ldr	r0, [r7, #20]
 800e080:	4798      	blx	r3
 800e082:	4603      	mov	r3, r0
 800e084:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e08e:	2b00      	cmp	r3, #0
 800e090:	bf14      	ite	ne
 800e092:	2301      	movne	r3, #1
 800e094:	2300      	moveq	r3, #0
 800e096:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800e09a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800e09e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800e0a2:	429a      	cmp	r2, r3
 800e0a4:	d023      	beq.n	800e0ee <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800e0a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0aa:	f083 0301 	eor.w	r3, r3, #1
 800e0ae:	b2db      	uxtb	r3, r3
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d001      	beq.n	800e0b8 <mg_tcpip_poll+0x9c>
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	e006      	b.n	800e0c6 <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d001      	beq.n	800e0c4 <mg_tcpip_poll+0xa8>
 800e0c0:	2301      	movs	r3, #1
 800e0c2:	e000      	b.n	800e0c6 <mg_tcpip_poll+0xaa>
 800e0c4:	2303      	movs	r3, #3
 800e0c6:	697a      	ldr	r2, [r7, #20]
 800e0c8:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800e0cc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800e0d0:	f083 0301 	eor.w	r3, r3, #1
 800e0d4:	b2db      	uxtb	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d006      	beq.n	800e0e8 <mg_tcpip_poll+0xcc>
 800e0da:	697b      	ldr	r3, [r7, #20]
 800e0dc:	7f1b      	ldrb	r3, [r3, #28]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d002      	beq.n	800e0e8 <mg_tcpip_poll+0xcc>
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800e0e8:	6978      	ldr	r0, [r7, #20]
 800e0ea:	f7fe f841 	bl	800c170 <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800e0ee:	697b      	ldr	r3, [r7, #20]
 800e0f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	f000 8156 	beq.w	800e3a6 <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800e0fa:	697b      	ldr	r3, [r7, #20]
 800e0fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e100:	2b01      	cmp	r3, #1
 800e102:	d107      	bne.n	800e114 <mg_tcpip_poll+0xf8>
 800e104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d003      	beq.n	800e114 <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800e10c:	6978      	ldr	r0, [r7, #20]
 800e10e:	f7fe fa79 	bl	800c604 <tx_dhcp_discover>
 800e112:	e04c      	b.n	800e1ae <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800e114:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d048      	beq.n	800e1ae <mg_tcpip_poll+0x192>
 800e11c:	697b      	ldr	r3, [r7, #20]
 800e11e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800e122:	2b03      	cmp	r3, #3
 800e124:	d143      	bne.n	800e1ae <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800e12c:	4313      	orrs	r3, r2
 800e12e:	d03e      	beq.n	800e1ae <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800e136:	697b      	ldr	r3, [r7, #20]
 800e138:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800e13c:	4290      	cmp	r0, r2
 800e13e:	eb71 0303 	sbcs.w	r3, r1, r3
 800e142:	d30a      	bcc.n	800e15a <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	2201      	movs	r2, #1
 800e148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	2200      	movs	r2, #0
 800e150:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800e152:	6978      	ldr	r0, [r7, #20]
 800e154:	f7fe f80c 	bl	800c170 <onstatechange>
 800e158:	e029      	b.n	800e1ae <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30 * 60 * 1000 > ifp->lease_expire &&
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800e160:	4993      	ldr	r1, [pc, #588]	; (800e3b0 <mg_tcpip_poll+0x394>)
 800e162:	1854      	adds	r4, r2, r1
 800e164:	f143 0500 	adc.w	r5, r3, #0
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800e16e:	42a2      	cmp	r2, r4
 800e170:	41ab      	sbcs	r3, r5
 800e172:	d21c      	bcs.n	800e1ae <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800e17a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e17e:	f04f 0300 	mov.w	r3, #0
 800e182:	f7f2 fb39 	bl	80007f8 <__aeabi_uldivmod>
 800e186:	4602      	mov	r2, r0
 800e188:	460b      	mov	r3, r1
 800e18a:	4610      	mov	r0, r2
 800e18c:	4619      	mov	r1, r3
 800e18e:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800e192:	f04f 0300 	mov.w	r3, #0
 800e196:	f7f2 fb2f 	bl	80007f8 <__aeabi_uldivmod>
    } else if (ifp->now + 30 * 60 * 1000 > ifp->lease_expire &&
 800e19a:	4313      	orrs	r3, r2
 800e19c:	d107      	bne.n	800e1ae <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	689a      	ldr	r2, [r3, #8]
 800e1a2:	f04f 33ff 	mov.w	r3, #4294967295
 800e1a6:	4983      	ldr	r1, [pc, #524]	; (800e3b4 <mg_tcpip_poll+0x398>)
 800e1a8:	6978      	ldr	r0, [r7, #20]
 800e1aa:	f7fe f9fb 	bl	800c5a4 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	6a1b      	ldr	r3, [r3, #32]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d014      	beq.n	800e1e2 <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	6a1b      	ldr	r3, [r3, #32]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	697a      	ldr	r2, [r7, #20]
 800e1c0:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800e1c2:	697a      	ldr	r2, [r7, #20]
 800e1c4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800e1c6:	697a      	ldr	r2, [r7, #20]
 800e1c8:	4798      	blx	r3
 800e1ca:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800e1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d01f      	beq.n	800e212 <mg_tcpip_poll+0x1f6>
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e1d8:	4619      	mov	r1, r3
 800e1da:	6978      	ldr	r0, [r7, #20]
 800e1dc:	f7ff fe1a 	bl	800de14 <mg_tcpip_rx>
 800e1e0:	e017      	b.n	800e212 <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800e1e2:	697b      	ldr	r3, [r7, #20]
 800e1e4:	332c      	adds	r3, #44	; 0x2c
 800e1e6:	f107 0220 	add.w	r2, r7, #32
 800e1ea:	4611      	mov	r1, r2
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fa f8bd 	bl	800836c <mg_queue_next>
 800e1f2:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800e1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d00b      	beq.n	800e212 <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1fe:	4619      	mov	r1, r3
 800e200:	6978      	ldr	r0, [r7, #20]
 800e202:	f7ff fe07 	bl	800de14 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	332c      	adds	r3, #44	; 0x2c
 800e20a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e20c:	4618      	mov	r0, r3
 800e20e:	f7fa f92b 	bl	8008468 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800e212:	697b      	ldr	r3, [r7, #20]
 800e214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	637b      	str	r3, [r7, #52]	; 0x34
 800e21a:	e0bd      	b.n	800e398 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800e21c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e21e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e222:	f003 0301 	and.w	r3, r3, #1
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	f040 80af 	bne.w	800e38c <mg_tcpip_poll+0x370>
 800e22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e230:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	f040 80a6 	bne.w	800e38c <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800e240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e242:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e246:	f003 0320 	and.w	r3, r3, #32
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	f040 809f 	bne.w	800e390 <mg_tcpip_poll+0x374>
 800e252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e254:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e258:	f003 0308 	and.w	r3, r3, #8
 800e25c:	b2db      	uxtb	r3, r3
 800e25e:	2b00      	cmp	r3, #0
 800e260:	f040 8096 	bne.w	800e390 <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800e264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e266:	3390      	adds	r3, #144	; 0x90
 800e268:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800e26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e26c:	331c      	adds	r3, #28
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800e272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e274:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800e278:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e27c:	4290      	cmp	r0, r2
 800e27e:	eb71 0303 	sbcs.w	r3, r1, r3
 800e282:	f080 8086 	bcs.w	800e392 <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	7d9b      	ldrb	r3, [r3, #22]
 800e28a:	2b01      	cmp	r3, #1
 800e28c:	d137      	bne.n	800e2fe <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800e28e:	4b4a      	ldr	r3, [pc, #296]	; (800e3b8 <mg_tcpip_poll+0x39c>)
 800e290:	f242 02b9 	movw	r2, #8377	; 0x20b9
 800e294:	4949      	ldr	r1, [pc, #292]	; (800e3bc <mg_tcpip_poll+0x3a0>)
 800e296:	2003      	movs	r0, #3
 800e298:	f7f8 ffa0 	bl	80071dc <mg_log_prefix>
 800e29c:	4603      	mov	r3, r0
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d008      	beq.n	800e2b4 <mg_tcpip_poll+0x298>
 800e2a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	4844      	ldr	r0, [pc, #272]	; (800e3c0 <mg_tcpip_poll+0x3a4>)
 800e2b0:	f7f8 ffee 	bl	8007290 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800e2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b6:	f103 0610 	add.w	r6, r3, #16
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	613b      	str	r3, [r7, #16]
 800e2be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c0:	8b1c      	ldrh	r4, [r3, #24]
 800e2c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2c4:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800e2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7fc fd10 	bl	800acf0 <mg_ntohl>
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fc fd0a 	bl	800acf0 <mg_ntohl>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	2200      	movs	r2, #0
 800e2e0:	9205      	str	r2, [sp, #20]
 800e2e2:	4a38      	ldr	r2, [pc, #224]	; (800e3c4 <mg_tcpip_poll+0x3a8>)
 800e2e4:	9204      	str	r2, [sp, #16]
 800e2e6:	9303      	str	r3, [sp, #12]
 800e2e8:	6879      	ldr	r1, [r7, #4]
 800e2ea:	9102      	str	r1, [sp, #8]
 800e2ec:	9501      	str	r5, [sp, #4]
 800e2ee:	9400      	str	r4, [sp, #0]
 800e2f0:	2310      	movs	r3, #16
 800e2f2:	693a      	ldr	r2, [r7, #16]
 800e2f4:	4631      	mov	r1, r6
 800e2f6:	6978      	ldr	r0, [r7, #20]
 800e2f8:	f7fe ff34 	bl	800d164 <tx_tcp>
 800e2fc:	e041      	b.n	800e382 <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	7ddb      	ldrb	r3, [r3, #23]
 800e302:	1c5a      	adds	r2, r3, #1
 800e304:	b2d1      	uxtb	r1, r2
 800e306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e308:	75d1      	strb	r1, [r2, #23]
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d904      	bls.n	800e318 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800e30e:	492e      	ldr	r1, [pc, #184]	; (800e3c8 <mg_tcpip_poll+0x3ac>)
 800e310:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e312:	f7f3 ffa7 	bl	8002264 <mg_error>
 800e316:	e034      	b.n	800e382 <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800e318:	4b27      	ldr	r3, [pc, #156]	; (800e3b8 <mg_tcpip_poll+0x39c>)
 800e31a:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800e31e:	4927      	ldr	r1, [pc, #156]	; (800e3bc <mg_tcpip_poll+0x3a0>)
 800e320:	2003      	movs	r0, #3
 800e322:	f7f8 ff5b 	bl	80071dc <mg_log_prefix>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d005      	beq.n	800e338 <mg_tcpip_poll+0x31c>
 800e32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e32e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e330:	4619      	mov	r1, r3
 800e332:	4826      	ldr	r0, [pc, #152]	; (800e3cc <mg_tcpip_poll+0x3b0>)
 800e334:	f7f8 ffac 	bl	8007290 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	f103 0610 	add.w	r6, r3, #16
 800e33e:	69fb      	ldr	r3, [r7, #28]
 800e340:	613b      	str	r3, [r7, #16]
 800e342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e344:	8b1c      	ldrh	r4, [r3, #24]
 800e346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e348:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800e34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34c:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800e34e:	3b01      	subs	r3, #1
 800e350:	4618      	mov	r0, r3
 800e352:	f7fc fccd 	bl	800acf0 <mg_ntohl>
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	4618      	mov	r0, r3
 800e35e:	f7fc fcc7 	bl	800acf0 <mg_ntohl>
 800e362:	4603      	mov	r3, r0
 800e364:	2200      	movs	r2, #0
 800e366:	9205      	str	r2, [sp, #20]
 800e368:	4a16      	ldr	r2, [pc, #88]	; (800e3c4 <mg_tcpip_poll+0x3a8>)
 800e36a:	9204      	str	r2, [sp, #16]
 800e36c:	9303      	str	r3, [sp, #12]
 800e36e:	6879      	ldr	r1, [r7, #4]
 800e370:	9102      	str	r1, [sp, #8]
 800e372:	9501      	str	r5, [sp, #4]
 800e374:	9400      	str	r4, [sp, #0]
 800e376:	2310      	movs	r3, #16
 800e378:	693a      	ldr	r2, [r7, #16]
 800e37a:	4631      	mov	r1, r6
 800e37c:	6978      	ldr	r0, [r7, #20]
 800e37e:	f7fe fef1 	bl	800d164 <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800e382:	2100      	movs	r1, #0
 800e384:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800e386:	f7fe fffd 	bl	800d384 <settmout>
 800e38a:	e002      	b.n	800e392 <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800e38c:	bf00      	nop
 800e38e:	e000      	b.n	800e392 <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800e390:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800e392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	637b      	str	r3, [r7, #52]	; 0x34
 800e398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	f47f af3e 	bne.w	800e21c <mg_tcpip_poll+0x200>
 800e3a0:	e002      	b.n	800e3a8 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800e3a2:	bf00      	nop
 800e3a4:	e000      	b.n	800e3a8 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800e3a6:	bf00      	nop
    }
  }
}
 800e3a8:	373c      	adds	r7, #60	; 0x3c
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	001b7740 	.word	0x001b7740
 800e3b4:	08018390 	.word	0x08018390
 800e3b8:	080185cc 	.word	0x080185cc
 800e3bc:	0801645c 	.word	0x0801645c
 800e3c0:	08017be4 	.word	0x08017be4
 800e3c4:	08016af8 	.word	0x08016af8
 800e3c8:	08017bf4 	.word	0x08017bf4
 800e3cc:	08017c00 	.word	0x08017c00

0800e3d0 <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b086      	sub	sp, #24
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	332c      	adds	r3, #44	; 0x2c
 800e3e0:	f107 0114 	add.w	r1, r7, #20
 800e3e4:	68ba      	ldr	r2, [r7, #8]
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7f9 ff68 	bl	80082bc <mg_queue_book>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	4293      	cmp	r3, r2
 800e3f2:	d811      	bhi.n	800e418 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	68ba      	ldr	r2, [r7, #8]
 800e3f8:	68f9      	ldr	r1, [r7, #12]
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f007 fa12 	bl	8015824 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	332c      	adds	r3, #44	; 0x2c
 800e404:	68b9      	ldr	r1, [r7, #8]
 800e406:	4618      	mov	r0, r3
 800e408:	f7f9 fff6 	bl	80083f8 <mg_queue_add>
    ifp->nrecv++;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e410:	1c5a      	adds	r2, r3, #1
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800e416:	e004      	b.n	800e422 <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e41c:	1c5a      	adds	r2, r3, #1
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	665a      	str	r2, [r3, #100]	; 0x64
}
 800e422:	bf00      	nop
 800e424:	3718      	adds	r7, #24
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
	...

0800e42c <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b084      	sub	sp, #16
 800e430:	af00      	add	r7, sp, #0
 800e432:	6078      	str	r0, [r7, #4]
 800e434:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800e436:	683b      	ldr	r3, [r7, #0]
 800e438:	781b      	ldrb	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d12c      	bne.n	800e498 <mg_tcpip_init+0x6c>
 800e43e:	683b      	ldr	r3, [r7, #0]
 800e440:	785b      	ldrb	r3, [r3, #1]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d128      	bne.n	800e498 <mg_tcpip_init+0x6c>
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	789b      	ldrb	r3, [r3, #2]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d124      	bne.n	800e498 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800e44e:	683b      	ldr	r3, [r7, #0]
 800e450:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800e452:	2b00      	cmp	r3, #0
 800e454:	d120      	bne.n	800e498 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	791b      	ldrb	r3, [r3, #4]
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	d11c      	bne.n	800e498 <mg_tcpip_init+0x6c>
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	795b      	ldrb	r3, [r3, #5]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d118      	bne.n	800e498 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	2202      	movs	r2, #2
 800e46a:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	3301      	adds	r3, #1
 800e470:	2105      	movs	r1, #5
 800e472:	4618      	mov	r0, r3
 800e474:	f7f2 fba2 	bl	8000bbc <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800e478:	4b4d      	ldr	r3, [pc, #308]	; (800e5b0 <mg_tcpip_init+0x184>)
 800e47a:	f242 02de 	movw	r2, #8414	; 0x20de
 800e47e:	494d      	ldr	r1, [pc, #308]	; (800e5b4 <mg_tcpip_init+0x188>)
 800e480:	2002      	movs	r0, #2
 800e482:	f7f8 feab 	bl	80071dc <mg_log_prefix>
 800e486:	4603      	mov	r3, r0
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d005      	beq.n	800e498 <mg_tcpip_init+0x6c>
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	461a      	mov	r2, r3
 800e490:	4949      	ldr	r1, [pc, #292]	; (800e5b8 <mg_tcpip_init+0x18c>)
 800e492:	484a      	ldr	r0, [pc, #296]	; (800e5bc <mg_tcpip_init+0x190>)
 800e494:	f7f8 fefc 	bl	8007290 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	6a1b      	ldr	r3, [r3, #32]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d018      	beq.n	800e4d4 <mg_tcpip_init+0xa8>
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	6a1b      	ldr	r3, [r3, #32]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	6838      	ldr	r0, [r7, #0]
 800e4aa:	4798      	blx	r3
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	f083 0301 	eor.w	r3, r3, #1
 800e4b2:	b2db      	uxtb	r3, r3
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d00d      	beq.n	800e4d4 <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800e4b8:	4b3d      	ldr	r3, [pc, #244]	; (800e5b0 <mg_tcpip_init+0x184>)
 800e4ba:	f242 02e2 	movw	r2, #8418	; 0x20e2
 800e4be:	493d      	ldr	r1, [pc, #244]	; (800e5b4 <mg_tcpip_init+0x188>)
 800e4c0:	2001      	movs	r0, #1
 800e4c2:	f7f8 fe8b 	bl	80071dc <mg_log_prefix>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d06d      	beq.n	800e5a8 <mg_tcpip_init+0x17c>
 800e4cc:	483c      	ldr	r0, [pc, #240]	; (800e5c0 <mg_tcpip_init+0x194>)
 800e4ce:	f7f8 fedf 	bl	8007290 <mg_log>
 800e4d2:	e069      	b.n	800e5a8 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800e4d4:	f240 6304 	movw	r3, #1540	; 0x604
 800e4d8:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800e4da:	68f9      	ldr	r1, [r7, #12]
 800e4dc:	2001      	movs	r0, #1
 800e4de:	f006 fdb1 	bl	8015044 <calloc>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	461a      	mov	r2, r3
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	615a      	str	r2, [r3, #20]
 800e4ea:	683b      	ldr	r3, [r7, #0]
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d10a      	bne.n	800e50e <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	6a1b      	ldr	r3, [r3, #32]
 800e4fc:	689b      	ldr	r3, [r3, #8]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d001      	beq.n	800e506 <mg_tcpip_init+0xda>
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	e001      	b.n	800e50a <mg_tcpip_init+0xde>
 800e506:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e50a:	683a      	ldr	r2, [r7, #0]
 800e50c:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800e50e:	683b      	ldr	r3, [r7, #0]
 800e510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e512:	4619      	mov	r1, r3
 800e514:	2001      	movs	r0, #1
 800e516:	f006 fd95 	bl	8015044 <calloc>
 800e51a:	4603      	mov	r3, r0
 800e51c:	461a      	mov	r2, r3
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800e522:	f7f2 fb3d 	bl	8000ba0 <mg_millis>
 800e526:	4602      	mov	r2, r0
 800e528:	460b      	mov	r3, r1
 800e52a:	6839      	ldr	r1, [r7, #0]
 800e52c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	683a      	ldr	r2, [r7, #0]
 800e534:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	687a      	ldr	r2, [r7, #4]
 800e53a:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2228      	movs	r2, #40	; 0x28
 800e540:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	689b      	ldr	r3, [r3, #8]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d102      	bne.n	800e550 <mg_tcpip_init+0x124>
 800e54a:	683b      	ldr	r3, [r7, #0]
 800e54c:	2201      	movs	r2, #1
 800e54e:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	333c      	adds	r3, #60	; 0x3c
 800e554:	2206      	movs	r2, #6
 800e556:	21ff      	movs	r1, #255	; 0xff
 800e558:	4618      	mov	r0, r3
 800e55a:	f007 f87c 	bl	8015656 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800e55e:	683b      	ldr	r3, [r7, #0]
 800e560:	3360      	adds	r3, #96	; 0x60
 800e562:	2102      	movs	r1, #2
 800e564:	4618      	mov	r0, r3
 800e566:	f7f2 fb29 	bl	8000bbc <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e570:	4b14      	ldr	r3, [pc, #80]	; (800e5c4 <mg_tcpip_init+0x198>)
 800e572:	4313      	orrs	r3, r2
 800e574:	b29a      	uxth	r2, r3
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	695b      	ldr	r3, [r3, #20]
 800e580:	2b00      	cmp	r3, #0
 800e582:	d003      	beq.n	800e58c <mg_tcpip_init+0x160>
 800e584:	683b      	ldr	r3, [r7, #0]
 800e586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d10d      	bne.n	800e5a8 <mg_tcpip_init+0x17c>
 800e58c:	4b08      	ldr	r3, [pc, #32]	; (800e5b0 <mg_tcpip_init+0x184>)
 800e58e:	f242 02f2 	movw	r2, #8434	; 0x20f2
 800e592:	4908      	ldr	r1, [pc, #32]	; (800e5b4 <mg_tcpip_init+0x188>)
 800e594:	2001      	movs	r0, #1
 800e596:	f7f8 fe21 	bl	80071dc <mg_log_prefix>
 800e59a:	4603      	mov	r3, r0
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d003      	beq.n	800e5a8 <mg_tcpip_init+0x17c>
 800e5a0:	4809      	ldr	r0, [pc, #36]	; (800e5c8 <mg_tcpip_init+0x19c>)
 800e5a2:	f7f8 fe75 	bl	8007290 <mg_log>
  }
}
 800e5a6:	e7ff      	b.n	800e5a8 <mg_tcpip_init+0x17c>
 800e5a8:	bf00      	nop
 800e5aa:	3710      	adds	r7, #16
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	080185dc 	.word	0x080185dc
 800e5b4:	0801645c 	.word	0x0801645c
 800e5b8:	0800805d 	.word	0x0800805d
 800e5bc:	08017c10 	.word	0x08017c10
 800e5c0:	08017c34 	.word	0x08017c34
 800e5c4:	ffff8000 	.word	0xffff8000
 800e5c8:	08017188 	.word	0x08017188

0800e5cc <send_syn>:
  (void) m, (void) fn, (void) d, (void) udp;
  MG_ERROR(("Not implemented"));
  return -1;
}

static void send_syn(struct mg_connection *c) {
 800e5cc:	b590      	push	{r4, r7, lr}
 800e5ce:	b08d      	sub	sp, #52	; 0x34
 800e5d0:	af06      	add	r7, sp, #24
 800e5d2:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	3390      	adds	r3, #144	; 0x90
 800e5d8:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	8b1b      	ldrh	r3, [r3, #24]
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7fc fb9f 	bl	800ad22 <mg_ntohs>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fc fb82 	bl	800acf0 <mg_ntohl>
 800e5ec:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e5f4:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	331c      	adds	r3, #28
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 800e5fe:	697b      	ldr	r3, [r7, #20]
 800e600:	f103 0010 	add.w	r0, r3, #16
 800e604:	68bc      	ldr	r4, [r7, #8]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	8b1b      	ldrh	r3, [r3, #24]
 800e60a:	687a      	ldr	r2, [r7, #4]
 800e60c:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800e60e:	2100      	movs	r1, #0
 800e610:	9105      	str	r1, [sp, #20]
 800e612:	2100      	movs	r1, #0
 800e614:	9104      	str	r1, [sp, #16]
 800e616:	2100      	movs	r1, #0
 800e618:	9103      	str	r1, [sp, #12]
 800e61a:	6939      	ldr	r1, [r7, #16]
 800e61c:	9102      	str	r1, [sp, #8]
 800e61e:	9201      	str	r2, [sp, #4]
 800e620:	9300      	str	r3, [sp, #0]
 800e622:	2302      	movs	r3, #2
 800e624:	4622      	mov	r2, r4
 800e626:	4601      	mov	r1, r0
 800e628:	68f8      	ldr	r0, [r7, #12]
 800e62a:	f7fe fd9b 	bl	800d164 <tx_tcp>
         0);
}
 800e62e:	bf00      	nop
 800e630:	371c      	adds	r7, #28
 800e632:	46bd      	mov	sp, r7
 800e634:	bd90      	pop	{r4, r7, pc}
	...

0800e638 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08a      	sub	sp, #40	; 0x28
 800e63c:	af02      	add	r7, sp, #8
 800e63e:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685b      	ldr	r3, [r3, #4]
 800e644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e646:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	331c      	adds	r3, #28
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800e656:	f36f 03c3 	bfc	r3, #3, #1
 800e65a:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 800e65e:	69fb      	ldr	r3, [r7, #28]
 800e660:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e664:	b21b      	sxth	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	db04      	blt.n	800e674 <mg_connect_resolved+0x3c>
 800e66a:	69fb      	ldr	r3, [r7, #28]
 800e66c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	3308      	adds	r3, #8
 800e678:	69fa      	ldr	r2, [r7, #28]
 800e67a:	3208      	adds	r2, #8
 800e67c:	6812      	ldr	r2, [r2, #0]
 800e67e:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 800e680:	69fb      	ldr	r3, [r7, #28]
 800e682:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e686:	1c5a      	adds	r2, r3, #1
 800e688:	b291      	uxth	r1, r2
 800e68a:	69fa      	ldr	r2, [r7, #28]
 800e68c:	f8a2 1060 	strh.w	r1, [r2, #96]	; 0x60
 800e690:	4618      	mov	r0, r3
 800e692:	f7fc fb46 	bl	800ad22 <mg_ntohs>
 800e696:	4603      	mov	r3, r0
 800e698:	461a      	mov	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 800e69e:	4b57      	ldr	r3, [pc, #348]	; (800e7fc <mg_connect_resolved+0x1c4>)
 800e6a0:	f242 1213 	movw	r2, #8467	; 0x2113
 800e6a4:	4956      	ldr	r1, [pc, #344]	; (800e800 <mg_connect_resolved+0x1c8>)
 800e6a6:	2003      	movs	r0, #3
 800e6a8:	f7f8 fd98 	bl	80071dc <mg_log_prefix>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d00e      	beq.n	800e6d0 <mg_connect_resolved+0x98>
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f103 0208 	add.w	r2, r3, #8
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	331c      	adds	r3, #28
 800e6c0:	9301      	str	r3, [sp, #4]
 800e6c2:	4b50      	ldr	r3, [pc, #320]	; (800e804 <mg_connect_resolved+0x1cc>)
 800e6c4:	9300      	str	r3, [sp, #0]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	4a4e      	ldr	r2, [pc, #312]	; (800e804 <mg_connect_resolved+0x1cc>)
 800e6ca:	484f      	ldr	r0, [pc, #316]	; (800e808 <mg_connect_resolved+0x1d0>)
 800e6cc:	f7f8 fde0 	bl	8007290 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	2103      	movs	r1, #3
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f7f3 fda3 	bl	8002220 <mg_call>
  if (((rem_ip & ifp->mask) == (ifp->ip & ifp->mask))) {
 800e6da:	69fb      	ldr	r3, [r7, #28]
 800e6dc:	689a      	ldr	r2, [r3, #8]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	405a      	eors	r2, r3
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	4013      	ands	r3, r2
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d11c      	bne.n	800e726 <mg_connect_resolved+0xee>
    // If we're in the same LAN, fire an ARP lookup. TODO(cpq): handle this!
    MG_DEBUG(("%lu ARP lookup...", c->id));
 800e6ec:	4b43      	ldr	r3, [pc, #268]	; (800e7fc <mg_connect_resolved+0x1c4>)
 800e6ee:	f242 1218 	movw	r2, #8472	; 0x2118
 800e6f2:	4943      	ldr	r1, [pc, #268]	; (800e800 <mg_connect_resolved+0x1c8>)
 800e6f4:	2003      	movs	r0, #3
 800e6f6:	f7f8 fd71 	bl	80071dc <mg_log_prefix>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	d005      	beq.n	800e70c <mg_connect_resolved+0xd4>
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e704:	4619      	mov	r1, r3
 800e706:	4841      	ldr	r0, [pc, #260]	; (800e80c <mg_connect_resolved+0x1d4>)
 800e708:	f7f8 fdc2 	bl	8007290 <mg_log>
    arp_ask(ifp, rem_ip);
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	4619      	mov	r1, r3
 800e710:	69f8      	ldr	r0, [r7, #28]
 800e712:	f7fd fcd0 	bl	800c0b6 <arp_ask>
    c->is_arplooking = 1;
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800e71c:	f043 0310 	orr.w	r3, r3, #16
 800e720:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    } else {
      send_syn(c);
      c->is_connecting = 1;
    }
  }
}
 800e724:	e065      	b.n	800e7f2 <mg_connect_resolved+0x1ba>
  } else if (rem_ip == (ifp->ip | ~ifp->mask)) {
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	689a      	ldr	r2, [r3, #8]
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	43db      	mvns	r3, r3
 800e730:	431a      	orrs	r2, r3
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	429a      	cmp	r2, r3
 800e736:	d10a      	bne.n	800e74e <mg_connect_resolved+0x116>
    struct connstate *s = (struct connstate *) (c + 1);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	3390      	adds	r3, #144	; 0x90
 800e73c:	613b      	str	r3, [r7, #16]
    memset(s->mac, 0xFF, sizeof(s->mac));  // local broadcast
 800e73e:	693b      	ldr	r3, [r7, #16]
 800e740:	3310      	adds	r3, #16
 800e742:	2206      	movs	r2, #6
 800e744:	21ff      	movs	r1, #255	; 0xff
 800e746:	4618      	mov	r0, r3
 800e748:	f006 ff85 	bl	8015656 <memset>
}
 800e74c:	e051      	b.n	800e7f2 <mg_connect_resolved+0x1ba>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800e74e:	f107 030c 	add.w	r3, r7, #12
 800e752:	781b      	ldrb	r3, [r3, #0]
 800e754:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800e758:	2be0      	cmp	r3, #224	; 0xe0
 800e75a:	d126      	bne.n	800e7aa <mg_connect_resolved+0x172>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	3390      	adds	r3, #144	; 0x90
 800e760:	617b      	str	r3, [r7, #20]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 800e762:	4a2b      	ldr	r2, [pc, #172]	; (800e810 <mg_connect_resolved+0x1d8>)
 800e764:	f107 0308 	add.w	r3, r7, #8
 800e768:	6812      	ldr	r2, [r2, #0]
 800e76a:	4611      	mov	r1, r2
 800e76c:	8019      	strh	r1, [r3, #0]
 800e76e:	3302      	adds	r3, #2
 800e770:	0c12      	lsrs	r2, r2, #16
 800e772:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	3310      	adds	r3, #16
 800e778:	461a      	mov	r2, r3
 800e77a:	f107 0308 	add.w	r3, r7, #8
 800e77e:	8819      	ldrh	r1, [r3, #0]
 800e780:	789b      	ldrb	r3, [r3, #2]
 800e782:	8011      	strh	r1, [r2, #0]
 800e784:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	3310      	adds	r3, #16
 800e78a:	1cd8      	adds	r0, r3, #3
 800e78c:	f107 030c 	add.w	r3, r7, #12
 800e790:	3301      	adds	r3, #1
 800e792:	2203      	movs	r2, #3
 800e794:	4619      	mov	r1, r3
 800e796:	f007 f845 	bl	8015824 <memcpy>
    s->mac[3] &= 0x7F;
 800e79a:	697b      	ldr	r3, [r7, #20]
 800e79c:	7cdb      	ldrb	r3, [r3, #19]
 800e79e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7a2:	b2da      	uxtb	r2, r3
 800e7a4:	697b      	ldr	r3, [r7, #20]
 800e7a6:	74da      	strb	r2, [r3, #19]
}
 800e7a8:	e023      	b.n	800e7f2 <mg_connect_resolved+0x1ba>
    struct connstate *s = (struct connstate *) (c + 1);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	3390      	adds	r3, #144	; 0x90
 800e7ae:	61bb      	str	r3, [r7, #24]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	f103 0010 	add.w	r0, r3, #16
 800e7b6:	69fb      	ldr	r3, [r7, #28]
 800e7b8:	333c      	adds	r3, #60	; 0x3c
 800e7ba:	2206      	movs	r2, #6
 800e7bc:	4619      	mov	r1, r3
 800e7be:	f007 f831 	bl	8015824 <memcpy>
    if (c->is_udp) {
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	b2db      	uxtb	r3, r3
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d005      	beq.n	800e7de <mg_connect_resolved+0x1a6>
      mg_call(c, MG_EV_CONNECT, NULL);
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	2104      	movs	r1, #4
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7f3 fd22 	bl	8002220 <mg_call>
}
 800e7dc:	e009      	b.n	800e7f2 <mg_connect_resolved+0x1ba>
      send_syn(c);
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f7ff fef4 	bl	800e5cc <send_syn>
      c->is_connecting = 1;
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800e7ea:	f043 0320 	orr.w	r3, r3, #32
 800e7ee:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
}
 800e7f2:	bf00      	nop
 800e7f4:	3720      	adds	r7, #32
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	080185ec 	.word	0x080185ec
 800e800:	0801645c 	.word	0x0801645c
 800e804:	08008011 	.word	0x08008011
 800e808:	08017c58 	.word	0x08017c58
 800e80c:	08017c68 	.word	0x08017c68
 800e810:	08017c7c 	.word	0x08017c7c

0800e814 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800e814:	b580      	push	{r7, lr}
 800e816:	b082      	sub	sp, #8
 800e818:	af00      	add	r7, sp, #0
 800e81a:	6078      	str	r0, [r7, #4]
 800e81c:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800e81e:	6838      	ldr	r0, [r7, #0]
 800e820:	f7fc fa02 	bl	800ac28 <mg_url_port>
 800e824:	4603      	mov	r3, r0
 800e826:	4618      	mov	r0, r3
 800e828:	f7fc fa7b 	bl	800ad22 <mg_ntohs>
 800e82c:	4603      	mov	r3, r0
 800e82e:	461a      	mov	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	831a      	strh	r2, [r3, #24]
  return true;
 800e834:	2301      	movs	r3, #1
}
 800e836:	4618      	mov	r0, r3
 800e838:	3708      	adds	r7, #8
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}

0800e83e <write_conn>:

static void write_conn(struct mg_connection *c) {
 800e83e:	b580      	push	{r7, lr}
 800e840:	b084      	sub	sp, #16
 800e842:	af00      	add	r7, sp, #0
 800e844:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e84c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e850:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800e852:	2b00      	cmp	r3, #0
 800e854:	d009      	beq.n	800e86a <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e85e:	461a      	mov	r2, r3
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7fc f914 	bl	800aa8e <mg_tls_send>
 800e866:	4603      	mov	r3, r0
 800e868:	e008      	b.n	800e87c <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e872:	461a      	mov	r2, r3
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f7fe fe7d 	bl	800d574 <mg_io_send>
 800e87a:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800e87c:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2b00      	cmp	r3, #0
 800e882:	dd0d      	ble.n	800e8a0 <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	3348      	adds	r3, #72	; 0x48
 800e888:	68fa      	ldr	r2, [r7, #12]
 800e88a:	2100      	movs	r1, #0
 800e88c:	4618      	mov	r0, r3
 800e88e:	f7f7 fd91 	bl	80063b4 <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800e892:	f107 030c 	add.w	r3, r7, #12
 800e896:	461a      	mov	r2, r3
 800e898:	2108      	movs	r1, #8
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f7f3 fcc0 	bl	8002220 <mg_call>
  }
}
 800e8a0:	bf00      	nop
 800e8a2:	3710      	adds	r7, #16
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}

0800e8a8 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800e8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8aa:	b08f      	sub	sp, #60	; 0x3c
 800e8ac:	af06      	add	r7, sp, #24
 800e8ae:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	3390      	adds	r3, #144	; 0x90
 800e8b4:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	331c      	adds	r3, #28
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	3318      	adds	r3, #24
 800e8c2:	4618      	mov	r0, r3
 800e8c4:	f7f7 fdc1 	bl	800644a <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800e8c8:	68fb      	ldr	r3, [r7, #12]
 800e8ca:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800e8ce:	f003 0301 	and.w	r3, r3, #1
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d12f      	bne.n	800e938 <close_conn+0x90>
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e8de:	f003 0301 	and.w	r3, r3, #1
 800e8e2:	b2db      	uxtb	r3, r3
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d127      	bne.n	800e938 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800e8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8ee:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	f103 0610 	add.w	r6, r3, #16
 800e8f6:	697b      	ldr	r3, [r7, #20]
 800e8f8:	60bb      	str	r3, [r7, #8]
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	8b1c      	ldrh	r4, [r3, #24]
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800e902:	69fb      	ldr	r3, [r7, #28]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	4618      	mov	r0, r3
 800e908:	f7fc f9f2 	bl	800acf0 <mg_ntohl>
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	685b      	ldr	r3, [r3, #4]
 800e912:	4618      	mov	r0, r3
 800e914:	f7fc f9ec 	bl	800acf0 <mg_ntohl>
 800e918:	4603      	mov	r3, r0
 800e91a:	2200      	movs	r2, #0
 800e91c:	9205      	str	r2, [sp, #20]
 800e91e:	2200      	movs	r2, #0
 800e920:	9204      	str	r2, [sp, #16]
 800e922:	9303      	str	r3, [sp, #12]
 800e924:	6879      	ldr	r1, [r7, #4]
 800e926:	9102      	str	r1, [sp, #8]
 800e928:	9501      	str	r5, [sp, #4]
 800e92a:	9400      	str	r4, [sp, #0]
 800e92c:	2311      	movs	r3, #17
 800e92e:	68ba      	ldr	r2, [r7, #8]
 800e930:	4631      	mov	r1, r6
 800e932:	69b8      	ldr	r0, [r7, #24]
 800e934:	f7fe fc16 	bl	800d164 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800e938:	68f8      	ldr	r0, [r7, #12]
 800e93a:	f7f9 f82d 	bl	8007998 <mg_close_conn>
}
 800e93e:	bf00      	nop
 800e940:	3724      	adds	r7, #36	; 0x24
 800e942:	46bd      	mov	sp, r7
 800e944:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e946 <can_write>:

static bool can_write(struct mg_connection *c) {
 800e946:	b480      	push	{r7}
 800e948:	b083      	sub	sp, #12
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e954:	f003 0320 	and.w	r3, r3, #32
 800e958:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d11d      	bne.n	800e99a <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e964:	f003 0308 	and.w	r3, r3, #8
 800e968:	b2db      	uxtb	r3, r3
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d115      	bne.n	800e99a <can_write+0x54>
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e972:	2b00      	cmp	r3, #0
 800e974:	d011      	beq.n	800e99a <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e97c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e980:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800e982:	2b00      	cmp	r3, #0
 800e984:	d109      	bne.n	800e99a <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e98c:	f003 0310 	and.w	r3, r3, #16
 800e990:	b2db      	uxtb	r3, r3
 800e992:	2b00      	cmp	r3, #0
 800e994:	d101      	bne.n	800e99a <can_write+0x54>
 800e996:	2301      	movs	r3, #1
 800e998:	e000      	b.n	800e99c <can_write+0x56>
 800e99a:	2300      	movs	r3, #0
 800e99c:	f003 0301 	and.w	r3, r3, #1
 800e9a0:	b2db      	uxtb	r3, r3
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	370c      	adds	r7, #12
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ac:	4770      	bx	lr
	...

0800e9b0 <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800e9b0:	b5b0      	push	{r4, r5, r7, lr}
 800e9b2:	b08a      	sub	sp, #40	; 0x28
 800e9b4:	af04      	add	r7, sp, #16
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800e9ba:	f7f2 f8f1 	bl	8000ba0 <mg_millis>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800e9ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e9ce:	4608      	mov	r0, r1
 800e9d0:	f7ff fb24 	bl	800e01c <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e9da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e9de:	4608      	mov	r0, r1
 800e9e0:	f7fb ffb1 	bl	800a946 <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	617b      	str	r3, [r7, #20]
 800e9ea:	e089      	b.n	800eb00 <mg_mgr_poll+0x150>
    tmp = c->next;
 800e9ec:	697b      	ldr	r3, [r7, #20]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800e9f2:	f107 0308 	add.w	r3, r7, #8
 800e9f6:	461a      	mov	r2, r3
 800e9f8:	2102      	movs	r1, #2
 800e9fa:	6978      	ldr	r0, [r7, #20]
 800e9fc:	f7f3 fc10 	bl	8002220 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800ea00:	4b44      	ldr	r3, [pc, #272]	; (800eb14 <mg_mgr_poll+0x164>)
 800ea02:	f242 1259 	movw	r2, #8537	; 0x2159
 800ea06:	4944      	ldr	r1, [pc, #272]	; (800eb18 <mg_mgr_poll+0x168>)
 800ea08:	2004      	movs	r0, #4
 800ea0a:	f7f8 fbe7 	bl	80071dc <mg_log_prefix>
 800ea0e:	4603      	mov	r3, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d041      	beq.n	800ea98 <mg_mgr_poll+0xe8>
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ea18:	697b      	ldr	r3, [r7, #20]
 800ea1a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ea1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <mg_mgr_poll+0x7c>
 800ea28:	2454      	movs	r4, #84	; 0x54
 800ea2a:	e000      	b.n	800ea2e <mg_mgr_poll+0x7e>
 800ea2c:	2474      	movs	r4, #116	; 0x74
 800ea2e:	697b      	ldr	r3, [r7, #20]
 800ea30:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ea34:	f003 0320 	and.w	r3, r3, #32
 800ea38:	b2db      	uxtb	r3, r3
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <mg_mgr_poll+0x92>
 800ea3e:	2543      	movs	r5, #67	; 0x43
 800ea40:	e000      	b.n	800ea44 <mg_mgr_poll+0x94>
 800ea42:	2563      	movs	r5, #99	; 0x63
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ea4a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ea4e:	b2db      	uxtb	r3, r3
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d001      	beq.n	800ea58 <mg_mgr_poll+0xa8>
 800ea54:	2348      	movs	r3, #72	; 0x48
 800ea56:	e000      	b.n	800ea5a <mg_mgr_poll+0xaa>
 800ea58:	2368      	movs	r3, #104	; 0x68
 800ea5a:	697a      	ldr	r2, [r7, #20]
 800ea5c:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800ea60:	f002 0208 	and.w	r2, r2, #8
 800ea64:	b2d2      	uxtb	r2, r2
 800ea66:	2a00      	cmp	r2, #0
 800ea68:	d001      	beq.n	800ea6e <mg_mgr_poll+0xbe>
 800ea6a:	2252      	movs	r2, #82	; 0x52
 800ea6c:	e000      	b.n	800ea70 <mg_mgr_poll+0xc0>
 800ea6e:	2272      	movs	r2, #114	; 0x72
 800ea70:	6979      	ldr	r1, [r7, #20]
 800ea72:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800ea76:	f001 0120 	and.w	r1, r1, #32
 800ea7a:	b2c9      	uxtb	r1, r1
 800ea7c:	2900      	cmp	r1, #0
 800ea7e:	d001      	beq.n	800ea84 <mg_mgr_poll+0xd4>
 800ea80:	2143      	movs	r1, #67	; 0x43
 800ea82:	e000      	b.n	800ea86 <mg_mgr_poll+0xd6>
 800ea84:	2163      	movs	r1, #99	; 0x63
 800ea86:	9102      	str	r1, [sp, #8]
 800ea88:	9201      	str	r2, [sp, #4]
 800ea8a:	9300      	str	r3, [sp, #0]
 800ea8c:	462b      	mov	r3, r5
 800ea8e:	4622      	mov	r2, r4
 800ea90:	4601      	mov	r1, r0
 800ea92:	4822      	ldr	r0, [pc, #136]	; (800eb1c <mg_mgr_poll+0x16c>)
 800ea94:	f7f8 fbfc 	bl	8007290 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ea9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eaa2:	b2db      	uxtb	r3, r3
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d002      	beq.n	800eaae <mg_mgr_poll+0xfe>
 800eaa8:	6978      	ldr	r0, [r7, #20]
 800eaaa:	f7fb ffc3 	bl	800aa34 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800eaae:	6978      	ldr	r0, [r7, #20]
 800eab0:	f7ff ff49 	bl	800e946 <can_write>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d002      	beq.n	800eac0 <mg_mgr_poll+0x110>
 800eaba:	6978      	ldr	r0, [r7, #20]
 800eabc:	f7ff febf 	bl	800e83e <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800eac6:	f003 0310 	and.w	r3, r3, #16
 800eaca:	b2db      	uxtb	r3, r3
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00a      	beq.n	800eae6 <mg_mgr_poll+0x136>
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d106      	bne.n	800eae6 <mg_mgr_poll+0x136>
 800ead8:	697a      	ldr	r2, [r7, #20]
 800eada:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800eade:	f043 0320 	orr.w	r3, r3, #32
 800eae2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800eaec:	f003 0320 	and.w	r3, r3, #32
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d002      	beq.n	800eafc <mg_mgr_poll+0x14c>
 800eaf6:	6978      	ldr	r0, [r7, #20]
 800eaf8:	f7ff fed6 	bl	800e8a8 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800eafc:	693b      	ldr	r3, [r7, #16]
 800eafe:	617b      	str	r3, [r7, #20]
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	f47f af72 	bne.w	800e9ec <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800eb08:	bf00      	nop
 800eb0a:	bf00      	nop
 800eb0c:	3718      	adds	r7, #24
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bdb0      	pop	{r4, r5, r7, pc}
 800eb12:	bf00      	nop
 800eb14:	08018600 	.word	0x08018600
 800eb18:	0801645c 	.word	0x0801645c
 800eb1c:	08017c80 	.word	0x08017c80

0800eb20 <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800eb20:	b5b0      	push	{r4, r5, r7, lr}
 800eb22:	b08c      	sub	sp, #48	; 0x30
 800eb24:	af04      	add	r7, sp, #16
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb32:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800eb34:	2300      	movs	r3, #0
 800eb36:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	331c      	adds	r3, #28
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	689b      	ldr	r3, [r3, #8]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d004      	beq.n	800eb52 <mg_send+0x32>
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800eb4e:	2b03      	cmp	r3, #3
 800eb50:	d004      	beq.n	800eb5c <mg_send+0x3c>
    mg_error(c, "net down");
 800eb52:	491e      	ldr	r1, [pc, #120]	; (800ebcc <mg_send+0xac>)
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f7f3 fb85 	bl	8002264 <mg_error>
 800eb5a:	e032      	b.n	800ebc2 <mg_send+0xa2>
  } else if (c->is_udp) {
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800eb62:	f003 0301 	and.w	r3, r3, #1
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d01b      	beq.n	800eba4 <mg_send+0x84>
    struct connstate *s = (struct connstate *) (c + 1);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	3390      	adds	r3, #144	; 0x90
 800eb70:	617b      	str	r3, [r7, #20]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800eb72:	697b      	ldr	r3, [r7, #20]
 800eb74:	f103 0010 	add.w	r0, r3, #16
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	689c      	ldr	r4, [r3, #8]
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	8b1d      	ldrh	r5, [r3, #24]
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	68fa      	ldr	r2, [r7, #12]
 800eb84:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800eb86:	6879      	ldr	r1, [r7, #4]
 800eb88:	9103      	str	r1, [sp, #12]
 800eb8a:	68b9      	ldr	r1, [r7, #8]
 800eb8c:	9102      	str	r1, [sp, #8]
 800eb8e:	9201      	str	r2, [sp, #4]
 800eb90:	9300      	str	r3, [sp, #0]
 800eb92:	462b      	mov	r3, r5
 800eb94:	4622      	mov	r2, r4
 800eb96:	4601      	mov	r1, r0
 800eb98:	69b8      	ldr	r0, [r7, #24]
 800eb9a:	f7fd fbc5 	bl	800c328 <tx_udp>
    res = true;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	77fb      	strb	r3, [r7, #31]
 800eba2:	e00e      	b.n	800ebc2 <mg_send+0xa2>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	68ba      	ldr	r2, [r7, #8]
 800ebb2:	f7f7 fbad 	bl	8006310 <mg_iobuf_add>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	bf14      	ite	ne
 800ebbc:	2301      	movne	r3, #1
 800ebbe:	2300      	moveq	r3, #0
 800ebc0:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 800ebc2:	7ffb      	ldrb	r3, [r7, #31]
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3720      	adds	r7, #32
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bdb0      	pop	{r4, r5, r7, pc}
 800ebcc:	08017c94 	.word	0x08017c94

0800ebd0 <mg_now>:
    "AwEHoUQDQgAEc0kEuTh3de5VHjSPupKfVmLtHMbhCIvyU46YWwpnSQ9XFL4ZszPf\n"
    "6YbyU/ZGtdGfbaGYYJwatKNMX00OIwtb8A==\n"
    "-----END EC PRIVATE KEY-----\n";

// This is for newlib and TLS (mbedTLS)
uint64_t mg_now(void) {
 800ebd0:	b5b0      	push	{r4, r5, r7, lr}
 800ebd2:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 800ebd4:	f7f1 ffe4 	bl	8000ba0 <mg_millis>
 800ebd8:	4b05      	ldr	r3, [pc, #20]	; (800ebf0 <mg_now+0x20>)
 800ebda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebde:	1884      	adds	r4, r0, r2
 800ebe0:	eb41 0503 	adc.w	r5, r1, r3
 800ebe4:	4622      	mov	r2, r4
 800ebe6:	462b      	mov	r3, r5
}
 800ebe8:	4610      	mov	r0, r2
 800ebea:	4619      	mov	r1, r3
 800ebec:	bdb0      	pop	{r4, r5, r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	24003638 	.word	0x24003638

0800ebf4 <ui_event_next>:

int ui_event_next(int no, struct ui_event *e) {
 800ebf4:	b590      	push	{r4, r7, lr}
 800ebf6:	b083      	sub	sp, #12
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  if (no < 0 || no >= MAX_EVENTS_NO)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	db03      	blt.n	800ec0c <ui_event_next+0x18>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800ec0a:	db01      	blt.n	800ec10 <ui_event_next+0x1c>
    return 0;
 800ec0c:	2300      	movs	r3, #0
 800ec0e:	e04b      	b.n	800eca8 <ui_event_next+0xb4>

  srand(no);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	4618      	mov	r0, r3
 800ec14:	f006 faf0 	bl	80151f8 <srand>
  e->type = (uint8_t) rand() % 4;
 800ec18:	f006 fb1c 	bl	8015254 <rand>
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	b2db      	uxtb	r3, r3
 800ec20:	f003 0303 	and.w	r3, r3, #3
 800ec24:	b2da      	uxtb	r2, r3
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	701a      	strb	r2, [r3, #0]
  e->prio = (uint8_t) rand() % 3;
 800ec2a:	f006 fb13 	bl	8015254 <rand>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	4b1f      	ldr	r3, [pc, #124]	; (800ecb0 <ui_event_next+0xbc>)
 800ec34:	fba3 1302 	umull	r1, r3, r3, r2
 800ec38:	0859      	lsrs	r1, r3, #1
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	005b      	lsls	r3, r3, #1
 800ec3e:	440b      	add	r3, r1
 800ec40:	1ad3      	subs	r3, r2, r3
 800ec42:	b2da      	uxtb	r2, r3
 800ec44:	683b      	ldr	r3, [r7, #0]
 800ec46:	705a      	strb	r2, [r3, #1]
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800ec48:	f7ff ffc2 	bl	800ebd0 <mg_now>
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	460b      	mov	r3, r1
                              no * 300 * 1000 /* 5 mins between alerts */ +
 800ec50:	4614      	mov	r4, r2
                              1000 * (rand() % 300) /* randomize event time */) /
 800ec52:	f006 faff 	bl	8015254 <rand>
 800ec56:	4602      	mov	r2, r0
 800ec58:	4b16      	ldr	r3, [pc, #88]	; (800ecb4 <ui_event_next+0xc0>)
 800ec5a:	fb83 1302 	smull	r1, r3, r3, r2
 800ec5e:	1159      	asrs	r1, r3, #5
 800ec60:	17d3      	asrs	r3, r2, #31
 800ec62:	1acb      	subs	r3, r1, r3
 800ec64:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800ec68:	fb01 f303 	mul.w	r3, r1, r3
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ec72:	fb02 f303 	mul.w	r3, r2, r3
                              no * 300 * 1000 /* 5 mins between alerts */ +
 800ec76:	4619      	mov	r1, r3
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	4a0f      	ldr	r2, [pc, #60]	; (800ecb8 <ui_event_next+0xc4>)
 800ec7c:	fb02 f303 	mul.w	r3, r2, r3
 800ec80:	440b      	add	r3, r1
 800ec82:	18e2      	adds	r2, r4, r3
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800ec84:	4b0d      	ldr	r3, [pc, #52]	; (800ecbc <ui_event_next+0xc8>)
 800ec86:	4413      	add	r3, r2
                              1000 * (rand() % 300) /* randomize event time */) /
 800ec88:	4a0d      	ldr	r2, [pc, #52]	; (800ecc0 <ui_event_next+0xcc>)
 800ec8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ec8e:	099a      	lsrs	r2, r3, #6
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	605a      	str	r2, [r3, #4]
             1000;

  mg_snprintf(e->text, MAX_EVENT_TEXT_SIZE,
 800ec94:	683b      	ldr	r3, [r7, #0]
 800ec96:	f103 0008 	add.w	r0, r3, #8
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	4a09      	ldr	r2, [pc, #36]	; (800ecc4 <ui_event_next+0xd0>)
 800ec9e:	210a      	movs	r1, #10
 800eca0:	f7f9 f8d0 	bl	8007e44 <mg_snprintf>
              "event#%d", no);
  return no + 1;
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	3301      	adds	r3, #1
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	370c      	adds	r7, #12
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd90      	pop	{r4, r7, pc}
 800ecb0:	aaaaaaab 	.word	0xaaaaaaab
 800ecb4:	1b4e81b5 	.word	0x1b4e81b5
 800ecb8:	000493e0 	.word	0x000493e0
 800ecbc:	fad9a400 	.word	0xfad9a400
 800ecc0:	10624dd3 	.word	0x10624dd3
 800ecc4:	08017f68 	.word	0x08017f68

0800ecc8 <sfn>:

// SNTP connection event handler. When we get a response from an SNTP server,
// adjust s_boot_timestamp. We'll get a valid time from that point on
static void sfn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800ecc8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800eccc:	b088      	sub	sp, #32
 800ecce:	af00      	add	r7, sp, #0
 800ecd0:	60f8      	str	r0, [r7, #12]
 800ecd2:	60b9      	str	r1, [r7, #8]
 800ecd4:	607a      	str	r2, [r7, #4]
 800ecd6:	603b      	str	r3, [r7, #0]
  uint64_t *expiration_time = (uint64_t *) c->data;
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	3368      	adds	r3, #104	; 0x68
 800ecdc:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d10d      	bne.n	800ed00 <sfn+0x38>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 800ece4:	f7f1 ff5c 	bl	8000ba0 <mg_millis>
 800ece8:	4602      	mov	r2, r0
 800ecea:	460b      	mov	r3, r1
 800ecec:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800ecf0:	eb12 0801 	adds.w	r8, r2, r1
 800ecf4:	f143 0900 	adc.w	r9, r3, #0
 800ecf8:	69fb      	ldr	r3, [r7, #28]
 800ecfa:	e9c3 8900 	strd	r8, r9, [r3]
    c->is_closing = 1;
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  }
  (void) fn_data;
}
 800ecfe:	e02b      	b.n	800ed58 <sfn+0x90>
  } else if (ev == MG_EV_SNTP_TIME) {
 800ed00:	68bb      	ldr	r3, [r7, #8]
 800ed02:	2b12      	cmp	r3, #18
 800ed04:	d116      	bne.n	800ed34 <sfn+0x6c>
    uint64_t t = *(uint64_t *) ev_data;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_boot_timestamp = t - mg_millis();
 800ed10:	f7f1 ff46 	bl	8000ba0 <mg_millis>
 800ed14:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ed18:	1a14      	subs	r4, r2, r0
 800ed1a:	eb63 0501 	sbc.w	r5, r3, r1
 800ed1e:	4b11      	ldr	r3, [pc, #68]	; (800ed64 <sfn+0x9c>)
 800ed20:	e9c3 4500 	strd	r4, r5, [r3]
    c->is_closing = 1;
 800ed24:	68fa      	ldr	r2, [r7, #12]
 800ed26:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800ed2a:	f043 0320 	orr.w	r3, r3, #32
 800ed2e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800ed32:	e011      	b.n	800ed58 <sfn+0x90>
  } else if (ev == MG_EV_POLL) {
 800ed34:	68bb      	ldr	r3, [r7, #8]
 800ed36:	2b02      	cmp	r3, #2
 800ed38:	d10e      	bne.n	800ed58 <sfn+0x90>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 800ed3a:	f7f1 ff31 	bl	8000ba0 <mg_millis>
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed44:	4282      	cmp	r2, r0
 800ed46:	418b      	sbcs	r3, r1
 800ed48:	d206      	bcs.n	800ed58 <sfn+0x90>
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800ed50:	f043 0320 	orr.w	r3, r3, #32
 800ed54:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800ed58:	bf00      	nop
 800ed5a:	3720      	adds	r7, #32
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ed62:	bf00      	nop
 800ed64:	24003638 	.word	0x24003638

0800ed68 <timer_sntp_fn>:

static void timer_sntp_fn(void *param) {  // SNTP timer function. Sync up time
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b082      	sub	sp, #8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  mg_sntp_connect(param, "udp://time.google.com:123", sfn, NULL);
 800ed70:	2300      	movs	r3, #0
 800ed72:	4a04      	ldr	r2, [pc, #16]	; (800ed84 <timer_sntp_fn+0x1c>)
 800ed74:	4904      	ldr	r1, [pc, #16]	; (800ed88 <timer_sntp_fn+0x20>)
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f7fb f952 	bl	800a020 <mg_sntp_connect>
}
 800ed7c:	bf00      	nop
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	0800ecc9 	.word	0x0800ecc9
 800ed88:	08017f74 	.word	0x08017f74

0800ed8c <authenticate>:

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b0a6      	sub	sp, #152	; 0x98
 800ed90:	af02      	add	r7, sp, #8
 800ed92:	6078      	str	r0, [r7, #4]
      {"user1", "user1", "user1_token"},
      {"user2", "user2", "user2_token"},
      {NULL, NULL, NULL},
  };
  char user[64], pass[64];
  struct user *u, *result = NULL;
 800ed94:	2300      	movs	r3, #0
 800ed96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 800ed9a:	f107 0308 	add.w	r3, r7, #8
 800ed9e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800eda2:	2240      	movs	r2, #64	; 0x40
 800eda4:	9200      	str	r2, [sp, #0]
 800eda6:	2240      	movs	r2, #64	; 0x40
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f7f6 fcdd 	bl	8005768 <mg_http_creds>
  MG_INFO(("user [%s] pass [%s]", user, pass));
 800edae:	4b3a      	ldr	r3, [pc, #232]	; (800ee98 <authenticate+0x10c>)
 800edb0:	226b      	movs	r2, #107	; 0x6b
 800edb2:	493a      	ldr	r1, [pc, #232]	; (800ee9c <authenticate+0x110>)
 800edb4:	2002      	movs	r0, #2
 800edb6:	f7f8 fa11 	bl	80071dc <mg_log_prefix>
 800edba:	4603      	mov	r3, r0
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d007      	beq.n	800edd0 <authenticate+0x44>
 800edc0:	f107 0208 	add.w	r2, r7, #8
 800edc4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edc8:	4619      	mov	r1, r3
 800edca:	4835      	ldr	r0, [pc, #212]	; (800eea0 <authenticate+0x114>)
 800edcc:	f7f8 fa60 	bl	8007290 <mg_log>

  if (user[0] != '\0' && pass[0] != '\0') {
 800edd0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d031      	beq.n	800ee3c <authenticate+0xb0>
 800edd8:	7a3b      	ldrb	r3, [r7, #8]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d02e      	beq.n	800ee3c <authenticate+0xb0>
    // Both user and password is set, search by user/password
    for (u = users; result == NULL && u->name != NULL; u++)
 800edde:	4b31      	ldr	r3, [pc, #196]	; (800eea4 <authenticate+0x118>)
 800ede0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ede4:	e020      	b.n	800ee28 <authenticate+0x9c>
      if (strcmp(user, u->name) == 0 && strcmp(pass, u->pass) == 0) result = u;
 800ede6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800edf0:	4611      	mov	r1, r2
 800edf2:	4618      	mov	r0, r3
 800edf4:	f7f1 fa8c 	bl	8000310 <strcmp>
 800edf8:	4603      	mov	r3, r0
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d10f      	bne.n	800ee1e <authenticate+0x92>
 800edfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee02:	685a      	ldr	r2, [r3, #4]
 800ee04:	f107 0308 	add.w	r3, r7, #8
 800ee08:	4611      	mov	r1, r2
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7f1 fa80 	bl	8000310 <strcmp>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d103      	bne.n	800ee1e <authenticate+0x92>
 800ee16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 800ee1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee22:	330c      	adds	r3, #12
 800ee24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d12c      	bne.n	800ee8a <authenticate+0xfe>
 800ee30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d1d5      	bne.n	800ede6 <authenticate+0x5a>
  if (user[0] != '\0' && pass[0] != '\0') {
 800ee3a:	e026      	b.n	800ee8a <authenticate+0xfe>
  } else if (user[0] == '\0') {
 800ee3c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d123      	bne.n	800ee8c <authenticate+0x100>
    // Only password is set, search by token
    for (u = users; result == NULL && u->name != NULL; u++)
 800ee44:	4b17      	ldr	r3, [pc, #92]	; (800eea4 <authenticate+0x118>)
 800ee46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee4a:	e014      	b.n	800ee76 <authenticate+0xea>
      if (strcmp(pass, u->access_token) == 0) result = u;
 800ee4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee50:	689a      	ldr	r2, [r3, #8]
 800ee52:	f107 0308 	add.w	r3, r7, #8
 800ee56:	4611      	mov	r1, r2
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7f1 fa59 	bl	8000310 <strcmp>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d103      	bne.n	800ee6c <authenticate+0xe0>
 800ee64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 800ee6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee70:	330c      	adds	r3, #12
 800ee72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ee76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d106      	bne.n	800ee8c <authenticate+0x100>
 800ee7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1e1      	bne.n	800ee4c <authenticate+0xc0>
 800ee88:	e000      	b.n	800ee8c <authenticate+0x100>
  if (user[0] != '\0' && pass[0] != '\0') {
 800ee8a:	bf00      	nop
  }
  return result;
 800ee8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800ee90:	4618      	mov	r0, r3
 800ee92:	3790      	adds	r7, #144	; 0x90
 800ee94:	46bd      	mov	sp, r7
 800ee96:	bd80      	pop	{r7, pc}
 800ee98:	0801860c 	.word	0x0801860c
 800ee9c:	08017f90 	.word	0x08017f90
 800eea0:	08017fa4 	.word	0x08017fa4
 800eea4:	24000274 	.word	0x24000274

0800eea8 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b0c8      	sub	sp, #288	; 0x120
 800eeac:	af06      	add	r7, sp, #24
 800eeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eeb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eeb6:	6018      	str	r0, [r3, #0]
 800eeb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eebc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eec0:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
 800eec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	689a      	ldr	r2, [r3, #8]
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->access_token, c->is_tls ? "Secure; " : "", 3600 * 24);
 800eece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800eed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800eedc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eee0:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d001      	beq.n	800eeea <handle_login+0x42>
 800eee6:	4b17      	ldr	r3, [pc, #92]	; (800ef44 <handle_login+0x9c>)
 800eee8:	e000      	b.n	800eeec <handle_login+0x44>
 800eeea:	4b17      	ldr	r3, [pc, #92]	; (800ef48 <handle_login+0xa0>)
 800eeec:	f107 0008 	add.w	r0, r7, #8
 800eef0:	4916      	ldr	r1, [pc, #88]	; (800ef4c <handle_login+0xa4>)
 800eef2:	9101      	str	r1, [sp, #4]
 800eef4:	9300      	str	r3, [sp, #0]
 800eef6:	4613      	mov	r3, r2
 800eef8:	4a15      	ldr	r2, [pc, #84]	; (800ef50 <handle_login+0xa8>)
 800eefa:	f44f 7180 	mov.w	r1, #256	; 0x100
 800eefe:	f7f8 ffa1 	bl	8007e44 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->name));
 800ef02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f107 0208 	add.w	r2, r7, #8
 800ef12:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800ef16:	f5a1 7082 	sub.w	r0, r1, #260	; 0x104
 800ef1a:	9305      	str	r3, [sp, #20]
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	9304      	str	r3, [sp, #16]
 800ef20:	4b0c      	ldr	r3, [pc, #48]	; (800ef54 <handle_login+0xac>)
 800ef22:	9303      	str	r3, [sp, #12]
 800ef24:	4b0c      	ldr	r3, [pc, #48]	; (800ef58 <handle_login+0xb0>)
 800ef26:	9302      	str	r3, [sp, #8]
 800ef28:	2300      	movs	r3, #0
 800ef2a:	9301      	str	r3, [sp, #4]
 800ef2c:	4b09      	ldr	r3, [pc, #36]	; (800ef54 <handle_login+0xac>)
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	4b0a      	ldr	r3, [pc, #40]	; (800ef5c <handle_login+0xb4>)
 800ef32:	21c8      	movs	r1, #200	; 0xc8
 800ef34:	6800      	ldr	r0, [r0, #0]
 800ef36:	f7f5 fd45 	bl	80049c4 <mg_http_reply>
}
 800ef3a:	bf00      	nop
 800ef3c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}
 800ef44:	08017fb8 	.word	0x08017fb8
 800ef48:	08017fc4 	.word	0x08017fc4
 800ef4c:	00015180 	.word	0x00015180
 800ef50:	08017fc8 	.word	0x08017fc8
 800ef54:	080081e5 	.word	0x080081e5
 800ef58:	0801801c 	.word	0x0801801c
 800ef5c:	08018014 	.word	0x08018014

0800ef60 <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b0c2      	sub	sp, #264	; 0x108
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef6a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef6e:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 800ef70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ef74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ef7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef82:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d001      	beq.n	800ef8c <handle_logout+0x2c>
 800ef88:	4b0c      	ldr	r3, [pc, #48]	; (800efbc <handle_logout+0x5c>)
 800ef8a:	e000      	b.n	800ef8e <handle_logout+0x2e>
 800ef8c:	4b0c      	ldr	r3, [pc, #48]	; (800efc0 <handle_logout+0x60>)
 800ef8e:	f107 0008 	add.w	r0, r7, #8
 800ef92:	4a0c      	ldr	r2, [pc, #48]	; (800efc4 <handle_logout+0x64>)
 800ef94:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ef98:	f7f8 ff54 	bl	8007e44 <mg_snprintf>
  mg_http_reply(c, 200, cookie, "true\n");
 800ef9c:	f107 0208 	add.w	r2, r7, #8
 800efa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800efa4:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800efa8:	4b07      	ldr	r3, [pc, #28]	; (800efc8 <handle_logout+0x68>)
 800efaa:	21c8      	movs	r1, #200	; 0xc8
 800efac:	6800      	ldr	r0, [r0, #0]
 800efae:	f7f5 fd09 	bl	80049c4 <mg_http_reply>
}
 800efb2:	bf00      	nop
 800efb4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800efb8:	46bd      	mov	sp, r7
 800efba:	bd80      	pop	{r7, pc}
 800efbc:	08017fb8 	.word	0x08017fb8
 800efc0:	08017fc4 	.word	0x08017fc4
 800efc4:	08018024 	.word	0x08018024
 800efc8:	08018088 	.word	0x08018088

0800efcc <handle_debug>:

static void handle_debug(struct mg_connection *c, struct mg_http_message *hm) {
 800efcc:	b580      	push	{r7, lr}
 800efce:	b086      	sub	sp, #24
 800efd0:	af02      	add	r7, sp, #8
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  int level = mg_json_get_long(hm->body, "$.level", MG_LL_DEBUG);
 800efd6:	6839      	ldr	r1, [r7, #0]
 800efd8:	2303      	movs	r3, #3
 800efda:	4a0b      	ldr	r2, [pc, #44]	; (800f008 <handle_debug+0x3c>)
 800efdc:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800efe0:	c903      	ldmia	r1, {r0, r1}
 800efe2:	f7f8 f887 	bl	80070f4 <mg_json_get_long>
 800efe6:	60f8      	str	r0, [r7, #12]
  mg_log_set(level);
 800efe8:	68f8      	ldr	r0, [r7, #12]
 800efea:	f7f8 f8d5 	bl	8007198 <mg_log_set>
  mg_http_reply(c, 200, "", "Debug level set to %d\n", level);
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	9300      	str	r3, [sp, #0]
 800eff2:	4b06      	ldr	r3, [pc, #24]	; (800f00c <handle_debug+0x40>)
 800eff4:	4a06      	ldr	r2, [pc, #24]	; (800f010 <handle_debug+0x44>)
 800eff6:	21c8      	movs	r1, #200	; 0xc8
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f7f5 fce3 	bl	80049c4 <mg_http_reply>
}
 800effe:	bf00      	nop
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	08018090 	.word	0x08018090
 800f00c:	08018098 	.word	0x08018098
 800f010:	08017fc4 	.word	0x08017fc4

0800f014 <print_int_arr>:

static size_t print_int_arr(void (*out)(char, void *), void *ptr, va_list *ap) {
 800f014:	b580      	push	{r7, lr}
 800f016:	b08a      	sub	sp, #40	; 0x28
 800f018:	af02      	add	r7, sp, #8
 800f01a:	60f8      	str	r0, [r7, #12]
 800f01c:	60b9      	str	r1, [r7, #8]
 800f01e:	607a      	str	r2, [r7, #4]
  size_t len = 0, num = va_arg(*ap, size_t);  // Number of items in the array
 800f020:	2300      	movs	r3, #0
 800f022:	61fb      	str	r3, [r7, #28]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	1d19      	adds	r1, r3, #4
 800f02a:	687a      	ldr	r2, [r7, #4]
 800f02c:	6011      	str	r1, [r2, #0]
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	617b      	str	r3, [r7, #20]
  int *arr = va_arg(*ap, int *);              // Array ptr
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	1d19      	adds	r1, r3, #4
 800f038:	687a      	ldr	r2, [r7, #4]
 800f03a:	6011      	str	r1, [r2, #0]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < num; i++) {
 800f040:	2300      	movs	r3, #0
 800f042:	61bb      	str	r3, [r7, #24]
 800f044:	e018      	b.n	800f078 <print_int_arr+0x64>
    len += mg_xprintf(out, ptr, "%s%d", i == 0 ? "" : ",", arr[i]);
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d101      	bne.n	800f050 <print_int_arr+0x3c>
 800f04c:	490f      	ldr	r1, [pc, #60]	; (800f08c <print_int_arr+0x78>)
 800f04e:	e000      	b.n	800f052 <print_int_arr+0x3e>
 800f050:	490f      	ldr	r1, [pc, #60]	; (800f090 <print_int_arr+0x7c>)
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	009b      	lsls	r3, r3, #2
 800f056:	693a      	ldr	r2, [r7, #16]
 800f058:	4413      	add	r3, r2
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	9300      	str	r3, [sp, #0]
 800f05e:	460b      	mov	r3, r1
 800f060:	4a0c      	ldr	r2, [pc, #48]	; (800f094 <print_int_arr+0x80>)
 800f062:	68b9      	ldr	r1, [r7, #8]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7f3 fd8c 	bl	8002b82 <mg_xprintf>
 800f06a:	4602      	mov	r2, r0
 800f06c:	69fb      	ldr	r3, [r7, #28]
 800f06e:	4413      	add	r3, r2
 800f070:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < num; i++) {
 800f072:	69bb      	ldr	r3, [r7, #24]
 800f074:	3301      	adds	r3, #1
 800f076:	61bb      	str	r3, [r7, #24]
 800f078:	69ba      	ldr	r2, [r7, #24]
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d3e2      	bcc.n	800f046 <print_int_arr+0x32>
  }
  return len;
 800f080:	69fb      	ldr	r3, [r7, #28]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3720      	adds	r7, #32
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	08017fc4 	.word	0x08017fc4
 800f090:	080180b0 	.word	0x080180b0
 800f094:	080180b4 	.word	0x080180b4

0800f098 <handle_stats_get>:

static void handle_stats_get(struct mg_connection *c) {
 800f098:	b5b0      	push	{r4, r5, r7, lr}
 800f09a:	b09e      	sub	sp, #120	; 0x78
 800f09c:	af0e      	add	r7, sp, #56	; 0x38
 800f09e:	6078      	str	r0, [r7, #4]
  int points[] = {21, 22, 22, 19, 18, 20, 23, 23, 22, 22, 22, 23, 22};
 800f0a0:	4b19      	ldr	r3, [pc, #100]	; (800f108 <handle_stats_get+0x70>)
 800f0a2:	f107 040c 	add.w	r4, r7, #12
 800f0a6:	461d      	mov	r5, r3
 800f0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f0b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f0b4:	682b      	ldr	r3, [r5, #0]
 800f0b6:	6023      	str	r3, [r4, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%d,%m:%d,%m:[%M]}",
 800f0b8:	4b14      	ldr	r3, [pc, #80]	; (800f10c <handle_stats_get+0x74>)
 800f0ba:	681a      	ldr	r2, [r3, #0]
 800f0bc:	f107 030c 	add.w	r3, r7, #12
 800f0c0:	930d      	str	r3, [sp, #52]	; 0x34
 800f0c2:	230d      	movs	r3, #13
 800f0c4:	930c      	str	r3, [sp, #48]	; 0x30
 800f0c6:	4b12      	ldr	r3, [pc, #72]	; (800f110 <handle_stats_get+0x78>)
 800f0c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800f0ca:	4b12      	ldr	r3, [pc, #72]	; (800f114 <handle_stats_get+0x7c>)
 800f0cc:	930a      	str	r3, [sp, #40]	; 0x28
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	9309      	str	r3, [sp, #36]	; 0x24
 800f0d2:	4b11      	ldr	r3, [pc, #68]	; (800f118 <handle_stats_get+0x80>)
 800f0d4:	9308      	str	r3, [sp, #32]
 800f0d6:	2343      	movs	r3, #67	; 0x43
 800f0d8:	9307      	str	r3, [sp, #28]
 800f0da:	4b10      	ldr	r3, [pc, #64]	; (800f11c <handle_stats_get+0x84>)
 800f0dc:	9306      	str	r3, [sp, #24]
 800f0de:	2300      	movs	r3, #0
 800f0e0:	9305      	str	r3, [sp, #20]
 800f0e2:	4b0d      	ldr	r3, [pc, #52]	; (800f118 <handle_stats_get+0x80>)
 800f0e4:	9304      	str	r3, [sp, #16]
 800f0e6:	2315      	movs	r3, #21
 800f0e8:	9303      	str	r3, [sp, #12]
 800f0ea:	4b0d      	ldr	r3, [pc, #52]	; (800f120 <handle_stats_get+0x88>)
 800f0ec:	9302      	str	r3, [sp, #8]
 800f0ee:	2300      	movs	r3, #0
 800f0f0:	9301      	str	r3, [sp, #4]
 800f0f2:	4b09      	ldr	r3, [pc, #36]	; (800f118 <handle_stats_get+0x80>)
 800f0f4:	9300      	str	r3, [sp, #0]
 800f0f6:	4b0b      	ldr	r3, [pc, #44]	; (800f124 <handle_stats_get+0x8c>)
 800f0f8:	21c8      	movs	r1, #200	; 0xc8
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7f5 fc62 	bl	80049c4 <mg_http_reply>
                MG_ESC("temperature"), 21,  //
                MG_ESC("humidity"), 67,     //
                MG_ESC("points"), print_int_arr,
                sizeof(points) / sizeof(points[0]), points);
}
 800f100:	bf00      	nop
 800f102:	3740      	adds	r7, #64	; 0x40
 800f104:	46bd      	mov	sp, r7
 800f106:	bdb0      	pop	{r4, r5, r7, pc}
 800f108:	080180f4 	.word	0x080180f4
 800f10c:	24000268 	.word	0x24000268
 800f110:	0800f015 	.word	0x0800f015
 800f114:	080180d4 	.word	0x080180d4
 800f118:	080081e5 	.word	0x080081e5
 800f11c:	080180dc 	.word	0x080180dc
 800f120:	080180e8 	.word	0x080180e8
 800f124:	080180bc 	.word	0x080180bc

0800f128 <print_events>:

static size_t print_events(void (*out)(char, void *), void *ptr, va_list *ap) {
 800f128:	b590      	push	{r4, r7, lr}
 800f12a:	b0a1      	sub	sp, #132	; 0x84
 800f12c:	af12      	add	r7, sp, #72	; 0x48
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	607a      	str	r2, [r7, #4]
  size_t len = 0;
 800f134:	2300      	movs	r3, #0
 800f136:	637b      	str	r3, [r7, #52]	; 0x34
  struct ui_event ev;
  int pageno = va_arg(*ap, unsigned);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	1d19      	adds	r1, r3, #4
 800f13e:	687a      	ldr	r2, [r7, #4]
 800f140:	6011      	str	r1, [r2, #0]
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	62fb      	str	r3, [r7, #44]	; 0x2c
  int no = (pageno - 1) * EVENTS_PER_PAGE;
 800f146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f148:	1e5a      	subs	r2, r3, #1
 800f14a:	4613      	mov	r3, r2
 800f14c:	009b      	lsls	r3, r3, #2
 800f14e:	4413      	add	r3, r2
 800f150:	009b      	lsls	r3, r3, #2
 800f152:	633b      	str	r3, [r7, #48]	; 0x30
  int end = no + EVENTS_PER_PAGE;
 800f154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f156:	3314      	adds	r3, #20
 800f158:	62bb      	str	r3, [r7, #40]	; 0x28

  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 800f15a:	e037      	b.n	800f1cc <print_events+0xa4>
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800f15c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d101      	bne.n	800f166 <print_events+0x3e>
 800f162:	4924      	ldr	r1, [pc, #144]	; (800f1f4 <print_events+0xcc>)
 800f164:	e000      	b.n	800f168 <print_events+0x40>
 800f166:	4924      	ldr	r1, [pc, #144]	; (800f1f8 <print_events+0xd0>)
 800f168:	69bb      	ldr	r3, [r7, #24]
                      len == 0 ? "" : ",",                       //
                      MG_ESC("time"), ev.timestamp,       //
                      MG_ESC("type"), ev.type,            //
 800f16a:	7d3a      	ldrb	r2, [r7, #20]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800f16c:	4610      	mov	r0, r2
                      MG_ESC("prio"), ev.prio,            //
 800f16e:	7d7a      	ldrb	r2, [r7, #21]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800f170:	4614      	mov	r4, r2
 800f172:	f107 0214 	add.w	r2, r7, #20
 800f176:	3208      	adds	r2, #8
 800f178:	9211      	str	r2, [sp, #68]	; 0x44
 800f17a:	2200      	movs	r2, #0
 800f17c:	9210      	str	r2, [sp, #64]	; 0x40
 800f17e:	4a1f      	ldr	r2, [pc, #124]	; (800f1fc <print_events+0xd4>)
 800f180:	920f      	str	r2, [sp, #60]	; 0x3c
 800f182:	4a1f      	ldr	r2, [pc, #124]	; (800f200 <print_events+0xd8>)
 800f184:	920e      	str	r2, [sp, #56]	; 0x38
 800f186:	2200      	movs	r2, #0
 800f188:	920d      	str	r2, [sp, #52]	; 0x34
 800f18a:	4a1c      	ldr	r2, [pc, #112]	; (800f1fc <print_events+0xd4>)
 800f18c:	920c      	str	r2, [sp, #48]	; 0x30
 800f18e:	940b      	str	r4, [sp, #44]	; 0x2c
 800f190:	4a1c      	ldr	r2, [pc, #112]	; (800f204 <print_events+0xdc>)
 800f192:	920a      	str	r2, [sp, #40]	; 0x28
 800f194:	2200      	movs	r2, #0
 800f196:	9209      	str	r2, [sp, #36]	; 0x24
 800f198:	4a18      	ldr	r2, [pc, #96]	; (800f1fc <print_events+0xd4>)
 800f19a:	9208      	str	r2, [sp, #32]
 800f19c:	9007      	str	r0, [sp, #28]
 800f19e:	4a1a      	ldr	r2, [pc, #104]	; (800f208 <print_events+0xe0>)
 800f1a0:	9206      	str	r2, [sp, #24]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	9205      	str	r2, [sp, #20]
 800f1a6:	4a15      	ldr	r2, [pc, #84]	; (800f1fc <print_events+0xd4>)
 800f1a8:	9204      	str	r2, [sp, #16]
 800f1aa:	9303      	str	r3, [sp, #12]
 800f1ac:	4b17      	ldr	r3, [pc, #92]	; (800f20c <print_events+0xe4>)
 800f1ae:	9302      	str	r3, [sp, #8]
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	9301      	str	r3, [sp, #4]
 800f1b4:	4b11      	ldr	r3, [pc, #68]	; (800f1fc <print_events+0xd4>)
 800f1b6:	9300      	str	r3, [sp, #0]
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	4a15      	ldr	r2, [pc, #84]	; (800f210 <print_events+0xe8>)
 800f1bc:	68b9      	ldr	r1, [r7, #8]
 800f1be:	68f8      	ldr	r0, [r7, #12]
 800f1c0:	f7f3 fcdf 	bl	8002b82 <mg_xprintf>
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c8:	4413      	add	r3, r2
 800f1ca:	637b      	str	r3, [r7, #52]	; 0x34
  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 800f1cc:	f107 0314 	add.w	r3, r7, #20
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1d4:	f7ff fd0e 	bl	800ebf4 <ui_event_next>
 800f1d8:	6338      	str	r0, [r7, #48]	; 0x30
 800f1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d003      	beq.n	800f1e8 <print_events+0xc0>
 800f1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	ddb9      	ble.n	800f15c <print_events+0x34>
                      MG_ESC("text"), MG_ESC(ev.text));
  }

  return len;
 800f1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	373c      	adds	r7, #60	; 0x3c
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd90      	pop	{r4, r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	08017fc4 	.word	0x08017fc4
 800f1f8:	080180b0 	.word	0x080180b0
 800f1fc:	080081e5 	.word	0x080081e5
 800f200:	08018148 	.word	0x08018148
 800f204:	08018150 	.word	0x08018150
 800f208:	08018158 	.word	0x08018158
 800f20c:	08018160 	.word	0x08018160
 800f210:	08018128 	.word	0x08018128

0800f214 <handle_events_get>:

static void handle_events_get(struct mg_connection *c, struct mg_http_message *hm) {
 800f214:	b580      	push	{r7, lr}
 800f216:	b08e      	sub	sp, #56	; 0x38
 800f218:	af0a      	add	r7, sp, #40	; 0x28
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  int pageno = mg_json_get_long(hm->body, "$.page", 1);
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	2301      	movs	r3, #1
 800f222:	4a12      	ldr	r2, [pc, #72]	; (800f26c <handle_events_get+0x58>)
 800f224:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800f228:	c903      	ldmia	r1, {r0, r1}
 800f22a:	f7f7 ff63 	bl	80070f4 <mg_json_get_long>
 800f22e:	60f8      	str	r0, [r7, #12]
  mg_http_reply(c, 200, s_json_header, "{%m:[%M], %m:%d}", MG_ESC("arr"),
 800f230:	4b0f      	ldr	r3, [pc, #60]	; (800f270 <handle_events_get+0x5c>)
 800f232:	681a      	ldr	r2, [r3, #0]
 800f234:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800f238:	9308      	str	r3, [sp, #32]
 800f23a:	4b0e      	ldr	r3, [pc, #56]	; (800f274 <handle_events_get+0x60>)
 800f23c:	9307      	str	r3, [sp, #28]
 800f23e:	2300      	movs	r3, #0
 800f240:	9306      	str	r3, [sp, #24]
 800f242:	4b0d      	ldr	r3, [pc, #52]	; (800f278 <handle_events_get+0x64>)
 800f244:	9305      	str	r3, [sp, #20]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	9304      	str	r3, [sp, #16]
 800f24a:	4b0c      	ldr	r3, [pc, #48]	; (800f27c <handle_events_get+0x68>)
 800f24c:	9303      	str	r3, [sp, #12]
 800f24e:	4b0c      	ldr	r3, [pc, #48]	; (800f280 <handle_events_get+0x6c>)
 800f250:	9302      	str	r3, [sp, #8]
 800f252:	2300      	movs	r3, #0
 800f254:	9301      	str	r3, [sp, #4]
 800f256:	4b08      	ldr	r3, [pc, #32]	; (800f278 <handle_events_get+0x64>)
 800f258:	9300      	str	r3, [sp, #0]
 800f25a:	4b0a      	ldr	r3, [pc, #40]	; (800f284 <handle_events_get+0x70>)
 800f25c:	21c8      	movs	r1, #200	; 0xc8
 800f25e:	6878      	ldr	r0, [r7, #4]
 800f260:	f7f5 fbb0 	bl	80049c4 <mg_http_reply>
                print_events, pageno, MG_ESC("totalCount"), MAX_EVENTS_NO);
}
 800f264:	bf00      	nop
 800f266:	3710      	adds	r7, #16
 800f268:	46bd      	mov	sp, r7
 800f26a:	bd80      	pop	{r7, pc}
 800f26c:	08018168 	.word	0x08018168
 800f270:	24000268 	.word	0x24000268
 800f274:	08018184 	.word	0x08018184
 800f278:	080081e5 	.word	0x080081e5
 800f27c:	0800f129 	.word	0x0800f129
 800f280:	08018190 	.word	0x08018190
 800f284:	08018170 	.word	0x08018170

0800f288 <handle_settings_set>:

static void handle_settings_set(struct mg_connection *c, struct mg_str body) {
 800f288:	b590      	push	{r4, r7, lr}
 800f28a:	b095      	sub	sp, #84	; 0x54
 800f28c:	af0a      	add	r7, sp, #40	; 0x28
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	1d3b      	adds	r3, r7, #4
 800f292:	e883 0006 	stmia.w	r3, {r1, r2}
  struct settings settings;
  memset(&settings, 0, sizeof(settings));
 800f296:	f107 0310 	add.w	r3, r7, #16
 800f29a:	2210      	movs	r2, #16
 800f29c:	2100      	movs	r1, #0
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f006 f9d9 	bl	8015656 <memset>
  mg_json_get_bool(body, "$.log_enabled", &settings.log_enabled);
 800f2a4:	f107 0310 	add.w	r3, r7, #16
 800f2a8:	4a32      	ldr	r2, [pc, #200]	; (800f374 <handle_settings_set+0xec>)
 800f2aa:	1d39      	adds	r1, r7, #4
 800f2ac:	c903      	ldmia	r1, {r0, r1}
 800f2ae:	f7f7 fe08 	bl	8006ec2 <mg_json_get_bool>
  settings.log_level = mg_json_get_long(body, "$.log_level", 0);
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	4a30      	ldr	r2, [pc, #192]	; (800f378 <handle_settings_set+0xf0>)
 800f2b6:	1d39      	adds	r1, r7, #4
 800f2b8:	c903      	ldmia	r1, {r0, r1}
 800f2ba:	f7f7 ff1b 	bl	80070f4 <mg_json_get_long>
 800f2be:	4603      	mov	r3, r0
 800f2c0:	617b      	str	r3, [r7, #20]
  settings.brightness = mg_json_get_long(body, "$.brightness", 0);
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	4a2d      	ldr	r2, [pc, #180]	; (800f37c <handle_settings_set+0xf4>)
 800f2c6:	1d39      	adds	r1, r7, #4
 800f2c8:	c903      	ldmia	r1, {r0, r1}
 800f2ca:	f7f7 ff13 	bl	80070f4 <mg_json_get_long>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	61bb      	str	r3, [r7, #24]
  char *s = mg_json_get_str(body, "$.device_name");
 800f2d2:	4a2b      	ldr	r2, [pc, #172]	; (800f380 <handle_settings_set+0xf8>)
 800f2d4:	1d3b      	adds	r3, r7, #4
 800f2d6:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f2da:	f7f7 febd 	bl	8007058 <mg_json_get_str>
 800f2de:	6278      	str	r0, [r7, #36]	; 0x24
  if (s && strlen(s) < MAX_DEVICE_NAME) {
 800f2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d00c      	beq.n	800f300 <handle_settings_set+0x78>
 800f2e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f2e8:	f7f1 f872 	bl	80003d0 <strlen>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	2b27      	cmp	r3, #39	; 0x27
 800f2f0:	d806      	bhi.n	800f300 <handle_settings_set+0x78>
    free(settings.device_name);
 800f2f2:	69fb      	ldr	r3, [r7, #28]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f005 fecb 	bl	8015090 <free>
    settings.device_name = s;
 800f2fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2fc:	61fb      	str	r3, [r7, #28]
 800f2fe:	e002      	b.n	800f306 <handle_settings_set+0x7e>
  } else {
    free(s);
 800f300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f302:	f005 fec5 	bl	8015090 <free>
  }

  // Save to the device flash
  s_settings = settings;
 800f306:	4b1f      	ldr	r3, [pc, #124]	; (800f384 <handle_settings_set+0xfc>)
 800f308:	461c      	mov	r4, r3
 800f30a:	f107 0310 	add.w	r3, r7, #16
 800f30e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f310:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  bool ok = true;
 800f314:	2301      	movs	r3, #1
 800f316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  mg_http_reply(c, 200, s_json_header,
 800f31a:	4b1b      	ldr	r3, [pc, #108]	; (800f388 <handle_settings_set+0x100>)
 800f31c:	6819      	ldr	r1, [r3, #0]
 800f31e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f322:	2b00      	cmp	r3, #0
 800f324:	d001      	beq.n	800f32a <handle_settings_set+0xa2>
 800f326:	4b19      	ldr	r3, [pc, #100]	; (800f38c <handle_settings_set+0x104>)
 800f328:	e000      	b.n	800f32c <handle_settings_set+0xa4>
 800f32a:	4b19      	ldr	r3, [pc, #100]	; (800f390 <handle_settings_set+0x108>)
 800f32c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800f330:	2a00      	cmp	r2, #0
 800f332:	d001      	beq.n	800f338 <handle_settings_set+0xb0>
 800f334:	4a17      	ldr	r2, [pc, #92]	; (800f394 <handle_settings_set+0x10c>)
 800f336:	e000      	b.n	800f33a <handle_settings_set+0xb2>
 800f338:	4a17      	ldr	r2, [pc, #92]	; (800f398 <handle_settings_set+0x110>)
 800f33a:	9209      	str	r2, [sp, #36]	; 0x24
 800f33c:	2200      	movs	r2, #0
 800f33e:	9208      	str	r2, [sp, #32]
 800f340:	4a16      	ldr	r2, [pc, #88]	; (800f39c <handle_settings_set+0x114>)
 800f342:	9207      	str	r2, [sp, #28]
 800f344:	4a16      	ldr	r2, [pc, #88]	; (800f3a0 <handle_settings_set+0x118>)
 800f346:	9206      	str	r2, [sp, #24]
 800f348:	2200      	movs	r2, #0
 800f34a:	9205      	str	r2, [sp, #20]
 800f34c:	4a13      	ldr	r2, [pc, #76]	; (800f39c <handle_settings_set+0x114>)
 800f34e:	9204      	str	r2, [sp, #16]
 800f350:	9303      	str	r3, [sp, #12]
 800f352:	4b14      	ldr	r3, [pc, #80]	; (800f3a4 <handle_settings_set+0x11c>)
 800f354:	9302      	str	r3, [sp, #8]
 800f356:	2300      	movs	r3, #0
 800f358:	9301      	str	r3, [sp, #4]
 800f35a:	4b10      	ldr	r3, [pc, #64]	; (800f39c <handle_settings_set+0x114>)
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	4b12      	ldr	r3, [pc, #72]	; (800f3a8 <handle_settings_set+0x120>)
 800f360:	460a      	mov	r2, r1
 800f362:	21c8      	movs	r1, #200	; 0xc8
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f7f5 fb2d 	bl	80049c4 <mg_http_reply>
                "{%m:%s,%m:%m}",                          //
                MG_ESC("status"), ok ? "true" : "false",  //
                MG_ESC("message"), MG_ESC(ok ? "Success" : "Failed"));
}
 800f36a:	bf00      	nop
 800f36c:	372c      	adds	r7, #44	; 0x2c
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd90      	pop	{r4, r7, pc}
 800f372:	bf00      	nop
 800f374:	08018194 	.word	0x08018194
 800f378:	080181a4 	.word	0x080181a4
 800f37c:	080181b0 	.word	0x080181b0
 800f380:	080181c0 	.word	0x080181c0
 800f384:	24000258 	.word	0x24000258
 800f388:	24000268 	.word	0x24000268
 800f38c:	080181d0 	.word	0x080181d0
 800f390:	080181d8 	.word	0x080181d8
 800f394:	080181e0 	.word	0x080181e0
 800f398:	080181e8 	.word	0x080181e8
 800f39c:	080081e5 	.word	0x080081e5
 800f3a0:	08018200 	.word	0x08018200
 800f3a4:	08018208 	.word	0x08018208
 800f3a8:	080181f0 	.word	0x080181f0

0800f3ac <handle_settings_get>:

static void handle_settings_get(struct mg_connection *c) {
 800f3ac:	b590      	push	{r4, r7, lr}
 800f3ae:	b095      	sub	sp, #84	; 0x54
 800f3b0:	af12      	add	r7, sp, #72	; 0x48
 800f3b2:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}",  //
 800f3b4:	4b1c      	ldr	r3, [pc, #112]	; (800f428 <handle_settings_get+0x7c>)
 800f3b6:	681c      	ldr	r4, [r3, #0]
                MG_ESC("log_enabled"),
                s_settings.log_enabled ? "true" : "false",    //
 800f3b8:	4b1c      	ldr	r3, [pc, #112]	; (800f42c <handle_settings_get+0x80>)
 800f3ba:	781b      	ldrb	r3, [r3, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}",  //
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <handle_settings_get+0x18>
 800f3c0:	4b1b      	ldr	r3, [pc, #108]	; (800f430 <handle_settings_get+0x84>)
 800f3c2:	e000      	b.n	800f3c6 <handle_settings_get+0x1a>
 800f3c4:	4b1b      	ldr	r3, [pc, #108]	; (800f434 <handle_settings_get+0x88>)
 800f3c6:	4a19      	ldr	r2, [pc, #100]	; (800f42c <handle_settings_get+0x80>)
 800f3c8:	6852      	ldr	r2, [r2, #4]
 800f3ca:	4918      	ldr	r1, [pc, #96]	; (800f42c <handle_settings_get+0x80>)
 800f3cc:	6889      	ldr	r1, [r1, #8]
 800f3ce:	4817      	ldr	r0, [pc, #92]	; (800f42c <handle_settings_get+0x80>)
 800f3d0:	68c0      	ldr	r0, [r0, #12]
 800f3d2:	9011      	str	r0, [sp, #68]	; 0x44
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	9010      	str	r0, [sp, #64]	; 0x40
 800f3d8:	4817      	ldr	r0, [pc, #92]	; (800f438 <handle_settings_get+0x8c>)
 800f3da:	900f      	str	r0, [sp, #60]	; 0x3c
 800f3dc:	4817      	ldr	r0, [pc, #92]	; (800f43c <handle_settings_get+0x90>)
 800f3de:	900e      	str	r0, [sp, #56]	; 0x38
 800f3e0:	2000      	movs	r0, #0
 800f3e2:	900d      	str	r0, [sp, #52]	; 0x34
 800f3e4:	4814      	ldr	r0, [pc, #80]	; (800f438 <handle_settings_get+0x8c>)
 800f3e6:	900c      	str	r0, [sp, #48]	; 0x30
 800f3e8:	910b      	str	r1, [sp, #44]	; 0x2c
 800f3ea:	4915      	ldr	r1, [pc, #84]	; (800f440 <handle_settings_get+0x94>)
 800f3ec:	910a      	str	r1, [sp, #40]	; 0x28
 800f3ee:	2100      	movs	r1, #0
 800f3f0:	9109      	str	r1, [sp, #36]	; 0x24
 800f3f2:	4911      	ldr	r1, [pc, #68]	; (800f438 <handle_settings_get+0x8c>)
 800f3f4:	9108      	str	r1, [sp, #32]
 800f3f6:	9207      	str	r2, [sp, #28]
 800f3f8:	4a12      	ldr	r2, [pc, #72]	; (800f444 <handle_settings_get+0x98>)
 800f3fa:	9206      	str	r2, [sp, #24]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	9205      	str	r2, [sp, #20]
 800f400:	4a0d      	ldr	r2, [pc, #52]	; (800f438 <handle_settings_get+0x8c>)
 800f402:	9204      	str	r2, [sp, #16]
 800f404:	9303      	str	r3, [sp, #12]
 800f406:	4b10      	ldr	r3, [pc, #64]	; (800f448 <handle_settings_get+0x9c>)
 800f408:	9302      	str	r3, [sp, #8]
 800f40a:	2300      	movs	r3, #0
 800f40c:	9301      	str	r3, [sp, #4]
 800f40e:	4b0a      	ldr	r3, [pc, #40]	; (800f438 <handle_settings_get+0x8c>)
 800f410:	9300      	str	r3, [sp, #0]
 800f412:	4b0e      	ldr	r3, [pc, #56]	; (800f44c <handle_settings_get+0xa0>)
 800f414:	4622      	mov	r2, r4
 800f416:	21c8      	movs	r1, #200	; 0xc8
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7f5 fad3 	bl	80049c4 <mg_http_reply>
                MG_ESC("log_level"), s_settings.log_level,    //
                MG_ESC("brightness"), s_settings.brightness,  //
                MG_ESC("device_name"), MG_ESC(s_settings.device_name));
}
 800f41e:	bf00      	nop
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	bd90      	pop	{r4, r7, pc}
 800f426:	bf00      	nop
 800f428:	24000268 	.word	0x24000268
 800f42c:	24000258 	.word	0x24000258
 800f430:	080181d0 	.word	0x080181d0
 800f434:	080181d8 	.word	0x080181d8
 800f438:	080081e5 	.word	0x080081e5
 800f43c:	08018230 	.word	0x08018230
 800f440:	0801823c 	.word	0x0801823c
 800f444:	08018248 	.word	0x08018248
 800f448:	08018254 	.word	0x08018254
 800f44c:	08018210 	.word	0x08018210

0800f450 <fn>:

// HTTP request handler function
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800f450:	b5b0      	push	{r4, r5, r7, lr}
 800f452:	b098      	sub	sp, #96	; 0x60
 800f454:	af04      	add	r7, sp, #16
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
 800f45c:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_ACCEPT && fn_data != NULL) {
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b05      	cmp	r3, #5
 800f462:	d117      	bne.n	800f494 <fn+0x44>
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d014      	beq.n	800f494 <fn+0x44>
    struct mg_tls_opts opts = {.cert = s_ssl_cert, .certkey = s_ssl_key};
 800f46a:	f107 0310 	add.w	r3, r7, #16
 800f46e:	2220      	movs	r2, #32
 800f470:	2100      	movs	r1, #0
 800f472:	4618      	mov	r0, r3
 800f474:	f006 f8ef 	bl	8015656 <memset>
 800f478:	4b5b      	ldr	r3, [pc, #364]	; (800f5e8 <fn+0x198>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	61bb      	str	r3, [r7, #24]
 800f47e:	4b5b      	ldr	r3, [pc, #364]	; (800f5ec <fn+0x19c>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	61fb      	str	r3, [r7, #28]
    mg_tls_init(c, &opts);
 800f484:	f107 0310 	add.w	r3, r7, #16
 800f488:	4619      	mov	r1, r3
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f7fb fac2 	bl	800aa14 <mg_tls_init>
  if (ev == MG_EV_ACCEPT && fn_data != NULL) {
 800f490:	bf00      	nop
    }
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
              hm->method.ptr, (int) hm->uri.len, hm->uri.ptr, (int) 3,
              &c->send.buf[9]));
  }
}
 800f492:	e0a5      	b.n	800f5e0 <fn+0x190>
  } else if (ev == MG_EV_HTTP_MSG) {
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	2b0a      	cmp	r3, #10
 800f498:	f040 80a2 	bne.w	800f5e0 <fn+0x190>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	64fb      	str	r3, [r7, #76]	; 0x4c
    struct user *u = authenticate(hm);
 800f4a0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f4a2:	f7ff fc73 	bl	800ed8c <authenticate>
 800f4a6:	64b8      	str	r0, [r7, #72]	; 0x48
    if (mg_http_match_uri(hm, "/api/#") && u == NULL) {
 800f4a8:	4951      	ldr	r1, [pc, #324]	; (800f5f0 <fn+0x1a0>)
 800f4aa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f4ac:	f7f6 fb37 	bl	8005b1e <mg_http_match_uri>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00a      	beq.n	800f4cc <fn+0x7c>
 800f4b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d107      	bne.n	800f4cc <fn+0x7c>
      mg_http_reply(c, 403, "", "Not Authorised\n");
 800f4bc:	4b4d      	ldr	r3, [pc, #308]	; (800f5f4 <fn+0x1a4>)
 800f4be:	4a4e      	ldr	r2, [pc, #312]	; (800f5f8 <fn+0x1a8>)
 800f4c0:	f240 1193 	movw	r1, #403	; 0x193
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f7f5 fa7d 	bl	80049c4 <mg_http_reply>
 800f4ca:	e066      	b.n	800f59a <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/login")) {
 800f4cc:	494b      	ldr	r1, [pc, #300]	; (800f5fc <fn+0x1ac>)
 800f4ce:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f4d0:	f7f6 fb25 	bl	8005b1e <mg_http_match_uri>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d004      	beq.n	800f4e4 <fn+0x94>
      handle_login(c, u);
 800f4da:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f4dc:	68f8      	ldr	r0, [r7, #12]
 800f4de:	f7ff fce3 	bl	800eea8 <handle_login>
 800f4e2:	e05a      	b.n	800f59a <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/logout")) {
 800f4e4:	4946      	ldr	r1, [pc, #280]	; (800f600 <fn+0x1b0>)
 800f4e6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f4e8:	f7f6 fb19 	bl	8005b1e <mg_http_match_uri>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d003      	beq.n	800f4fa <fn+0xaa>
      handle_logout(c);
 800f4f2:	68f8      	ldr	r0, [r7, #12]
 800f4f4:	f7ff fd34 	bl	800ef60 <handle_logout>
 800f4f8:	e04f      	b.n	800f59a <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/debug")) {
 800f4fa:	4942      	ldr	r1, [pc, #264]	; (800f604 <fn+0x1b4>)
 800f4fc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f4fe:	f7f6 fb0e 	bl	8005b1e <mg_http_match_uri>
 800f502:	4603      	mov	r3, r0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d004      	beq.n	800f512 <fn+0xc2>
      handle_debug(c, hm);
 800f508:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f7ff fd5e 	bl	800efcc <handle_debug>
 800f510:	e043      	b.n	800f59a <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/stats/get")) {
 800f512:	493d      	ldr	r1, [pc, #244]	; (800f608 <fn+0x1b8>)
 800f514:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f516:	f7f6 fb02 	bl	8005b1e <mg_http_match_uri>
 800f51a:	4603      	mov	r3, r0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d003      	beq.n	800f528 <fn+0xd8>
      handle_stats_get(c);
 800f520:	68f8      	ldr	r0, [r7, #12]
 800f522:	f7ff fdb9 	bl	800f098 <handle_stats_get>
 800f526:	e038      	b.n	800f59a <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/events/get")) {
 800f528:	4938      	ldr	r1, [pc, #224]	; (800f60c <fn+0x1bc>)
 800f52a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f52c:	f7f6 faf7 	bl	8005b1e <mg_http_match_uri>
 800f530:	4603      	mov	r3, r0
 800f532:	2b00      	cmp	r3, #0
 800f534:	d004      	beq.n	800f540 <fn+0xf0>
      handle_events_get(c, hm);
 800f536:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f538:	68f8      	ldr	r0, [r7, #12]
 800f53a:	f7ff fe6b 	bl	800f214 <handle_events_get>
 800f53e:	e02c      	b.n	800f59a <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/settings/get")) {
 800f540:	4933      	ldr	r1, [pc, #204]	; (800f610 <fn+0x1c0>)
 800f542:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f544:	f7f6 faeb 	bl	8005b1e <mg_http_match_uri>
 800f548:	4603      	mov	r3, r0
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	d003      	beq.n	800f556 <fn+0x106>
      handle_settings_get(c);
 800f54e:	68f8      	ldr	r0, [r7, #12]
 800f550:	f7ff ff2c 	bl	800f3ac <handle_settings_get>
 800f554:	e021      	b.n	800f59a <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/settings/set")) {
 800f556:	492f      	ldr	r1, [pc, #188]	; (800f614 <fn+0x1c4>)
 800f558:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f55a:	f7f6 fae0 	bl	8005b1e <mg_http_match_uri>
 800f55e:	4603      	mov	r3, r0
 800f560:	2b00      	cmp	r3, #0
 800f562:	d008      	beq.n	800f576 <fn+0x126>
      handle_settings_set(c, hm->body);
 800f564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f566:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800f56a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f7ff fe8a 	bl	800f288 <handle_settings_set>
 800f574:	e011      	b.n	800f59a <fn+0x14a>
      memset(&opts, 0, sizeof(opts));
 800f576:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f57a:	2218      	movs	r2, #24
 800f57c:	2100      	movs	r1, #0
 800f57e:	4618      	mov	r0, r3
 800f580:	f006 f869 	bl	8015656 <memset>
      opts.root_dir = "/web_root";
 800f584:	4b24      	ldr	r3, [pc, #144]	; (800f618 <fn+0x1c8>)
 800f586:	633b      	str	r3, [r7, #48]	; 0x30
      opts.fs = &mg_fs_packed;
 800f588:	4b24      	ldr	r3, [pc, #144]	; (800f61c <fn+0x1cc>)
 800f58a:	647b      	str	r3, [r7, #68]	; 0x44
      mg_http_serve_dir(c, ev_data, &opts);
 800f58c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f590:	461a      	mov	r2, r3
 800f592:	6879      	ldr	r1, [r7, #4]
 800f594:	68f8      	ldr	r0, [r7, #12]
 800f596:	f7f6 f893 	bl	80056c0 <mg_http_serve_dir>
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
 800f59a:	4b21      	ldr	r3, [pc, #132]	; (800f620 <fn+0x1d0>)
 800f59c:	f240 1201 	movw	r2, #257	; 0x101
 800f5a0:	4920      	ldr	r1, [pc, #128]	; (800f624 <fn+0x1d4>)
 800f5a2:	2003      	movs	r0, #3
 800f5a4:	f7f7 fe1a 	bl	80071dc <mg_log_prefix>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d018      	beq.n	800f5e0 <fn+0x190>
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800f5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	461d      	mov	r5, r3
 800f5b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5ba:	6818      	ldr	r0, [r3, #0]
 800f5bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5be:	68db      	ldr	r3, [r3, #12]
 800f5c0:	461c      	mov	r4, r3
 800f5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5c4:	689b      	ldr	r3, [r3, #8]
 800f5c6:	68fa      	ldr	r2, [r7, #12]
 800f5c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f5ca:	3209      	adds	r2, #9
 800f5cc:	9203      	str	r2, [sp, #12]
 800f5ce:	2203      	movs	r2, #3
 800f5d0:	9202      	str	r2, [sp, #8]
 800f5d2:	9301      	str	r3, [sp, #4]
 800f5d4:	9400      	str	r4, [sp, #0]
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	462a      	mov	r2, r5
 800f5da:	4813      	ldr	r0, [pc, #76]	; (800f628 <fn+0x1d8>)
 800f5dc:	f7f7 fe58 	bl	8007290 <mg_log>
}
 800f5e0:	bf00      	nop
 800f5e2:	3750      	adds	r7, #80	; 0x50
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bdb0      	pop	{r4, r5, r7, pc}
 800f5e8:	2400026c 	.word	0x2400026c
 800f5ec:	24000270 	.word	0x24000270
 800f5f0:	08018260 	.word	0x08018260
 800f5f4:	08018268 	.word	0x08018268
 800f5f8:	08017fc4 	.word	0x08017fc4
 800f5fc:	08018278 	.word	0x08018278
 800f600:	08018284 	.word	0x08018284
 800f604:	08018290 	.word	0x08018290
 800f608:	0801829c 	.word	0x0801829c
 800f60c:	080182ac 	.word	0x080182ac
 800f610:	080182bc 	.word	0x080182bc
 800f614:	080182d0 	.word	0x080182d0
 800f618:	080182e4 	.word	0x080182e4
 800f61c:	24000008 	.word	0x24000008
 800f620:	0801861c 	.word	0x0801861c
 800f624:	08017f90 	.word	0x08017f90
 800f628:	080182f0 	.word	0x080182f0

0800f62c <web_init>:

void web_init(struct mg_mgr *mgr) {
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af04      	add	r7, sp, #16
 800f632:	6078      	str	r0, [r7, #4]
  s_settings.device_name = strdup("My Device");
 800f634:	480e      	ldr	r0, [pc, #56]	; (800f670 <web_init+0x44>)
 800f636:	f006 f823 	bl	8015680 <strdup>
 800f63a:	4603      	mov	r3, r0
 800f63c:	461a      	mov	r2, r3
 800f63e:	4b0d      	ldr	r3, [pc, #52]	; (800f674 <web_init+0x48>)
 800f640:	60da      	str	r2, [r3, #12]

  mg_http_listen(mgr, HTTP_URL, fn, NULL);
 800f642:	2300      	movs	r3, #0
 800f644:	4a0c      	ldr	r2, [pc, #48]	; (800f678 <web_init+0x4c>)
 800f646:	490d      	ldr	r1, [pc, #52]	; (800f67c <web_init+0x50>)
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7f6 fd87 	bl	800615c <mg_http_listen>
#if MG_ENABLE_MBEDTLS || MG_ENABLE_OPENSSL
  mg_http_listen(mgr, HTTPS_URL, fn, "");
#endif

  // mg_timer_add(c->mgr, 1000, MG_TIMER_REPEAT, timer_mqtt_fn, c->mgr);
  mg_timer_add(mgr, 3600 * 1000, MG_TIMER_RUN_NOW | MG_TIMER_REPEAT,
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	9302      	str	r3, [sp, #8]
 800f652:	4b0b      	ldr	r3, [pc, #44]	; (800f680 <web_init+0x54>)
 800f654:	9301      	str	r3, [sp, #4]
 800f656:	2303      	movs	r3, #3
 800f658:	9300      	str	r3, [sp, #0]
 800f65a:	4a0a      	ldr	r2, [pc, #40]	; (800f684 <web_init+0x58>)
 800f65c:	f04f 0300 	mov.w	r3, #0
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f7f8 fb15 	bl	8007c90 <mg_timer_add>
               timer_sntp_fn, mgr);
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	08018308 	.word	0x08018308
 800f674:	24000258 	.word	0x24000258
 800f678:	0800f451 	.word	0x0800f451
 800f67c:	08018314 	.word	0x08018314
 800f680:	0800ed69 	.word	0x0800ed69
 800f684:	0036ee80 	.word	0x0036ee80

0800f688 <scmp>:


  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800f688:	b480      	push	{r7}
 800f68a:	b083      	sub	sp, #12
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800f692:	e005      	b.n	800f6a0 <scmp+0x18>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	3301      	adds	r3, #1
 800f698:	607b      	str	r3, [r7, #4]
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	3301      	adds	r3, #1
 800f69e:	603b      	str	r3, [r7, #0]
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	781b      	ldrb	r3, [r3, #0]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d005      	beq.n	800f6b4 <scmp+0x2c>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	781a      	ldrb	r2, [r3, #0]
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	781b      	ldrb	r3, [r3, #0]
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d0ef      	beq.n	800f694 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	683b      	ldr	r3, [r7, #0]
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	1ad3      	subs	r3, r2, r3
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	370c      	adds	r7, #12
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ca:	4770      	bx	lr

0800f6cc <mg_unlist>:
const char *mg_unlist(size_t no);
const char *mg_unlist(size_t no) {
 800f6cc:	b480      	push	{r7}
 800f6ce:	b083      	sub	sp, #12
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800f6d4:	4906      	ldr	r1, [pc, #24]	; (800f6f0 <mg_unlist+0x24>)
 800f6d6:	687a      	ldr	r2, [r7, #4]
 800f6d8:	4613      	mov	r3, r2
 800f6da:	005b      	lsls	r3, r3, #1
 800f6dc:	4413      	add	r3, r2
 800f6de:	00db      	lsls	r3, r3, #3
 800f6e0:	440b      	add	r3, r1
 800f6e2:	681b      	ldr	r3, [r3, #0]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	370c      	adds	r7, #12
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr
 800f6f0:	08019100 	.word	0x08019100

0800f6f4 <mg_unpack>:
const char *mg_unpack(const char *path, size_t *size, time_t *mtime);
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800f6f4:	b580      	push	{r7, lr}
 800f6f6:	b086      	sub	sp, #24
 800f6f8:	af00      	add	r7, sp, #0
 800f6fa:	60f8      	str	r0, [r7, #12]
 800f6fc:	60b9      	str	r1, [r7, #8]
 800f6fe:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800f700:	4b16      	ldr	r3, [pc, #88]	; (800f75c <mg_unpack+0x68>)
 800f702:	617b      	str	r3, [r7, #20]
 800f704:	e020      	b.n	800f748 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	68f9      	ldr	r1, [r7, #12]
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7ff ffbb 	bl	800f688 <scmp>
 800f712:	4603      	mov	r3, r0
 800f714:	2b00      	cmp	r3, #0
 800f716:	d113      	bne.n	800f740 <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800f718:	68bb      	ldr	r3, [r7, #8]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d004      	beq.n	800f728 <mg_unpack+0x34>
 800f71e:	697b      	ldr	r3, [r7, #20]
 800f720:	689b      	ldr	r3, [r3, #8]
 800f722:	1e5a      	subs	r2, r3, #1
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d005      	beq.n	800f73a <mg_unpack+0x46>
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f734:	6879      	ldr	r1, [r7, #4]
 800f736:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	e008      	b.n	800f752 <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800f740:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	3318      	adds	r3, #24
 800f746:	617b      	str	r3, [r7, #20]
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1da      	bne.n	800f706 <mg_unpack+0x12>
  }
  return NULL;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3718      	adds	r7, #24
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	08019100 	.word	0x08019100

0800f760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800f760:	b480      	push	{r7}
 800f762:	b083      	sub	sp, #12
 800f764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f766:	4b0a      	ldr	r3, [pc, #40]	; (800f790 <HAL_MspInit+0x30>)
 800f768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f76c:	4a08      	ldr	r2, [pc, #32]	; (800f790 <HAL_MspInit+0x30>)
 800f76e:	f043 0302 	orr.w	r3, r3, #2
 800f772:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f776:	4b06      	ldr	r3, [pc, #24]	; (800f790 <HAL_MspInit+0x30>)
 800f778:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f77c:	f003 0302 	and.w	r3, r3, #2
 800f780:	607b      	str	r3, [r7, #4]
 800f782:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr
 800f790:	58024400 	.word	0x58024400

0800f794 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b08e      	sub	sp, #56	; 0x38
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f79c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	601a      	str	r2, [r3, #0]
 800f7a4:	605a      	str	r2, [r3, #4]
 800f7a6:	609a      	str	r2, [r3, #8]
 800f7a8:	60da      	str	r2, [r3, #12]
 800f7aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	4a5d      	ldr	r2, [pc, #372]	; (800f928 <HAL_ETH_MspInit+0x194>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	f040 80b3 	bne.w	800f91e <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f7b8:	4b5c      	ldr	r3, [pc, #368]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7be:	4a5b      	ldr	r2, [pc, #364]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f7c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f7c8:	4b58      	ldr	r3, [pc, #352]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f7d2:	623b      	str	r3, [r7, #32]
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f7d6:	4b55      	ldr	r3, [pc, #340]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7dc:	4a53      	ldr	r2, [pc, #332]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f7e2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f7e6:	4b51      	ldr	r3, [pc, #324]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7f0:	61fb      	str	r3, [r7, #28]
 800f7f2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f7f4:	4b4d      	ldr	r3, [pc, #308]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f7fa:	4a4c      	ldr	r2, [pc, #304]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f7fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f800:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f804:	4b49      	ldr	r3, [pc, #292]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f806:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f80a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f80e:	61bb      	str	r3, [r7, #24]
 800f810:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f812:	4b46      	ldr	r3, [pc, #280]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f818:	4a44      	ldr	r2, [pc, #272]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f81a:	f043 0304 	orr.w	r3, r3, #4
 800f81e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f822:	4b42      	ldr	r3, [pc, #264]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f828:	f003 0304 	and.w	r3, r3, #4
 800f82c:	617b      	str	r3, [r7, #20]
 800f82e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f830:	4b3e      	ldr	r3, [pc, #248]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f836:	4a3d      	ldr	r2, [pc, #244]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f838:	f043 0301 	orr.w	r3, r3, #1
 800f83c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f840:	4b3a      	ldr	r3, [pc, #232]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f846:	f003 0301 	and.w	r3, r3, #1
 800f84a:	613b      	str	r3, [r7, #16]
 800f84c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f84e:	4b37      	ldr	r3, [pc, #220]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f854:	4a35      	ldr	r2, [pc, #212]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f856:	f043 0302 	orr.w	r3, r3, #2
 800f85a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f85e:	4b33      	ldr	r3, [pc, #204]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f864:	f003 0302 	and.w	r3, r3, #2
 800f868:	60fb      	str	r3, [r7, #12]
 800f86a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f86c:	4b2f      	ldr	r3, [pc, #188]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f86e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f872:	4a2e      	ldr	r2, [pc, #184]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f878:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f87c:	4b2b      	ldr	r3, [pc, #172]	; (800f92c <HAL_ETH_MspInit+0x198>)
 800f87e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f886:	60bb      	str	r3, [r7, #8]
 800f888:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800f88a:	2332      	movs	r3, #50	; 0x32
 800f88c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f88e:	2302      	movs	r3, #2
 800f890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f892:	2300      	movs	r3, #0
 800f894:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f896:	2300      	movs	r3, #0
 800f898:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f89a:	230b      	movs	r3, #11
 800f89c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f89e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	4822      	ldr	r0, [pc, #136]	; (800f930 <HAL_ETH_MspInit+0x19c>)
 800f8a6:	f001 f857 	bl	8010958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800f8aa:	2386      	movs	r3, #134	; 0x86
 800f8ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8ae:	2302      	movs	r3, #2
 800f8b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f8ba:	230b      	movs	r3, #11
 800f8bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f8be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	481b      	ldr	r0, [pc, #108]	; (800f934 <HAL_ETH_MspInit+0x1a0>)
 800f8c6:	f001 f847 	bl	8010958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800f8ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f8ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8d0:	2302      	movs	r3, #2
 800f8d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f8dc:	230b      	movs	r3, #11
 800f8de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800f8e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	4814      	ldr	r0, [pc, #80]	; (800f938 <HAL_ETH_MspInit+0x1a4>)
 800f8e8:	f001 f836 	bl	8010958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800f8ec:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f8f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f8f2:	2302      	movs	r3, #2
 800f8f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f8fa:	2300      	movs	r3, #0
 800f8fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f8fe:	230b      	movs	r3, #11
 800f900:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f902:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f906:	4619      	mov	r1, r3
 800f908:	480c      	ldr	r0, [pc, #48]	; (800f93c <HAL_ETH_MspInit+0x1a8>)
 800f90a:	f001 f825 	bl	8010958 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800f90e:	2200      	movs	r2, #0
 800f910:	2100      	movs	r1, #0
 800f912:	203d      	movs	r0, #61	; 0x3d
 800f914:	f000 fbc7 	bl	80100a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800f918:	203d      	movs	r0, #61	; 0x3d
 800f91a:	f000 fbde 	bl	80100da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800f91e:	bf00      	nop
 800f920:	3738      	adds	r7, #56	; 0x38
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}
 800f926:	bf00      	nop
 800f928:	40028000 	.word	0x40028000
 800f92c:	58024400 	.word	0x58024400
 800f930:	58020800 	.word	0x58020800
 800f934:	58020000 	.word	0x58020000
 800f938:	58020400 	.word	0x58020400
 800f93c:	58021800 	.word	0x58021800

0800f940 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b0b2      	sub	sp, #200	; 0xc8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f948:	f107 0310 	add.w	r3, r7, #16
 800f94c:	22b8      	movs	r2, #184	; 0xb8
 800f94e:	2100      	movs	r1, #0
 800f950:	4618      	mov	r0, r3
 800f952:	f005 fe80 	bl	8015656 <memset>
  if(hrng->Instance==RNG)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a14      	ldr	r2, [pc, #80]	; (800f9ac <HAL_RNG_MspInit+0x6c>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d121      	bne.n	800f9a4 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800f960:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f964:	f04f 0300 	mov.w	r3, #0
 800f968:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800f96c:	2300      	movs	r3, #0
 800f96e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f972:	f107 0310 	add.w	r3, r7, #16
 800f976:	4618      	mov	r0, r3
 800f978:	f002 f96a 	bl	8011c50 <HAL_RCCEx_PeriphCLKConfig>
 800f97c:	4603      	mov	r3, r0
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d001      	beq.n	800f986 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800f982:	f7f1 fcd7 	bl	8001334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800f986:	4b0a      	ldr	r3, [pc, #40]	; (800f9b0 <HAL_RNG_MspInit+0x70>)
 800f988:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f98c:	4a08      	ldr	r2, [pc, #32]	; (800f9b0 <HAL_RNG_MspInit+0x70>)
 800f98e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f992:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800f996:	4b06      	ldr	r3, [pc, #24]	; (800f9b0 <HAL_RNG_MspInit+0x70>)
 800f998:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9a0:	60fb      	str	r3, [r7, #12]
 800f9a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800f9a4:	bf00      	nop
 800f9a6:	37c8      	adds	r7, #200	; 0xc8
 800f9a8:	46bd      	mov	sp, r7
 800f9aa:	bd80      	pop	{r7, pc}
 800f9ac:	48021800 	.word	0x48021800
 800f9b0:	58024400 	.word	0x58024400

0800f9b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b0b8      	sub	sp, #224	; 0xe0
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f9bc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	601a      	str	r2, [r3, #0]
 800f9c4:	605a      	str	r2, [r3, #4]
 800f9c6:	609a      	str	r2, [r3, #8]
 800f9c8:	60da      	str	r2, [r3, #12]
 800f9ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800f9cc:	f107 0310 	add.w	r3, r7, #16
 800f9d0:	22b8      	movs	r2, #184	; 0xb8
 800f9d2:	2100      	movs	r1, #0
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f005 fe3e 	bl	8015656 <memset>
  if(huart->Instance==USART3)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4a27      	ldr	r2, [pc, #156]	; (800fa7c <HAL_UART_MspInit+0xc8>)
 800f9e0:	4293      	cmp	r3, r2
 800f9e2:	d146      	bne.n	800fa72 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800f9e4:	f04f 0202 	mov.w	r2, #2
 800f9e8:	f04f 0300 	mov.w	r3, #0
 800f9ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800f9f6:	f107 0310 	add.w	r3, r7, #16
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f002 f928 	bl	8011c50 <HAL_RCCEx_PeriphCLKConfig>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800fa06:	f7f1 fc95 	bl	8001334 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800fa0a:	4b1d      	ldr	r3, [pc, #116]	; (800fa80 <HAL_UART_MspInit+0xcc>)
 800fa0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fa10:	4a1b      	ldr	r2, [pc, #108]	; (800fa80 <HAL_UART_MspInit+0xcc>)
 800fa12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fa16:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800fa1a:	4b19      	ldr	r3, [pc, #100]	; (800fa80 <HAL_UART_MspInit+0xcc>)
 800fa1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800fa20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800fa24:	60fb      	str	r3, [r7, #12]
 800fa26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800fa28:	4b15      	ldr	r3, [pc, #84]	; (800fa80 <HAL_UART_MspInit+0xcc>)
 800fa2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa2e:	4a14      	ldr	r2, [pc, #80]	; (800fa80 <HAL_UART_MspInit+0xcc>)
 800fa30:	f043 0308 	orr.w	r3, r3, #8
 800fa34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fa38:	4b11      	ldr	r3, [pc, #68]	; (800fa80 <HAL_UART_MspInit+0xcc>)
 800fa3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fa3e:	f003 0308 	and.w	r3, r3, #8
 800fa42:	60bb      	str	r3, [r7, #8]
 800fa44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800fa46:	f44f 7340 	mov.w	r3, #768	; 0x300
 800fa4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa4e:	2302      	movs	r3, #2
 800fa50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa54:	2300      	movs	r3, #0
 800fa56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800fa60:	2307      	movs	r3, #7
 800fa62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fa66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	4805      	ldr	r0, [pc, #20]	; (800fa84 <HAL_UART_MspInit+0xd0>)
 800fa6e:	f000 ff73 	bl	8010958 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800fa72:	bf00      	nop
 800fa74:	37e0      	adds	r7, #224	; 0xe0
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	40004800 	.word	0x40004800
 800fa80:	58024400 	.word	0x58024400
 800fa84:	58020c00 	.word	0x58020c00

0800fa88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800fa8c:	e7fe      	b.n	800fa8c <NMI_Handler+0x4>

0800fa8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800fa8e:	b480      	push	{r7}
 800fa90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800fa92:	e7fe      	b.n	800fa92 <HardFault_Handler+0x4>

0800fa94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800fa94:	b480      	push	{r7}
 800fa96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800fa98:	e7fe      	b.n	800fa98 <MemManage_Handler+0x4>

0800fa9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800fa9a:	b480      	push	{r7}
 800fa9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800fa9e:	e7fe      	b.n	800fa9e <BusFault_Handler+0x4>

0800faa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800faa0:	b480      	push	{r7}
 800faa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800faa4:	e7fe      	b.n	800faa4 <UsageFault_Handler+0x4>

0800faa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800faa6:	b480      	push	{r7}
 800faa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800faaa:	bf00      	nop
 800faac:	46bd      	mov	sp, r7
 800faae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab2:	4770      	bx	lr

0800fab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800fab4:	b480      	push	{r7}
 800fab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800fab8:	bf00      	nop
 800faba:	46bd      	mov	sp, r7
 800fabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac0:	4770      	bx	lr

0800fac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800fac2:	b480      	push	{r7}
 800fac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800fac6:	bf00      	nop
 800fac8:	46bd      	mov	sp, r7
 800faca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800face:	4770      	bx	lr

0800fad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800fad4:	f000 f9d8 	bl	800fe88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800fad8:	bf00      	nop
 800fada:	bd80      	pop	{r7, pc}

0800fadc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800fadc:	b480      	push	{r7}
 800fade:	af00      	add	r7, sp, #0
  return 1;
 800fae0:	2301      	movs	r3, #1
}
 800fae2:	4618      	mov	r0, r3
 800fae4:	46bd      	mov	sp, r7
 800fae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faea:	4770      	bx	lr

0800faec <_kill>:

int _kill(int pid, int sig)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b082      	sub	sp, #8
 800faf0:	af00      	add	r7, sp, #0
 800faf2:	6078      	str	r0, [r7, #4]
 800faf4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800faf6:	f005 fe61 	bl	80157bc <__errno>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2216      	movs	r2, #22
 800fafe:	601a      	str	r2, [r3, #0]
  return -1;
 800fb00:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3708      	adds	r7, #8
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <_exit>:

void _exit (int status)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800fb14:	f04f 31ff 	mov.w	r1, #4294967295
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f7ff ffe7 	bl	800faec <_kill>
  while (1) {}    /* Make sure we hang here */
 800fb1e:	e7fe      	b.n	800fb1e <_exit+0x12>

0800fb20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b086      	sub	sp, #24
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fb2c:	2300      	movs	r3, #0
 800fb2e:	617b      	str	r3, [r7, #20]
 800fb30:	e00a      	b.n	800fb48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800fb32:	f3af 8000 	nop.w
 800fb36:	4601      	mov	r1, r0
 800fb38:	68bb      	ldr	r3, [r7, #8]
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	60ba      	str	r2, [r7, #8]
 800fb3e:	b2ca      	uxtb	r2, r1
 800fb40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800fb42:	697b      	ldr	r3, [r7, #20]
 800fb44:	3301      	adds	r3, #1
 800fb46:	617b      	str	r3, [r7, #20]
 800fb48:	697a      	ldr	r2, [r7, #20]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	dbf0      	blt.n	800fb32 <_read+0x12>
  }

  return len;
 800fb50:	687b      	ldr	r3, [r7, #4]
}
 800fb52:	4618      	mov	r0, r3
 800fb54:	3718      	adds	r7, #24
 800fb56:	46bd      	mov	sp, r7
 800fb58:	bd80      	pop	{r7, pc}
	...

0800fb5c <_write>:
  if (file == 1) uart_write_buf(USART1, ptr, len);
  return len;
}
#else
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800fb5c:	b580      	push	{r7, lr}
 800fb5e:	b084      	sub	sp, #16
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	60f8      	str	r0, [r7, #12]
 800fb64:	60b9      	str	r1, [r7, #8]
 800fb66:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	2b01      	cmp	r3, #1
 800fb6c:	d107      	bne.n	800fb7e <_write+0x22>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fb76:	68b9      	ldr	r1, [r7, #8]
 800fb78:	4803      	ldr	r0, [pc, #12]	; (800fb88 <_write+0x2c>)
 800fb7a:	f004 f829 	bl	8013bd0 <HAL_UART_Transmit>
  return len;
 800fb7e:	687b      	ldr	r3, [r7, #4]
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	240004e8 	.word	0x240004e8

0800fb8c <_close>:
#endif

int _close(int file)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800fb94:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb98:	4618      	mov	r0, r3
 800fb9a:	370c      	adds	r7, #12
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fba2:	4770      	bx	lr

0800fba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fbb4:	605a      	str	r2, [r3, #4]
  return 0;
 800fbb6:	2300      	movs	r3, #0
}
 800fbb8:	4618      	mov	r0, r3
 800fbba:	370c      	adds	r7, #12
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <_isatty>:

int _isatty(int file)
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800fbcc:	2301      	movs	r3, #1
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	370c      	adds	r7, #12
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd8:	4770      	bx	lr

0800fbda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800fbda:	b480      	push	{r7}
 800fbdc:	b085      	sub	sp, #20
 800fbde:	af00      	add	r7, sp, #0
 800fbe0:	60f8      	str	r0, [r7, #12]
 800fbe2:	60b9      	str	r1, [r7, #8]
 800fbe4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800fbe6:	2300      	movs	r3, #0
}
 800fbe8:	4618      	mov	r0, r3
 800fbea:	3714      	adds	r7, #20
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b086      	sub	sp, #24
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800fbfc:	4a14      	ldr	r2, [pc, #80]	; (800fc50 <_sbrk+0x5c>)
 800fbfe:	4b15      	ldr	r3, [pc, #84]	; (800fc54 <_sbrk+0x60>)
 800fc00:	1ad3      	subs	r3, r2, r3
 800fc02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800fc08:	4b13      	ldr	r3, [pc, #76]	; (800fc58 <_sbrk+0x64>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d102      	bne.n	800fc16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800fc10:	4b11      	ldr	r3, [pc, #68]	; (800fc58 <_sbrk+0x64>)
 800fc12:	4a12      	ldr	r2, [pc, #72]	; (800fc5c <_sbrk+0x68>)
 800fc14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800fc16:	4b10      	ldr	r3, [pc, #64]	; (800fc58 <_sbrk+0x64>)
 800fc18:	681a      	ldr	r2, [r3, #0]
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	4413      	add	r3, r2
 800fc1e:	693a      	ldr	r2, [r7, #16]
 800fc20:	429a      	cmp	r2, r3
 800fc22:	d207      	bcs.n	800fc34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800fc24:	f005 fdca 	bl	80157bc <__errno>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	220c      	movs	r2, #12
 800fc2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800fc2e:	f04f 33ff 	mov.w	r3, #4294967295
 800fc32:	e009      	b.n	800fc48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800fc34:	4b08      	ldr	r3, [pc, #32]	; (800fc58 <_sbrk+0x64>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800fc3a:	4b07      	ldr	r3, [pc, #28]	; (800fc58 <_sbrk+0x64>)
 800fc3c:	681a      	ldr	r2, [r3, #0]
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	4413      	add	r3, r2
 800fc42:	4a05      	ldr	r2, [pc, #20]	; (800fc58 <_sbrk+0x64>)
 800fc44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800fc46:	68fb      	ldr	r3, [r7, #12]
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3718      	adds	r7, #24
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	24050000 	.word	0x24050000
 800fc54:	00000400 	.word	0x00000400
 800fc58:	24003640 	.word	0x24003640
 800fc5c:	24003798 	.word	0x24003798

0800fc60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800fc60:	b480      	push	{r7}
 800fc62:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800fc64:	4b32      	ldr	r3, [pc, #200]	; (800fd30 <SystemInit+0xd0>)
 800fc66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fc6a:	4a31      	ldr	r2, [pc, #196]	; (800fd30 <SystemInit+0xd0>)
 800fc6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fc70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800fc74:	4b2f      	ldr	r3, [pc, #188]	; (800fd34 <SystemInit+0xd4>)
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	f003 030f 	and.w	r3, r3, #15
 800fc7c:	2b06      	cmp	r3, #6
 800fc7e:	d807      	bhi.n	800fc90 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800fc80:	4b2c      	ldr	r3, [pc, #176]	; (800fd34 <SystemInit+0xd4>)
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	f023 030f 	bic.w	r3, r3, #15
 800fc88:	4a2a      	ldr	r2, [pc, #168]	; (800fd34 <SystemInit+0xd4>)
 800fc8a:	f043 0307 	orr.w	r3, r3, #7
 800fc8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800fc90:	4b29      	ldr	r3, [pc, #164]	; (800fd38 <SystemInit+0xd8>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	4a28      	ldr	r2, [pc, #160]	; (800fd38 <SystemInit+0xd8>)
 800fc96:	f043 0301 	orr.w	r3, r3, #1
 800fc9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800fc9c:	4b26      	ldr	r3, [pc, #152]	; (800fd38 <SystemInit+0xd8>)
 800fc9e:	2200      	movs	r2, #0
 800fca0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800fca2:	4b25      	ldr	r3, [pc, #148]	; (800fd38 <SystemInit+0xd8>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	4924      	ldr	r1, [pc, #144]	; (800fd38 <SystemInit+0xd8>)
 800fca8:	4b24      	ldr	r3, [pc, #144]	; (800fd3c <SystemInit+0xdc>)
 800fcaa:	4013      	ands	r3, r2
 800fcac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800fcae:	4b21      	ldr	r3, [pc, #132]	; (800fd34 <SystemInit+0xd4>)
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f003 0308 	and.w	r3, r3, #8
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d007      	beq.n	800fcca <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800fcba:	4b1e      	ldr	r3, [pc, #120]	; (800fd34 <SystemInit+0xd4>)
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	f023 030f 	bic.w	r3, r3, #15
 800fcc2:	4a1c      	ldr	r2, [pc, #112]	; (800fd34 <SystemInit+0xd4>)
 800fcc4:	f043 0307 	orr.w	r3, r3, #7
 800fcc8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800fcca:	4b1b      	ldr	r3, [pc, #108]	; (800fd38 <SystemInit+0xd8>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800fcd0:	4b19      	ldr	r3, [pc, #100]	; (800fd38 <SystemInit+0xd8>)
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800fcd6:	4b18      	ldr	r3, [pc, #96]	; (800fd38 <SystemInit+0xd8>)
 800fcd8:	2200      	movs	r2, #0
 800fcda:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800fcdc:	4b16      	ldr	r3, [pc, #88]	; (800fd38 <SystemInit+0xd8>)
 800fcde:	4a18      	ldr	r2, [pc, #96]	; (800fd40 <SystemInit+0xe0>)
 800fce0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800fce2:	4b15      	ldr	r3, [pc, #84]	; (800fd38 <SystemInit+0xd8>)
 800fce4:	4a17      	ldr	r2, [pc, #92]	; (800fd44 <SystemInit+0xe4>)
 800fce6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800fce8:	4b13      	ldr	r3, [pc, #76]	; (800fd38 <SystemInit+0xd8>)
 800fcea:	4a17      	ldr	r2, [pc, #92]	; (800fd48 <SystemInit+0xe8>)
 800fcec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800fcee:	4b12      	ldr	r3, [pc, #72]	; (800fd38 <SystemInit+0xd8>)
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800fcf4:	4b10      	ldr	r3, [pc, #64]	; (800fd38 <SystemInit+0xd8>)
 800fcf6:	4a14      	ldr	r2, [pc, #80]	; (800fd48 <SystemInit+0xe8>)
 800fcf8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800fcfa:	4b0f      	ldr	r3, [pc, #60]	; (800fd38 <SystemInit+0xd8>)
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800fd00:	4b0d      	ldr	r3, [pc, #52]	; (800fd38 <SystemInit+0xd8>)
 800fd02:	4a11      	ldr	r2, [pc, #68]	; (800fd48 <SystemInit+0xe8>)
 800fd04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800fd06:	4b0c      	ldr	r3, [pc, #48]	; (800fd38 <SystemInit+0xd8>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800fd0c:	4b0a      	ldr	r3, [pc, #40]	; (800fd38 <SystemInit+0xd8>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	4a09      	ldr	r2, [pc, #36]	; (800fd38 <SystemInit+0xd8>)
 800fd12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800fd18:	4b07      	ldr	r3, [pc, #28]	; (800fd38 <SystemInit+0xd8>)
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800fd1e:	4b0b      	ldr	r3, [pc, #44]	; (800fd4c <SystemInit+0xec>)
 800fd20:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800fd24:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800fd26:	bf00      	nop
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr
 800fd30:	e000ed00 	.word	0xe000ed00
 800fd34:	52002000 	.word	0x52002000
 800fd38:	58024400 	.word	0x58024400
 800fd3c:	eaf6ed7f 	.word	0xeaf6ed7f
 800fd40:	02020200 	.word	0x02020200
 800fd44:	01ff0000 	.word	0x01ff0000
 800fd48:	01010280 	.word	0x01010280
 800fd4c:	52004000 	.word	0x52004000

0800fd50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800fd50:	f8df d034 	ldr.w	sp, [pc, #52]	; 800fd88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800fd54:	f7ff ff84 	bl	800fc60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800fd58:	480c      	ldr	r0, [pc, #48]	; (800fd8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800fd5a:	490d      	ldr	r1, [pc, #52]	; (800fd90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800fd5c:	4a0d      	ldr	r2, [pc, #52]	; (800fd94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800fd5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800fd60:	e002      	b.n	800fd68 <LoopCopyDataInit>

0800fd62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800fd62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800fd64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800fd66:	3304      	adds	r3, #4

0800fd68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800fd68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800fd6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800fd6c:	d3f9      	bcc.n	800fd62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800fd6e:	4a0a      	ldr	r2, [pc, #40]	; (800fd98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800fd70:	4c0a      	ldr	r4, [pc, #40]	; (800fd9c <LoopFillZerobss+0x22>)
  movs r3, #0
 800fd72:	2300      	movs	r3, #0
  b LoopFillZerobss
 800fd74:	e001      	b.n	800fd7a <LoopFillZerobss>

0800fd76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800fd76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800fd78:	3204      	adds	r2, #4

0800fd7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800fd7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800fd7c:	d3fb      	bcc.n	800fd76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800fd7e:	f005 fd23 	bl	80157c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800fd82:	f7f0 ffd5 	bl	8000d30 <main>
  bx  lr
 800fd86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800fd88:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800fd8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800fd90:	24000310 	.word	0x24000310
  ldr r2, =_sidata
 800fd94:	08019358 	.word	0x08019358
  ldr r2, =_sbss
 800fd98:	240003d0 	.word	0x240003d0
  ldr r4, =_ebss
 800fd9c:	24003794 	.word	0x24003794

0800fda0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800fda0:	e7fe      	b.n	800fda0 <ADC3_IRQHandler>
	...

0800fda4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b082      	sub	sp, #8
 800fda8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800fdaa:	2003      	movs	r0, #3
 800fdac:	f000 f970 	bl	8010090 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fdb0:	f001 fd78 	bl	80118a4 <HAL_RCC_GetSysClockFreq>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	4b15      	ldr	r3, [pc, #84]	; (800fe0c <HAL_Init+0x68>)
 800fdb8:	699b      	ldr	r3, [r3, #24]
 800fdba:	0a1b      	lsrs	r3, r3, #8
 800fdbc:	f003 030f 	and.w	r3, r3, #15
 800fdc0:	4913      	ldr	r1, [pc, #76]	; (800fe10 <HAL_Init+0x6c>)
 800fdc2:	5ccb      	ldrb	r3, [r1, r3]
 800fdc4:	f003 031f 	and.w	r3, r3, #31
 800fdc8:	fa22 f303 	lsr.w	r3, r2, r3
 800fdcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fdce:	4b0f      	ldr	r3, [pc, #60]	; (800fe0c <HAL_Init+0x68>)
 800fdd0:	699b      	ldr	r3, [r3, #24]
 800fdd2:	f003 030f 	and.w	r3, r3, #15
 800fdd6:	4a0e      	ldr	r2, [pc, #56]	; (800fe10 <HAL_Init+0x6c>)
 800fdd8:	5cd3      	ldrb	r3, [r2, r3]
 800fdda:	f003 031f 	and.w	r3, r3, #31
 800fdde:	687a      	ldr	r2, [r7, #4]
 800fde0:	fa22 f303 	lsr.w	r3, r2, r3
 800fde4:	4a0b      	ldr	r2, [pc, #44]	; (800fe14 <HAL_Init+0x70>)
 800fde6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fde8:	4a0b      	ldr	r2, [pc, #44]	; (800fe18 <HAL_Init+0x74>)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800fdee:	2000      	movs	r0, #0
 800fdf0:	f000 f814 	bl	800fe1c <HAL_InitTick>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	d001      	beq.n	800fdfe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800fdfa:	2301      	movs	r3, #1
 800fdfc:	e002      	b.n	800fe04 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800fdfe:	f7ff fcaf 	bl	800f760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800fe02:	2300      	movs	r3, #0
}
 800fe04:	4618      	mov	r0, r3
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	58024400 	.word	0x58024400
 800fe10:	08019130 	.word	0x08019130
 800fe14:	240002a8 	.word	0x240002a8
 800fe18:	240002a4 	.word	0x240002a4

0800fe1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800fe1c:	b580      	push	{r7, lr}
 800fe1e:	b082      	sub	sp, #8
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800fe24:	4b15      	ldr	r3, [pc, #84]	; (800fe7c <HAL_InitTick+0x60>)
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	d101      	bne.n	800fe30 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	e021      	b.n	800fe74 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800fe30:	4b13      	ldr	r3, [pc, #76]	; (800fe80 <HAL_InitTick+0x64>)
 800fe32:	681a      	ldr	r2, [r3, #0]
 800fe34:	4b11      	ldr	r3, [pc, #68]	; (800fe7c <HAL_InitTick+0x60>)
 800fe36:	781b      	ldrb	r3, [r3, #0]
 800fe38:	4619      	mov	r1, r3
 800fe3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fe3e:	fbb3 f3f1 	udiv	r3, r3, r1
 800fe42:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe46:	4618      	mov	r0, r3
 800fe48:	f000 f955 	bl	80100f6 <HAL_SYSTICK_Config>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d001      	beq.n	800fe56 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800fe52:	2301      	movs	r3, #1
 800fe54:	e00e      	b.n	800fe74 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2b0f      	cmp	r3, #15
 800fe5a:	d80a      	bhi.n	800fe72 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	6879      	ldr	r1, [r7, #4]
 800fe60:	f04f 30ff 	mov.w	r0, #4294967295
 800fe64:	f000 f91f 	bl	80100a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800fe68:	4a06      	ldr	r2, [pc, #24]	; (800fe84 <HAL_InitTick+0x68>)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800fe6e:	2300      	movs	r3, #0
 800fe70:	e000      	b.n	800fe74 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800fe72:	2301      	movs	r3, #1
}
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}
 800fe7c:	240002b0 	.word	0x240002b0
 800fe80:	240002a4 	.word	0x240002a4
 800fe84:	240002ac 	.word	0x240002ac

0800fe88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800fe8c:	4b06      	ldr	r3, [pc, #24]	; (800fea8 <HAL_IncTick+0x20>)
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	461a      	mov	r2, r3
 800fe92:	4b06      	ldr	r3, [pc, #24]	; (800feac <HAL_IncTick+0x24>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	4413      	add	r3, r2
 800fe98:	4a04      	ldr	r2, [pc, #16]	; (800feac <HAL_IncTick+0x24>)
 800fe9a:	6013      	str	r3, [r2, #0]
}
 800fe9c:	bf00      	nop
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea4:	4770      	bx	lr
 800fea6:	bf00      	nop
 800fea8:	240002b0 	.word	0x240002b0
 800feac:	24003644 	.word	0x24003644

0800feb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800feb0:	b480      	push	{r7}
 800feb2:	af00      	add	r7, sp, #0
  return uwTick;
 800feb4:	4b03      	ldr	r3, [pc, #12]	; (800fec4 <HAL_GetTick+0x14>)
 800feb6:	681b      	ldr	r3, [r3, #0]
}
 800feb8:	4618      	mov	r0, r3
 800feba:	46bd      	mov	sp, r7
 800febc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec0:	4770      	bx	lr
 800fec2:	bf00      	nop
 800fec4:	24003644 	.word	0x24003644

0800fec8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800fec8:	b480      	push	{r7}
 800feca:	b083      	sub	sp, #12
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800fed0:	4b06      	ldr	r3, [pc, #24]	; (800feec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800fed2:	685b      	ldr	r3, [r3, #4]
 800fed4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800fed8:	4904      	ldr	r1, [pc, #16]	; (800feec <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4313      	orrs	r3, r2
 800fede:	604b      	str	r3, [r1, #4]
}
 800fee0:	bf00      	nop
 800fee2:	370c      	adds	r7, #12
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	58000400 	.word	0x58000400

0800fef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b085      	sub	sp, #20
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f003 0307 	and.w	r3, r3, #7
 800fefe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ff00:	4b0b      	ldr	r3, [pc, #44]	; (800ff30 <__NVIC_SetPriorityGrouping+0x40>)
 800ff02:	68db      	ldr	r3, [r3, #12]
 800ff04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ff06:	68ba      	ldr	r2, [r7, #8]
 800ff08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ff0c:	4013      	ands	r3, r2
 800ff0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ff14:	68bb      	ldr	r3, [r7, #8]
 800ff16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ff18:	4b06      	ldr	r3, [pc, #24]	; (800ff34 <__NVIC_SetPriorityGrouping+0x44>)
 800ff1a:	4313      	orrs	r3, r2
 800ff1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ff1e:	4a04      	ldr	r2, [pc, #16]	; (800ff30 <__NVIC_SetPriorityGrouping+0x40>)
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	60d3      	str	r3, [r2, #12]
}
 800ff24:	bf00      	nop
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	e000ed00 	.word	0xe000ed00
 800ff34:	05fa0000 	.word	0x05fa0000

0800ff38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ff38:	b480      	push	{r7}
 800ff3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ff3c:	4b04      	ldr	r3, [pc, #16]	; (800ff50 <__NVIC_GetPriorityGrouping+0x18>)
 800ff3e:	68db      	ldr	r3, [r3, #12]
 800ff40:	0a1b      	lsrs	r3, r3, #8
 800ff42:	f003 0307 	and.w	r3, r3, #7
}
 800ff46:	4618      	mov	r0, r3
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4e:	4770      	bx	lr
 800ff50:	e000ed00 	.word	0xe000ed00

0800ff54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b083      	sub	sp, #12
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ff5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	db0b      	blt.n	800ff7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ff66:	88fb      	ldrh	r3, [r7, #6]
 800ff68:	f003 021f 	and.w	r2, r3, #31
 800ff6c:	4907      	ldr	r1, [pc, #28]	; (800ff8c <__NVIC_EnableIRQ+0x38>)
 800ff6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ff72:	095b      	lsrs	r3, r3, #5
 800ff74:	2001      	movs	r0, #1
 800ff76:	fa00 f202 	lsl.w	r2, r0, r2
 800ff7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ff7e:	bf00      	nop
 800ff80:	370c      	adds	r7, #12
 800ff82:	46bd      	mov	sp, r7
 800ff84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff88:	4770      	bx	lr
 800ff8a:	bf00      	nop
 800ff8c:	e000e100 	.word	0xe000e100

0800ff90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ff90:	b480      	push	{r7}
 800ff92:	b083      	sub	sp, #12
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	4603      	mov	r3, r0
 800ff98:	6039      	str	r1, [r7, #0]
 800ff9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ff9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	db0a      	blt.n	800ffba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	b2da      	uxtb	r2, r3
 800ffa8:	490c      	ldr	r1, [pc, #48]	; (800ffdc <__NVIC_SetPriority+0x4c>)
 800ffaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ffae:	0112      	lsls	r2, r2, #4
 800ffb0:	b2d2      	uxtb	r2, r2
 800ffb2:	440b      	add	r3, r1
 800ffb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ffb8:	e00a      	b.n	800ffd0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	4908      	ldr	r1, [pc, #32]	; (800ffe0 <__NVIC_SetPriority+0x50>)
 800ffc0:	88fb      	ldrh	r3, [r7, #6]
 800ffc2:	f003 030f 	and.w	r3, r3, #15
 800ffc6:	3b04      	subs	r3, #4
 800ffc8:	0112      	lsls	r2, r2, #4
 800ffca:	b2d2      	uxtb	r2, r2
 800ffcc:	440b      	add	r3, r1
 800ffce:	761a      	strb	r2, [r3, #24]
}
 800ffd0:	bf00      	nop
 800ffd2:	370c      	adds	r7, #12
 800ffd4:	46bd      	mov	sp, r7
 800ffd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffda:	4770      	bx	lr
 800ffdc:	e000e100 	.word	0xe000e100
 800ffe0:	e000ed00 	.word	0xe000ed00

0800ffe4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b089      	sub	sp, #36	; 0x24
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f003 0307 	and.w	r3, r3, #7
 800fff6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800fff8:	69fb      	ldr	r3, [r7, #28]
 800fffa:	f1c3 0307 	rsb	r3, r3, #7
 800fffe:	2b04      	cmp	r3, #4
 8010000:	bf28      	it	cs
 8010002:	2304      	movcs	r3, #4
 8010004:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	3304      	adds	r3, #4
 801000a:	2b06      	cmp	r3, #6
 801000c:	d902      	bls.n	8010014 <NVIC_EncodePriority+0x30>
 801000e:	69fb      	ldr	r3, [r7, #28]
 8010010:	3b03      	subs	r3, #3
 8010012:	e000      	b.n	8010016 <NVIC_EncodePriority+0x32>
 8010014:	2300      	movs	r3, #0
 8010016:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8010018:	f04f 32ff 	mov.w	r2, #4294967295
 801001c:	69bb      	ldr	r3, [r7, #24]
 801001e:	fa02 f303 	lsl.w	r3, r2, r3
 8010022:	43da      	mvns	r2, r3
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	401a      	ands	r2, r3
 8010028:	697b      	ldr	r3, [r7, #20]
 801002a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801002c:	f04f 31ff 	mov.w	r1, #4294967295
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	fa01 f303 	lsl.w	r3, r1, r3
 8010036:	43d9      	mvns	r1, r3
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801003c:	4313      	orrs	r3, r2
         );
}
 801003e:	4618      	mov	r0, r3
 8010040:	3724      	adds	r7, #36	; 0x24
 8010042:	46bd      	mov	sp, r7
 8010044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010048:	4770      	bx	lr
	...

0801004c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	3b01      	subs	r3, #1
 8010058:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801005c:	d301      	bcc.n	8010062 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801005e:	2301      	movs	r3, #1
 8010060:	e00f      	b.n	8010082 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8010062:	4a0a      	ldr	r2, [pc, #40]	; (801008c <SysTick_Config+0x40>)
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	3b01      	subs	r3, #1
 8010068:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801006a:	210f      	movs	r1, #15
 801006c:	f04f 30ff 	mov.w	r0, #4294967295
 8010070:	f7ff ff8e 	bl	800ff90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8010074:	4b05      	ldr	r3, [pc, #20]	; (801008c <SysTick_Config+0x40>)
 8010076:	2200      	movs	r2, #0
 8010078:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801007a:	4b04      	ldr	r3, [pc, #16]	; (801008c <SysTick_Config+0x40>)
 801007c:	2207      	movs	r2, #7
 801007e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8010080:	2300      	movs	r3, #0
}
 8010082:	4618      	mov	r0, r3
 8010084:	3708      	adds	r7, #8
 8010086:	46bd      	mov	sp, r7
 8010088:	bd80      	pop	{r7, pc}
 801008a:	bf00      	nop
 801008c:	e000e010 	.word	0xe000e010

08010090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	b082      	sub	sp, #8
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f7ff ff29 	bl	800fef0 <__NVIC_SetPriorityGrouping>
}
 801009e:	bf00      	nop
 80100a0:	3708      	adds	r7, #8
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b086      	sub	sp, #24
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	4603      	mov	r3, r0
 80100ae:	60b9      	str	r1, [r7, #8]
 80100b0:	607a      	str	r2, [r7, #4]
 80100b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80100b4:	f7ff ff40 	bl	800ff38 <__NVIC_GetPriorityGrouping>
 80100b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80100ba:	687a      	ldr	r2, [r7, #4]
 80100bc:	68b9      	ldr	r1, [r7, #8]
 80100be:	6978      	ldr	r0, [r7, #20]
 80100c0:	f7ff ff90 	bl	800ffe4 <NVIC_EncodePriority>
 80100c4:	4602      	mov	r2, r0
 80100c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80100ca:	4611      	mov	r1, r2
 80100cc:	4618      	mov	r0, r3
 80100ce:	f7ff ff5f 	bl	800ff90 <__NVIC_SetPriority>
}
 80100d2:	bf00      	nop
 80100d4:	3718      	adds	r7, #24
 80100d6:	46bd      	mov	sp, r7
 80100d8:	bd80      	pop	{r7, pc}

080100da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b082      	sub	sp, #8
 80100de:	af00      	add	r7, sp, #0
 80100e0:	4603      	mov	r3, r0
 80100e2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80100e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7ff ff33 	bl	800ff54 <__NVIC_EnableIRQ>
}
 80100ee:	bf00      	nop
 80100f0:	3708      	adds	r7, #8
 80100f2:	46bd      	mov	sp, r7
 80100f4:	bd80      	pop	{r7, pc}

080100f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80100f6:	b580      	push	{r7, lr}
 80100f8:	b082      	sub	sp, #8
 80100fa:	af00      	add	r7, sp, #0
 80100fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f7ff ffa4 	bl	801004c <SysTick_Config>
 8010104:	4603      	mov	r3, r0
}
 8010106:	4618      	mov	r0, r3
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
	...

08010110 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8010110:	b580      	push	{r7, lr}
 8010112:	b084      	sub	sp, #16
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d101      	bne.n	8010122 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801011e:	2301      	movs	r3, #1
 8010120:	e0cf      	b.n	80102c2 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010128:	2b00      	cmp	r3, #0
 801012a:	d106      	bne.n	801013a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	2223      	movs	r2, #35	; 0x23
 8010130:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7ff fb2d 	bl	800f794 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801013a:	4b64      	ldr	r3, [pc, #400]	; (80102cc <HAL_ETH_Init+0x1bc>)
 801013c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010140:	4a62      	ldr	r2, [pc, #392]	; (80102cc <HAL_ETH_Init+0x1bc>)
 8010142:	f043 0302 	orr.w	r3, r3, #2
 8010146:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801014a:	4b60      	ldr	r3, [pc, #384]	; (80102cc <HAL_ETH_Init+0x1bc>)
 801014c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010150:	f003 0302 	and.w	r3, r3, #2
 8010154:	60bb      	str	r3, [r7, #8]
 8010156:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	7a1b      	ldrb	r3, [r3, #8]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d103      	bne.n	8010168 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8010160:	2000      	movs	r0, #0
 8010162:	f7ff feb1 	bl	800fec8 <HAL_SYSCFG_ETHInterfaceSelect>
 8010166:	e003      	b.n	8010170 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8010168:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 801016c:	f7ff feac 	bl	800fec8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8010170:	4b57      	ldr	r3, [pc, #348]	; (80102d0 <HAL_ETH_Init+0x1c0>)
 8010172:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	6812      	ldr	r2, [r2, #0]
 8010182:	f043 0301 	orr.w	r3, r3, #1
 8010186:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801018a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801018c:	f7ff fe90 	bl	800feb0 <HAL_GetTick>
 8010190:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8010192:	e011      	b.n	80101b8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8010194:	f7ff fe8c 	bl	800feb0 <HAL_GetTick>
 8010198:	4602      	mov	r2, r0
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	1ad3      	subs	r3, r2, r3
 801019e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80101a2:	d909      	bls.n	80101b8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2204      	movs	r2, #4
 80101a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	22e0      	movs	r2, #224	; 0xe0
 80101b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80101b4:	2301      	movs	r3, #1
 80101b6:	e084      	b.n	80102c2 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f003 0301 	and.w	r3, r3, #1
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d1e4      	bne.n	8010194 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f000 f886 	bl	80102dc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80101d0:	f001 fce2 	bl	8011b98 <HAL_RCC_GetHCLKFreq>
 80101d4:	4603      	mov	r3, r0
 80101d6:	4a3f      	ldr	r2, [pc, #252]	; (80102d4 <HAL_ETH_Init+0x1c4>)
 80101d8:	fba2 2303 	umull	r2, r3, r2, r3
 80101dc:	0c9a      	lsrs	r2, r3, #18
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	3a01      	subs	r2, #1
 80101e4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80101e8:	6878      	ldr	r0, [r7, #4]
 80101ea:	f000 fa71 	bl	80106d0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80101f6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80101fa:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80101fe:	687a      	ldr	r2, [r7, #4]
 8010200:	6812      	ldr	r2, [r2, #0]
 8010202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010206:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801020a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	695b      	ldr	r3, [r3, #20]
 8010212:	f003 0303 	and.w	r3, r3, #3
 8010216:	2b00      	cmp	r3, #0
 8010218:	d009      	beq.n	801022e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2201      	movs	r2, #1
 801021e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	22e0      	movs	r2, #224	; 0xe0
 8010226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 801022a:	2301      	movs	r3, #1
 801022c:	e049      	b.n	80102c2 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010236:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 801023a:	4b27      	ldr	r3, [pc, #156]	; (80102d8 <HAL_ETH_Init+0x1c8>)
 801023c:	4013      	ands	r3, r2
 801023e:	687a      	ldr	r2, [r7, #4]
 8010240:	6952      	ldr	r2, [r2, #20]
 8010242:	0051      	lsls	r1, r2, #1
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	6812      	ldr	r2, [r2, #0]
 8010248:	430b      	orrs	r3, r1
 801024a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801024e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fad9 	bl	801080a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 fb1f 	bl	801089c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	685b      	ldr	r3, [r3, #4]
 8010262:	3305      	adds	r3, #5
 8010264:	781b      	ldrb	r3, [r3, #0]
 8010266:	021a      	lsls	r2, r3, #8
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	685b      	ldr	r3, [r3, #4]
 801026c:	3304      	adds	r3, #4
 801026e:	781b      	ldrb	r3, [r3, #0]
 8010270:	4619      	mov	r1, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	430a      	orrs	r2, r1
 8010278:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	685b      	ldr	r3, [r3, #4]
 8010280:	3303      	adds	r3, #3
 8010282:	781b      	ldrb	r3, [r3, #0]
 8010284:	061a      	lsls	r2, r3, #24
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	685b      	ldr	r3, [r3, #4]
 801028a:	3302      	adds	r3, #2
 801028c:	781b      	ldrb	r3, [r3, #0]
 801028e:	041b      	lsls	r3, r3, #16
 8010290:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	3301      	adds	r3, #1
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 801029c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	685b      	ldr	r3, [r3, #4]
 80102a2:	781b      	ldrb	r3, [r3, #0]
 80102a4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80102aa:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80102ac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	2200      	movs	r2, #0
 80102b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2210      	movs	r2, #16
 80102bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80102c0:	2300      	movs	r3, #0
}
 80102c2:	4618      	mov	r0, r3
 80102c4:	3710      	adds	r7, #16
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	58024400 	.word	0x58024400
 80102d0:	58000400 	.word	0x58000400
 80102d4:	431bde83 	.word	0x431bde83
 80102d8:	ffff8001 	.word	0xffff8001

080102dc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80102dc:	b580      	push	{r7, lr}
 80102de:	b084      	sub	sp, #16
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80102ec:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80102f4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80102f6:	f001 fc4f 	bl	8011b98 <HAL_RCC_GetHCLKFreq>
 80102fa:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	4a1e      	ldr	r2, [pc, #120]	; (8010378 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8010300:	4293      	cmp	r3, r2
 8010302:	d908      	bls.n	8010316 <HAL_ETH_SetMDIOClockRange+0x3a>
 8010304:	68bb      	ldr	r3, [r7, #8]
 8010306:	4a1d      	ldr	r2, [pc, #116]	; (801037c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8010308:	4293      	cmp	r3, r2
 801030a:	d804      	bhi.n	8010316 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8010312:	60fb      	str	r3, [r7, #12]
 8010314:	e027      	b.n	8010366 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	4a18      	ldr	r2, [pc, #96]	; (801037c <HAL_ETH_SetMDIOClockRange+0xa0>)
 801031a:	4293      	cmp	r3, r2
 801031c:	d908      	bls.n	8010330 <HAL_ETH_SetMDIOClockRange+0x54>
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	4a17      	ldr	r2, [pc, #92]	; (8010380 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8010322:	4293      	cmp	r3, r2
 8010324:	d204      	bcs.n	8010330 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801032c:	60fb      	str	r3, [r7, #12]
 801032e:	e01a      	b.n	8010366 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	4a13      	ldr	r2, [pc, #76]	; (8010380 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8010334:	4293      	cmp	r3, r2
 8010336:	d303      	bcc.n	8010340 <HAL_ETH_SetMDIOClockRange+0x64>
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	4a12      	ldr	r2, [pc, #72]	; (8010384 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d911      	bls.n	8010364 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	4a10      	ldr	r2, [pc, #64]	; (8010384 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8010344:	4293      	cmp	r3, r2
 8010346:	d908      	bls.n	801035a <HAL_ETH_SetMDIOClockRange+0x7e>
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	4a0f      	ldr	r2, [pc, #60]	; (8010388 <HAL_ETH_SetMDIOClockRange+0xac>)
 801034c:	4293      	cmp	r3, r2
 801034e:	d804      	bhi.n	801035a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010356:	60fb      	str	r3, [r7, #12]
 8010358:	e005      	b.n	8010366 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8010360:	60fb      	str	r3, [r7, #12]
 8010362:	e000      	b.n	8010366 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8010364:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8010370:	bf00      	nop
 8010372:	3710      	adds	r7, #16
 8010374:	46bd      	mov	sp, r7
 8010376:	bd80      	pop	{r7, pc}
 8010378:	01312cff 	.word	0x01312cff
 801037c:	02160ebf 	.word	0x02160ebf
 8010380:	03938700 	.word	0x03938700
 8010384:	05f5e0ff 	.word	0x05f5e0ff
 8010388:	08f0d17f 	.word	0x08f0d17f

0801038c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801038c:	b480      	push	{r7}
 801038e:	b085      	sub	sp, #20
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
 8010394:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 801039a:	683b      	ldr	r3, [r7, #0]
 801039c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 801039e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80103a0:	683b      	ldr	r3, [r7, #0]
 80103a2:	791b      	ldrb	r3, [r3, #4]
 80103a4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80103a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	7b1b      	ldrb	r3, [r3, #12]
 80103ac:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80103ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80103b0:	683b      	ldr	r3, [r7, #0]
 80103b2:	7b5b      	ldrb	r3, [r3, #13]
 80103b4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80103b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80103b8:	683b      	ldr	r3, [r7, #0]
 80103ba:	7b9b      	ldrb	r3, [r3, #14]
 80103bc:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80103be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80103c0:	683b      	ldr	r3, [r7, #0]
 80103c2:	7bdb      	ldrb	r3, [r3, #15]
 80103c4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80103c6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80103c8:	683a      	ldr	r2, [r7, #0]
 80103ca:	7c12      	ldrb	r2, [r2, #16]
 80103cc:	2a00      	cmp	r2, #0
 80103ce:	d102      	bne.n	80103d6 <ETH_SetMACConfig+0x4a>
 80103d0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80103d4:	e000      	b.n	80103d8 <ETH_SetMACConfig+0x4c>
 80103d6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80103d8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80103da:	683a      	ldr	r2, [r7, #0]
 80103dc:	7c52      	ldrb	r2, [r2, #17]
 80103de:	2a00      	cmp	r2, #0
 80103e0:	d102      	bne.n	80103e8 <ETH_SetMACConfig+0x5c>
 80103e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80103e6:	e000      	b.n	80103ea <ETH_SetMACConfig+0x5e>
 80103e8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80103ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	7c9b      	ldrb	r3, [r3, #18]
 80103f0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80103f2:	431a      	orrs	r2, r3
               macconf->Speed |
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80103f8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80103fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	7f1b      	ldrb	r3, [r3, #28]
 8010404:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8010406:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	7f5b      	ldrb	r3, [r3, #29]
 801040c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 801040e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8010410:	683a      	ldr	r2, [r7, #0]
 8010412:	7f92      	ldrb	r2, [r2, #30]
 8010414:	2a00      	cmp	r2, #0
 8010416:	d102      	bne.n	801041e <ETH_SetMACConfig+0x92>
 8010418:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801041c:	e000      	b.n	8010420 <ETH_SetMACConfig+0x94>
 801041e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8010420:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	7fdb      	ldrb	r3, [r3, #31]
 8010426:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8010428:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 801042a:	683a      	ldr	r2, [r7, #0]
 801042c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8010430:	2a00      	cmp	r2, #0
 8010432:	d102      	bne.n	801043a <ETH_SetMACConfig+0xae>
 8010434:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010438:	e000      	b.n	801043c <ETH_SetMACConfig+0xb0>
 801043a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 801043c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 801043e:	683b      	ldr	r3, [r7, #0]
 8010440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8010442:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801044a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 801044c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 801044e:	683b      	ldr	r3, [r7, #0]
 8010450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8010452:	4313      	orrs	r3, r2
 8010454:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	681a      	ldr	r2, [r3, #0]
 801045c:	4b56      	ldr	r3, [pc, #344]	; (80105b8 <ETH_SetMACConfig+0x22c>)
 801045e:	4013      	ands	r3, r2
 8010460:	687a      	ldr	r2, [r7, #4]
 8010462:	6812      	ldr	r2, [r2, #0]
 8010464:	68f9      	ldr	r1, [r7, #12]
 8010466:	430b      	orrs	r3, r1
 8010468:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801046e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010476:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8010478:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801047a:	683b      	ldr	r3, [r7, #0]
 801047c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010480:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8010482:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801048a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 801048c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 801048e:	683a      	ldr	r2, [r7, #0]
 8010490:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8010494:	2a00      	cmp	r2, #0
 8010496:	d102      	bne.n	801049e <ETH_SetMACConfig+0x112>
 8010498:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801049c:	e000      	b.n	80104a0 <ETH_SetMACConfig+0x114>
 801049e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80104a0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80104a6:	4313      	orrs	r3, r2
 80104a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	685a      	ldr	r2, [r3, #4]
 80104b0:	4b42      	ldr	r3, [pc, #264]	; (80105bc <ETH_SetMACConfig+0x230>)
 80104b2:	4013      	ands	r3, r2
 80104b4:	687a      	ldr	r2, [r7, #4]
 80104b6:	6812      	ldr	r2, [r2, #0]
 80104b8:	68f9      	ldr	r1, [r7, #12]
 80104ba:	430b      	orrs	r3, r1
 80104bc:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80104be:	683b      	ldr	r3, [r7, #0]
 80104c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80104c4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80104ca:	4313      	orrs	r3, r2
 80104cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	68da      	ldr	r2, [r3, #12]
 80104d4:	4b3a      	ldr	r3, [pc, #232]	; (80105c0 <ETH_SetMACConfig+0x234>)
 80104d6:	4013      	ands	r3, r2
 80104d8:	687a      	ldr	r2, [r7, #4]
 80104da:	6812      	ldr	r2, [r2, #0]
 80104dc:	68f9      	ldr	r1, [r7, #12]
 80104de:	430b      	orrs	r3, r1
 80104e0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80104e2:	683b      	ldr	r3, [r7, #0]
 80104e4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80104e8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80104ee:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80104f0:	683a      	ldr	r2, [r7, #0]
 80104f2:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80104f6:	2a00      	cmp	r2, #0
 80104f8:	d101      	bne.n	80104fe <ETH_SetMACConfig+0x172>
 80104fa:	2280      	movs	r2, #128	; 0x80
 80104fc:	e000      	b.n	8010500 <ETH_SetMACConfig+0x174>
 80104fe:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8010500:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8010502:	683b      	ldr	r3, [r7, #0]
 8010504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010506:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8010508:	4313      	orrs	r3, r2
 801050a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010512:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8010516:	4013      	ands	r3, r2
 8010518:	687a      	ldr	r2, [r7, #4]
 801051a:	6812      	ldr	r2, [r2, #0]
 801051c:	68f9      	ldr	r1, [r7, #12]
 801051e:	430b      	orrs	r3, r1
 8010520:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8010528:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 801052a:	683b      	ldr	r3, [r7, #0]
 801052c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8010530:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8010532:	4313      	orrs	r3, r2
 8010534:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	681b      	ldr	r3, [r3, #0]
 801053a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801053e:	f023 0103 	bic.w	r1, r3, #3
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	430a      	orrs	r2, r1
 801054a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8010556:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 801055a:	683b      	ldr	r3, [r7, #0]
 801055c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	430a      	orrs	r2, r1
 8010564:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8010568:	683b      	ldr	r3, [r7, #0]
 801056a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 801056c:	683a      	ldr	r2, [r7, #0]
 801056e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8010572:	2a00      	cmp	r2, #0
 8010574:	d101      	bne.n	801057a <ETH_SetMACConfig+0x1ee>
 8010576:	2240      	movs	r2, #64	; 0x40
 8010578:	e000      	b.n	801057c <ETH_SetMACConfig+0x1f0>
 801057a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 801057c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8010584:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8010586:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 801058e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8010590:	4313      	orrs	r3, r2
 8010592:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 801059c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	68fa      	ldr	r2, [r7, #12]
 80105a6:	430a      	orrs	r2, r1
 80105a8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80105ac:	bf00      	nop
 80105ae:	3714      	adds	r7, #20
 80105b0:	46bd      	mov	sp, r7
 80105b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b6:	4770      	bx	lr
 80105b8:	00048083 	.word	0x00048083
 80105bc:	c0f88000 	.word	0xc0f88000
 80105c0:	fffffef0 	.word	0xfffffef0

080105c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80105c4:	b480      	push	{r7}
 80105c6:	b085      	sub	sp, #20
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
 80105cc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80105d6:	681a      	ldr	r2, [r3, #0]
 80105d8:	4b38      	ldr	r3, [pc, #224]	; (80106bc <ETH_SetDMAConfig+0xf8>)
 80105da:	4013      	ands	r3, r2
 80105dc:	683a      	ldr	r2, [r7, #0]
 80105de:	6811      	ldr	r1, [r2, #0]
 80105e0:	687a      	ldr	r2, [r7, #4]
 80105e2:	6812      	ldr	r2, [r2, #0]
 80105e4:	430b      	orrs	r3, r1
 80105e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80105ea:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	791b      	ldrb	r3, [r3, #4]
 80105f0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80105f6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	7b1b      	ldrb	r3, [r3, #12]
 80105fc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80105fe:	4313      	orrs	r3, r2
 8010600:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801060a:	685a      	ldr	r2, [r3, #4]
 801060c:	4b2c      	ldr	r3, [pc, #176]	; (80106c0 <ETH_SetDMAConfig+0xfc>)
 801060e:	4013      	ands	r3, r2
 8010610:	687a      	ldr	r2, [r7, #4]
 8010612:	6812      	ldr	r2, [r2, #0]
 8010614:	68f9      	ldr	r1, [r7, #12]
 8010616:	430b      	orrs	r3, r1
 8010618:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801061c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	7b5b      	ldrb	r3, [r3, #13]
 8010622:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8010628:	4313      	orrs	r3, r2
 801062a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010634:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8010638:	4b22      	ldr	r3, [pc, #136]	; (80106c4 <ETH_SetDMAConfig+0x100>)
 801063a:	4013      	ands	r3, r2
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	6812      	ldr	r2, [r2, #0]
 8010640:	68f9      	ldr	r1, [r7, #12]
 8010642:	430b      	orrs	r3, r1
 8010644:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8010648:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	7d1b      	ldrb	r3, [r3, #20]
 8010654:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8010656:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8010658:	683b      	ldr	r3, [r7, #0]
 801065a:	7f5b      	ldrb	r3, [r3, #29]
 801065c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 801065e:	4313      	orrs	r3, r2
 8010660:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801066a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 801066e:	4b16      	ldr	r3, [pc, #88]	; (80106c8 <ETH_SetDMAConfig+0x104>)
 8010670:	4013      	ands	r3, r2
 8010672:	687a      	ldr	r2, [r7, #4]
 8010674:	6812      	ldr	r2, [r2, #0]
 8010676:	68f9      	ldr	r1, [r7, #12]
 8010678:	430b      	orrs	r3, r1
 801067a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801067e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8010682:	683b      	ldr	r3, [r7, #0]
 8010684:	7f1b      	ldrb	r3, [r3, #28]
 8010686:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8010688:	683b      	ldr	r3, [r7, #0]
 801068a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 801068c:	4313      	orrs	r3, r2
 801068e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010698:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 801069c:	4b0b      	ldr	r3, [pc, #44]	; (80106cc <ETH_SetDMAConfig+0x108>)
 801069e:	4013      	ands	r3, r2
 80106a0:	687a      	ldr	r2, [r7, #4]
 80106a2:	6812      	ldr	r2, [r2, #0]
 80106a4:	68f9      	ldr	r1, [r7, #12]
 80106a6:	430b      	orrs	r3, r1
 80106a8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80106ac:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80106b0:	bf00      	nop
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	ffff87fd 	.word	0xffff87fd
 80106c0:	ffff2ffe 	.word	0xffff2ffe
 80106c4:	fffec000 	.word	0xfffec000
 80106c8:	ffc0efef 	.word	0xffc0efef
 80106cc:	7fc0ffff 	.word	0x7fc0ffff

080106d0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b0a4      	sub	sp, #144	; 0x90
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80106d8:	2301      	movs	r3, #1
 80106da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80106de:	2300      	movs	r3, #0
 80106e0:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80106e2:	2300      	movs	r3, #0
 80106e4:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80106e8:	2300      	movs	r3, #0
 80106ea:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80106ee:	2301      	movs	r3, #1
 80106f0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80106f4:	2301      	movs	r3, #1
 80106f6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80106fa:	2301      	movs	r3, #1
 80106fc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8010700:	2300      	movs	r3, #0
 8010702:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8010706:	2301      	movs	r3, #1
 8010708:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801070c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010710:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8010712:	2300      	movs	r3, #0
 8010714:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8010718:	2300      	movs	r3, #0
 801071a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801071c:	2300      	movs	r3, #0
 801071e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8010722:	2300      	movs	r3, #0
 8010724:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8010728:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 801072c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801072e:	2300      	movs	r3, #0
 8010730:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8010734:	2300      	movs	r3, #0
 8010736:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8010738:	2301      	movs	r3, #1
 801073a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 801073e:	2300      	movs	r3, #0
 8010740:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8010744:	2300      	movs	r3, #0
 8010746:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801074a:	2300      	movs	r3, #0
 801074c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 801074e:	2300      	movs	r3, #0
 8010750:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8010752:	2300      	movs	r3, #0
 8010754:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8010756:	2300      	movs	r3, #0
 8010758:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801075c:	2300      	movs	r3, #0
 801075e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8010762:	2301      	movs	r3, #1
 8010764:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8010768:	2320      	movs	r3, #32
 801076a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 801076e:	2301      	movs	r3, #1
 8010770:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8010774:	2300      	movs	r3, #0
 8010776:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801077a:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 801077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8010780:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010784:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8010786:	2300      	movs	r3, #0
 8010788:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801078c:	2302      	movs	r3, #2
 801078e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8010792:	2300      	movs	r3, #0
 8010794:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8010798:	2300      	movs	r3, #0
 801079a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801079e:	2300      	movs	r3, #0
 80107a0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80107a4:	2301      	movs	r3, #1
 80107a6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80107aa:	2300      	movs	r3, #0
 80107ac:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80107ae:	2301      	movs	r3, #1
 80107b0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80107b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80107b8:	4619      	mov	r1, r3
 80107ba:	6878      	ldr	r0, [r7, #4]
 80107bc:	f7ff fde6 	bl	801038c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80107c0:	2301      	movs	r3, #1
 80107c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80107c4:	2301      	movs	r3, #1
 80107c6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80107c8:	2300      	movs	r3, #0
 80107ca:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80107cc:	2300      	movs	r3, #0
 80107ce:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80107d2:	2300      	movs	r3, #0
 80107d4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80107d6:	2300      	movs	r3, #0
 80107d8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80107da:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80107de:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80107e0:	2300      	movs	r3, #0
 80107e2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80107e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80107e8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80107ea:	2300      	movs	r3, #0
 80107ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80107f0:	f44f 7306 	mov.w	r3, #536	; 0x218
 80107f4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80107f6:	f107 0308 	add.w	r3, r7, #8
 80107fa:	4619      	mov	r1, r3
 80107fc:	6878      	ldr	r0, [r7, #4]
 80107fe:	f7ff fee1 	bl	80105c4 <ETH_SetDMAConfig>
}
 8010802:	bf00      	nop
 8010804:	3790      	adds	r7, #144	; 0x90
 8010806:	46bd      	mov	sp, r7
 8010808:	bd80      	pop	{r7, pc}

0801080a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801080a:	b480      	push	{r7}
 801080c:	b085      	sub	sp, #20
 801080e:	af00      	add	r7, sp, #0
 8010810:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8010812:	2300      	movs	r3, #0
 8010814:	60fb      	str	r3, [r7, #12]
 8010816:	e01d      	b.n	8010854 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	68d9      	ldr	r1, [r3, #12]
 801081c:	68fa      	ldr	r2, [r7, #12]
 801081e:	4613      	mov	r3, r2
 8010820:	005b      	lsls	r3, r3, #1
 8010822:	4413      	add	r3, r2
 8010824:	00db      	lsls	r3, r3, #3
 8010826:	440b      	add	r3, r1
 8010828:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801082a:	68bb      	ldr	r3, [r7, #8]
 801082c:	2200      	movs	r2, #0
 801082e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8010830:	68bb      	ldr	r3, [r7, #8]
 8010832:	2200      	movs	r2, #0
 8010834:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8010836:	68bb      	ldr	r3, [r7, #8]
 8010838:	2200      	movs	r2, #0
 801083a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	2200      	movs	r2, #0
 8010840:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8010842:	68b9      	ldr	r1, [r7, #8]
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	68fa      	ldr	r2, [r7, #12]
 8010848:	3206      	adds	r2, #6
 801084a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	3301      	adds	r3, #1
 8010852:	60fb      	str	r3, [r7, #12]
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	2b03      	cmp	r3, #3
 8010858:	d9de      	bls.n	8010818 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	2200      	movs	r2, #0
 801085e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010868:	461a      	mov	r2, r3
 801086a:	2303      	movs	r3, #3
 801086c:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	68da      	ldr	r2, [r3, #12]
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801087c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	68da      	ldr	r2, [r3, #12]
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801088c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8010890:	bf00      	nop
 8010892:	3714      	adds	r7, #20
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801089c:	b480      	push	{r7}
 801089e:	b085      	sub	sp, #20
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80108a4:	2300      	movs	r3, #0
 80108a6:	60fb      	str	r3, [r7, #12]
 80108a8:	e023      	b.n	80108f2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6919      	ldr	r1, [r3, #16]
 80108ae:	68fa      	ldr	r2, [r7, #12]
 80108b0:	4613      	mov	r3, r2
 80108b2:	005b      	lsls	r3, r3, #1
 80108b4:	4413      	add	r3, r2
 80108b6:	00db      	lsls	r3, r3, #3
 80108b8:	440b      	add	r3, r1
 80108ba:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	2200      	movs	r2, #0
 80108c0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80108c2:	68bb      	ldr	r3, [r7, #8]
 80108c4:	2200      	movs	r2, #0
 80108c6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80108c8:	68bb      	ldr	r3, [r7, #8]
 80108ca:	2200      	movs	r2, #0
 80108cc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80108ce:	68bb      	ldr	r3, [r7, #8]
 80108d0:	2200      	movs	r2, #0
 80108d2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	2200      	movs	r2, #0
 80108d8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	2200      	movs	r2, #0
 80108de:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80108e0:	68b9      	ldr	r1, [r7, #8]
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	68fa      	ldr	r2, [r7, #12]
 80108e6:	3212      	adds	r2, #18
 80108e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	3301      	adds	r3, #1
 80108f0:	60fb      	str	r3, [r7, #12]
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2b03      	cmp	r3, #3
 80108f6:	d9d8      	bls.n	80108aa <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2200      	movs	r2, #0
 80108fc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	2200      	movs	r2, #0
 8010902:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2200      	movs	r2, #0
 8010908:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2200      	movs	r2, #0
 801090e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	2200      	movs	r2, #0
 8010914:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801091e:	461a      	mov	r2, r3
 8010920:	2303      	movs	r3, #3
 8010922:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	691a      	ldr	r2, [r3, #16]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010932:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	691b      	ldr	r3, [r3, #16]
 801093a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010946:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 801094a:	bf00      	nop
 801094c:	3714      	adds	r7, #20
 801094e:	46bd      	mov	sp, r7
 8010950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010954:	4770      	bx	lr
	...

08010958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8010958:	b480      	push	{r7}
 801095a:	b089      	sub	sp, #36	; 0x24
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
 8010960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8010962:	2300      	movs	r3, #0
 8010964:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8010966:	4b86      	ldr	r3, [pc, #536]	; (8010b80 <HAL_GPIO_Init+0x228>)
 8010968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801096a:	e18c      	b.n	8010c86 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	681a      	ldr	r2, [r3, #0]
 8010970:	2101      	movs	r1, #1
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	fa01 f303 	lsl.w	r3, r1, r3
 8010978:	4013      	ands	r3, r2
 801097a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	2b00      	cmp	r3, #0
 8010980:	f000 817e 	beq.w	8010c80 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	f003 0303 	and.w	r3, r3, #3
 801098c:	2b01      	cmp	r3, #1
 801098e:	d005      	beq.n	801099c <HAL_GPIO_Init+0x44>
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	f003 0303 	and.w	r3, r3, #3
 8010998:	2b02      	cmp	r3, #2
 801099a:	d130      	bne.n	80109fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	689b      	ldr	r3, [r3, #8]
 80109a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80109a2:	69fb      	ldr	r3, [r7, #28]
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	2203      	movs	r2, #3
 80109a8:	fa02 f303 	lsl.w	r3, r2, r3
 80109ac:	43db      	mvns	r3, r3
 80109ae:	69ba      	ldr	r2, [r7, #24]
 80109b0:	4013      	ands	r3, r2
 80109b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	68da      	ldr	r2, [r3, #12]
 80109b8:	69fb      	ldr	r3, [r7, #28]
 80109ba:	005b      	lsls	r3, r3, #1
 80109bc:	fa02 f303 	lsl.w	r3, r2, r3
 80109c0:	69ba      	ldr	r2, [r7, #24]
 80109c2:	4313      	orrs	r3, r2
 80109c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	69ba      	ldr	r2, [r7, #24]
 80109ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80109d2:	2201      	movs	r2, #1
 80109d4:	69fb      	ldr	r3, [r7, #28]
 80109d6:	fa02 f303 	lsl.w	r3, r2, r3
 80109da:	43db      	mvns	r3, r3
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	4013      	ands	r3, r2
 80109e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	685b      	ldr	r3, [r3, #4]
 80109e6:	091b      	lsrs	r3, r3, #4
 80109e8:	f003 0201 	and.w	r2, r3, #1
 80109ec:	69fb      	ldr	r3, [r7, #28]
 80109ee:	fa02 f303 	lsl.w	r3, r2, r3
 80109f2:	69ba      	ldr	r2, [r7, #24]
 80109f4:	4313      	orrs	r3, r2
 80109f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	69ba      	ldr	r2, [r7, #24]
 80109fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	685b      	ldr	r3, [r3, #4]
 8010a02:	f003 0303 	and.w	r3, r3, #3
 8010a06:	2b03      	cmp	r3, #3
 8010a08:	d017      	beq.n	8010a3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	68db      	ldr	r3, [r3, #12]
 8010a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	005b      	lsls	r3, r3, #1
 8010a14:	2203      	movs	r2, #3
 8010a16:	fa02 f303 	lsl.w	r3, r2, r3
 8010a1a:	43db      	mvns	r3, r3
 8010a1c:	69ba      	ldr	r2, [r7, #24]
 8010a1e:	4013      	ands	r3, r2
 8010a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8010a22:	683b      	ldr	r3, [r7, #0]
 8010a24:	689a      	ldr	r2, [r3, #8]
 8010a26:	69fb      	ldr	r3, [r7, #28]
 8010a28:	005b      	lsls	r3, r3, #1
 8010a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a2e:	69ba      	ldr	r2, [r7, #24]
 8010a30:	4313      	orrs	r3, r2
 8010a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	69ba      	ldr	r2, [r7, #24]
 8010a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	685b      	ldr	r3, [r3, #4]
 8010a3e:	f003 0303 	and.w	r3, r3, #3
 8010a42:	2b02      	cmp	r3, #2
 8010a44:	d123      	bne.n	8010a8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8010a46:	69fb      	ldr	r3, [r7, #28]
 8010a48:	08da      	lsrs	r2, r3, #3
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	3208      	adds	r2, #8
 8010a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	f003 0307 	and.w	r3, r3, #7
 8010a5a:	009b      	lsls	r3, r3, #2
 8010a5c:	220f      	movs	r2, #15
 8010a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8010a62:	43db      	mvns	r3, r3
 8010a64:	69ba      	ldr	r2, [r7, #24]
 8010a66:	4013      	ands	r3, r2
 8010a68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8010a6a:	683b      	ldr	r3, [r7, #0]
 8010a6c:	691a      	ldr	r2, [r3, #16]
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	f003 0307 	and.w	r3, r3, #7
 8010a74:	009b      	lsls	r3, r3, #2
 8010a76:	fa02 f303 	lsl.w	r3, r2, r3
 8010a7a:	69ba      	ldr	r2, [r7, #24]
 8010a7c:	4313      	orrs	r3, r2
 8010a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8010a80:	69fb      	ldr	r3, [r7, #28]
 8010a82:	08da      	lsrs	r2, r3, #3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	3208      	adds	r2, #8
 8010a88:	69b9      	ldr	r1, [r7, #24]
 8010a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8010a94:	69fb      	ldr	r3, [r7, #28]
 8010a96:	005b      	lsls	r3, r3, #1
 8010a98:	2203      	movs	r2, #3
 8010a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8010a9e:	43db      	mvns	r3, r3
 8010aa0:	69ba      	ldr	r2, [r7, #24]
 8010aa2:	4013      	ands	r3, r2
 8010aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8010aa6:	683b      	ldr	r3, [r7, #0]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	f003 0203 	and.w	r2, r3, #3
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	005b      	lsls	r3, r3, #1
 8010ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8010ab6:	69ba      	ldr	r2, [r7, #24]
 8010ab8:	4313      	orrs	r3, r2
 8010aba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	69ba      	ldr	r2, [r7, #24]
 8010ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8010ac2:	683b      	ldr	r3, [r7, #0]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	f000 80d8 	beq.w	8010c80 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010ad0:	4b2c      	ldr	r3, [pc, #176]	; (8010b84 <HAL_GPIO_Init+0x22c>)
 8010ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010ad6:	4a2b      	ldr	r2, [pc, #172]	; (8010b84 <HAL_GPIO_Init+0x22c>)
 8010ad8:	f043 0302 	orr.w	r3, r3, #2
 8010adc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8010ae0:	4b28      	ldr	r3, [pc, #160]	; (8010b84 <HAL_GPIO_Init+0x22c>)
 8010ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8010ae6:	f003 0302 	and.w	r3, r3, #2
 8010aea:	60fb      	str	r3, [r7, #12]
 8010aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8010aee:	4a26      	ldr	r2, [pc, #152]	; (8010b88 <HAL_GPIO_Init+0x230>)
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	089b      	lsrs	r3, r3, #2
 8010af4:	3302      	adds	r3, #2
 8010af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	f003 0303 	and.w	r3, r3, #3
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	220f      	movs	r2, #15
 8010b06:	fa02 f303 	lsl.w	r3, r2, r3
 8010b0a:	43db      	mvns	r3, r3
 8010b0c:	69ba      	ldr	r2, [r7, #24]
 8010b0e:	4013      	ands	r3, r2
 8010b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	4a1d      	ldr	r2, [pc, #116]	; (8010b8c <HAL_GPIO_Init+0x234>)
 8010b16:	4293      	cmp	r3, r2
 8010b18:	d04a      	beq.n	8010bb0 <HAL_GPIO_Init+0x258>
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	4a1c      	ldr	r2, [pc, #112]	; (8010b90 <HAL_GPIO_Init+0x238>)
 8010b1e:	4293      	cmp	r3, r2
 8010b20:	d02b      	beq.n	8010b7a <HAL_GPIO_Init+0x222>
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	4a1b      	ldr	r2, [pc, #108]	; (8010b94 <HAL_GPIO_Init+0x23c>)
 8010b26:	4293      	cmp	r3, r2
 8010b28:	d025      	beq.n	8010b76 <HAL_GPIO_Init+0x21e>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	4a1a      	ldr	r2, [pc, #104]	; (8010b98 <HAL_GPIO_Init+0x240>)
 8010b2e:	4293      	cmp	r3, r2
 8010b30:	d01f      	beq.n	8010b72 <HAL_GPIO_Init+0x21a>
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	4a19      	ldr	r2, [pc, #100]	; (8010b9c <HAL_GPIO_Init+0x244>)
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d019      	beq.n	8010b6e <HAL_GPIO_Init+0x216>
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4a18      	ldr	r2, [pc, #96]	; (8010ba0 <HAL_GPIO_Init+0x248>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d013      	beq.n	8010b6a <HAL_GPIO_Init+0x212>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	4a17      	ldr	r2, [pc, #92]	; (8010ba4 <HAL_GPIO_Init+0x24c>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d00d      	beq.n	8010b66 <HAL_GPIO_Init+0x20e>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4a16      	ldr	r2, [pc, #88]	; (8010ba8 <HAL_GPIO_Init+0x250>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d007      	beq.n	8010b62 <HAL_GPIO_Init+0x20a>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4a15      	ldr	r2, [pc, #84]	; (8010bac <HAL_GPIO_Init+0x254>)
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d101      	bne.n	8010b5e <HAL_GPIO_Init+0x206>
 8010b5a:	2309      	movs	r3, #9
 8010b5c:	e029      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b5e:	230a      	movs	r3, #10
 8010b60:	e027      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b62:	2307      	movs	r3, #7
 8010b64:	e025      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b66:	2306      	movs	r3, #6
 8010b68:	e023      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b6a:	2305      	movs	r3, #5
 8010b6c:	e021      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b6e:	2304      	movs	r3, #4
 8010b70:	e01f      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b72:	2303      	movs	r3, #3
 8010b74:	e01d      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b76:	2302      	movs	r3, #2
 8010b78:	e01b      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e019      	b.n	8010bb2 <HAL_GPIO_Init+0x25a>
 8010b7e:	bf00      	nop
 8010b80:	58000080 	.word	0x58000080
 8010b84:	58024400 	.word	0x58024400
 8010b88:	58000400 	.word	0x58000400
 8010b8c:	58020000 	.word	0x58020000
 8010b90:	58020400 	.word	0x58020400
 8010b94:	58020800 	.word	0x58020800
 8010b98:	58020c00 	.word	0x58020c00
 8010b9c:	58021000 	.word	0x58021000
 8010ba0:	58021400 	.word	0x58021400
 8010ba4:	58021800 	.word	0x58021800
 8010ba8:	58021c00 	.word	0x58021c00
 8010bac:	58022400 	.word	0x58022400
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	69fa      	ldr	r2, [r7, #28]
 8010bb4:	f002 0203 	and.w	r2, r2, #3
 8010bb8:	0092      	lsls	r2, r2, #2
 8010bba:	4093      	lsls	r3, r2
 8010bbc:	69ba      	ldr	r2, [r7, #24]
 8010bbe:	4313      	orrs	r3, r2
 8010bc0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8010bc2:	4938      	ldr	r1, [pc, #224]	; (8010ca4 <HAL_GPIO_Init+0x34c>)
 8010bc4:	69fb      	ldr	r3, [r7, #28]
 8010bc6:	089b      	lsrs	r3, r3, #2
 8010bc8:	3302      	adds	r3, #2
 8010bca:	69ba      	ldr	r2, [r7, #24]
 8010bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8010bd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	43db      	mvns	r3, r3
 8010bdc:	69ba      	ldr	r2, [r7, #24]
 8010bde:	4013      	ands	r3, r2
 8010be0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8010be2:	683b      	ldr	r3, [r7, #0]
 8010be4:	685b      	ldr	r3, [r3, #4]
 8010be6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8010bee:	69ba      	ldr	r2, [r7, #24]
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	4313      	orrs	r3, r2
 8010bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8010bf6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010bfa:	69bb      	ldr	r3, [r7, #24]
 8010bfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8010bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8010c02:	685b      	ldr	r3, [r3, #4]
 8010c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010c06:	693b      	ldr	r3, [r7, #16]
 8010c08:	43db      	mvns	r3, r3
 8010c0a:	69ba      	ldr	r2, [r7, #24]
 8010c0c:	4013      	ands	r3, r2
 8010c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8010c10:	683b      	ldr	r3, [r7, #0]
 8010c12:	685b      	ldr	r3, [r3, #4]
 8010c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d003      	beq.n	8010c24 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8010c1c:	69ba      	ldr	r2, [r7, #24]
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	4313      	orrs	r3, r2
 8010c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8010c24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8010c28:	69bb      	ldr	r3, [r7, #24]
 8010c2a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010c32:	693b      	ldr	r3, [r7, #16]
 8010c34:	43db      	mvns	r3, r3
 8010c36:	69ba      	ldr	r2, [r7, #24]
 8010c38:	4013      	ands	r3, r2
 8010c3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d003      	beq.n	8010c50 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8010c48:	69ba      	ldr	r2, [r7, #24]
 8010c4a:	693b      	ldr	r3, [r7, #16]
 8010c4c:	4313      	orrs	r3, r2
 8010c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8010c50:	697b      	ldr	r3, [r7, #20]
 8010c52:	69ba      	ldr	r2, [r7, #24]
 8010c54:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8010c56:	697b      	ldr	r3, [r7, #20]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8010c5c:	693b      	ldr	r3, [r7, #16]
 8010c5e:	43db      	mvns	r3, r3
 8010c60:	69ba      	ldr	r2, [r7, #24]
 8010c62:	4013      	ands	r3, r2
 8010c64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8010c66:	683b      	ldr	r3, [r7, #0]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010c6e:	2b00      	cmp	r3, #0
 8010c70:	d003      	beq.n	8010c7a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8010c72:	69ba      	ldr	r2, [r7, #24]
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	4313      	orrs	r3, r2
 8010c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8010c7a:	697b      	ldr	r3, [r7, #20]
 8010c7c:	69ba      	ldr	r2, [r7, #24]
 8010c7e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8010c80:	69fb      	ldr	r3, [r7, #28]
 8010c82:	3301      	adds	r3, #1
 8010c84:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8010c86:	683b      	ldr	r3, [r7, #0]
 8010c88:	681a      	ldr	r2, [r3, #0]
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	f47f ae6b 	bne.w	801096c <HAL_GPIO_Init+0x14>
  }
}
 8010c96:	bf00      	nop
 8010c98:	bf00      	nop
 8010c9a:	3724      	adds	r7, #36	; 0x24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ca2:	4770      	bx	lr
 8010ca4:	58000400 	.word	0x58000400

08010ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8010ca8:	b480      	push	{r7}
 8010caa:	b083      	sub	sp, #12
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	6078      	str	r0, [r7, #4]
 8010cb0:	460b      	mov	r3, r1
 8010cb2:	807b      	strh	r3, [r7, #2]
 8010cb4:	4613      	mov	r3, r2
 8010cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8010cb8:	787b      	ldrb	r3, [r7, #1]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d003      	beq.n	8010cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8010cbe:	887a      	ldrh	r2, [r7, #2]
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8010cc4:	e003      	b.n	8010cce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8010cc6:	887b      	ldrh	r3, [r7, #2]
 8010cc8:	041a      	lsls	r2, r3, #16
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	619a      	str	r2, [r3, #24]
}
 8010cce:	bf00      	nop
 8010cd0:	370c      	adds	r7, #12
 8010cd2:	46bd      	mov	sp, r7
 8010cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cd8:	4770      	bx	lr

08010cda <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8010cda:	b480      	push	{r7}
 8010cdc:	b085      	sub	sp, #20
 8010cde:	af00      	add	r7, sp, #0
 8010ce0:	6078      	str	r0, [r7, #4]
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	695b      	ldr	r3, [r3, #20]
 8010cea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8010cec:	887a      	ldrh	r2, [r7, #2]
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	4013      	ands	r3, r2
 8010cf2:	041a      	lsls	r2, r3, #16
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	43d9      	mvns	r1, r3
 8010cf8:	887b      	ldrh	r3, [r7, #2]
 8010cfa:	400b      	ands	r3, r1
 8010cfc:	431a      	orrs	r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	619a      	str	r2, [r3, #24]
}
 8010d02:	bf00      	nop
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr
	...

08010d10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b084      	sub	sp, #16
 8010d14:	af00      	add	r7, sp, #0
 8010d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8010d18:	4b19      	ldr	r3, [pc, #100]	; (8010d80 <HAL_PWREx_ConfigSupply+0x70>)
 8010d1a:	68db      	ldr	r3, [r3, #12]
 8010d1c:	f003 0304 	and.w	r3, r3, #4
 8010d20:	2b04      	cmp	r3, #4
 8010d22:	d00a      	beq.n	8010d3a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8010d24:	4b16      	ldr	r3, [pc, #88]	; (8010d80 <HAL_PWREx_ConfigSupply+0x70>)
 8010d26:	68db      	ldr	r3, [r3, #12]
 8010d28:	f003 0307 	and.w	r3, r3, #7
 8010d2c:	687a      	ldr	r2, [r7, #4]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d001      	beq.n	8010d36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8010d32:	2301      	movs	r3, #1
 8010d34:	e01f      	b.n	8010d76 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8010d36:	2300      	movs	r3, #0
 8010d38:	e01d      	b.n	8010d76 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8010d3a:	4b11      	ldr	r3, [pc, #68]	; (8010d80 <HAL_PWREx_ConfigSupply+0x70>)
 8010d3c:	68db      	ldr	r3, [r3, #12]
 8010d3e:	f023 0207 	bic.w	r2, r3, #7
 8010d42:	490f      	ldr	r1, [pc, #60]	; (8010d80 <HAL_PWREx_ConfigSupply+0x70>)
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	4313      	orrs	r3, r2
 8010d48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8010d4a:	f7ff f8b1 	bl	800feb0 <HAL_GetTick>
 8010d4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010d50:	e009      	b.n	8010d66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8010d52:	f7ff f8ad 	bl	800feb0 <HAL_GetTick>
 8010d56:	4602      	mov	r2, r0
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	1ad3      	subs	r3, r2, r3
 8010d5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8010d60:	d901      	bls.n	8010d66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8010d62:	2301      	movs	r3, #1
 8010d64:	e007      	b.n	8010d76 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8010d66:	4b06      	ldr	r3, [pc, #24]	; (8010d80 <HAL_PWREx_ConfigSupply+0x70>)
 8010d68:	685b      	ldr	r3, [r3, #4]
 8010d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010d6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010d72:	d1ee      	bne.n	8010d52 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8010d74:	2300      	movs	r3, #0
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3710      	adds	r7, #16
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	58024800 	.word	0x58024800

08010d84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010d84:	b580      	push	{r7, lr}
 8010d86:	b08c      	sub	sp, #48	; 0x30
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d101      	bne.n	8010d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8010d92:	2301      	movs	r3, #1
 8010d94:	e3c8      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 0301 	and.w	r3, r3, #1
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	f000 8087 	beq.w	8010eb2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010da4:	4b88      	ldr	r3, [pc, #544]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010dae:	4b86      	ldr	r3, [pc, #536]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010db2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8010db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db6:	2b10      	cmp	r3, #16
 8010db8:	d007      	beq.n	8010dca <HAL_RCC_OscConfig+0x46>
 8010dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbc:	2b18      	cmp	r3, #24
 8010dbe:	d110      	bne.n	8010de2 <HAL_RCC_OscConfig+0x5e>
 8010dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc2:	f003 0303 	and.w	r3, r3, #3
 8010dc6:	2b02      	cmp	r3, #2
 8010dc8:	d10b      	bne.n	8010de2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010dca:	4b7f      	ldr	r3, [pc, #508]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d06c      	beq.n	8010eb0 <HAL_RCC_OscConfig+0x12c>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	685b      	ldr	r3, [r3, #4]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d168      	bne.n	8010eb0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8010dde:	2301      	movs	r3, #1
 8010de0:	e3a2      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010dea:	d106      	bne.n	8010dfa <HAL_RCC_OscConfig+0x76>
 8010dec:	4b76      	ldr	r3, [pc, #472]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a75      	ldr	r2, [pc, #468]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010df2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010df6:	6013      	str	r3, [r2, #0]
 8010df8:	e02e      	b.n	8010e58 <HAL_RCC_OscConfig+0xd4>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d10c      	bne.n	8010e1c <HAL_RCC_OscConfig+0x98>
 8010e02:	4b71      	ldr	r3, [pc, #452]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a70      	ldr	r2, [pc, #448]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e0c:	6013      	str	r3, [r2, #0]
 8010e0e:	4b6e      	ldr	r3, [pc, #440]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	4a6d      	ldr	r2, [pc, #436]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e18:	6013      	str	r3, [r2, #0]
 8010e1a:	e01d      	b.n	8010e58 <HAL_RCC_OscConfig+0xd4>
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010e24:	d10c      	bne.n	8010e40 <HAL_RCC_OscConfig+0xbc>
 8010e26:	4b68      	ldr	r3, [pc, #416]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	4a67      	ldr	r2, [pc, #412]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010e30:	6013      	str	r3, [r2, #0]
 8010e32:	4b65      	ldr	r3, [pc, #404]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	4a64      	ldr	r2, [pc, #400]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010e3c:	6013      	str	r3, [r2, #0]
 8010e3e:	e00b      	b.n	8010e58 <HAL_RCC_OscConfig+0xd4>
 8010e40:	4b61      	ldr	r3, [pc, #388]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	4a60      	ldr	r2, [pc, #384]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e4a:	6013      	str	r3, [r2, #0]
 8010e4c:	4b5e      	ldr	r3, [pc, #376]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	4a5d      	ldr	r2, [pc, #372]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010e56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	685b      	ldr	r3, [r3, #4]
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d013      	beq.n	8010e88 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e60:	f7ff f826 	bl	800feb0 <HAL_GetTick>
 8010e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010e66:	e008      	b.n	8010e7a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e68:	f7ff f822 	bl	800feb0 <HAL_GetTick>
 8010e6c:	4602      	mov	r2, r0
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	1ad3      	subs	r3, r2, r3
 8010e72:	2b64      	cmp	r3, #100	; 0x64
 8010e74:	d901      	bls.n	8010e7a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8010e76:	2303      	movs	r3, #3
 8010e78:	e356      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010e7a:	4b53      	ldr	r3, [pc, #332]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010e7c:	681b      	ldr	r3, [r3, #0]
 8010e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d0f0      	beq.n	8010e68 <HAL_RCC_OscConfig+0xe4>
 8010e86:	e014      	b.n	8010eb2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010e88:	f7ff f812 	bl	800feb0 <HAL_GetTick>
 8010e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010e8e:	e008      	b.n	8010ea2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8010e90:	f7ff f80e 	bl	800feb0 <HAL_GetTick>
 8010e94:	4602      	mov	r2, r0
 8010e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e98:	1ad3      	subs	r3, r2, r3
 8010e9a:	2b64      	cmp	r3, #100	; 0x64
 8010e9c:	d901      	bls.n	8010ea2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8010e9e:	2303      	movs	r3, #3
 8010ea0:	e342      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8010ea2:	4b49      	ldr	r3, [pc, #292]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d1f0      	bne.n	8010e90 <HAL_RCC_OscConfig+0x10c>
 8010eae:	e000      	b.n	8010eb2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010eb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f003 0302 	and.w	r3, r3, #2
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	f000 808c 	beq.w	8010fd8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010ec0:	4b41      	ldr	r3, [pc, #260]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010ec2:	691b      	ldr	r3, [r3, #16]
 8010ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ec8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010eca:	4b3f      	ldr	r3, [pc, #252]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ece:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8010ed0:	6a3b      	ldr	r3, [r7, #32]
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d007      	beq.n	8010ee6 <HAL_RCC_OscConfig+0x162>
 8010ed6:	6a3b      	ldr	r3, [r7, #32]
 8010ed8:	2b18      	cmp	r3, #24
 8010eda:	d137      	bne.n	8010f4c <HAL_RCC_OscConfig+0x1c8>
 8010edc:	69fb      	ldr	r3, [r7, #28]
 8010ede:	f003 0303 	and.w	r3, r3, #3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d132      	bne.n	8010f4c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010ee6:	4b38      	ldr	r3, [pc, #224]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	f003 0304 	and.w	r3, r3, #4
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d005      	beq.n	8010efe <HAL_RCC_OscConfig+0x17a>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	68db      	ldr	r3, [r3, #12]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d101      	bne.n	8010efe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8010efa:	2301      	movs	r3, #1
 8010efc:	e314      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010efe:	4b32      	ldr	r3, [pc, #200]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	f023 0219 	bic.w	r2, r3, #25
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	492f      	ldr	r1, [pc, #188]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f0c:	4313      	orrs	r3, r2
 8010f0e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f10:	f7fe ffce 	bl	800feb0 <HAL_GetTick>
 8010f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010f16:	e008      	b.n	8010f2a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f18:	f7fe ffca 	bl	800feb0 <HAL_GetTick>
 8010f1c:	4602      	mov	r2, r0
 8010f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f20:	1ad3      	subs	r3, r2, r3
 8010f22:	2b02      	cmp	r3, #2
 8010f24:	d901      	bls.n	8010f2a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8010f26:	2303      	movs	r3, #3
 8010f28:	e2fe      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010f2a:	4b27      	ldr	r3, [pc, #156]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	f003 0304 	and.w	r3, r3, #4
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d0f0      	beq.n	8010f18 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f36:	4b24      	ldr	r3, [pc, #144]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f38:	685b      	ldr	r3, [r3, #4]
 8010f3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	691b      	ldr	r3, [r3, #16]
 8010f42:	061b      	lsls	r3, r3, #24
 8010f44:	4920      	ldr	r1, [pc, #128]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f46:	4313      	orrs	r3, r2
 8010f48:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8010f4a:	e045      	b.n	8010fd8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d026      	beq.n	8010fa2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8010f54:	4b1c      	ldr	r3, [pc, #112]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	f023 0219 	bic.w	r2, r3, #25
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	4919      	ldr	r1, [pc, #100]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f62:	4313      	orrs	r3, r2
 8010f64:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010f66:	f7fe ffa3 	bl	800feb0 <HAL_GetTick>
 8010f6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010f6c:	e008      	b.n	8010f80 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010f6e:	f7fe ff9f 	bl	800feb0 <HAL_GetTick>
 8010f72:	4602      	mov	r2, r0
 8010f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f76:	1ad3      	subs	r3, r2, r3
 8010f78:	2b02      	cmp	r3, #2
 8010f7a:	d901      	bls.n	8010f80 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8010f7c:	2303      	movs	r3, #3
 8010f7e:	e2d3      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010f80:	4b11      	ldr	r3, [pc, #68]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f003 0304 	and.w	r3, r3, #4
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d0f0      	beq.n	8010f6e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010f8c:	4b0e      	ldr	r3, [pc, #56]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f8e:	685b      	ldr	r3, [r3, #4]
 8010f90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	691b      	ldr	r3, [r3, #16]
 8010f98:	061b      	lsls	r3, r3, #24
 8010f9a:	490b      	ldr	r1, [pc, #44]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010f9c:	4313      	orrs	r3, r2
 8010f9e:	604b      	str	r3, [r1, #4]
 8010fa0:	e01a      	b.n	8010fd8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8010fa2:	4b09      	ldr	r3, [pc, #36]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010fa4:	681b      	ldr	r3, [r3, #0]
 8010fa6:	4a08      	ldr	r2, [pc, #32]	; (8010fc8 <HAL_RCC_OscConfig+0x244>)
 8010fa8:	f023 0301 	bic.w	r3, r3, #1
 8010fac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010fae:	f7fe ff7f 	bl	800feb0 <HAL_GetTick>
 8010fb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010fb4:	e00a      	b.n	8010fcc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8010fb6:	f7fe ff7b 	bl	800feb0 <HAL_GetTick>
 8010fba:	4602      	mov	r2, r0
 8010fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fbe:	1ad3      	subs	r3, r2, r3
 8010fc0:	2b02      	cmp	r3, #2
 8010fc2:	d903      	bls.n	8010fcc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8010fc4:	2303      	movs	r3, #3
 8010fc6:	e2af      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
 8010fc8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8010fcc:	4b96      	ldr	r3, [pc, #600]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f003 0304 	and.w	r3, r3, #4
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d1ee      	bne.n	8010fb6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f003 0310 	and.w	r3, r3, #16
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d06a      	beq.n	80110ba <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8010fe4:	4b90      	ldr	r3, [pc, #576]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8010fe6:	691b      	ldr	r3, [r3, #16]
 8010fe8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fec:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8010fee:	4b8e      	ldr	r3, [pc, #568]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8010ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ff2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	2b08      	cmp	r3, #8
 8010ff8:	d007      	beq.n	801100a <HAL_RCC_OscConfig+0x286>
 8010ffa:	69bb      	ldr	r3, [r7, #24]
 8010ffc:	2b18      	cmp	r3, #24
 8010ffe:	d11b      	bne.n	8011038 <HAL_RCC_OscConfig+0x2b4>
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	f003 0303 	and.w	r3, r3, #3
 8011006:	2b01      	cmp	r3, #1
 8011008:	d116      	bne.n	8011038 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801100a:	4b87      	ldr	r3, [pc, #540]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011012:	2b00      	cmp	r3, #0
 8011014:	d005      	beq.n	8011022 <HAL_RCC_OscConfig+0x29e>
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	69db      	ldr	r3, [r3, #28]
 801101a:	2b80      	cmp	r3, #128	; 0x80
 801101c:	d001      	beq.n	8011022 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801101e:	2301      	movs	r3, #1
 8011020:	e282      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011022:	4b81      	ldr	r3, [pc, #516]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011024:	68db      	ldr	r3, [r3, #12]
 8011026:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	6a1b      	ldr	r3, [r3, #32]
 801102e:	061b      	lsls	r3, r3, #24
 8011030:	497d      	ldr	r1, [pc, #500]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011032:	4313      	orrs	r3, r2
 8011034:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8011036:	e040      	b.n	80110ba <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8011038:	687b      	ldr	r3, [r7, #4]
 801103a:	69db      	ldr	r3, [r3, #28]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d023      	beq.n	8011088 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8011040:	4b79      	ldr	r3, [pc, #484]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4a78      	ldr	r2, [pc, #480]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011046:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801104a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801104c:	f7fe ff30 	bl	800feb0 <HAL_GetTick>
 8011050:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011052:	e008      	b.n	8011066 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8011054:	f7fe ff2c 	bl	800feb0 <HAL_GetTick>
 8011058:	4602      	mov	r2, r0
 801105a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105c:	1ad3      	subs	r3, r2, r3
 801105e:	2b02      	cmp	r3, #2
 8011060:	d901      	bls.n	8011066 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8011062:	2303      	movs	r3, #3
 8011064:	e260      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8011066:	4b70      	ldr	r3, [pc, #448]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801106e:	2b00      	cmp	r3, #0
 8011070:	d0f0      	beq.n	8011054 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8011072:	4b6d      	ldr	r3, [pc, #436]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6a1b      	ldr	r3, [r3, #32]
 801107e:	061b      	lsls	r3, r3, #24
 8011080:	4969      	ldr	r1, [pc, #420]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011082:	4313      	orrs	r3, r2
 8011084:	60cb      	str	r3, [r1, #12]
 8011086:	e018      	b.n	80110ba <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8011088:	4b67      	ldr	r3, [pc, #412]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801108a:	681b      	ldr	r3, [r3, #0]
 801108c:	4a66      	ldr	r2, [pc, #408]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801108e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011094:	f7fe ff0c 	bl	800feb0 <HAL_GetTick>
 8011098:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801109a:	e008      	b.n	80110ae <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801109c:	f7fe ff08 	bl	800feb0 <HAL_GetTick>
 80110a0:	4602      	mov	r2, r0
 80110a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a4:	1ad3      	subs	r3, r2, r3
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d901      	bls.n	80110ae <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80110aa:	2303      	movs	r3, #3
 80110ac:	e23c      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80110ae:	4b5e      	ldr	r3, [pc, #376]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d1f0      	bne.n	801109c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	f003 0308 	and.w	r3, r3, #8
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d036      	beq.n	8011134 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	695b      	ldr	r3, [r3, #20]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d019      	beq.n	8011102 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80110ce:	4b56      	ldr	r3, [pc, #344]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 80110d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110d2:	4a55      	ldr	r2, [pc, #340]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 80110d4:	f043 0301 	orr.w	r3, r3, #1
 80110d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80110da:	f7fe fee9 	bl	800feb0 <HAL_GetTick>
 80110de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80110e0:	e008      	b.n	80110f4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80110e2:	f7fe fee5 	bl	800feb0 <HAL_GetTick>
 80110e6:	4602      	mov	r2, r0
 80110e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ea:	1ad3      	subs	r3, r2, r3
 80110ec:	2b02      	cmp	r3, #2
 80110ee:	d901      	bls.n	80110f4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80110f0:	2303      	movs	r3, #3
 80110f2:	e219      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80110f4:	4b4c      	ldr	r3, [pc, #304]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 80110f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80110f8:	f003 0302 	and.w	r3, r3, #2
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d0f0      	beq.n	80110e2 <HAL_RCC_OscConfig+0x35e>
 8011100:	e018      	b.n	8011134 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011102:	4b49      	ldr	r3, [pc, #292]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011106:	4a48      	ldr	r2, [pc, #288]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011108:	f023 0301 	bic.w	r3, r3, #1
 801110c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801110e:	f7fe fecf 	bl	800feb0 <HAL_GetTick>
 8011112:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011114:	e008      	b.n	8011128 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8011116:	f7fe fecb 	bl	800feb0 <HAL_GetTick>
 801111a:	4602      	mov	r2, r0
 801111c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111e:	1ad3      	subs	r3, r2, r3
 8011120:	2b02      	cmp	r3, #2
 8011122:	d901      	bls.n	8011128 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8011124:	2303      	movs	r3, #3
 8011126:	e1ff      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011128:	4b3f      	ldr	r3, [pc, #252]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801112a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801112c:	f003 0302 	and.w	r3, r3, #2
 8011130:	2b00      	cmp	r3, #0
 8011132:	d1f0      	bne.n	8011116 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	f003 0320 	and.w	r3, r3, #32
 801113c:	2b00      	cmp	r3, #0
 801113e:	d036      	beq.n	80111ae <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	699b      	ldr	r3, [r3, #24]
 8011144:	2b00      	cmp	r3, #0
 8011146:	d019      	beq.n	801117c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8011148:	4b37      	ldr	r3, [pc, #220]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	4a36      	ldr	r2, [pc, #216]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801114e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8011152:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011154:	f7fe feac 	bl	800feb0 <HAL_GetTick>
 8011158:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801115a:	e008      	b.n	801116e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801115c:	f7fe fea8 	bl	800feb0 <HAL_GetTick>
 8011160:	4602      	mov	r2, r0
 8011162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011164:	1ad3      	subs	r3, r2, r3
 8011166:	2b02      	cmp	r3, #2
 8011168:	d901      	bls.n	801116e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801116a:	2303      	movs	r3, #3
 801116c:	e1dc      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801116e:	4b2e      	ldr	r3, [pc, #184]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011176:	2b00      	cmp	r3, #0
 8011178:	d0f0      	beq.n	801115c <HAL_RCC_OscConfig+0x3d8>
 801117a:	e018      	b.n	80111ae <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801117c:	4b2a      	ldr	r3, [pc, #168]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a29      	ldr	r2, [pc, #164]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011182:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011186:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8011188:	f7fe fe92 	bl	800feb0 <HAL_GetTick>
 801118c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801118e:	e008      	b.n	80111a2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011190:	f7fe fe8e 	bl	800feb0 <HAL_GetTick>
 8011194:	4602      	mov	r2, r0
 8011196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011198:	1ad3      	subs	r3, r2, r3
 801119a:	2b02      	cmp	r3, #2
 801119c:	d901      	bls.n	80111a2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801119e:	2303      	movs	r3, #3
 80111a0:	e1c2      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80111a2:	4b21      	ldr	r3, [pc, #132]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d1f0      	bne.n	8011190 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	f003 0304 	and.w	r3, r3, #4
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	f000 8086 	beq.w	80112c8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80111bc:	4b1b      	ldr	r3, [pc, #108]	; (801122c <HAL_RCC_OscConfig+0x4a8>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	4a1a      	ldr	r2, [pc, #104]	; (801122c <HAL_RCC_OscConfig+0x4a8>)
 80111c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80111c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80111c8:	f7fe fe72 	bl	800feb0 <HAL_GetTick>
 80111cc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80111ce:	e008      	b.n	80111e2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80111d0:	f7fe fe6e 	bl	800feb0 <HAL_GetTick>
 80111d4:	4602      	mov	r2, r0
 80111d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111d8:	1ad3      	subs	r3, r2, r3
 80111da:	2b64      	cmp	r3, #100	; 0x64
 80111dc:	d901      	bls.n	80111e2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80111de:	2303      	movs	r3, #3
 80111e0:	e1a2      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80111e2:	4b12      	ldr	r3, [pc, #72]	; (801122c <HAL_RCC_OscConfig+0x4a8>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d0f0      	beq.n	80111d0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	689b      	ldr	r3, [r3, #8]
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d106      	bne.n	8011204 <HAL_RCC_OscConfig+0x480>
 80111f6:	4b0c      	ldr	r3, [pc, #48]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 80111f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111fa:	4a0b      	ldr	r2, [pc, #44]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 80111fc:	f043 0301 	orr.w	r3, r3, #1
 8011200:	6713      	str	r3, [r2, #112]	; 0x70
 8011202:	e032      	b.n	801126a <HAL_RCC_OscConfig+0x4e6>
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	689b      	ldr	r3, [r3, #8]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d111      	bne.n	8011230 <HAL_RCC_OscConfig+0x4ac>
 801120c:	4b06      	ldr	r3, [pc, #24]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801120e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011210:	4a05      	ldr	r2, [pc, #20]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 8011212:	f023 0301 	bic.w	r3, r3, #1
 8011216:	6713      	str	r3, [r2, #112]	; 0x70
 8011218:	4b03      	ldr	r3, [pc, #12]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801121a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801121c:	4a02      	ldr	r2, [pc, #8]	; (8011228 <HAL_RCC_OscConfig+0x4a4>)
 801121e:	f023 0304 	bic.w	r3, r3, #4
 8011222:	6713      	str	r3, [r2, #112]	; 0x70
 8011224:	e021      	b.n	801126a <HAL_RCC_OscConfig+0x4e6>
 8011226:	bf00      	nop
 8011228:	58024400 	.word	0x58024400
 801122c:	58024800 	.word	0x58024800
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	689b      	ldr	r3, [r3, #8]
 8011234:	2b05      	cmp	r3, #5
 8011236:	d10c      	bne.n	8011252 <HAL_RCC_OscConfig+0x4ce>
 8011238:	4b83      	ldr	r3, [pc, #524]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801123a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801123c:	4a82      	ldr	r2, [pc, #520]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801123e:	f043 0304 	orr.w	r3, r3, #4
 8011242:	6713      	str	r3, [r2, #112]	; 0x70
 8011244:	4b80      	ldr	r3, [pc, #512]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011248:	4a7f      	ldr	r2, [pc, #508]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801124a:	f043 0301 	orr.w	r3, r3, #1
 801124e:	6713      	str	r3, [r2, #112]	; 0x70
 8011250:	e00b      	b.n	801126a <HAL_RCC_OscConfig+0x4e6>
 8011252:	4b7d      	ldr	r3, [pc, #500]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011256:	4a7c      	ldr	r2, [pc, #496]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011258:	f023 0301 	bic.w	r3, r3, #1
 801125c:	6713      	str	r3, [r2, #112]	; 0x70
 801125e:	4b7a      	ldr	r3, [pc, #488]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011262:	4a79      	ldr	r2, [pc, #484]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011264:	f023 0304 	bic.w	r3, r3, #4
 8011268:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	689b      	ldr	r3, [r3, #8]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d015      	beq.n	801129e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8011272:	f7fe fe1d 	bl	800feb0 <HAL_GetTick>
 8011276:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011278:	e00a      	b.n	8011290 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801127a:	f7fe fe19 	bl	800feb0 <HAL_GetTick>
 801127e:	4602      	mov	r2, r0
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	1ad3      	subs	r3, r2, r3
 8011284:	f241 3288 	movw	r2, #5000	; 0x1388
 8011288:	4293      	cmp	r3, r2
 801128a:	d901      	bls.n	8011290 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801128c:	2303      	movs	r3, #3
 801128e:	e14b      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011290:	4b6d      	ldr	r3, [pc, #436]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011294:	f003 0302 	and.w	r3, r3, #2
 8011298:	2b00      	cmp	r3, #0
 801129a:	d0ee      	beq.n	801127a <HAL_RCC_OscConfig+0x4f6>
 801129c:	e014      	b.n	80112c8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801129e:	f7fe fe07 	bl	800feb0 <HAL_GetTick>
 80112a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80112a4:	e00a      	b.n	80112bc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80112a6:	f7fe fe03 	bl	800feb0 <HAL_GetTick>
 80112aa:	4602      	mov	r2, r0
 80112ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ae:	1ad3      	subs	r3, r2, r3
 80112b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112b4:	4293      	cmp	r3, r2
 80112b6:	d901      	bls.n	80112bc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80112b8:	2303      	movs	r3, #3
 80112ba:	e135      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80112bc:	4b62      	ldr	r3, [pc, #392]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80112be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112c0:	f003 0302 	and.w	r3, r3, #2
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d1ee      	bne.n	80112a6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	f000 812a 	beq.w	8011526 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80112d2:	4b5d      	ldr	r3, [pc, #372]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80112d4:	691b      	ldr	r3, [r3, #16]
 80112d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112da:	2b18      	cmp	r3, #24
 80112dc:	f000 80ba 	beq.w	8011454 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e4:	2b02      	cmp	r3, #2
 80112e6:	f040 8095 	bne.w	8011414 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80112ea:	4b57      	ldr	r3, [pc, #348]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	4a56      	ldr	r2, [pc, #344]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80112f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80112f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80112f6:	f7fe fddb 	bl	800feb0 <HAL_GetTick>
 80112fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80112fc:	e008      	b.n	8011310 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80112fe:	f7fe fdd7 	bl	800feb0 <HAL_GetTick>
 8011302:	4602      	mov	r2, r0
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	2b02      	cmp	r3, #2
 801130a:	d901      	bls.n	8011310 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801130c:	2303      	movs	r3, #3
 801130e:	e10b      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011310:	4b4d      	ldr	r3, [pc, #308]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011312:	681b      	ldr	r3, [r3, #0]
 8011314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011318:	2b00      	cmp	r3, #0
 801131a:	d1f0      	bne.n	80112fe <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801131c:	4b4a      	ldr	r3, [pc, #296]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801131e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011320:	4b4a      	ldr	r3, [pc, #296]	; (801144c <HAL_RCC_OscConfig+0x6c8>)
 8011322:	4013      	ands	r3, r2
 8011324:	687a      	ldr	r2, [r7, #4]
 8011326:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801132c:	0112      	lsls	r2, r2, #4
 801132e:	430a      	orrs	r2, r1
 8011330:	4945      	ldr	r1, [pc, #276]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011332:	4313      	orrs	r3, r2
 8011334:	628b      	str	r3, [r1, #40]	; 0x28
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801133a:	3b01      	subs	r3, #1
 801133c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011344:	3b01      	subs	r3, #1
 8011346:	025b      	lsls	r3, r3, #9
 8011348:	b29b      	uxth	r3, r3
 801134a:	431a      	orrs	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011350:	3b01      	subs	r3, #1
 8011352:	041b      	lsls	r3, r3, #16
 8011354:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8011358:	431a      	orrs	r2, r3
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801135e:	3b01      	subs	r3, #1
 8011360:	061b      	lsls	r3, r3, #24
 8011362:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8011366:	4938      	ldr	r1, [pc, #224]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011368:	4313      	orrs	r3, r2
 801136a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801136c:	4b36      	ldr	r3, [pc, #216]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011370:	4a35      	ldr	r2, [pc, #212]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011372:	f023 0301 	bic.w	r3, r3, #1
 8011376:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011378:	4b33      	ldr	r3, [pc, #204]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801137a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801137c:	4b34      	ldr	r3, [pc, #208]	; (8011450 <HAL_RCC_OscConfig+0x6cc>)
 801137e:	4013      	ands	r3, r2
 8011380:	687a      	ldr	r2, [r7, #4]
 8011382:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011384:	00d2      	lsls	r2, r2, #3
 8011386:	4930      	ldr	r1, [pc, #192]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011388:	4313      	orrs	r3, r2
 801138a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801138c:	4b2e      	ldr	r3, [pc, #184]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011390:	f023 020c 	bic.w	r2, r3, #12
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011398:	492b      	ldr	r1, [pc, #172]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801139a:	4313      	orrs	r3, r2
 801139c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801139e:	4b2a      	ldr	r3, [pc, #168]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113a2:	f023 0202 	bic.w	r2, r3, #2
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113aa:	4927      	ldr	r1, [pc, #156]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113ac:	4313      	orrs	r3, r2
 80113ae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80113b0:	4b25      	ldr	r3, [pc, #148]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113b4:	4a24      	ldr	r2, [pc, #144]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80113ba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80113bc:	4b22      	ldr	r3, [pc, #136]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113c0:	4a21      	ldr	r2, [pc, #132]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80113c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80113c8:	4b1f      	ldr	r3, [pc, #124]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113cc:	4a1e      	ldr	r2, [pc, #120]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80113d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80113d4:	4b1c      	ldr	r3, [pc, #112]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d8:	4a1b      	ldr	r2, [pc, #108]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113da:	f043 0301 	orr.w	r3, r3, #1
 80113de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80113e0:	4b19      	ldr	r3, [pc, #100]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	4a18      	ldr	r2, [pc, #96]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 80113e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80113ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80113ec:	f7fe fd60 	bl	800feb0 <HAL_GetTick>
 80113f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80113f2:	e008      	b.n	8011406 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80113f4:	f7fe fd5c 	bl	800feb0 <HAL_GetTick>
 80113f8:	4602      	mov	r2, r0
 80113fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fc:	1ad3      	subs	r3, r2, r3
 80113fe:	2b02      	cmp	r3, #2
 8011400:	d901      	bls.n	8011406 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8011402:	2303      	movs	r3, #3
 8011404:	e090      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011406:	4b10      	ldr	r3, [pc, #64]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801140e:	2b00      	cmp	r3, #0
 8011410:	d0f0      	beq.n	80113f4 <HAL_RCC_OscConfig+0x670>
 8011412:	e088      	b.n	8011526 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011414:	4b0c      	ldr	r3, [pc, #48]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	4a0b      	ldr	r2, [pc, #44]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801141a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801141e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011420:	f7fe fd46 	bl	800feb0 <HAL_GetTick>
 8011424:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8011426:	e008      	b.n	801143a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8011428:	f7fe fd42 	bl	800feb0 <HAL_GetTick>
 801142c:	4602      	mov	r2, r0
 801142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	2b02      	cmp	r3, #2
 8011434:	d901      	bls.n	801143a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8011436:	2303      	movs	r3, #3
 8011438:	e076      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801143a:	4b03      	ldr	r3, [pc, #12]	; (8011448 <HAL_RCC_OscConfig+0x6c4>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1f0      	bne.n	8011428 <HAL_RCC_OscConfig+0x6a4>
 8011446:	e06e      	b.n	8011526 <HAL_RCC_OscConfig+0x7a2>
 8011448:	58024400 	.word	0x58024400
 801144c:	fffffc0c 	.word	0xfffffc0c
 8011450:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8011454:	4b36      	ldr	r3, [pc, #216]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 8011456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011458:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801145a:	4b35      	ldr	r3, [pc, #212]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 801145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011464:	2b01      	cmp	r3, #1
 8011466:	d031      	beq.n	80114cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	f003 0203 	and.w	r2, r3, #3
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8011472:	429a      	cmp	r2, r3
 8011474:	d12a      	bne.n	80114cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011476:	693b      	ldr	r3, [r7, #16]
 8011478:	091b      	lsrs	r3, r3, #4
 801147a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011482:	429a      	cmp	r2, r3
 8011484:	d122      	bne.n	80114cc <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011490:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8011492:	429a      	cmp	r2, r3
 8011494:	d11a      	bne.n	80114cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8011496:	68fb      	ldr	r3, [r7, #12]
 8011498:	0a5b      	lsrs	r3, r3, #9
 801149a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d111      	bne.n	80114cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	0c1b      	lsrs	r3, r3, #16
 80114ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d108      	bne.n	80114cc <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	0e1b      	lsrs	r3, r3, #24
 80114be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d001      	beq.n	80114d0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80114cc:	2301      	movs	r3, #1
 80114ce:	e02b      	b.n	8011528 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80114d0:	4b17      	ldr	r3, [pc, #92]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 80114d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114d4:	08db      	lsrs	r3, r3, #3
 80114d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80114da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80114e0:	693a      	ldr	r2, [r7, #16]
 80114e2:	429a      	cmp	r2, r3
 80114e4:	d01f      	beq.n	8011526 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80114e6:	4b12      	ldr	r3, [pc, #72]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 80114e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114ea:	4a11      	ldr	r2, [pc, #68]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 80114ec:	f023 0301 	bic.w	r3, r3, #1
 80114f0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80114f2:	f7fe fcdd 	bl	800feb0 <HAL_GetTick>
 80114f6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80114f8:	bf00      	nop
 80114fa:	f7fe fcd9 	bl	800feb0 <HAL_GetTick>
 80114fe:	4602      	mov	r2, r0
 8011500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011502:	4293      	cmp	r3, r2
 8011504:	d0f9      	beq.n	80114fa <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8011506:	4b0a      	ldr	r3, [pc, #40]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 8011508:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801150a:	4b0a      	ldr	r3, [pc, #40]	; (8011534 <HAL_RCC_OscConfig+0x7b0>)
 801150c:	4013      	ands	r3, r2
 801150e:	687a      	ldr	r2, [r7, #4]
 8011510:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8011512:	00d2      	lsls	r2, r2, #3
 8011514:	4906      	ldr	r1, [pc, #24]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 8011516:	4313      	orrs	r3, r2
 8011518:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801151a:	4b05      	ldr	r3, [pc, #20]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 801151c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801151e:	4a04      	ldr	r2, [pc, #16]	; (8011530 <HAL_RCC_OscConfig+0x7ac>)
 8011520:	f043 0301 	orr.w	r3, r3, #1
 8011524:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8011526:	2300      	movs	r3, #0
}
 8011528:	4618      	mov	r0, r3
 801152a:	3730      	adds	r7, #48	; 0x30
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}
 8011530:	58024400 	.word	0x58024400
 8011534:	ffff0007 	.word	0xffff0007

08011538 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011538:	b580      	push	{r7, lr}
 801153a:	b086      	sub	sp, #24
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d101      	bne.n	801154c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011548:	2301      	movs	r3, #1
 801154a:	e19c      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801154c:	4b8a      	ldr	r3, [pc, #552]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f003 030f 	and.w	r3, r3, #15
 8011554:	683a      	ldr	r2, [r7, #0]
 8011556:	429a      	cmp	r2, r3
 8011558:	d910      	bls.n	801157c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801155a:	4b87      	ldr	r3, [pc, #540]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f023 020f 	bic.w	r2, r3, #15
 8011562:	4985      	ldr	r1, [pc, #532]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 8011564:	683b      	ldr	r3, [r7, #0]
 8011566:	4313      	orrs	r3, r2
 8011568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801156a:	4b83      	ldr	r3, [pc, #524]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	f003 030f 	and.w	r3, r3, #15
 8011572:	683a      	ldr	r2, [r7, #0]
 8011574:	429a      	cmp	r2, r3
 8011576:	d001      	beq.n	801157c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8011578:	2301      	movs	r3, #1
 801157a:	e184      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	f003 0304 	and.w	r3, r3, #4
 8011584:	2b00      	cmp	r3, #0
 8011586:	d010      	beq.n	80115aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	691a      	ldr	r2, [r3, #16]
 801158c:	4b7b      	ldr	r3, [pc, #492]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 801158e:	699b      	ldr	r3, [r3, #24]
 8011590:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011594:	429a      	cmp	r2, r3
 8011596:	d908      	bls.n	80115aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8011598:	4b78      	ldr	r3, [pc, #480]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 801159a:	699b      	ldr	r3, [r3, #24]
 801159c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	691b      	ldr	r3, [r3, #16]
 80115a4:	4975      	ldr	r1, [pc, #468]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80115a6:	4313      	orrs	r3, r2
 80115a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	681b      	ldr	r3, [r3, #0]
 80115ae:	f003 0308 	and.w	r3, r3, #8
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d010      	beq.n	80115d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	695a      	ldr	r2, [r3, #20]
 80115ba:	4b70      	ldr	r3, [pc, #448]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80115bc:	69db      	ldr	r3, [r3, #28]
 80115be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80115c2:	429a      	cmp	r2, r3
 80115c4:	d908      	bls.n	80115d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80115c6:	4b6d      	ldr	r3, [pc, #436]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80115c8:	69db      	ldr	r3, [r3, #28]
 80115ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	695b      	ldr	r3, [r3, #20]
 80115d2:	496a      	ldr	r1, [pc, #424]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80115d4:	4313      	orrs	r3, r2
 80115d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	f003 0310 	and.w	r3, r3, #16
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d010      	beq.n	8011606 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	699a      	ldr	r2, [r3, #24]
 80115e8:	4b64      	ldr	r3, [pc, #400]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80115ea:	69db      	ldr	r3, [r3, #28]
 80115ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80115f0:	429a      	cmp	r2, r3
 80115f2:	d908      	bls.n	8011606 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80115f4:	4b61      	ldr	r3, [pc, #388]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80115f6:	69db      	ldr	r3, [r3, #28]
 80115f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	699b      	ldr	r3, [r3, #24]
 8011600:	495e      	ldr	r1, [pc, #376]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011602:	4313      	orrs	r3, r2
 8011604:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f003 0320 	and.w	r3, r3, #32
 801160e:	2b00      	cmp	r3, #0
 8011610:	d010      	beq.n	8011634 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	69da      	ldr	r2, [r3, #28]
 8011616:	4b59      	ldr	r3, [pc, #356]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011618:	6a1b      	ldr	r3, [r3, #32]
 801161a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801161e:	429a      	cmp	r2, r3
 8011620:	d908      	bls.n	8011634 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011622:	4b56      	ldr	r3, [pc, #344]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011624:	6a1b      	ldr	r3, [r3, #32]
 8011626:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	69db      	ldr	r3, [r3, #28]
 801162e:	4953      	ldr	r1, [pc, #332]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011630:	4313      	orrs	r3, r2
 8011632:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f003 0302 	and.w	r3, r3, #2
 801163c:	2b00      	cmp	r3, #0
 801163e:	d010      	beq.n	8011662 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	68da      	ldr	r2, [r3, #12]
 8011644:	4b4d      	ldr	r3, [pc, #308]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011646:	699b      	ldr	r3, [r3, #24]
 8011648:	f003 030f 	and.w	r3, r3, #15
 801164c:	429a      	cmp	r2, r3
 801164e:	d908      	bls.n	8011662 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011650:	4b4a      	ldr	r3, [pc, #296]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011652:	699b      	ldr	r3, [r3, #24]
 8011654:	f023 020f 	bic.w	r2, r3, #15
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	68db      	ldr	r3, [r3, #12]
 801165c:	4947      	ldr	r1, [pc, #284]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 801165e:	4313      	orrs	r3, r2
 8011660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	681b      	ldr	r3, [r3, #0]
 8011666:	f003 0301 	and.w	r3, r3, #1
 801166a:	2b00      	cmp	r3, #0
 801166c:	d055      	beq.n	801171a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801166e:	4b43      	ldr	r3, [pc, #268]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011670:	699b      	ldr	r3, [r3, #24]
 8011672:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	689b      	ldr	r3, [r3, #8]
 801167a:	4940      	ldr	r1, [pc, #256]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 801167c:	4313      	orrs	r3, r2
 801167e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	2b02      	cmp	r3, #2
 8011686:	d107      	bne.n	8011698 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011688:	4b3c      	ldr	r3, [pc, #240]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011690:	2b00      	cmp	r3, #0
 8011692:	d121      	bne.n	80116d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8011694:	2301      	movs	r3, #1
 8011696:	e0f6      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	685b      	ldr	r3, [r3, #4]
 801169c:	2b03      	cmp	r3, #3
 801169e:	d107      	bne.n	80116b0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80116a0:	4b36      	ldr	r3, [pc, #216]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80116a2:	681b      	ldr	r3, [r3, #0]
 80116a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d115      	bne.n	80116d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80116ac:	2301      	movs	r3, #1
 80116ae:	e0ea      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d107      	bne.n	80116c8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80116b8:	4b30      	ldr	r3, [pc, #192]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80116ba:	681b      	ldr	r3, [r3, #0]
 80116bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d109      	bne.n	80116d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80116c4:	2301      	movs	r3, #1
 80116c6:	e0de      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80116c8:	4b2c      	ldr	r3, [pc, #176]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	f003 0304 	and.w	r3, r3, #4
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d101      	bne.n	80116d8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80116d4:	2301      	movs	r3, #1
 80116d6:	e0d6      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80116d8:	4b28      	ldr	r3, [pc, #160]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80116da:	691b      	ldr	r3, [r3, #16]
 80116dc:	f023 0207 	bic.w	r2, r3, #7
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	4925      	ldr	r1, [pc, #148]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 80116e6:	4313      	orrs	r3, r2
 80116e8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80116ea:	f7fe fbe1 	bl	800feb0 <HAL_GetTick>
 80116ee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80116f0:	e00a      	b.n	8011708 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80116f2:	f7fe fbdd 	bl	800feb0 <HAL_GetTick>
 80116f6:	4602      	mov	r2, r0
 80116f8:	697b      	ldr	r3, [r7, #20]
 80116fa:	1ad3      	subs	r3, r2, r3
 80116fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011700:	4293      	cmp	r3, r2
 8011702:	d901      	bls.n	8011708 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8011704:	2303      	movs	r3, #3
 8011706:	e0be      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8011708:	4b1c      	ldr	r3, [pc, #112]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 801170a:	691b      	ldr	r3, [r3, #16]
 801170c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	00db      	lsls	r3, r3, #3
 8011716:	429a      	cmp	r2, r3
 8011718:	d1eb      	bne.n	80116f2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	f003 0302 	and.w	r3, r3, #2
 8011722:	2b00      	cmp	r3, #0
 8011724:	d010      	beq.n	8011748 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	68da      	ldr	r2, [r3, #12]
 801172a:	4b14      	ldr	r3, [pc, #80]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 801172c:	699b      	ldr	r3, [r3, #24]
 801172e:	f003 030f 	and.w	r3, r3, #15
 8011732:	429a      	cmp	r2, r3
 8011734:	d208      	bcs.n	8011748 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011736:	4b11      	ldr	r3, [pc, #68]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011738:	699b      	ldr	r3, [r3, #24]
 801173a:	f023 020f 	bic.w	r2, r3, #15
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	68db      	ldr	r3, [r3, #12]
 8011742:	490e      	ldr	r1, [pc, #56]	; (801177c <HAL_RCC_ClockConfig+0x244>)
 8011744:	4313      	orrs	r3, r2
 8011746:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8011748:	4b0b      	ldr	r3, [pc, #44]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 801174a:	681b      	ldr	r3, [r3, #0]
 801174c:	f003 030f 	and.w	r3, r3, #15
 8011750:	683a      	ldr	r2, [r7, #0]
 8011752:	429a      	cmp	r2, r3
 8011754:	d214      	bcs.n	8011780 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011756:	4b08      	ldr	r3, [pc, #32]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f023 020f 	bic.w	r2, r3, #15
 801175e:	4906      	ldr	r1, [pc, #24]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	4313      	orrs	r3, r2
 8011764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011766:	4b04      	ldr	r3, [pc, #16]	; (8011778 <HAL_RCC_ClockConfig+0x240>)
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	f003 030f 	and.w	r3, r3, #15
 801176e:	683a      	ldr	r2, [r7, #0]
 8011770:	429a      	cmp	r2, r3
 8011772:	d005      	beq.n	8011780 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8011774:	2301      	movs	r3, #1
 8011776:	e086      	b.n	8011886 <HAL_RCC_ClockConfig+0x34e>
 8011778:	52002000 	.word	0x52002000
 801177c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	f003 0304 	and.w	r3, r3, #4
 8011788:	2b00      	cmp	r3, #0
 801178a:	d010      	beq.n	80117ae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	691a      	ldr	r2, [r3, #16]
 8011790:	4b3f      	ldr	r3, [pc, #252]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 8011792:	699b      	ldr	r3, [r3, #24]
 8011794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011798:	429a      	cmp	r2, r3
 801179a:	d208      	bcs.n	80117ae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801179c:	4b3c      	ldr	r3, [pc, #240]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 801179e:	699b      	ldr	r3, [r3, #24]
 80117a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	691b      	ldr	r3, [r3, #16]
 80117a8:	4939      	ldr	r1, [pc, #228]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 80117aa:	4313      	orrs	r3, r2
 80117ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	f003 0308 	and.w	r3, r3, #8
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d010      	beq.n	80117dc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	695a      	ldr	r2, [r3, #20]
 80117be:	4b34      	ldr	r3, [pc, #208]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 80117c0:	69db      	ldr	r3, [r3, #28]
 80117c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d208      	bcs.n	80117dc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80117ca:	4b31      	ldr	r3, [pc, #196]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 80117cc:	69db      	ldr	r3, [r3, #28]
 80117ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	695b      	ldr	r3, [r3, #20]
 80117d6:	492e      	ldr	r1, [pc, #184]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 80117d8:	4313      	orrs	r3, r2
 80117da:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	f003 0310 	and.w	r3, r3, #16
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d010      	beq.n	801180a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	699a      	ldr	r2, [r3, #24]
 80117ec:	4b28      	ldr	r3, [pc, #160]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 80117ee:	69db      	ldr	r3, [r3, #28]
 80117f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d208      	bcs.n	801180a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80117f8:	4b25      	ldr	r3, [pc, #148]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 80117fa:	69db      	ldr	r3, [r3, #28]
 80117fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	699b      	ldr	r3, [r3, #24]
 8011804:	4922      	ldr	r1, [pc, #136]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 8011806:	4313      	orrs	r3, r2
 8011808:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	f003 0320 	and.w	r3, r3, #32
 8011812:	2b00      	cmp	r3, #0
 8011814:	d010      	beq.n	8011838 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	69da      	ldr	r2, [r3, #28]
 801181a:	4b1d      	ldr	r3, [pc, #116]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 801181c:	6a1b      	ldr	r3, [r3, #32]
 801181e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8011822:	429a      	cmp	r2, r3
 8011824:	d208      	bcs.n	8011838 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8011826:	4b1a      	ldr	r3, [pc, #104]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 8011828:	6a1b      	ldr	r3, [r3, #32]
 801182a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	69db      	ldr	r3, [r3, #28]
 8011832:	4917      	ldr	r1, [pc, #92]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 8011834:	4313      	orrs	r3, r2
 8011836:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8011838:	f000 f834 	bl	80118a4 <HAL_RCC_GetSysClockFreq>
 801183c:	4602      	mov	r2, r0
 801183e:	4b14      	ldr	r3, [pc, #80]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 8011840:	699b      	ldr	r3, [r3, #24]
 8011842:	0a1b      	lsrs	r3, r3, #8
 8011844:	f003 030f 	and.w	r3, r3, #15
 8011848:	4912      	ldr	r1, [pc, #72]	; (8011894 <HAL_RCC_ClockConfig+0x35c>)
 801184a:	5ccb      	ldrb	r3, [r1, r3]
 801184c:	f003 031f 	and.w	r3, r3, #31
 8011850:	fa22 f303 	lsr.w	r3, r2, r3
 8011854:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011856:	4b0e      	ldr	r3, [pc, #56]	; (8011890 <HAL_RCC_ClockConfig+0x358>)
 8011858:	699b      	ldr	r3, [r3, #24]
 801185a:	f003 030f 	and.w	r3, r3, #15
 801185e:	4a0d      	ldr	r2, [pc, #52]	; (8011894 <HAL_RCC_ClockConfig+0x35c>)
 8011860:	5cd3      	ldrb	r3, [r2, r3]
 8011862:	f003 031f 	and.w	r3, r3, #31
 8011866:	693a      	ldr	r2, [r7, #16]
 8011868:	fa22 f303 	lsr.w	r3, r2, r3
 801186c:	4a0a      	ldr	r2, [pc, #40]	; (8011898 <HAL_RCC_ClockConfig+0x360>)
 801186e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011870:	4a0a      	ldr	r2, [pc, #40]	; (801189c <HAL_RCC_ClockConfig+0x364>)
 8011872:	693b      	ldr	r3, [r7, #16]
 8011874:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8011876:	4b0a      	ldr	r3, [pc, #40]	; (80118a0 <HAL_RCC_ClockConfig+0x368>)
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe face 	bl	800fe1c <HAL_InitTick>
 8011880:	4603      	mov	r3, r0
 8011882:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8011884:	7bfb      	ldrb	r3, [r7, #15]
}
 8011886:	4618      	mov	r0, r3
 8011888:	3718      	adds	r7, #24
 801188a:	46bd      	mov	sp, r7
 801188c:	bd80      	pop	{r7, pc}
 801188e:	bf00      	nop
 8011890:	58024400 	.word	0x58024400
 8011894:	08019130 	.word	0x08019130
 8011898:	240002a8 	.word	0x240002a8
 801189c:	240002a4 	.word	0x240002a4
 80118a0:	240002ac 	.word	0x240002ac

080118a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b089      	sub	sp, #36	; 0x24
 80118a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80118aa:	4bb3      	ldr	r3, [pc, #716]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80118ac:	691b      	ldr	r3, [r3, #16]
 80118ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80118b2:	2b18      	cmp	r3, #24
 80118b4:	f200 8155 	bhi.w	8011b62 <HAL_RCC_GetSysClockFreq+0x2be>
 80118b8:	a201      	add	r2, pc, #4	; (adr r2, 80118c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80118ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80118be:	bf00      	nop
 80118c0:	08011925 	.word	0x08011925
 80118c4:	08011b63 	.word	0x08011b63
 80118c8:	08011b63 	.word	0x08011b63
 80118cc:	08011b63 	.word	0x08011b63
 80118d0:	08011b63 	.word	0x08011b63
 80118d4:	08011b63 	.word	0x08011b63
 80118d8:	08011b63 	.word	0x08011b63
 80118dc:	08011b63 	.word	0x08011b63
 80118e0:	0801194b 	.word	0x0801194b
 80118e4:	08011b63 	.word	0x08011b63
 80118e8:	08011b63 	.word	0x08011b63
 80118ec:	08011b63 	.word	0x08011b63
 80118f0:	08011b63 	.word	0x08011b63
 80118f4:	08011b63 	.word	0x08011b63
 80118f8:	08011b63 	.word	0x08011b63
 80118fc:	08011b63 	.word	0x08011b63
 8011900:	08011951 	.word	0x08011951
 8011904:	08011b63 	.word	0x08011b63
 8011908:	08011b63 	.word	0x08011b63
 801190c:	08011b63 	.word	0x08011b63
 8011910:	08011b63 	.word	0x08011b63
 8011914:	08011b63 	.word	0x08011b63
 8011918:	08011b63 	.word	0x08011b63
 801191c:	08011b63 	.word	0x08011b63
 8011920:	08011957 	.word	0x08011957
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011924:	4b94      	ldr	r3, [pc, #592]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f003 0320 	and.w	r3, r3, #32
 801192c:	2b00      	cmp	r3, #0
 801192e:	d009      	beq.n	8011944 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011930:	4b91      	ldr	r3, [pc, #580]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	08db      	lsrs	r3, r3, #3
 8011936:	f003 0303 	and.w	r3, r3, #3
 801193a:	4a90      	ldr	r2, [pc, #576]	; (8011b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801193c:	fa22 f303 	lsr.w	r3, r2, r3
 8011940:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8011942:	e111      	b.n	8011b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8011944:	4b8d      	ldr	r3, [pc, #564]	; (8011b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8011946:	61bb      	str	r3, [r7, #24]
      break;
 8011948:	e10e      	b.n	8011b68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801194a:	4b8d      	ldr	r3, [pc, #564]	; (8011b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801194c:	61bb      	str	r3, [r7, #24]
      break;
 801194e:	e10b      	b.n	8011b68 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8011950:	4b8c      	ldr	r3, [pc, #560]	; (8011b84 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8011952:	61bb      	str	r3, [r7, #24]
      break;
 8011954:	e108      	b.n	8011b68 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011956:	4b88      	ldr	r3, [pc, #544]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801195a:	f003 0303 	and.w	r3, r3, #3
 801195e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8011960:	4b85      	ldr	r3, [pc, #532]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011964:	091b      	lsrs	r3, r3, #4
 8011966:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801196a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801196c:	4b82      	ldr	r3, [pc, #520]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011970:	f003 0301 	and.w	r3, r3, #1
 8011974:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8011976:	4b80      	ldr	r3, [pc, #512]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801197a:	08db      	lsrs	r3, r3, #3
 801197c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011980:	68fa      	ldr	r2, [r7, #12]
 8011982:	fb02 f303 	mul.w	r3, r2, r3
 8011986:	ee07 3a90 	vmov	s15, r3
 801198a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801198e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	f000 80e1 	beq.w	8011b5c <HAL_RCC_GetSysClockFreq+0x2b8>
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	2b02      	cmp	r3, #2
 801199e:	f000 8083 	beq.w	8011aa8 <HAL_RCC_GetSysClockFreq+0x204>
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	2b02      	cmp	r3, #2
 80119a6:	f200 80a1 	bhi.w	8011aec <HAL_RCC_GetSysClockFreq+0x248>
 80119aa:	697b      	ldr	r3, [r7, #20]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d003      	beq.n	80119b8 <HAL_RCC_GetSysClockFreq+0x114>
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	2b01      	cmp	r3, #1
 80119b4:	d056      	beq.n	8011a64 <HAL_RCC_GetSysClockFreq+0x1c0>
 80119b6:	e099      	b.n	8011aec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80119b8:	4b6f      	ldr	r3, [pc, #444]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	f003 0320 	and.w	r3, r3, #32
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d02d      	beq.n	8011a20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80119c4:	4b6c      	ldr	r3, [pc, #432]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119c6:	681b      	ldr	r3, [r3, #0]
 80119c8:	08db      	lsrs	r3, r3, #3
 80119ca:	f003 0303 	and.w	r3, r3, #3
 80119ce:	4a6b      	ldr	r2, [pc, #428]	; (8011b7c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80119d0:	fa22 f303 	lsr.w	r3, r2, r3
 80119d4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	ee07 3a90 	vmov	s15, r3
 80119dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119e0:	693b      	ldr	r3, [r7, #16]
 80119e2:	ee07 3a90 	vmov	s15, r3
 80119e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80119ee:	4b62      	ldr	r3, [pc, #392]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80119f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80119f6:	ee07 3a90 	vmov	s15, r3
 80119fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80119fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8011b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8011a1e:	e087      	b.n	8011b30 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	ee07 3a90 	vmov	s15, r3
 8011a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 8011b8c <HAL_RCC_GetSysClockFreq+0x2e8>
 8011a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a32:	4b51      	ldr	r3, [pc, #324]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a3a:	ee07 3a90 	vmov	s15, r3
 8011a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8011b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011a62:	e065      	b.n	8011b30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011a64:	693b      	ldr	r3, [r7, #16]
 8011a66:	ee07 3a90 	vmov	s15, r3
 8011a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011a6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8011b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011a76:	4b40      	ldr	r3, [pc, #256]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011a7e:	ee07 3a90 	vmov	s15, r3
 8011a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8011a8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8011b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011aa6:	e043      	b.n	8011b30 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	ee07 3a90 	vmov	s15, r3
 8011aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011ab2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8011b94 <HAL_RCC_GetSysClockFreq+0x2f0>
 8011ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011aba:	4b2f      	ldr	r3, [pc, #188]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ac2:	ee07 3a90 	vmov	s15, r3
 8011ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8011ace:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8011b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011aea:	e021      	b.n	8011b30 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	ee07 3a90 	vmov	s15, r3
 8011af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011af6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8011b90 <HAL_RCC_GetSysClockFreq+0x2ec>
 8011afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011afe:	4b1e      	ldr	r3, [pc, #120]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b06:	ee07 3a90 	vmov	s15, r3
 8011b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8011b12:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8011b88 <HAL_RCC_GetSysClockFreq+0x2e4>
 8011b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8011b2e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8011b30:	4b11      	ldr	r3, [pc, #68]	; (8011b78 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8011b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b34:	0a5b      	lsrs	r3, r3, #9
 8011b36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b3a:	3301      	adds	r3, #1
 8011b3c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8011b3e:	683b      	ldr	r3, [r7, #0]
 8011b40:	ee07 3a90 	vmov	s15, r3
 8011b44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8011b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8011b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011b54:	ee17 3a90 	vmov	r3, s15
 8011b58:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8011b5a:	e005      	b.n	8011b68 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	61bb      	str	r3, [r7, #24]
      break;
 8011b60:	e002      	b.n	8011b68 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8011b62:	4b07      	ldr	r3, [pc, #28]	; (8011b80 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8011b64:	61bb      	str	r3, [r7, #24]
      break;
 8011b66:	bf00      	nop
  }

  return sysclockfreq;
 8011b68:	69bb      	ldr	r3, [r7, #24]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3724      	adds	r7, #36	; 0x24
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b74:	4770      	bx	lr
 8011b76:	bf00      	nop
 8011b78:	58024400 	.word	0x58024400
 8011b7c:	03d09000 	.word	0x03d09000
 8011b80:	003d0900 	.word	0x003d0900
 8011b84:	007a1200 	.word	0x007a1200
 8011b88:	46000000 	.word	0x46000000
 8011b8c:	4c742400 	.word	0x4c742400
 8011b90:	4a742400 	.word	0x4a742400
 8011b94:	4af42400 	.word	0x4af42400

08011b98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8011b9e:	f7ff fe81 	bl	80118a4 <HAL_RCC_GetSysClockFreq>
 8011ba2:	4602      	mov	r2, r0
 8011ba4:	4b10      	ldr	r3, [pc, #64]	; (8011be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8011ba6:	699b      	ldr	r3, [r3, #24]
 8011ba8:	0a1b      	lsrs	r3, r3, #8
 8011baa:	f003 030f 	and.w	r3, r3, #15
 8011bae:	490f      	ldr	r1, [pc, #60]	; (8011bec <HAL_RCC_GetHCLKFreq+0x54>)
 8011bb0:	5ccb      	ldrb	r3, [r1, r3]
 8011bb2:	f003 031f 	and.w	r3, r3, #31
 8011bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8011bba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8011bbc:	4b0a      	ldr	r3, [pc, #40]	; (8011be8 <HAL_RCC_GetHCLKFreq+0x50>)
 8011bbe:	699b      	ldr	r3, [r3, #24]
 8011bc0:	f003 030f 	and.w	r3, r3, #15
 8011bc4:	4a09      	ldr	r2, [pc, #36]	; (8011bec <HAL_RCC_GetHCLKFreq+0x54>)
 8011bc6:	5cd3      	ldrb	r3, [r2, r3]
 8011bc8:	f003 031f 	and.w	r3, r3, #31
 8011bcc:	687a      	ldr	r2, [r7, #4]
 8011bce:	fa22 f303 	lsr.w	r3, r2, r3
 8011bd2:	4a07      	ldr	r2, [pc, #28]	; (8011bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8011bd4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8011bd6:	4a07      	ldr	r2, [pc, #28]	; (8011bf4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8011bdc:	4b04      	ldr	r3, [pc, #16]	; (8011bf0 <HAL_RCC_GetHCLKFreq+0x58>)
 8011bde:	681b      	ldr	r3, [r3, #0]
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3708      	adds	r7, #8
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}
 8011be8:	58024400 	.word	0x58024400
 8011bec:	08019130 	.word	0x08019130
 8011bf0:	240002a8 	.word	0x240002a8
 8011bf4:	240002a4 	.word	0x240002a4

08011bf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8011bf8:	b580      	push	{r7, lr}
 8011bfa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8011bfc:	f7ff ffcc 	bl	8011b98 <HAL_RCC_GetHCLKFreq>
 8011c00:	4602      	mov	r2, r0
 8011c02:	4b06      	ldr	r3, [pc, #24]	; (8011c1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8011c04:	69db      	ldr	r3, [r3, #28]
 8011c06:	091b      	lsrs	r3, r3, #4
 8011c08:	f003 0307 	and.w	r3, r3, #7
 8011c0c:	4904      	ldr	r1, [pc, #16]	; (8011c20 <HAL_RCC_GetPCLK1Freq+0x28>)
 8011c0e:	5ccb      	ldrb	r3, [r1, r3]
 8011c10:	f003 031f 	and.w	r3, r3, #31
 8011c14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	bd80      	pop	{r7, pc}
 8011c1c:	58024400 	.word	0x58024400
 8011c20:	08019130 	.word	0x08019130

08011c24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8011c28:	f7ff ffb6 	bl	8011b98 <HAL_RCC_GetHCLKFreq>
 8011c2c:	4602      	mov	r2, r0
 8011c2e:	4b06      	ldr	r3, [pc, #24]	; (8011c48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8011c30:	69db      	ldr	r3, [r3, #28]
 8011c32:	0a1b      	lsrs	r3, r3, #8
 8011c34:	f003 0307 	and.w	r3, r3, #7
 8011c38:	4904      	ldr	r1, [pc, #16]	; (8011c4c <HAL_RCC_GetPCLK2Freq+0x28>)
 8011c3a:	5ccb      	ldrb	r3, [r1, r3]
 8011c3c:	f003 031f 	and.w	r3, r3, #31
 8011c40:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	bd80      	pop	{r7, pc}
 8011c48:	58024400 	.word	0x58024400
 8011c4c:	08019130 	.word	0x08019130

08011c50 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011c50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011c54:	b0c6      	sub	sp, #280	; 0x118
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8011c62:	2300      	movs	r3, #0
 8011c64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8011c68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c70:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8011c74:	2500      	movs	r5, #0
 8011c76:	ea54 0305 	orrs.w	r3, r4, r5
 8011c7a:	d049      	beq.n	8011d10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8011c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c82:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011c86:	d02f      	beq.n	8011ce8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8011c88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011c8c:	d828      	bhi.n	8011ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011c8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c92:	d01a      	beq.n	8011cca <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8011c94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011c98:	d822      	bhi.n	8011ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d003      	beq.n	8011ca6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8011c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ca2:	d007      	beq.n	8011cb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8011ca4:	e01c      	b.n	8011ce0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ca6:	4bab      	ldr	r3, [pc, #684]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011caa:	4aaa      	ldr	r2, [pc, #680]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011cb2:	e01a      	b.n	8011cea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cb8:	3308      	adds	r3, #8
 8011cba:	2102      	movs	r1, #2
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f001 fc25 	bl	801350c <RCCEx_PLL2_Config>
 8011cc2:	4603      	mov	r3, r0
 8011cc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011cc8:	e00f      	b.n	8011cea <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011cca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cce:	3328      	adds	r3, #40	; 0x28
 8011cd0:	2102      	movs	r1, #2
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f001 fccc 	bl	8013670 <RCCEx_PLL3_Config>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8011cde:	e004      	b.n	8011cea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011ce6:	e000      	b.n	8011cea <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8011ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011cea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d10a      	bne.n	8011d08 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8011cf2:	4b98      	ldr	r3, [pc, #608]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011cf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011cf6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8011cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011d00:	4a94      	ldr	r2, [pc, #592]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d02:	430b      	orrs	r3, r1
 8011d04:	6513      	str	r3, [r2, #80]	; 0x50
 8011d06:	e003      	b.n	8011d10 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011d0c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8011d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d18:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8011d1c:	f04f 0900 	mov.w	r9, #0
 8011d20:	ea58 0309 	orrs.w	r3, r8, r9
 8011d24:	d047      	beq.n	8011db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8011d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d2c:	2b04      	cmp	r3, #4
 8011d2e:	d82a      	bhi.n	8011d86 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8011d30:	a201      	add	r2, pc, #4	; (adr r2, 8011d38 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8011d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d36:	bf00      	nop
 8011d38:	08011d4d 	.word	0x08011d4d
 8011d3c:	08011d5b 	.word	0x08011d5b
 8011d40:	08011d71 	.word	0x08011d71
 8011d44:	08011d8f 	.word	0x08011d8f
 8011d48:	08011d8f 	.word	0x08011d8f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011d4c:	4b81      	ldr	r3, [pc, #516]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d50:	4a80      	ldr	r2, [pc, #512]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d58:	e01a      	b.n	8011d90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d5e:	3308      	adds	r3, #8
 8011d60:	2100      	movs	r1, #0
 8011d62:	4618      	mov	r0, r3
 8011d64:	f001 fbd2 	bl	801350c <RCCEx_PLL2_Config>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d6e:	e00f      	b.n	8011d90 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d74:	3328      	adds	r3, #40	; 0x28
 8011d76:	2100      	movs	r1, #0
 8011d78:	4618      	mov	r0, r3
 8011d7a:	f001 fc79 	bl	8013670 <RCCEx_PLL3_Config>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011d84:	e004      	b.n	8011d90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011d86:	2301      	movs	r3, #1
 8011d88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011d8c:	e000      	b.n	8011d90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8011d8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011d90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d10a      	bne.n	8011dae <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8011d98:	4b6e      	ldr	r3, [pc, #440]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d9c:	f023 0107 	bic.w	r1, r3, #7
 8011da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011da6:	4a6b      	ldr	r2, [pc, #428]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011da8:	430b      	orrs	r3, r1
 8011daa:	6513      	str	r3, [r2, #80]	; 0x50
 8011dac:	e003      	b.n	8011db6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011dae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011db2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8011db6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dbe:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8011dc2:	f04f 0b00 	mov.w	fp, #0
 8011dc6:	ea5a 030b 	orrs.w	r3, sl, fp
 8011dca:	d05b      	beq.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8011dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dd0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011dd4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8011dd8:	d03b      	beq.n	8011e52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8011dda:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8011dde:	d834      	bhi.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011de0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011de4:	d037      	beq.n	8011e56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8011de6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011dea:	d82e      	bhi.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011dec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011df0:	d033      	beq.n	8011e5a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8011df2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011df6:	d828      	bhi.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011dfc:	d01a      	beq.n	8011e34 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8011dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011e02:	d822      	bhi.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d003      	beq.n	8011e10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8011e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011e0c:	d007      	beq.n	8011e1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8011e0e:	e01c      	b.n	8011e4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011e10:	4b50      	ldr	r3, [pc, #320]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e14:	4a4f      	ldr	r2, [pc, #316]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011e1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e1c:	e01e      	b.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e22:	3308      	adds	r3, #8
 8011e24:	2100      	movs	r1, #0
 8011e26:	4618      	mov	r0, r3
 8011e28:	f001 fb70 	bl	801350c <RCCEx_PLL2_Config>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011e32:	e013      	b.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e38:	3328      	adds	r3, #40	; 0x28
 8011e3a:	2100      	movs	r1, #0
 8011e3c:	4618      	mov	r0, r3
 8011e3e:	f001 fc17 	bl	8013670 <RCCEx_PLL3_Config>
 8011e42:	4603      	mov	r3, r0
 8011e44:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011e48:	e008      	b.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011e50:	e004      	b.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011e52:	bf00      	nop
 8011e54:	e002      	b.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011e56:	bf00      	nop
 8011e58:	e000      	b.n	8011e5c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8011e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d10b      	bne.n	8011e7c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8011e64:	4b3b      	ldr	r3, [pc, #236]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e68:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8011e6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e70:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011e74:	4a37      	ldr	r2, [pc, #220]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011e76:	430b      	orrs	r3, r1
 8011e78:	6593      	str	r3, [r2, #88]	; 0x58
 8011e7a:	e003      	b.n	8011e84 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011e80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8011e84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8011e90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8011e94:	2300      	movs	r3, #0
 8011e96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011e9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	4313      	orrs	r3, r2
 8011ea2:	d05d      	beq.n	8011f60 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8011ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ea8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011eac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8011eb0:	d03b      	beq.n	8011f2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8011eb2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8011eb6:	d834      	bhi.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011eb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011ebc:	d037      	beq.n	8011f2e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8011ebe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011ec2:	d82e      	bhi.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ec4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011ec8:	d033      	beq.n	8011f32 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8011eca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011ece:	d828      	bhi.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011ed0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011ed4:	d01a      	beq.n	8011f0c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8011ed6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011eda:	d822      	bhi.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d003      	beq.n	8011ee8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8011ee0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8011ee4:	d007      	beq.n	8011ef6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8011ee6:	e01c      	b.n	8011f22 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ee8:	4b1a      	ldr	r3, [pc, #104]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eec:	4a19      	ldr	r2, [pc, #100]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ef2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011ef4:	e01e      	b.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011efa:	3308      	adds	r3, #8
 8011efc:	2100      	movs	r1, #0
 8011efe:	4618      	mov	r0, r3
 8011f00:	f001 fb04 	bl	801350c <RCCEx_PLL2_Config>
 8011f04:	4603      	mov	r3, r0
 8011f06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8011f0a:	e013      	b.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f10:	3328      	adds	r3, #40	; 0x28
 8011f12:	2100      	movs	r1, #0
 8011f14:	4618      	mov	r0, r3
 8011f16:	f001 fbab 	bl	8013670 <RCCEx_PLL3_Config>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8011f20:	e008      	b.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8011f22:	2301      	movs	r3, #1
 8011f24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011f28:	e004      	b.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011f2a:	bf00      	nop
 8011f2c:	e002      	b.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011f2e:	bf00      	nop
 8011f30:	e000      	b.n	8011f34 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8011f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011f34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10d      	bne.n	8011f58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8011f3c:	4b05      	ldr	r3, [pc, #20]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011f40:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8011f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f48:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8011f4c:	4a01      	ldr	r2, [pc, #4]	; (8011f54 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8011f4e:	430b      	orrs	r3, r1
 8011f50:	6593      	str	r3, [r2, #88]	; 0x58
 8011f52:	e005      	b.n	8011f60 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8011f54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011f58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011f5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8011f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8011f6c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8011f70:	2300      	movs	r3, #0
 8011f72:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8011f76:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8011f7a:	460b      	mov	r3, r1
 8011f7c:	4313      	orrs	r3, r2
 8011f7e:	d03a      	beq.n	8011ff6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8011f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f86:	2b30      	cmp	r3, #48	; 0x30
 8011f88:	d01f      	beq.n	8011fca <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8011f8a:	2b30      	cmp	r3, #48	; 0x30
 8011f8c:	d819      	bhi.n	8011fc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011f8e:	2b20      	cmp	r3, #32
 8011f90:	d00c      	beq.n	8011fac <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8011f92:	2b20      	cmp	r3, #32
 8011f94:	d815      	bhi.n	8011fc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d019      	beq.n	8011fce <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8011f9a:	2b10      	cmp	r3, #16
 8011f9c:	d111      	bne.n	8011fc2 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011f9e:	4baa      	ldr	r3, [pc, #680]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fa2:	4aa9      	ldr	r2, [pc, #676]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011fa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011faa:	e011      	b.n	8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fb0:	3308      	adds	r3, #8
 8011fb2:	2102      	movs	r1, #2
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f001 faa9 	bl	801350c <RCCEx_PLL2_Config>
 8011fba:	4603      	mov	r3, r0
 8011fbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8011fc0:	e006      	b.n	8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011fc2:	2301      	movs	r3, #1
 8011fc4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011fc8:	e002      	b.n	8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011fca:	bf00      	nop
 8011fcc:	e000      	b.n	8011fd0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8011fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011fd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d10a      	bne.n	8011fee <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8011fd8:	4b9b      	ldr	r3, [pc, #620]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fdc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8011fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011fe6:	4a98      	ldr	r2, [pc, #608]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011fe8:	430b      	orrs	r3, r1
 8011fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011fec:	e003      	b.n	8011ff6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011fee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011ff2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8011ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8012002:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012006:	2300      	movs	r3, #0
 8012008:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801200c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8012010:	460b      	mov	r3, r1
 8012012:	4313      	orrs	r3, r2
 8012014:	d051      	beq.n	80120ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8012016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801201a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801201c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012020:	d035      	beq.n	801208e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8012022:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012026:	d82e      	bhi.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012028:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801202c:	d031      	beq.n	8012092 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801202e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012032:	d828      	bhi.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012034:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012038:	d01a      	beq.n	8012070 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801203a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801203e:	d822      	bhi.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8012040:	2b00      	cmp	r3, #0
 8012042:	d003      	beq.n	801204c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8012044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012048:	d007      	beq.n	801205a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801204a:	e01c      	b.n	8012086 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801204c:	4b7e      	ldr	r3, [pc, #504]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012050:	4a7d      	ldr	r2, [pc, #500]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012052:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012056:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012058:	e01c      	b.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801205a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801205e:	3308      	adds	r3, #8
 8012060:	2100      	movs	r1, #0
 8012062:	4618      	mov	r0, r3
 8012064:	f001 fa52 	bl	801350c <RCCEx_PLL2_Config>
 8012068:	4603      	mov	r3, r0
 801206a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801206e:	e011      	b.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012074:	3328      	adds	r3, #40	; 0x28
 8012076:	2100      	movs	r1, #0
 8012078:	4618      	mov	r0, r3
 801207a:	f001 faf9 	bl	8013670 <RCCEx_PLL3_Config>
 801207e:	4603      	mov	r3, r0
 8012080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8012084:	e006      	b.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012086:	2301      	movs	r3, #1
 8012088:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801208c:	e002      	b.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801208e:	bf00      	nop
 8012090:	e000      	b.n	8012094 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8012092:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012098:	2b00      	cmp	r3, #0
 801209a:	d10a      	bne.n	80120b2 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801209c:	4b6a      	ldr	r3, [pc, #424]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801209e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80120a0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80120a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80120aa:	4a67      	ldr	r2, [pc, #412]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80120ac:	430b      	orrs	r3, r1
 80120ae:	6513      	str	r3, [r2, #80]	; 0x50
 80120b0:	e003      	b.n	80120ba <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80120b2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80120b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80120ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80120c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80120ca:	2300      	movs	r3, #0
 80120cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80120d0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80120d4:	460b      	mov	r3, r1
 80120d6:	4313      	orrs	r3, r2
 80120d8:	d053      	beq.n	8012182 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80120da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80120de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80120e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80120e4:	d033      	beq.n	801214e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80120e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80120ea:	d82c      	bhi.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80120ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80120f0:	d02f      	beq.n	8012152 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80120f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80120f6:	d826      	bhi.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80120f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80120fc:	d02b      	beq.n	8012156 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80120fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8012102:	d820      	bhi.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012108:	d012      	beq.n	8012130 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801210a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801210e:	d81a      	bhi.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8012110:	2b00      	cmp	r3, #0
 8012112:	d022      	beq.n	801215a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8012114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012118:	d115      	bne.n	8012146 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801211a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801211e:	3308      	adds	r3, #8
 8012120:	2101      	movs	r1, #1
 8012122:	4618      	mov	r0, r3
 8012124:	f001 f9f2 	bl	801350c <RCCEx_PLL2_Config>
 8012128:	4603      	mov	r3, r0
 801212a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801212e:	e015      	b.n	801215c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012130:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012134:	3328      	adds	r3, #40	; 0x28
 8012136:	2101      	movs	r1, #1
 8012138:	4618      	mov	r0, r3
 801213a:	f001 fa99 	bl	8013670 <RCCEx_PLL3_Config>
 801213e:	4603      	mov	r3, r0
 8012140:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8012144:	e00a      	b.n	801215c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012146:	2301      	movs	r3, #1
 8012148:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801214c:	e006      	b.n	801215c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801214e:	bf00      	nop
 8012150:	e004      	b.n	801215c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012152:	bf00      	nop
 8012154:	e002      	b.n	801215c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8012156:	bf00      	nop
 8012158:	e000      	b.n	801215c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801215a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801215c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012160:	2b00      	cmp	r3, #0
 8012162:	d10a      	bne.n	801217a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8012164:	4b38      	ldr	r3, [pc, #224]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012168:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801216c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012172:	4a35      	ldr	r2, [pc, #212]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012174:	430b      	orrs	r3, r1
 8012176:	6513      	str	r3, [r2, #80]	; 0x50
 8012178:	e003      	b.n	8012182 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801217a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801217e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8012182:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801218e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012192:	2300      	movs	r3, #0
 8012194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8012198:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801219c:	460b      	mov	r3, r1
 801219e:	4313      	orrs	r3, r2
 80121a0:	d058      	beq.n	8012254 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80121a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80121aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80121ae:	d033      	beq.n	8012218 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80121b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80121b4:	d82c      	bhi.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121ba:	d02f      	beq.n	801221c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80121bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121c0:	d826      	bhi.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80121c6:	d02b      	beq.n	8012220 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80121c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80121cc:	d820      	bhi.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121d2:	d012      	beq.n	80121fa <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80121d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80121d8:	d81a      	bhi.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d022      	beq.n	8012224 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80121de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80121e2:	d115      	bne.n	8012210 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80121e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121e8:	3308      	adds	r3, #8
 80121ea:	2101      	movs	r1, #1
 80121ec:	4618      	mov	r0, r3
 80121ee:	f001 f98d 	bl	801350c <RCCEx_PLL2_Config>
 80121f2:	4603      	mov	r3, r0
 80121f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80121f8:	e015      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80121fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80121fe:	3328      	adds	r3, #40	; 0x28
 8012200:	2101      	movs	r1, #1
 8012202:	4618      	mov	r0, r3
 8012204:	f001 fa34 	bl	8013670 <RCCEx_PLL3_Config>
 8012208:	4603      	mov	r3, r0
 801220a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801220e:	e00a      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8012210:	2301      	movs	r3, #1
 8012212:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8012216:	e006      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012218:	bf00      	nop
 801221a:	e004      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801221c:	bf00      	nop
 801221e:	e002      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012220:	bf00      	nop
 8012222:	e000      	b.n	8012226 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8012224:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012226:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801222a:	2b00      	cmp	r3, #0
 801222c:	d10e      	bne.n	801224c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801222e:	4b06      	ldr	r3, [pc, #24]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012232:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8012236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801223a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801223e:	4a02      	ldr	r2, [pc, #8]	; (8012248 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8012240:	430b      	orrs	r3, r1
 8012242:	6593      	str	r3, [r2, #88]	; 0x58
 8012244:	e006      	b.n	8012254 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8012246:	bf00      	nop
 8012248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801224c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012250:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8012254:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8012260:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012264:	2300      	movs	r3, #0
 8012266:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801226a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801226e:	460b      	mov	r3, r1
 8012270:	4313      	orrs	r3, r2
 8012272:	d037      	beq.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8012274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801227a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801227e:	d00e      	beq.n	801229e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8012280:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012284:	d816      	bhi.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8012286:	2b00      	cmp	r3, #0
 8012288:	d018      	beq.n	80122bc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801228a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801228e:	d111      	bne.n	80122b4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012290:	4bc4      	ldr	r3, [pc, #784]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012294:	4ac3      	ldr	r2, [pc, #780]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801229a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801229c:	e00f      	b.n	80122be <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801229e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122a2:	3308      	adds	r3, #8
 80122a4:	2101      	movs	r1, #1
 80122a6:	4618      	mov	r0, r3
 80122a8:	f001 f930 	bl	801350c <RCCEx_PLL2_Config>
 80122ac:	4603      	mov	r3, r0
 80122ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80122b2:	e004      	b.n	80122be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80122b4:	2301      	movs	r3, #1
 80122b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80122ba:	e000      	b.n	80122be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80122bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80122be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d10a      	bne.n	80122dc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80122c6:	4bb7      	ldr	r3, [pc, #732]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80122ca:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80122ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122d4:	4ab3      	ldr	r2, [pc, #716]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80122d6:	430b      	orrs	r3, r1
 80122d8:	6513      	str	r3, [r2, #80]	; 0x50
 80122da:	e003      	b.n	80122e4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80122dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80122e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80122e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122ec:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80122f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80122f4:	2300      	movs	r3, #0
 80122f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80122fa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80122fe:	460b      	mov	r3, r1
 8012300:	4313      	orrs	r3, r2
 8012302:	d039      	beq.n	8012378 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8012304:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801230a:	2b03      	cmp	r3, #3
 801230c:	d81c      	bhi.n	8012348 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801230e:	a201      	add	r2, pc, #4	; (adr r2, 8012314 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8012310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012314:	08012351 	.word	0x08012351
 8012318:	08012325 	.word	0x08012325
 801231c:	08012333 	.word	0x08012333
 8012320:	08012351 	.word	0x08012351
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012324:	4b9f      	ldr	r3, [pc, #636]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012328:	4a9e      	ldr	r2, [pc, #632]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801232a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801232e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012330:	e00f      	b.n	8012352 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012336:	3308      	adds	r3, #8
 8012338:	2102      	movs	r1, #2
 801233a:	4618      	mov	r0, r3
 801233c:	f001 f8e6 	bl	801350c <RCCEx_PLL2_Config>
 8012340:	4603      	mov	r3, r0
 8012342:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8012346:	e004      	b.n	8012352 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8012348:	2301      	movs	r3, #1
 801234a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801234e:	e000      	b.n	8012352 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8012350:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012356:	2b00      	cmp	r3, #0
 8012358:	d10a      	bne.n	8012370 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801235a:	4b92      	ldr	r3, [pc, #584]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801235e:	f023 0103 	bic.w	r1, r3, #3
 8012362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012366:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012368:	4a8e      	ldr	r2, [pc, #568]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801236a:	430b      	orrs	r3, r1
 801236c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801236e:	e003      	b.n	8012378 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012370:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012374:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012378:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801237c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012380:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8012384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012388:	2300      	movs	r3, #0
 801238a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801238e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012392:	460b      	mov	r3, r1
 8012394:	4313      	orrs	r3, r2
 8012396:	f000 8099 	beq.w	80124cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801239a:	4b83      	ldr	r3, [pc, #524]	; (80125a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4a82      	ldr	r2, [pc, #520]	; (80125a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80123a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80123a4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80123a6:	f7fd fd83 	bl	800feb0 <HAL_GetTick>
 80123aa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80123ae:	e00b      	b.n	80123c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80123b0:	f7fd fd7e 	bl	800feb0 <HAL_GetTick>
 80123b4:	4602      	mov	r2, r0
 80123b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80123ba:	1ad3      	subs	r3, r2, r3
 80123bc:	2b64      	cmp	r3, #100	; 0x64
 80123be:	d903      	bls.n	80123c8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80123c0:	2303      	movs	r3, #3
 80123c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80123c6:	e005      	b.n	80123d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80123c8:	4b77      	ldr	r3, [pc, #476]	; (80125a8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d0ed      	beq.n	80123b0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80123d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d173      	bne.n	80124c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80123dc:	4b71      	ldr	r3, [pc, #452]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80123e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80123e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80123e8:	4053      	eors	r3, r2
 80123ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d015      	beq.n	801241e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80123f2:	4b6c      	ldr	r3, [pc, #432]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80123f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80123fa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80123fe:	4b69      	ldr	r3, [pc, #420]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012402:	4a68      	ldr	r2, [pc, #416]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8012408:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801240a:	4b66      	ldr	r3, [pc, #408]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801240c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801240e:	4a65      	ldr	r2, [pc, #404]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8012414:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8012416:	4a63      	ldr	r2, [pc, #396]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012418:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801241c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801241e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012422:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801242a:	d118      	bne.n	801245e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801242c:	f7fd fd40 	bl	800feb0 <HAL_GetTick>
 8012430:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012434:	e00d      	b.n	8012452 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8012436:	f7fd fd3b 	bl	800feb0 <HAL_GetTick>
 801243a:	4602      	mov	r2, r0
 801243c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8012440:	1ad2      	subs	r2, r2, r3
 8012442:	f241 3388 	movw	r3, #5000	; 0x1388
 8012446:	429a      	cmp	r2, r3
 8012448:	d903      	bls.n	8012452 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801244a:	2303      	movs	r3, #3
 801244c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 8012450:	e005      	b.n	801245e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012452:	4b54      	ldr	r3, [pc, #336]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012456:	f003 0302 	and.w	r3, r3, #2
 801245a:	2b00      	cmp	r3, #0
 801245c:	d0eb      	beq.n	8012436 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801245e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012462:	2b00      	cmp	r3, #0
 8012464:	d129      	bne.n	80124ba <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801246a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801246e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012476:	d10e      	bne.n	8012496 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8012478:	4b4a      	ldr	r3, [pc, #296]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801247a:	691b      	ldr	r3, [r3, #16]
 801247c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8012480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012484:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8012488:	091a      	lsrs	r2, r3, #4
 801248a:	4b48      	ldr	r3, [pc, #288]	; (80125ac <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801248c:	4013      	ands	r3, r2
 801248e:	4a45      	ldr	r2, [pc, #276]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012490:	430b      	orrs	r3, r1
 8012492:	6113      	str	r3, [r2, #16]
 8012494:	e005      	b.n	80124a2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8012496:	4b43      	ldr	r3, [pc, #268]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8012498:	691b      	ldr	r3, [r3, #16]
 801249a:	4a42      	ldr	r2, [pc, #264]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801249c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80124a0:	6113      	str	r3, [r2, #16]
 80124a2:	4b40      	ldr	r3, [pc, #256]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124a4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80124a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124aa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80124ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80124b2:	4a3c      	ldr	r2, [pc, #240]	; (80125a4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80124b4:	430b      	orrs	r3, r1
 80124b6:	6713      	str	r3, [r2, #112]	; 0x70
 80124b8:	e008      	b.n	80124cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80124ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80124be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80124c2:	e003      	b.n	80124cc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80124c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80124c8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80124cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d4:	f002 0301 	and.w	r3, r2, #1
 80124d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80124dc:	2300      	movs	r3, #0
 80124de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80124e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80124e6:	460b      	mov	r3, r1
 80124e8:	4313      	orrs	r3, r2
 80124ea:	f000 808f 	beq.w	801260c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80124ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80124f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124f4:	2b28      	cmp	r3, #40	; 0x28
 80124f6:	d871      	bhi.n	80125dc <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80124f8:	a201      	add	r2, pc, #4	; (adr r2, 8012500 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80124fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80124fe:	bf00      	nop
 8012500:	080125e5 	.word	0x080125e5
 8012504:	080125dd 	.word	0x080125dd
 8012508:	080125dd 	.word	0x080125dd
 801250c:	080125dd 	.word	0x080125dd
 8012510:	080125dd 	.word	0x080125dd
 8012514:	080125dd 	.word	0x080125dd
 8012518:	080125dd 	.word	0x080125dd
 801251c:	080125dd 	.word	0x080125dd
 8012520:	080125b1 	.word	0x080125b1
 8012524:	080125dd 	.word	0x080125dd
 8012528:	080125dd 	.word	0x080125dd
 801252c:	080125dd 	.word	0x080125dd
 8012530:	080125dd 	.word	0x080125dd
 8012534:	080125dd 	.word	0x080125dd
 8012538:	080125dd 	.word	0x080125dd
 801253c:	080125dd 	.word	0x080125dd
 8012540:	080125c7 	.word	0x080125c7
 8012544:	080125dd 	.word	0x080125dd
 8012548:	080125dd 	.word	0x080125dd
 801254c:	080125dd 	.word	0x080125dd
 8012550:	080125dd 	.word	0x080125dd
 8012554:	080125dd 	.word	0x080125dd
 8012558:	080125dd 	.word	0x080125dd
 801255c:	080125dd 	.word	0x080125dd
 8012560:	080125e5 	.word	0x080125e5
 8012564:	080125dd 	.word	0x080125dd
 8012568:	080125dd 	.word	0x080125dd
 801256c:	080125dd 	.word	0x080125dd
 8012570:	080125dd 	.word	0x080125dd
 8012574:	080125dd 	.word	0x080125dd
 8012578:	080125dd 	.word	0x080125dd
 801257c:	080125dd 	.word	0x080125dd
 8012580:	080125e5 	.word	0x080125e5
 8012584:	080125dd 	.word	0x080125dd
 8012588:	080125dd 	.word	0x080125dd
 801258c:	080125dd 	.word	0x080125dd
 8012590:	080125dd 	.word	0x080125dd
 8012594:	080125dd 	.word	0x080125dd
 8012598:	080125dd 	.word	0x080125dd
 801259c:	080125dd 	.word	0x080125dd
 80125a0:	080125e5 	.word	0x080125e5
 80125a4:	58024400 	.word	0x58024400
 80125a8:	58024800 	.word	0x58024800
 80125ac:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80125b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125b4:	3308      	adds	r3, #8
 80125b6:	2101      	movs	r1, #1
 80125b8:	4618      	mov	r0, r3
 80125ba:	f000 ffa7 	bl	801350c <RCCEx_PLL2_Config>
 80125be:	4603      	mov	r3, r0
 80125c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80125c4:	e00f      	b.n	80125e6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80125c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125ca:	3328      	adds	r3, #40	; 0x28
 80125cc:	2101      	movs	r1, #1
 80125ce:	4618      	mov	r0, r3
 80125d0:	f001 f84e 	bl	8013670 <RCCEx_PLL3_Config>
 80125d4:	4603      	mov	r3, r0
 80125d6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80125da:	e004      	b.n	80125e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80125dc:	2301      	movs	r3, #1
 80125de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80125e2:	e000      	b.n	80125e6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80125e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80125e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d10a      	bne.n	8012604 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80125ee:	4bbf      	ldr	r3, [pc, #764]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80125f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80125f2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80125f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80125fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80125fc:	4abb      	ldr	r2, [pc, #748]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80125fe:	430b      	orrs	r3, r1
 8012600:	6553      	str	r3, [r2, #84]	; 0x54
 8012602:	e003      	b.n	801260c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012604:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012608:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801260c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012614:	f002 0302 	and.w	r3, r2, #2
 8012618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801261c:	2300      	movs	r3, #0
 801261e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012622:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8012626:	460b      	mov	r3, r1
 8012628:	4313      	orrs	r3, r2
 801262a:	d041      	beq.n	80126b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801262c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012632:	2b05      	cmp	r3, #5
 8012634:	d824      	bhi.n	8012680 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8012636:	a201      	add	r2, pc, #4	; (adr r2, 801263c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8012638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801263c:	08012689 	.word	0x08012689
 8012640:	08012655 	.word	0x08012655
 8012644:	0801266b 	.word	0x0801266b
 8012648:	08012689 	.word	0x08012689
 801264c:	08012689 	.word	0x08012689
 8012650:	08012689 	.word	0x08012689
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012658:	3308      	adds	r3, #8
 801265a:	2101      	movs	r1, #1
 801265c:	4618      	mov	r0, r3
 801265e:	f000 ff55 	bl	801350c <RCCEx_PLL2_Config>
 8012662:	4603      	mov	r3, r0
 8012664:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8012668:	e00f      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801266a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801266e:	3328      	adds	r3, #40	; 0x28
 8012670:	2101      	movs	r1, #1
 8012672:	4618      	mov	r0, r3
 8012674:	f000 fffc 	bl	8013670 <RCCEx_PLL3_Config>
 8012678:	4603      	mov	r3, r0
 801267a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801267e:	e004      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012680:	2301      	movs	r3, #1
 8012682:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8012686:	e000      	b.n	801268a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8012688:	bf00      	nop
    }

    if (ret == HAL_OK)
 801268a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801268e:	2b00      	cmp	r3, #0
 8012690:	d10a      	bne.n	80126a8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8012692:	4b96      	ldr	r3, [pc, #600]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012696:	f023 0107 	bic.w	r1, r3, #7
 801269a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801269e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80126a0:	4a92      	ldr	r2, [pc, #584]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80126a2:	430b      	orrs	r3, r1
 80126a4:	6553      	str	r3, [r2, #84]	; 0x54
 80126a6:	e003      	b.n	80126b0 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80126a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80126ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80126b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126b8:	f002 0304 	and.w	r3, r2, #4
 80126bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80126c0:	2300      	movs	r3, #0
 80126c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80126c6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80126ca:	460b      	mov	r3, r1
 80126cc:	4313      	orrs	r3, r2
 80126ce:	d044      	beq.n	801275a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80126d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80126d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80126d8:	2b05      	cmp	r3, #5
 80126da:	d825      	bhi.n	8012728 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80126dc:	a201      	add	r2, pc, #4	; (adr r2, 80126e4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80126de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80126e2:	bf00      	nop
 80126e4:	08012731 	.word	0x08012731
 80126e8:	080126fd 	.word	0x080126fd
 80126ec:	08012713 	.word	0x08012713
 80126f0:	08012731 	.word	0x08012731
 80126f4:	08012731 	.word	0x08012731
 80126f8:	08012731 	.word	0x08012731
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80126fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012700:	3308      	adds	r3, #8
 8012702:	2101      	movs	r1, #1
 8012704:	4618      	mov	r0, r3
 8012706:	f000 ff01 	bl	801350c <RCCEx_PLL2_Config>
 801270a:	4603      	mov	r3, r0
 801270c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012710:	e00f      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012716:	3328      	adds	r3, #40	; 0x28
 8012718:	2101      	movs	r1, #1
 801271a:	4618      	mov	r0, r3
 801271c:	f000 ffa8 	bl	8013670 <RCCEx_PLL3_Config>
 8012720:	4603      	mov	r3, r0
 8012722:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8012726:	e004      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012728:	2301      	movs	r3, #1
 801272a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801272e:	e000      	b.n	8012732 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8012730:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012732:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012736:	2b00      	cmp	r3, #0
 8012738:	d10b      	bne.n	8012752 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801273a:	4b6c      	ldr	r3, [pc, #432]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801273e:	f023 0107 	bic.w	r1, r3, #7
 8012742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801274a:	4a68      	ldr	r2, [pc, #416]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801274c:	430b      	orrs	r3, r1
 801274e:	6593      	str	r3, [r2, #88]	; 0x58
 8012750:	e003      	b.n	801275a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012752:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012756:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801275a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801275e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012762:	f002 0320 	and.w	r3, r2, #32
 8012766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801276a:	2300      	movs	r3, #0
 801276c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8012770:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8012774:	460b      	mov	r3, r1
 8012776:	4313      	orrs	r3, r2
 8012778:	d055      	beq.n	8012826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801277a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801277e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012786:	d033      	beq.n	80127f0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8012788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801278c:	d82c      	bhi.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012792:	d02f      	beq.n	80127f4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8012794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012798:	d826      	bhi.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801279a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801279e:	d02b      	beq.n	80127f8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80127a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80127a4:	d820      	bhi.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80127a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80127aa:	d012      	beq.n	80127d2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80127ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80127b0:	d81a      	bhi.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d022      	beq.n	80127fc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80127b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80127ba:	d115      	bne.n	80127e8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80127bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127c0:	3308      	adds	r3, #8
 80127c2:	2100      	movs	r1, #0
 80127c4:	4618      	mov	r0, r3
 80127c6:	f000 fea1 	bl	801350c <RCCEx_PLL2_Config>
 80127ca:	4603      	mov	r3, r0
 80127cc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80127d0:	e015      	b.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80127d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80127d6:	3328      	adds	r3, #40	; 0x28
 80127d8:	2102      	movs	r1, #2
 80127da:	4618      	mov	r0, r3
 80127dc:	f000 ff48 	bl	8013670 <RCCEx_PLL3_Config>
 80127e0:	4603      	mov	r3, r0
 80127e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80127e6:	e00a      	b.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80127e8:	2301      	movs	r3, #1
 80127ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80127ee:	e006      	b.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80127f0:	bf00      	nop
 80127f2:	e004      	b.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80127f4:	bf00      	nop
 80127f6:	e002      	b.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80127f8:	bf00      	nop
 80127fa:	e000      	b.n	80127fe <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80127fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80127fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012802:	2b00      	cmp	r3, #0
 8012804:	d10b      	bne.n	801281e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8012806:	4b39      	ldr	r3, [pc, #228]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801280a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801280e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012812:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012816:	4a35      	ldr	r2, [pc, #212]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8012818:	430b      	orrs	r3, r1
 801281a:	6553      	str	r3, [r2, #84]	; 0x54
 801281c:	e003      	b.n	8012826 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801281e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012822:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8012826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801282e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8012832:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012836:	2300      	movs	r3, #0
 8012838:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801283c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8012840:	460b      	mov	r3, r1
 8012842:	4313      	orrs	r3, r2
 8012844:	d058      	beq.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8012846:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801284a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801284e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8012852:	d033      	beq.n	80128bc <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8012854:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8012858:	d82c      	bhi.n	80128b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801285a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801285e:	d02f      	beq.n	80128c0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8012860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012864:	d826      	bhi.n	80128b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012866:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801286a:	d02b      	beq.n	80128c4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801286c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8012870:	d820      	bhi.n	80128b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8012872:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012876:	d012      	beq.n	801289e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8012878:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801287c:	d81a      	bhi.n	80128b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801287e:	2b00      	cmp	r3, #0
 8012880:	d022      	beq.n	80128c8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8012882:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012886:	d115      	bne.n	80128b4 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801288c:	3308      	adds	r3, #8
 801288e:	2100      	movs	r1, #0
 8012890:	4618      	mov	r0, r3
 8012892:	f000 fe3b 	bl	801350c <RCCEx_PLL2_Config>
 8012896:	4603      	mov	r3, r0
 8012898:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801289c:	e015      	b.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801289e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128a2:	3328      	adds	r3, #40	; 0x28
 80128a4:	2102      	movs	r1, #2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f000 fee2 	bl	8013670 <RCCEx_PLL3_Config>
 80128ac:	4603      	mov	r3, r0
 80128ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80128b2:	e00a      	b.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80128b4:	2301      	movs	r3, #1
 80128b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80128ba:	e006      	b.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80128bc:	bf00      	nop
 80128be:	e004      	b.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80128c0:	bf00      	nop
 80128c2:	e002      	b.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80128c4:	bf00      	nop
 80128c6:	e000      	b.n	80128ca <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80128c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80128ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d10e      	bne.n	80128f0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80128d2:	4b06      	ldr	r3, [pc, #24]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80128d6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80128da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80128e2:	4a02      	ldr	r2, [pc, #8]	; (80128ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80128e4:	430b      	orrs	r3, r1
 80128e6:	6593      	str	r3, [r2, #88]	; 0x58
 80128e8:	e006      	b.n	80128f8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80128ea:	bf00      	nop
 80128ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80128f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80128f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80128f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80128fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012900:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8012904:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012908:	2300      	movs	r3, #0
 801290a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801290e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8012912:	460b      	mov	r3, r1
 8012914:	4313      	orrs	r3, r2
 8012916:	d055      	beq.n	80129c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8012918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801291c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8012920:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8012924:	d033      	beq.n	801298e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8012926:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801292a:	d82c      	bhi.n	8012986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801292c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012930:	d02f      	beq.n	8012992 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8012932:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012936:	d826      	bhi.n	8012986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012938:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801293c:	d02b      	beq.n	8012996 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801293e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8012942:	d820      	bhi.n	8012986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012944:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012948:	d012      	beq.n	8012970 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801294a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801294e:	d81a      	bhi.n	8012986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8012950:	2b00      	cmp	r3, #0
 8012952:	d022      	beq.n	801299a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8012954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012958:	d115      	bne.n	8012986 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801295a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801295e:	3308      	adds	r3, #8
 8012960:	2100      	movs	r1, #0
 8012962:	4618      	mov	r0, r3
 8012964:	f000 fdd2 	bl	801350c <RCCEx_PLL2_Config>
 8012968:	4603      	mov	r3, r0
 801296a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801296e:	e015      	b.n	801299c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012974:	3328      	adds	r3, #40	; 0x28
 8012976:	2102      	movs	r1, #2
 8012978:	4618      	mov	r0, r3
 801297a:	f000 fe79 	bl	8013670 <RCCEx_PLL3_Config>
 801297e:	4603      	mov	r3, r0
 8012980:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8012984:	e00a      	b.n	801299c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012986:	2301      	movs	r3, #1
 8012988:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801298c:	e006      	b.n	801299c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801298e:	bf00      	nop
 8012990:	e004      	b.n	801299c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012992:	bf00      	nop
 8012994:	e002      	b.n	801299c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8012996:	bf00      	nop
 8012998:	e000      	b.n	801299c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801299a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801299c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d10b      	bne.n	80129bc <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80129a4:	4ba0      	ldr	r3, [pc, #640]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80129a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129a8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80129ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80129b4:	4a9c      	ldr	r2, [pc, #624]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80129b6:	430b      	orrs	r3, r1
 80129b8:	6593      	str	r3, [r2, #88]	; 0x58
 80129ba:	e003      	b.n	80129c4 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80129bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80129c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80129c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129cc:	f002 0308 	and.w	r3, r2, #8
 80129d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80129d4:	2300      	movs	r3, #0
 80129d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80129da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80129de:	460b      	mov	r3, r1
 80129e0:	4313      	orrs	r3, r2
 80129e2:	d01e      	beq.n	8012a22 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80129e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80129ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129f0:	d10c      	bne.n	8012a0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80129f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80129f6:	3328      	adds	r3, #40	; 0x28
 80129f8:	2102      	movs	r1, #2
 80129fa:	4618      	mov	r0, r3
 80129fc:	f000 fe38 	bl	8013670 <RCCEx_PLL3_Config>
 8012a00:	4603      	mov	r3, r0
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d002      	beq.n	8012a0c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8012a06:	2301      	movs	r3, #1
 8012a08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8012a0c:	4b86      	ldr	r3, [pc, #536]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012a1c:	4a82      	ldr	r2, [pc, #520]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a1e:	430b      	orrs	r3, r1
 8012a20:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8012a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a2a:	f002 0310 	and.w	r3, r2, #16
 8012a2e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012a32:	2300      	movs	r3, #0
 8012a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012a38:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8012a3c:	460b      	mov	r3, r1
 8012a3e:	4313      	orrs	r3, r2
 8012a40:	d01e      	beq.n	8012a80 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8012a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012a4e:	d10c      	bne.n	8012a6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012a50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a54:	3328      	adds	r3, #40	; 0x28
 8012a56:	2102      	movs	r1, #2
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f000 fe09 	bl	8013670 <RCCEx_PLL3_Config>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d002      	beq.n	8012a6a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8012a64:	2301      	movs	r3, #1
 8012a66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8012a6a:	4b6f      	ldr	r3, [pc, #444]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012a6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8012a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8012a7a:	4a6b      	ldr	r2, [pc, #428]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012a7c:	430b      	orrs	r3, r1
 8012a7e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8012a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a88:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8012a8c:	67bb      	str	r3, [r7, #120]	; 0x78
 8012a8e:	2300      	movs	r3, #0
 8012a90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8012a92:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8012a96:	460b      	mov	r3, r1
 8012a98:	4313      	orrs	r3, r2
 8012a9a:	d03e      	beq.n	8012b1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8012a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012aa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012aa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012aa8:	d022      	beq.n	8012af0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8012aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8012aae:	d81b      	bhi.n	8012ae8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d003      	beq.n	8012abc <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8012ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012ab8:	d00b      	beq.n	8012ad2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8012aba:	e015      	b.n	8012ae8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ac0:	3308      	adds	r3, #8
 8012ac2:	2100      	movs	r1, #0
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f000 fd21 	bl	801350c <RCCEx_PLL2_Config>
 8012aca:	4603      	mov	r3, r0
 8012acc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012ad0:	e00f      	b.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012ad2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ad6:	3328      	adds	r3, #40	; 0x28
 8012ad8:	2102      	movs	r1, #2
 8012ada:	4618      	mov	r0, r3
 8012adc:	f000 fdc8 	bl	8013670 <RCCEx_PLL3_Config>
 8012ae0:	4603      	mov	r3, r0
 8012ae2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8012ae6:	e004      	b.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8012aee:	e000      	b.n	8012af2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8012af0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012af2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d10b      	bne.n	8012b12 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8012afa:	4b4b      	ldr	r3, [pc, #300]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012afe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8012b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8012b0a:	4a47      	ldr	r2, [pc, #284]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b0c:	430b      	orrs	r3, r1
 8012b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8012b10:	e003      	b.n	8012b1a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012b12:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012b16:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8012b1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b22:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8012b26:	673b      	str	r3, [r7, #112]	; 0x70
 8012b28:	2300      	movs	r3, #0
 8012b2a:	677b      	str	r3, [r7, #116]	; 0x74
 8012b2c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8012b30:	460b      	mov	r3, r1
 8012b32:	4313      	orrs	r3, r2
 8012b34:	d03b      	beq.n	8012bae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8012b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b3e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012b42:	d01f      	beq.n	8012b84 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8012b44:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8012b48:	d818      	bhi.n	8012b7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8012b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012b4e:	d003      	beq.n	8012b58 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8012b50:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b54:	d007      	beq.n	8012b66 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8012b56:	e011      	b.n	8012b7c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012b58:	4b33      	ldr	r3, [pc, #204]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b5c:	4a32      	ldr	r2, [pc, #200]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012b62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8012b64:	e00f      	b.n	8012b86 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b6a:	3328      	adds	r3, #40	; 0x28
 8012b6c:	2101      	movs	r1, #1
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f000 fd7e 	bl	8013670 <RCCEx_PLL3_Config>
 8012b74:	4603      	mov	r3, r0
 8012b76:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8012b7a:	e004      	b.n	8012b86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012b7c:	2301      	movs	r3, #1
 8012b7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8012b82:	e000      	b.n	8012b86 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8012b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012b86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d10b      	bne.n	8012ba6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8012b8e:	4b26      	ldr	r3, [pc, #152]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012b92:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8012b96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012b9e:	4a22      	ldr	r2, [pc, #136]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012ba0:	430b      	orrs	r3, r1
 8012ba2:	6553      	str	r3, [r2, #84]	; 0x54
 8012ba4:	e003      	b.n	8012bae <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012baa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8012bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb6:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8012bba:	66bb      	str	r3, [r7, #104]	; 0x68
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8012bc0:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	4313      	orrs	r3, r2
 8012bc8:	d034      	beq.n	8012c34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8012bca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d003      	beq.n	8012bdc <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8012bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012bd8:	d007      	beq.n	8012bea <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8012bda:	e011      	b.n	8012c00 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012bdc:	4b12      	ldr	r3, [pc, #72]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012be0:	4a11      	ldr	r2, [pc, #68]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012be2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012be6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012be8:	e00e      	b.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012bee:	3308      	adds	r3, #8
 8012bf0:	2102      	movs	r1, #2
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f000 fc8a 	bl	801350c <RCCEx_PLL2_Config>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8012bfe:	e003      	b.n	8012c08 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8012c00:	2301      	movs	r3, #1
 8012c02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8012c06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012c08:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d10d      	bne.n	8012c2c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8012c10:	4b05      	ldr	r3, [pc, #20]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8012c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012c1e:	4a02      	ldr	r2, [pc, #8]	; (8012c28 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8012c20:	430b      	orrs	r3, r1
 8012c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012c24:	e006      	b.n	8012c34 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8012c26:	bf00      	nop
 8012c28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012c2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012c30:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8012c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c3c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8012c40:	663b      	str	r3, [r7, #96]	; 0x60
 8012c42:	2300      	movs	r3, #0
 8012c44:	667b      	str	r3, [r7, #100]	; 0x64
 8012c46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8012c4a:	460b      	mov	r3, r1
 8012c4c:	4313      	orrs	r3, r2
 8012c4e:	d00c      	beq.n	8012c6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8012c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c54:	3328      	adds	r3, #40	; 0x28
 8012c56:	2102      	movs	r1, #2
 8012c58:	4618      	mov	r0, r3
 8012c5a:	f000 fd09 	bl	8013670 <RCCEx_PLL3_Config>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d002      	beq.n	8012c6a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8012c64:	2301      	movs	r3, #1
 8012c66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8012c6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c72:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8012c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c78:	2300      	movs	r3, #0
 8012c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012c7c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8012c80:	460b      	mov	r3, r1
 8012c82:	4313      	orrs	r3, r2
 8012c84:	d036      	beq.n	8012cf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8012c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012c8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012c90:	d018      	beq.n	8012cc4 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8012c92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8012c96:	d811      	bhi.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012c9c:	d014      	beq.n	8012cc8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8012c9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ca2:	d80b      	bhi.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d011      	beq.n	8012ccc <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8012ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012cac:	d106      	bne.n	8012cbc <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8012cae:	4bb7      	ldr	r3, [pc, #732]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012cb2:	4ab6      	ldr	r2, [pc, #728]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8012cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8012cba:	e008      	b.n	8012cce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8012cc2:	e004      	b.n	8012cce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012cc4:	bf00      	nop
 8012cc6:	e002      	b.n	8012cce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012cc8:	bf00      	nop
 8012cca:	e000      	b.n	8012cce <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8012ccc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8012cce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d10a      	bne.n	8012cec <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8012cd6:	4bad      	ldr	r3, [pc, #692]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012cda:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8012cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012ce4:	4aa9      	ldr	r2, [pc, #676]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ce6:	430b      	orrs	r3, r1
 8012ce8:	6553      	str	r3, [r2, #84]	; 0x54
 8012cea:	e003      	b.n	8012cf4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012cec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012cf0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8012cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cfc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8012d00:	653b      	str	r3, [r7, #80]	; 0x50
 8012d02:	2300      	movs	r3, #0
 8012d04:	657b      	str	r3, [r7, #84]	; 0x54
 8012d06:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8012d0a:	460b      	mov	r3, r1
 8012d0c:	4313      	orrs	r3, r2
 8012d0e:	d009      	beq.n	8012d24 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8012d10:	4b9e      	ldr	r3, [pc, #632]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d1e:	4a9b      	ldr	r2, [pc, #620]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d20:	430b      	orrs	r3, r1
 8012d22:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8012d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d2c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8012d30:	64bb      	str	r3, [r7, #72]	; 0x48
 8012d32:	2300      	movs	r3, #0
 8012d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d36:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8012d3a:	460b      	mov	r3, r1
 8012d3c:	4313      	orrs	r3, r2
 8012d3e:	d009      	beq.n	8012d54 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8012d40:	4b92      	ldr	r3, [pc, #584]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d44:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8012d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012d4e:	4a8f      	ldr	r2, [pc, #572]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d50:	430b      	orrs	r3, r1
 8012d52:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8012d54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d5c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8012d60:	643b      	str	r3, [r7, #64]	; 0x40
 8012d62:	2300      	movs	r3, #0
 8012d64:	647b      	str	r3, [r7, #68]	; 0x44
 8012d66:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8012d6a:	460b      	mov	r3, r1
 8012d6c:	4313      	orrs	r3, r2
 8012d6e:	d00e      	beq.n	8012d8e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8012d70:	4b86      	ldr	r3, [pc, #536]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d72:	691b      	ldr	r3, [r3, #16]
 8012d74:	4a85      	ldr	r2, [pc, #532]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8012d7a:	6113      	str	r3, [r2, #16]
 8012d7c:	4b83      	ldr	r3, [pc, #524]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d7e:	6919      	ldr	r1, [r3, #16]
 8012d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8012d88:	4a80      	ldr	r2, [pc, #512]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012d8a:	430b      	orrs	r3, r1
 8012d8c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8012d8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d96:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8012d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012da0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8012da4:	460b      	mov	r3, r1
 8012da6:	4313      	orrs	r3, r2
 8012da8:	d009      	beq.n	8012dbe <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8012daa:	4b78      	ldr	r3, [pc, #480]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012dae:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8012db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012db8:	4a74      	ldr	r2, [pc, #464]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dba:	430b      	orrs	r3, r1
 8012dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8012dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dc6:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8012dca:	633b      	str	r3, [r7, #48]	; 0x30
 8012dcc:	2300      	movs	r3, #0
 8012dce:	637b      	str	r3, [r7, #52]	; 0x34
 8012dd0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	d00a      	beq.n	8012df0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8012dda:	4b6c      	ldr	r3, [pc, #432]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012dde:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8012de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012dea:	4a68      	ldr	r2, [pc, #416]	; (8012f8c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8012dec:	430b      	orrs	r3, r1
 8012dee:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8012df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df8:	2100      	movs	r1, #0
 8012dfa:	62b9      	str	r1, [r7, #40]	; 0x28
 8012dfc:	f003 0301 	and.w	r3, r3, #1
 8012e00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012e02:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8012e06:	460b      	mov	r3, r1
 8012e08:	4313      	orrs	r3, r2
 8012e0a:	d011      	beq.n	8012e30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8012e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e10:	3308      	adds	r3, #8
 8012e12:	2100      	movs	r1, #0
 8012e14:	4618      	mov	r0, r3
 8012e16:	f000 fb79 	bl	801350c <RCCEx_PLL2_Config>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8012e20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d003      	beq.n	8012e30 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012e2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8012e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e38:	2100      	movs	r1, #0
 8012e3a:	6239      	str	r1, [r7, #32]
 8012e3c:	f003 0302 	and.w	r3, r3, #2
 8012e40:	627b      	str	r3, [r7, #36]	; 0x24
 8012e42:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8012e46:	460b      	mov	r3, r1
 8012e48:	4313      	orrs	r3, r2
 8012e4a:	d011      	beq.n	8012e70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8012e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e50:	3308      	adds	r3, #8
 8012e52:	2101      	movs	r1, #1
 8012e54:	4618      	mov	r0, r3
 8012e56:	f000 fb59 	bl	801350c <RCCEx_PLL2_Config>
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8012e60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d003      	beq.n	8012e70 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012e68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012e6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8012e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e78:	2100      	movs	r1, #0
 8012e7a:	61b9      	str	r1, [r7, #24]
 8012e7c:	f003 0304 	and.w	r3, r3, #4
 8012e80:	61fb      	str	r3, [r7, #28]
 8012e82:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8012e86:	460b      	mov	r3, r1
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	d011      	beq.n	8012eb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8012e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012e90:	3308      	adds	r3, #8
 8012e92:	2102      	movs	r1, #2
 8012e94:	4618      	mov	r0, r3
 8012e96:	f000 fb39 	bl	801350c <RCCEx_PLL2_Config>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8012ea0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d003      	beq.n	8012eb0 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ea8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012eac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8012eb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012eb8:	2100      	movs	r1, #0
 8012eba:	6139      	str	r1, [r7, #16]
 8012ebc:	f003 0308 	and.w	r3, r3, #8
 8012ec0:	617b      	str	r3, [r7, #20]
 8012ec2:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8012ec6:	460b      	mov	r3, r1
 8012ec8:	4313      	orrs	r3, r2
 8012eca:	d011      	beq.n	8012ef0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8012ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ed0:	3328      	adds	r3, #40	; 0x28
 8012ed2:	2100      	movs	r1, #0
 8012ed4:	4618      	mov	r0, r3
 8012ed6:	f000 fbcb 	bl	8013670 <RCCEx_PLL3_Config>
 8012eda:	4603      	mov	r3, r0
 8012edc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8012ee0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d003      	beq.n	8012ef0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012ee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012eec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8012ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ef8:	2100      	movs	r1, #0
 8012efa:	60b9      	str	r1, [r7, #8]
 8012efc:	f003 0310 	and.w	r3, r3, #16
 8012f00:	60fb      	str	r3, [r7, #12]
 8012f02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8012f06:	460b      	mov	r3, r1
 8012f08:	4313      	orrs	r3, r2
 8012f0a:	d011      	beq.n	8012f30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8012f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f10:	3328      	adds	r3, #40	; 0x28
 8012f12:	2101      	movs	r1, #1
 8012f14:	4618      	mov	r0, r3
 8012f16:	f000 fbab 	bl	8013670 <RCCEx_PLL3_Config>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8012f20:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d003      	beq.n	8012f30 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012f2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8012f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f38:	2100      	movs	r1, #0
 8012f3a:	6039      	str	r1, [r7, #0]
 8012f3c:	f003 0320 	and.w	r3, r3, #32
 8012f40:	607b      	str	r3, [r7, #4]
 8012f42:	e9d7 1200 	ldrd	r1, r2, [r7]
 8012f46:	460b      	mov	r3, r1
 8012f48:	4313      	orrs	r3, r2
 8012f4a:	d011      	beq.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8012f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012f50:	3328      	adds	r3, #40	; 0x28
 8012f52:	2102      	movs	r1, #2
 8012f54:	4618      	mov	r0, r3
 8012f56:	f000 fb8b 	bl	8013670 <RCCEx_PLL3_Config>
 8012f5a:	4603      	mov	r3, r0
 8012f5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8012f60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d003      	beq.n	8012f70 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8012f68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8012f6c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8012f70:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d101      	bne.n	8012f7c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	e000      	b.n	8012f7e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8012f7c:	2301      	movs	r3, #1
}
 8012f7e:	4618      	mov	r0, r3
 8012f80:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8012f84:	46bd      	mov	sp, r7
 8012f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8012f8a:	bf00      	nop
 8012f8c:	58024400 	.word	0x58024400

08012f90 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8012f94:	f7fe fe00 	bl	8011b98 <HAL_RCC_GetHCLKFreq>
 8012f98:	4602      	mov	r2, r0
 8012f9a:	4b06      	ldr	r3, [pc, #24]	; (8012fb4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012f9c:	6a1b      	ldr	r3, [r3, #32]
 8012f9e:	091b      	lsrs	r3, r3, #4
 8012fa0:	f003 0307 	and.w	r3, r3, #7
 8012fa4:	4904      	ldr	r1, [pc, #16]	; (8012fb8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8012fa6:	5ccb      	ldrb	r3, [r1, r3]
 8012fa8:	f003 031f 	and.w	r3, r3, #31
 8012fac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	bd80      	pop	{r7, pc}
 8012fb4:	58024400 	.word	0x58024400
 8012fb8:	08019130 	.word	0x08019130

08012fbc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b089      	sub	sp, #36	; 0x24
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012fc4:	4ba1      	ldr	r3, [pc, #644]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fc8:	f003 0303 	and.w	r3, r3, #3
 8012fcc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8012fce:	4b9f      	ldr	r3, [pc, #636]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fd2:	0b1b      	lsrs	r3, r3, #12
 8012fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012fd8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8012fda:	4b9c      	ldr	r3, [pc, #624]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fde:	091b      	lsrs	r3, r3, #4
 8012fe0:	f003 0301 	and.w	r3, r3, #1
 8012fe4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8012fe6:	4b99      	ldr	r3, [pc, #612]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fea:	08db      	lsrs	r3, r3, #3
 8012fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012ff0:	693a      	ldr	r2, [r7, #16]
 8012ff2:	fb02 f303 	mul.w	r3, r2, r3
 8012ff6:	ee07 3a90 	vmov	s15, r3
 8012ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ffe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	2b00      	cmp	r3, #0
 8013006:	f000 8111 	beq.w	801322c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801300a:	69bb      	ldr	r3, [r7, #24]
 801300c:	2b02      	cmp	r3, #2
 801300e:	f000 8083 	beq.w	8013118 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	2b02      	cmp	r3, #2
 8013016:	f200 80a1 	bhi.w	801315c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d003      	beq.n	8013028 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8013020:	69bb      	ldr	r3, [r7, #24]
 8013022:	2b01      	cmp	r3, #1
 8013024:	d056      	beq.n	80130d4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8013026:	e099      	b.n	801315c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013028:	4b88      	ldr	r3, [pc, #544]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801302a:	681b      	ldr	r3, [r3, #0]
 801302c:	f003 0320 	and.w	r3, r3, #32
 8013030:	2b00      	cmp	r3, #0
 8013032:	d02d      	beq.n	8013090 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8013034:	4b85      	ldr	r3, [pc, #532]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	08db      	lsrs	r3, r3, #3
 801303a:	f003 0303 	and.w	r3, r3, #3
 801303e:	4a84      	ldr	r2, [pc, #528]	; (8013250 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8013040:	fa22 f303 	lsr.w	r3, r2, r3
 8013044:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	ee07 3a90 	vmov	s15, r3
 801304c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013050:	697b      	ldr	r3, [r7, #20]
 8013052:	ee07 3a90 	vmov	s15, r3
 8013056:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801305a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801305e:	4b7b      	ldr	r3, [pc, #492]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013066:	ee07 3a90 	vmov	s15, r3
 801306a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801306e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013072:	eddf 5a78 	vldr	s11, [pc, #480]	; 8013254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801307a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801307e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013086:	ee67 7a27 	vmul.f32	s15, s14, s15
 801308a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801308e:	e087      	b.n	80131a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	ee07 3a90 	vmov	s15, r3
 8013096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801309a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013258 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801309e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130a2:	4b6a      	ldr	r3, [pc, #424]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130aa:	ee07 3a90 	vmov	s15, r3
 80130ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80130b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8013254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80130be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80130c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80130c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80130ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80130ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80130d2:	e065      	b.n	80131a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80130d4:	697b      	ldr	r3, [r7, #20]
 80130d6:	ee07 3a90 	vmov	s15, r3
 80130da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801325c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80130e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80130e6:	4b59      	ldr	r3, [pc, #356]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80130e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80130ee:	ee07 3a90 	vmov	s15, r3
 80130f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80130f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80130fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8013254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80130fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013102:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013106:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801310a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801310e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013112:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013116:	e043      	b.n	80131a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	ee07 3a90 	vmov	s15, r3
 801311e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013122:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013260 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8013126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801312a:	4b48      	ldr	r3, [pc, #288]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801312e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013132:	ee07 3a90 	vmov	s15, r3
 8013136:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801313a:	ed97 6a03 	vldr	s12, [r7, #12]
 801313e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8013254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013142:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013146:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801314a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801314e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013156:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801315a:	e021      	b.n	80131a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801315c:	697b      	ldr	r3, [r7, #20]
 801315e:	ee07 3a90 	vmov	s15, r3
 8013162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013166:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801325c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801316a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801316e:	4b37      	ldr	r3, [pc, #220]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8013170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013172:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013176:	ee07 3a90 	vmov	s15, r3
 801317a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801317e:	ed97 6a03 	vldr	s12, [r7, #12]
 8013182:	eddf 5a34 	vldr	s11, [pc, #208]	; 8013254 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8013186:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801318a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801318e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013192:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013196:	ee67 7a27 	vmul.f32	s15, s14, s15
 801319a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801319e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80131a0:	4b2a      	ldr	r3, [pc, #168]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131a4:	0a5b      	lsrs	r3, r3, #9
 80131a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131aa:	ee07 3a90 	vmov	s15, r3
 80131ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80131b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80131ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80131be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131c6:	ee17 2a90 	vmov	r2, s15
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80131ce:	4b1f      	ldr	r3, [pc, #124]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131d2:	0c1b      	lsrs	r3, r3, #16
 80131d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131d8:	ee07 3a90 	vmov	s15, r3
 80131dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80131e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80131e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80131e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80131ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80131f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80131f4:	ee17 2a90 	vmov	r2, s15
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80131fc:	4b13      	ldr	r3, [pc, #76]	; (801324c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80131fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013200:	0e1b      	lsrs	r3, r3, #24
 8013202:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013206:	ee07 3a90 	vmov	s15, r3
 801320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801320e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013216:	edd7 6a07 	vldr	s13, [r7, #28]
 801321a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801321e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013222:	ee17 2a90 	vmov	r2, s15
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801322a:	e008      	b.n	801323e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	2200      	movs	r2, #0
 8013230:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	2200      	movs	r2, #0
 8013236:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2200      	movs	r2, #0
 801323c:	609a      	str	r2, [r3, #8]
}
 801323e:	bf00      	nop
 8013240:	3724      	adds	r7, #36	; 0x24
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr
 801324a:	bf00      	nop
 801324c:	58024400 	.word	0x58024400
 8013250:	03d09000 	.word	0x03d09000
 8013254:	46000000 	.word	0x46000000
 8013258:	4c742400 	.word	0x4c742400
 801325c:	4a742400 	.word	0x4a742400
 8013260:	4af42400 	.word	0x4af42400

08013264 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8013264:	b480      	push	{r7}
 8013266:	b089      	sub	sp, #36	; 0x24
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801326c:	4ba1      	ldr	r3, [pc, #644]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801326e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013270:	f003 0303 	and.w	r3, r3, #3
 8013274:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8013276:	4b9f      	ldr	r3, [pc, #636]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801327a:	0d1b      	lsrs	r3, r3, #20
 801327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013280:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8013282:	4b9c      	ldr	r3, [pc, #624]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013286:	0a1b      	lsrs	r3, r3, #8
 8013288:	f003 0301 	and.w	r3, r3, #1
 801328c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801328e:	4b99      	ldr	r3, [pc, #612]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013292:	08db      	lsrs	r3, r3, #3
 8013294:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013298:	693a      	ldr	r2, [r7, #16]
 801329a:	fb02 f303 	mul.w	r3, r2, r3
 801329e:	ee07 3a90 	vmov	s15, r3
 80132a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80132a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	2b00      	cmp	r3, #0
 80132ae:	f000 8111 	beq.w	80134d4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80132b2:	69bb      	ldr	r3, [r7, #24]
 80132b4:	2b02      	cmp	r3, #2
 80132b6:	f000 8083 	beq.w	80133c0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80132ba:	69bb      	ldr	r3, [r7, #24]
 80132bc:	2b02      	cmp	r3, #2
 80132be:	f200 80a1 	bhi.w	8013404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d003      	beq.n	80132d0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80132c8:	69bb      	ldr	r3, [r7, #24]
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d056      	beq.n	801337c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80132ce:	e099      	b.n	8013404 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80132d0:	4b88      	ldr	r3, [pc, #544]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132d2:	681b      	ldr	r3, [r3, #0]
 80132d4:	f003 0320 	and.w	r3, r3, #32
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d02d      	beq.n	8013338 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80132dc:	4b85      	ldr	r3, [pc, #532]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80132de:	681b      	ldr	r3, [r3, #0]
 80132e0:	08db      	lsrs	r3, r3, #3
 80132e2:	f003 0303 	and.w	r3, r3, #3
 80132e6:	4a84      	ldr	r2, [pc, #528]	; (80134f8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80132e8:	fa22 f303 	lsr.w	r3, r2, r3
 80132ec:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80132ee:	68bb      	ldr	r3, [r7, #8]
 80132f0:	ee07 3a90 	vmov	s15, r3
 80132f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80132f8:	697b      	ldr	r3, [r7, #20]
 80132fa:	ee07 3a90 	vmov	s15, r3
 80132fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013306:	4b7b      	ldr	r3, [pc, #492]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801330e:	ee07 3a90 	vmov	s15, r3
 8013312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013316:	ed97 6a03 	vldr	s12, [r7, #12]
 801331a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80134fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013332:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8013336:	e087      	b.n	8013448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013338:	697b      	ldr	r3, [r7, #20]
 801333a:	ee07 3a90 	vmov	s15, r3
 801333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013342:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8013500 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8013346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801334a:	4b6a      	ldr	r3, [pc, #424]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013352:	ee07 3a90 	vmov	s15, r3
 8013356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801335a:	ed97 6a03 	vldr	s12, [r7, #12]
 801335e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80134fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8013362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801336a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801337a:	e065      	b.n	8013448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801337c:	697b      	ldr	r3, [r7, #20]
 801337e:	ee07 3a90 	vmov	s15, r3
 8013382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013386:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8013504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801338e:	4b59      	ldr	r3, [pc, #356]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013396:	ee07 3a90 	vmov	s15, r3
 801339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801339e:	ed97 6a03 	vldr	s12, [r7, #12]
 80133a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 80134fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80133a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80133be:	e043      	b.n	8013448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	ee07 3a90 	vmov	s15, r3
 80133c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80133ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8013508 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80133ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80133d2:	4b48      	ldr	r3, [pc, #288]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80133d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80133da:	ee07 3a90 	vmov	s15, r3
 80133de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80133e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80133e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80134fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80133ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80133ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80133f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80133fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80133fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013402:	e021      	b.n	8013448 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8013404:	697b      	ldr	r3, [r7, #20]
 8013406:	ee07 3a90 	vmov	s15, r3
 801340a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801340e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013504 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8013412:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013416:	4b37      	ldr	r3, [pc, #220]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801341a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801341e:	ee07 3a90 	vmov	s15, r3
 8013422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013426:	ed97 6a03 	vldr	s12, [r7, #12]
 801342a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80134fc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801342e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013432:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801343a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801343e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013442:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013446:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8013448:	4b2a      	ldr	r3, [pc, #168]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801344a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801344c:	0a5b      	lsrs	r3, r3, #9
 801344e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013452:	ee07 3a90 	vmov	s15, r3
 8013456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801345a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801345e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013462:	edd7 6a07 	vldr	s13, [r7, #28]
 8013466:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801346a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801346e:	ee17 2a90 	vmov	r2, s15
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8013476:	4b1f      	ldr	r3, [pc, #124]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8013478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801347a:	0c1b      	lsrs	r3, r3, #16
 801347c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013480:	ee07 3a90 	vmov	s15, r3
 8013484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013488:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801348c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013490:	edd7 6a07 	vldr	s13, [r7, #28]
 8013494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8013498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801349c:	ee17 2a90 	vmov	r2, s15
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80134a4:	4b13      	ldr	r3, [pc, #76]	; (80134f4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80134a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134a8:	0e1b      	lsrs	r3, r3, #24
 80134aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80134ae:	ee07 3a90 	vmov	s15, r3
 80134b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80134b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80134ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80134be:	edd7 6a07 	vldr	s13, [r7, #28]
 80134c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80134c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80134ca:	ee17 2a90 	vmov	r2, s15
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80134d2:	e008      	b.n	80134e6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2200      	movs	r2, #0
 80134d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	2200      	movs	r2, #0
 80134de:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2200      	movs	r2, #0
 80134e4:	609a      	str	r2, [r3, #8]
}
 80134e6:	bf00      	nop
 80134e8:	3724      	adds	r7, #36	; 0x24
 80134ea:	46bd      	mov	sp, r7
 80134ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f0:	4770      	bx	lr
 80134f2:	bf00      	nop
 80134f4:	58024400 	.word	0x58024400
 80134f8:	03d09000 	.word	0x03d09000
 80134fc:	46000000 	.word	0x46000000
 8013500:	4c742400 	.word	0x4c742400
 8013504:	4a742400 	.word	0x4a742400
 8013508:	4af42400 	.word	0x4af42400

0801350c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801350c:	b580      	push	{r7, lr}
 801350e:	b084      	sub	sp, #16
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
 8013514:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013516:	2300      	movs	r3, #0
 8013518:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801351a:	4b53      	ldr	r3, [pc, #332]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 801351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801351e:	f003 0303 	and.w	r3, r3, #3
 8013522:	2b03      	cmp	r3, #3
 8013524:	d101      	bne.n	801352a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013526:	2301      	movs	r3, #1
 8013528:	e099      	b.n	801365e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801352a:	4b4f      	ldr	r3, [pc, #316]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	4a4e      	ldr	r2, [pc, #312]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013530:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8013534:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013536:	f7fc fcbb 	bl	800feb0 <HAL_GetTick>
 801353a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801353c:	e008      	b.n	8013550 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801353e:	f7fc fcb7 	bl	800feb0 <HAL_GetTick>
 8013542:	4602      	mov	r2, r0
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	1ad3      	subs	r3, r2, r3
 8013548:	2b02      	cmp	r3, #2
 801354a:	d901      	bls.n	8013550 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801354c:	2303      	movs	r3, #3
 801354e:	e086      	b.n	801365e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013550:	4b45      	ldr	r3, [pc, #276]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013558:	2b00      	cmp	r3, #0
 801355a:	d1f0      	bne.n	801353e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801355c:	4b42      	ldr	r3, [pc, #264]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 801355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013560:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	031b      	lsls	r3, r3, #12
 801356a:	493f      	ldr	r1, [pc, #252]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 801356c:	4313      	orrs	r3, r2
 801356e:	628b      	str	r3, [r1, #40]	; 0x28
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	685b      	ldr	r3, [r3, #4]
 8013574:	3b01      	subs	r3, #1
 8013576:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	689b      	ldr	r3, [r3, #8]
 801357e:	3b01      	subs	r3, #1
 8013580:	025b      	lsls	r3, r3, #9
 8013582:	b29b      	uxth	r3, r3
 8013584:	431a      	orrs	r2, r3
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	68db      	ldr	r3, [r3, #12]
 801358a:	3b01      	subs	r3, #1
 801358c:	041b      	lsls	r3, r3, #16
 801358e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8013592:	431a      	orrs	r2, r3
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	691b      	ldr	r3, [r3, #16]
 8013598:	3b01      	subs	r3, #1
 801359a:	061b      	lsls	r3, r3, #24
 801359c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80135a0:	4931      	ldr	r1, [pc, #196]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135a2:	4313      	orrs	r3, r2
 80135a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80135a6:	4b30      	ldr	r3, [pc, #192]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	695b      	ldr	r3, [r3, #20]
 80135b2:	492d      	ldr	r1, [pc, #180]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135b4:	4313      	orrs	r3, r2
 80135b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80135b8:	4b2b      	ldr	r3, [pc, #172]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135bc:	f023 0220 	bic.w	r2, r3, #32
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	699b      	ldr	r3, [r3, #24]
 80135c4:	4928      	ldr	r1, [pc, #160]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135c6:	4313      	orrs	r3, r2
 80135c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80135ca:	4b27      	ldr	r3, [pc, #156]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ce:	4a26      	ldr	r2, [pc, #152]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135d0:	f023 0310 	bic.w	r3, r3, #16
 80135d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80135d6:	4b24      	ldr	r3, [pc, #144]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80135da:	4b24      	ldr	r3, [pc, #144]	; (801366c <RCCEx_PLL2_Config+0x160>)
 80135dc:	4013      	ands	r3, r2
 80135de:	687a      	ldr	r2, [r7, #4]
 80135e0:	69d2      	ldr	r2, [r2, #28]
 80135e2:	00d2      	lsls	r2, r2, #3
 80135e4:	4920      	ldr	r1, [pc, #128]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135e6:	4313      	orrs	r3, r2
 80135e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80135ea:	4b1f      	ldr	r3, [pc, #124]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ee:	4a1e      	ldr	r2, [pc, #120]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135f0:	f043 0310 	orr.w	r3, r3, #16
 80135f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	d106      	bne.n	801360a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80135fc:	4b1a      	ldr	r3, [pc, #104]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 80135fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013600:	4a19      	ldr	r2, [pc, #100]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013602:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013608:	e00f      	b.n	801362a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d106      	bne.n	801361e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013610:	4b15      	ldr	r3, [pc, #84]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013614:	4a14      	ldr	r2, [pc, #80]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801361a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801361c:	e005      	b.n	801362a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801361e:	4b12      	ldr	r3, [pc, #72]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013622:	4a11      	ldr	r2, [pc, #68]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013624:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013628:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801362a:	4b0f      	ldr	r3, [pc, #60]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	4a0e      	ldr	r2, [pc, #56]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013636:	f7fc fc3b 	bl	800feb0 <HAL_GetTick>
 801363a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801363c:	e008      	b.n	8013650 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801363e:	f7fc fc37 	bl	800feb0 <HAL_GetTick>
 8013642:	4602      	mov	r2, r0
 8013644:	68bb      	ldr	r3, [r7, #8]
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	2b02      	cmp	r3, #2
 801364a:	d901      	bls.n	8013650 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801364c:	2303      	movs	r3, #3
 801364e:	e006      	b.n	801365e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013650:	4b05      	ldr	r3, [pc, #20]	; (8013668 <RCCEx_PLL2_Config+0x15c>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013658:	2b00      	cmp	r3, #0
 801365a:	d0f0      	beq.n	801363e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801365c:	7bfb      	ldrb	r3, [r7, #15]
}
 801365e:	4618      	mov	r0, r3
 8013660:	3710      	adds	r7, #16
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
 8013666:	bf00      	nop
 8013668:	58024400 	.word	0x58024400
 801366c:	ffff0007 	.word	0xffff0007

08013670 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b084      	sub	sp, #16
 8013674:	af00      	add	r7, sp, #0
 8013676:	6078      	str	r0, [r7, #4]
 8013678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801367a:	2300      	movs	r3, #0
 801367c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801367e:	4b53      	ldr	r3, [pc, #332]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013682:	f003 0303 	and.w	r3, r3, #3
 8013686:	2b03      	cmp	r3, #3
 8013688:	d101      	bne.n	801368e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801368a:	2301      	movs	r3, #1
 801368c:	e099      	b.n	80137c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801368e:	4b4f      	ldr	r3, [pc, #316]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013690:	681b      	ldr	r3, [r3, #0]
 8013692:	4a4e      	ldr	r2, [pc, #312]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8013698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801369a:	f7fc fc09 	bl	800feb0 <HAL_GetTick>
 801369e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80136a0:	e008      	b.n	80136b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80136a2:	f7fc fc05 	bl	800feb0 <HAL_GetTick>
 80136a6:	4602      	mov	r2, r0
 80136a8:	68bb      	ldr	r3, [r7, #8]
 80136aa:	1ad3      	subs	r3, r2, r3
 80136ac:	2b02      	cmp	r3, #2
 80136ae:	d901      	bls.n	80136b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80136b0:	2303      	movs	r3, #3
 80136b2:	e086      	b.n	80137c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80136b4:	4b45      	ldr	r3, [pc, #276]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 80136b6:	681b      	ldr	r3, [r3, #0]
 80136b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d1f0      	bne.n	80136a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80136c0:	4b42      	ldr	r3, [pc, #264]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 80136c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	051b      	lsls	r3, r3, #20
 80136ce:	493f      	ldr	r1, [pc, #252]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 80136d0:	4313      	orrs	r3, r2
 80136d2:	628b      	str	r3, [r1, #40]	; 0x28
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	685b      	ldr	r3, [r3, #4]
 80136d8:	3b01      	subs	r3, #1
 80136da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	689b      	ldr	r3, [r3, #8]
 80136e2:	3b01      	subs	r3, #1
 80136e4:	025b      	lsls	r3, r3, #9
 80136e6:	b29b      	uxth	r3, r3
 80136e8:	431a      	orrs	r2, r3
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	68db      	ldr	r3, [r3, #12]
 80136ee:	3b01      	subs	r3, #1
 80136f0:	041b      	lsls	r3, r3, #16
 80136f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80136f6:	431a      	orrs	r2, r3
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	691b      	ldr	r3, [r3, #16]
 80136fc:	3b01      	subs	r3, #1
 80136fe:	061b      	lsls	r3, r3, #24
 8013700:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8013704:	4931      	ldr	r1, [pc, #196]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013706:	4313      	orrs	r3, r2
 8013708:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801370a:	4b30      	ldr	r3, [pc, #192]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 801370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801370e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	695b      	ldr	r3, [r3, #20]
 8013716:	492d      	ldr	r1, [pc, #180]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013718:	4313      	orrs	r3, r2
 801371a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801371c:	4b2b      	ldr	r3, [pc, #172]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 801371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013720:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	699b      	ldr	r3, [r3, #24]
 8013728:	4928      	ldr	r1, [pc, #160]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 801372a:	4313      	orrs	r3, r2
 801372c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801372e:	4b27      	ldr	r3, [pc, #156]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013732:	4a26      	ldr	r2, [pc, #152]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013738:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801373a:	4b24      	ldr	r3, [pc, #144]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 801373c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801373e:	4b24      	ldr	r3, [pc, #144]	; (80137d0 <RCCEx_PLL3_Config+0x160>)
 8013740:	4013      	ands	r3, r2
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	69d2      	ldr	r2, [r2, #28]
 8013746:	00d2      	lsls	r2, r2, #3
 8013748:	4920      	ldr	r1, [pc, #128]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 801374a:	4313      	orrs	r3, r2
 801374c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801374e:	4b1f      	ldr	r3, [pc, #124]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013752:	4a1e      	ldr	r2, [pc, #120]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013758:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801375a:	683b      	ldr	r3, [r7, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d106      	bne.n	801376e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013760:	4b1a      	ldr	r3, [pc, #104]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013764:	4a19      	ldr	r2, [pc, #100]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013766:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801376a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801376c:	e00f      	b.n	801378e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	2b01      	cmp	r3, #1
 8013772:	d106      	bne.n	8013782 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013774:	4b15      	ldr	r3, [pc, #84]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013778:	4a14      	ldr	r2, [pc, #80]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 801377a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801377e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8013780:	e005      	b.n	801378e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013782:	4b12      	ldr	r3, [pc, #72]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013786:	4a11      	ldr	r2, [pc, #68]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801378c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801378e:	4b0f      	ldr	r3, [pc, #60]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	4a0e      	ldr	r2, [pc, #56]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 8013794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013798:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801379a:	f7fc fb89 	bl	800feb0 <HAL_GetTick>
 801379e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80137a0:	e008      	b.n	80137b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80137a2:	f7fc fb85 	bl	800feb0 <HAL_GetTick>
 80137a6:	4602      	mov	r2, r0
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	1ad3      	subs	r3, r2, r3
 80137ac:	2b02      	cmp	r3, #2
 80137ae:	d901      	bls.n	80137b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80137b0:	2303      	movs	r3, #3
 80137b2:	e006      	b.n	80137c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80137b4:	4b05      	ldr	r3, [pc, #20]	; (80137cc <RCCEx_PLL3_Config+0x15c>)
 80137b6:	681b      	ldr	r3, [r3, #0]
 80137b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d0f0      	beq.n	80137a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80137c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80137c2:	4618      	mov	r0, r3
 80137c4:	3710      	adds	r7, #16
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
 80137ca:	bf00      	nop
 80137cc:	58024400 	.word	0x58024400
 80137d0:	ffff0007 	.word	0xffff0007

080137d4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80137d4:	b580      	push	{r7, lr}
 80137d6:	b084      	sub	sp, #16
 80137d8:	af00      	add	r7, sp, #0
 80137da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d101      	bne.n	80137e6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80137e2:	2301      	movs	r3, #1
 80137e4:	e092      	b.n	801390c <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	7a5b      	ldrb	r3, [r3, #9]
 80137ea:	b2db      	uxtb	r3, r3
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d105      	bne.n	80137fc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f7fc f8a2 	bl	800f940 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	2202      	movs	r2, #2
 8013800:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	681a      	ldr	r2, [r3, #0]
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	f022 0204 	bic.w	r2, r2, #4
 8013810:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	681a      	ldr	r2, [r3, #0]
 8013818:	4b3e      	ldr	r3, [pc, #248]	; (8013914 <HAL_RNG_Init+0x140>)
 801381a:	4013      	ands	r3, r2
 801381c:	687a      	ldr	r2, [r7, #4]
 801381e:	6852      	ldr	r2, [r2, #4]
 8013820:	431a      	orrs	r2, r3
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 801382a:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	4a39      	ldr	r2, [pc, #228]	; (8013918 <HAL_RNG_Init+0x144>)
 8013832:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	f247 2274 	movw	r2, #29300	; 0x7274
 801383c:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	681a      	ldr	r2, [r3, #0]
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 801384c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801384e:	f7fc fb2f 	bl	800feb0 <HAL_GetTick>
 8013852:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8013854:	e016      	b.n	8013884 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8013856:	f7fc fb2b 	bl	800feb0 <HAL_GetTick>
 801385a:	4602      	mov	r2, r0
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	1ad3      	subs	r3, r2, r3
 8013860:	2b02      	cmp	r3, #2
 8013862:	d90f      	bls.n	8013884 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013872:	d107      	bne.n	8013884 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8013874:	687b      	ldr	r3, [r7, #4]
 8013876:	2201      	movs	r2, #1
 8013878:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2202      	movs	r2, #2
 801387e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 8013880:	2301      	movs	r3, #1
 8013882:	e043      	b.n	801390c <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801388e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013892:	d0e0      	beq.n	8013856 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	681a      	ldr	r2, [r3, #0]
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	f042 0204 	orr.w	r2, r2, #4
 80138a2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	685b      	ldr	r3, [r3, #4]
 80138aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80138ae:	2b40      	cmp	r3, #64	; 0x40
 80138b0:	d104      	bne.n	80138bc <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80138b2:	687b      	ldr	r3, [r7, #4]
 80138b4:	2204      	movs	r2, #4
 80138b6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80138b8:	2301      	movs	r3, #1
 80138ba:	e027      	b.n	801390c <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80138bc:	f7fc faf8 	bl	800feb0 <HAL_GetTick>
 80138c0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80138c2:	e015      	b.n	80138f0 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80138c4:	f7fc faf4 	bl	800feb0 <HAL_GetTick>
 80138c8:	4602      	mov	r2, r0
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	1ad3      	subs	r3, r2, r3
 80138ce:	2b02      	cmp	r3, #2
 80138d0:	d90e      	bls.n	80138f0 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	685b      	ldr	r3, [r3, #4]
 80138d8:	f003 0304 	and.w	r3, r3, #4
 80138dc:	2b04      	cmp	r3, #4
 80138de:	d107      	bne.n	80138f0 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	2204      	movs	r2, #4
 80138e4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	2202      	movs	r2, #2
 80138ea:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80138ec:	2301      	movs	r3, #1
 80138ee:	e00d      	b.n	801390c <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	685b      	ldr	r3, [r3, #4]
 80138f6:	f003 0304 	and.w	r3, r3, #4
 80138fa:	2b04      	cmp	r3, #4
 80138fc:	d0e2      	beq.n	80138c4 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	2201      	movs	r2, #1
 8013902:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2200      	movs	r2, #0
 8013908:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 801390a:	2300      	movs	r3, #0
}
 801390c:	4618      	mov	r0, r3
 801390e:	3710      	adds	r7, #16
 8013910:	46bd      	mov	sp, r7
 8013912:	bd80      	pop	{r7, pc}
 8013914:	bfffffdf 	.word	0xbfffffdf
 8013918:	17590abc 	.word	0x17590abc

0801391c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b084      	sub	sp, #16
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013926:	2300      	movs	r3, #0
 8013928:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	7a1b      	ldrb	r3, [r3, #8]
 801392e:	2b01      	cmp	r3, #1
 8013930:	d101      	bne.n	8013936 <HAL_RNG_GenerateRandomNumber+0x1a>
 8013932:	2302      	movs	r3, #2
 8013934:	e06d      	b.n	8013a12 <HAL_RNG_GenerateRandomNumber+0xf6>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2201      	movs	r2, #1
 801393a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	7a5b      	ldrb	r3, [r3, #9]
 8013940:	b2db      	uxtb	r3, r3
 8013942:	2b01      	cmp	r3, #1
 8013944:	d15c      	bne.n	8013a00 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8013946:	687b      	ldr	r3, [r7, #4]
 8013948:	2202      	movs	r2, #2
 801394a:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	685b      	ldr	r3, [r3, #4]
 8013952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013956:	2b40      	cmp	r3, #64	; 0x40
 8013958:	d10c      	bne.n	8013974 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	2208      	movs	r2, #8
 801395e:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 8013960:	6878      	ldr	r0, [r7, #4]
 8013962:	f000 f864 	bl	8013a2e <RNG_RecoverSeedError>
 8013966:	4603      	mov	r3, r0
 8013968:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 801396a:	7bfb      	ldrb	r3, [r7, #15]
 801396c:	2b01      	cmp	r3, #1
 801396e:	d101      	bne.n	8013974 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 8013970:	7bfb      	ldrb	r3, [r7, #15]
 8013972:	e04e      	b.n	8013a12 <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8013974:	f7fc fa9c 	bl	800feb0 <HAL_GetTick>
 8013978:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801397a:	e018      	b.n	80139ae <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801397c:	f7fc fa98 	bl	800feb0 <HAL_GetTick>
 8013980:	4602      	mov	r2, r0
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	2b02      	cmp	r3, #2
 8013988:	d911      	bls.n	80139ae <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	685b      	ldr	r3, [r3, #4]
 8013990:	f003 0301 	and.w	r3, r3, #1
 8013994:	2b01      	cmp	r3, #1
 8013996:	d00a      	beq.n	80139ae <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	2201      	movs	r2, #1
 801399c:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	2202      	movs	r2, #2
 80139a2:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2200      	movs	r2, #0
 80139a8:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80139aa:	2301      	movs	r3, #1
 80139ac:	e031      	b.n	8013a12 <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	685b      	ldr	r3, [r3, #4]
 80139b4:	f003 0301 	and.w	r3, r3, #1
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d1df      	bne.n	801397c <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	689a      	ldr	r2, [r3, #8]
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	685b      	ldr	r3, [r3, #4]
 80139cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139d0:	2b40      	cmp	r3, #64	; 0x40
 80139d2:	d10d      	bne.n	80139f0 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	2208      	movs	r2, #8
 80139d8:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 80139da:	2301      	movs	r3, #1
 80139dc:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	685a      	ldr	r2, [r3, #4]
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	681b      	ldr	r3, [r3, #0]
 80139e8:	f022 0201 	bic.w	r2, r2, #1
 80139ec:	605a      	str	r2, [r3, #4]
 80139ee:	e003      	b.n	80139f8 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	691a      	ldr	r2, [r3, #16]
 80139f4:	683b      	ldr	r3, [r7, #0]
 80139f6:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	2201      	movs	r2, #1
 80139fc:	725a      	strb	r2, [r3, #9]
 80139fe:	e004      	b.n	8013a0a <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2204      	movs	r2, #4
 8013a04:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8013a06:	2301      	movs	r3, #1
 8013a08:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	2200      	movs	r2, #0
 8013a0e:	721a      	strb	r2, [r3, #8]

  return status;
 8013a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a12:	4618      	mov	r0, r3
 8013a14:	3710      	adds	r7, #16
 8013a16:	46bd      	mov	sp, r7
 8013a18:	bd80      	pop	{r7, pc}

08013a1a <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8013a1a:	b480      	push	{r7}
 8013a1c:	b083      	sub	sp, #12
 8013a1e:	af00      	add	r7, sp, #0
 8013a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8013a22:	bf00      	nop
 8013a24:	370c      	adds	r7, #12
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr

08013a2e <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 8013a2e:	b580      	push	{r7, lr}
 8013a30:	b084      	sub	sp, #16
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013a36:	2300      	movs	r3, #0
 8013a38:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	685b      	ldr	r3, [r3, #4]
 8013a40:	f003 0304 	and.w	r3, r3, #4
 8013a44:	2b04      	cmp	r3, #4
 8013a46:	d008      	beq.n	8013a5a <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	681b      	ldr	r3, [r3, #0]
 8013a4c:	685a      	ldr	r2, [r3, #4]
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013a56:	605a      	str	r2, [r3, #4]
 8013a58:	e05f      	b.n	8013b1a <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	681b      	ldr	r3, [r3, #0]
 8013a64:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013a68:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	681a      	ldr	r2, [r3, #0]
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8013a78:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 8013a7a:	2302      	movs	r3, #2
 8013a7c:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	3b01      	subs	r3, #1
 8013a82:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d110      	bne.n	8013aac <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	2201      	movs	r2, #1
 8013a8e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	f043 0202 	orr.w	r2, r3, #2
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8013aa2:	6878      	ldr	r0, [r7, #4]
 8013aa4:	f7ff ffb9 	bl	8013a1a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8013aa8:	2301      	movs	r3, #1
 8013aaa:	e03d      	b.n	8013b28 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	681b      	ldr	r3, [r3, #0]
 8013ab2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013aba:	d0e0      	beq.n	8013a7e <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	685b      	ldr	r3, [r3, #4]
 8013ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ac6:	2b40      	cmp	r3, #64	; 0x40
 8013ac8:	d107      	bne.n	8013ada <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	685a      	ldr	r2, [r3, #4]
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013ad8:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 8013ada:	2302      	movs	r3, #2
 8013adc:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	3b01      	subs	r3, #1
 8013ae2:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8013ae4:	68fb      	ldr	r3, [r7, #12]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d110      	bne.n	8013b0c <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	2201      	movs	r2, #1
 8013aee:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	68db      	ldr	r3, [r3, #12]
 8013af4:	f043 0202 	orr.w	r2, r3, #2
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	2200      	movs	r2, #0
 8013b00:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f7ff ff89 	bl	8013a1a <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	e00d      	b.n	8013b28 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	685b      	ldr	r3, [r3, #4]
 8013b12:	f003 0304 	and.w	r3, r3, #4
 8013b16:	2b04      	cmp	r3, #4
 8013b18:	d0e1      	beq.n	8013ade <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	68db      	ldr	r3, [r3, #12]
 8013b1e:	f023 0208 	bic.w	r2, r3, #8
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8013b26:	2300      	movs	r3, #0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b082      	sub	sp, #8
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d101      	bne.n	8013b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8013b3e:	2301      	movs	r3, #1
 8013b40:	e042      	b.n	8013bc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d106      	bne.n	8013b5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	2200      	movs	r2, #0
 8013b50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f7fb ff2d 	bl	800f9b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2224      	movs	r2, #36	; 0x24
 8013b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	681a      	ldr	r2, [r3, #0]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	f022 0201 	bic.w	r2, r2, #1
 8013b70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013b72:	6878      	ldr	r0, [r7, #4]
 8013b74:	f000 f8ba 	bl	8013cec <UART_SetConfig>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b01      	cmp	r3, #1
 8013b7c:	d101      	bne.n	8013b82 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8013b7e:	2301      	movs	r3, #1
 8013b80:	e022      	b.n	8013bc8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d002      	beq.n	8013b90 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8013b8a:	6878      	ldr	r0, [r7, #4]
 8013b8c:	f000 ff1a 	bl	80149c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	681b      	ldr	r3, [r3, #0]
 8013b94:	685a      	ldr	r2, [r3, #4]
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8013b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	681b      	ldr	r3, [r3, #0]
 8013ba4:	689a      	ldr	r2, [r3, #8]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8013bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	681b      	ldr	r3, [r3, #0]
 8013bb4:	681a      	ldr	r2, [r3, #0]
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	f042 0201 	orr.w	r2, r2, #1
 8013bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f000 ffa1 	bl	8014b08 <UART_CheckIdleState>
 8013bc6:	4603      	mov	r3, r0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3708      	adds	r7, #8
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b08a      	sub	sp, #40	; 0x28
 8013bd4:	af02      	add	r7, sp, #8
 8013bd6:	60f8      	str	r0, [r7, #12]
 8013bd8:	60b9      	str	r1, [r7, #8]
 8013bda:	603b      	str	r3, [r7, #0]
 8013bdc:	4613      	mov	r3, r2
 8013bde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013be6:	2b20      	cmp	r3, #32
 8013be8:	d17b      	bne.n	8013ce2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8013bea:	68bb      	ldr	r3, [r7, #8]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d002      	beq.n	8013bf6 <HAL_UART_Transmit+0x26>
 8013bf0:	88fb      	ldrh	r3, [r7, #6]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d101      	bne.n	8013bfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8013bf6:	2301      	movs	r3, #1
 8013bf8:	e074      	b.n	8013ce4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	2221      	movs	r2, #33	; 0x21
 8013c06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8013c0a:	f7fc f951 	bl	800feb0 <HAL_GetTick>
 8013c0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	88fa      	ldrh	r2, [r7, #6]
 8013c14:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	88fa      	ldrh	r2, [r7, #6]
 8013c1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	689b      	ldr	r3, [r3, #8]
 8013c24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013c28:	d108      	bne.n	8013c3c <HAL_UART_Transmit+0x6c>
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	691b      	ldr	r3, [r3, #16]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d104      	bne.n	8013c3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8013c32:	2300      	movs	r3, #0
 8013c34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	61bb      	str	r3, [r7, #24]
 8013c3a:	e003      	b.n	8013c44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8013c40:	2300      	movs	r3, #0
 8013c42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8013c44:	e030      	b.n	8013ca8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013c46:	683b      	ldr	r3, [r7, #0]
 8013c48:	9300      	str	r3, [sp, #0]
 8013c4a:	697b      	ldr	r3, [r7, #20]
 8013c4c:	2200      	movs	r2, #0
 8013c4e:	2180      	movs	r1, #128	; 0x80
 8013c50:	68f8      	ldr	r0, [r7, #12]
 8013c52:	f001 f803 	bl	8014c5c <UART_WaitOnFlagUntilTimeout>
 8013c56:	4603      	mov	r3, r0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d005      	beq.n	8013c68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013c5c:	68fb      	ldr	r3, [r7, #12]
 8013c5e:	2220      	movs	r2, #32
 8013c60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8013c64:	2303      	movs	r3, #3
 8013c66:	e03d      	b.n	8013ce4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d10b      	bne.n	8013c86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013c6e:	69bb      	ldr	r3, [r7, #24]
 8013c70:	881b      	ldrh	r3, [r3, #0]
 8013c72:	461a      	mov	r2, r3
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	681b      	ldr	r3, [r3, #0]
 8013c78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8013c7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	3302      	adds	r3, #2
 8013c82:	61bb      	str	r3, [r7, #24]
 8013c84:	e007      	b.n	8013c96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013c86:	69fb      	ldr	r3, [r7, #28]
 8013c88:	781a      	ldrb	r2, [r3, #0]
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8013c90:	69fb      	ldr	r3, [r7, #28]
 8013c92:	3301      	adds	r3, #1
 8013c94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8013c96:	68fb      	ldr	r3, [r7, #12]
 8013c98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	3b01      	subs	r3, #1
 8013ca0:	b29a      	uxth	r2, r3
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8013cae:	b29b      	uxth	r3, r3
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d1c8      	bne.n	8013c46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013cb4:	683b      	ldr	r3, [r7, #0]
 8013cb6:	9300      	str	r3, [sp, #0]
 8013cb8:	697b      	ldr	r3, [r7, #20]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	2140      	movs	r1, #64	; 0x40
 8013cbe:	68f8      	ldr	r0, [r7, #12]
 8013cc0:	f000 ffcc 	bl	8014c5c <UART_WaitOnFlagUntilTimeout>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d005      	beq.n	8013cd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	2220      	movs	r2, #32
 8013cce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8013cd2:	2303      	movs	r3, #3
 8013cd4:	e006      	b.n	8013ce4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	2220      	movs	r2, #32
 8013cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	e000      	b.n	8013ce4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8013ce2:	2302      	movs	r3, #2
  }
}
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3720      	adds	r7, #32
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8013cf0:	b092      	sub	sp, #72	; 0x48
 8013cf2:	af00      	add	r7, sp, #0
 8013cf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8013cf6:	2300      	movs	r3, #0
 8013cf8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	689a      	ldr	r2, [r3, #8]
 8013d00:	697b      	ldr	r3, [r7, #20]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	431a      	orrs	r2, r3
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	695b      	ldr	r3, [r3, #20]
 8013d0a:	431a      	orrs	r2, r3
 8013d0c:	697b      	ldr	r3, [r7, #20]
 8013d0e:	69db      	ldr	r3, [r3, #28]
 8013d10:	4313      	orrs	r3, r2
 8013d12:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	681a      	ldr	r2, [r3, #0]
 8013d1a:	4bbe      	ldr	r3, [pc, #760]	; (8014014 <UART_SetConfig+0x328>)
 8013d1c:	4013      	ands	r3, r2
 8013d1e:	697a      	ldr	r2, [r7, #20]
 8013d20:	6812      	ldr	r2, [r2, #0]
 8013d22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d24:	430b      	orrs	r3, r1
 8013d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013d28:	697b      	ldr	r3, [r7, #20]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	685b      	ldr	r3, [r3, #4]
 8013d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8013d32:	697b      	ldr	r3, [r7, #20]
 8013d34:	68da      	ldr	r2, [r3, #12]
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	430a      	orrs	r2, r1
 8013d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013d3e:	697b      	ldr	r3, [r7, #20]
 8013d40:	699b      	ldr	r3, [r3, #24]
 8013d42:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	681b      	ldr	r3, [r3, #0]
 8013d48:	4ab3      	ldr	r2, [pc, #716]	; (8014018 <UART_SetConfig+0x32c>)
 8013d4a:	4293      	cmp	r3, r2
 8013d4c:	d004      	beq.n	8013d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8013d4e:	697b      	ldr	r3, [r7, #20]
 8013d50:	6a1b      	ldr	r3, [r3, #32]
 8013d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d54:	4313      	orrs	r3, r2
 8013d56:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013d58:	697b      	ldr	r3, [r7, #20]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	689a      	ldr	r2, [r3, #8]
 8013d5e:	4baf      	ldr	r3, [pc, #700]	; (801401c <UART_SetConfig+0x330>)
 8013d60:	4013      	ands	r3, r2
 8013d62:	697a      	ldr	r2, [r7, #20]
 8013d64:	6812      	ldr	r2, [r2, #0]
 8013d66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d68:	430b      	orrs	r3, r1
 8013d6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8013d6c:	697b      	ldr	r3, [r7, #20]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d72:	f023 010f 	bic.w	r1, r3, #15
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	430a      	orrs	r2, r1
 8013d80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013d82:	697b      	ldr	r3, [r7, #20]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	4aa6      	ldr	r2, [pc, #664]	; (8014020 <UART_SetConfig+0x334>)
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	d177      	bne.n	8013e7c <UART_SetConfig+0x190>
 8013d8c:	4ba5      	ldr	r3, [pc, #660]	; (8014024 <UART_SetConfig+0x338>)
 8013d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013d94:	2b28      	cmp	r3, #40	; 0x28
 8013d96:	d86d      	bhi.n	8013e74 <UART_SetConfig+0x188>
 8013d98:	a201      	add	r2, pc, #4	; (adr r2, 8013da0 <UART_SetConfig+0xb4>)
 8013d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d9e:	bf00      	nop
 8013da0:	08013e45 	.word	0x08013e45
 8013da4:	08013e75 	.word	0x08013e75
 8013da8:	08013e75 	.word	0x08013e75
 8013dac:	08013e75 	.word	0x08013e75
 8013db0:	08013e75 	.word	0x08013e75
 8013db4:	08013e75 	.word	0x08013e75
 8013db8:	08013e75 	.word	0x08013e75
 8013dbc:	08013e75 	.word	0x08013e75
 8013dc0:	08013e4d 	.word	0x08013e4d
 8013dc4:	08013e75 	.word	0x08013e75
 8013dc8:	08013e75 	.word	0x08013e75
 8013dcc:	08013e75 	.word	0x08013e75
 8013dd0:	08013e75 	.word	0x08013e75
 8013dd4:	08013e75 	.word	0x08013e75
 8013dd8:	08013e75 	.word	0x08013e75
 8013ddc:	08013e75 	.word	0x08013e75
 8013de0:	08013e55 	.word	0x08013e55
 8013de4:	08013e75 	.word	0x08013e75
 8013de8:	08013e75 	.word	0x08013e75
 8013dec:	08013e75 	.word	0x08013e75
 8013df0:	08013e75 	.word	0x08013e75
 8013df4:	08013e75 	.word	0x08013e75
 8013df8:	08013e75 	.word	0x08013e75
 8013dfc:	08013e75 	.word	0x08013e75
 8013e00:	08013e5d 	.word	0x08013e5d
 8013e04:	08013e75 	.word	0x08013e75
 8013e08:	08013e75 	.word	0x08013e75
 8013e0c:	08013e75 	.word	0x08013e75
 8013e10:	08013e75 	.word	0x08013e75
 8013e14:	08013e75 	.word	0x08013e75
 8013e18:	08013e75 	.word	0x08013e75
 8013e1c:	08013e75 	.word	0x08013e75
 8013e20:	08013e65 	.word	0x08013e65
 8013e24:	08013e75 	.word	0x08013e75
 8013e28:	08013e75 	.word	0x08013e75
 8013e2c:	08013e75 	.word	0x08013e75
 8013e30:	08013e75 	.word	0x08013e75
 8013e34:	08013e75 	.word	0x08013e75
 8013e38:	08013e75 	.word	0x08013e75
 8013e3c:	08013e75 	.word	0x08013e75
 8013e40:	08013e6d 	.word	0x08013e6d
 8013e44:	2301      	movs	r3, #1
 8013e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e4a:	e326      	b.n	801449a <UART_SetConfig+0x7ae>
 8013e4c:	2304      	movs	r3, #4
 8013e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e52:	e322      	b.n	801449a <UART_SetConfig+0x7ae>
 8013e54:	2308      	movs	r3, #8
 8013e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e5a:	e31e      	b.n	801449a <UART_SetConfig+0x7ae>
 8013e5c:	2310      	movs	r3, #16
 8013e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e62:	e31a      	b.n	801449a <UART_SetConfig+0x7ae>
 8013e64:	2320      	movs	r3, #32
 8013e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e6a:	e316      	b.n	801449a <UART_SetConfig+0x7ae>
 8013e6c:	2340      	movs	r3, #64	; 0x40
 8013e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e72:	e312      	b.n	801449a <UART_SetConfig+0x7ae>
 8013e74:	2380      	movs	r3, #128	; 0x80
 8013e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013e7a:	e30e      	b.n	801449a <UART_SetConfig+0x7ae>
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	4a69      	ldr	r2, [pc, #420]	; (8014028 <UART_SetConfig+0x33c>)
 8013e82:	4293      	cmp	r3, r2
 8013e84:	d130      	bne.n	8013ee8 <UART_SetConfig+0x1fc>
 8013e86:	4b67      	ldr	r3, [pc, #412]	; (8014024 <UART_SetConfig+0x338>)
 8013e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013e8a:	f003 0307 	and.w	r3, r3, #7
 8013e8e:	2b05      	cmp	r3, #5
 8013e90:	d826      	bhi.n	8013ee0 <UART_SetConfig+0x1f4>
 8013e92:	a201      	add	r2, pc, #4	; (adr r2, 8013e98 <UART_SetConfig+0x1ac>)
 8013e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e98:	08013eb1 	.word	0x08013eb1
 8013e9c:	08013eb9 	.word	0x08013eb9
 8013ea0:	08013ec1 	.word	0x08013ec1
 8013ea4:	08013ec9 	.word	0x08013ec9
 8013ea8:	08013ed1 	.word	0x08013ed1
 8013eac:	08013ed9 	.word	0x08013ed9
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013eb6:	e2f0      	b.n	801449a <UART_SetConfig+0x7ae>
 8013eb8:	2304      	movs	r3, #4
 8013eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ebe:	e2ec      	b.n	801449a <UART_SetConfig+0x7ae>
 8013ec0:	2308      	movs	r3, #8
 8013ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ec6:	e2e8      	b.n	801449a <UART_SetConfig+0x7ae>
 8013ec8:	2310      	movs	r3, #16
 8013eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ece:	e2e4      	b.n	801449a <UART_SetConfig+0x7ae>
 8013ed0:	2320      	movs	r3, #32
 8013ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ed6:	e2e0      	b.n	801449a <UART_SetConfig+0x7ae>
 8013ed8:	2340      	movs	r3, #64	; 0x40
 8013eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ede:	e2dc      	b.n	801449a <UART_SetConfig+0x7ae>
 8013ee0:	2380      	movs	r3, #128	; 0x80
 8013ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ee6:	e2d8      	b.n	801449a <UART_SetConfig+0x7ae>
 8013ee8:	697b      	ldr	r3, [r7, #20]
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	4a4f      	ldr	r2, [pc, #316]	; (801402c <UART_SetConfig+0x340>)
 8013eee:	4293      	cmp	r3, r2
 8013ef0:	d130      	bne.n	8013f54 <UART_SetConfig+0x268>
 8013ef2:	4b4c      	ldr	r3, [pc, #304]	; (8014024 <UART_SetConfig+0x338>)
 8013ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013ef6:	f003 0307 	and.w	r3, r3, #7
 8013efa:	2b05      	cmp	r3, #5
 8013efc:	d826      	bhi.n	8013f4c <UART_SetConfig+0x260>
 8013efe:	a201      	add	r2, pc, #4	; (adr r2, 8013f04 <UART_SetConfig+0x218>)
 8013f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f04:	08013f1d 	.word	0x08013f1d
 8013f08:	08013f25 	.word	0x08013f25
 8013f0c:	08013f2d 	.word	0x08013f2d
 8013f10:	08013f35 	.word	0x08013f35
 8013f14:	08013f3d 	.word	0x08013f3d
 8013f18:	08013f45 	.word	0x08013f45
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f22:	e2ba      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f24:	2304      	movs	r3, #4
 8013f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f2a:	e2b6      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f2c:	2308      	movs	r3, #8
 8013f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f32:	e2b2      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f34:	2310      	movs	r3, #16
 8013f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f3a:	e2ae      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f3c:	2320      	movs	r3, #32
 8013f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f42:	e2aa      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f44:	2340      	movs	r3, #64	; 0x40
 8013f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f4a:	e2a6      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f4c:	2380      	movs	r3, #128	; 0x80
 8013f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f52:	e2a2      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f54:	697b      	ldr	r3, [r7, #20]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	4a35      	ldr	r2, [pc, #212]	; (8014030 <UART_SetConfig+0x344>)
 8013f5a:	4293      	cmp	r3, r2
 8013f5c:	d130      	bne.n	8013fc0 <UART_SetConfig+0x2d4>
 8013f5e:	4b31      	ldr	r3, [pc, #196]	; (8014024 <UART_SetConfig+0x338>)
 8013f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013f62:	f003 0307 	and.w	r3, r3, #7
 8013f66:	2b05      	cmp	r3, #5
 8013f68:	d826      	bhi.n	8013fb8 <UART_SetConfig+0x2cc>
 8013f6a:	a201      	add	r2, pc, #4	; (adr r2, 8013f70 <UART_SetConfig+0x284>)
 8013f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f70:	08013f89 	.word	0x08013f89
 8013f74:	08013f91 	.word	0x08013f91
 8013f78:	08013f99 	.word	0x08013f99
 8013f7c:	08013fa1 	.word	0x08013fa1
 8013f80:	08013fa9 	.word	0x08013fa9
 8013f84:	08013fb1 	.word	0x08013fb1
 8013f88:	2300      	movs	r3, #0
 8013f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f8e:	e284      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f90:	2304      	movs	r3, #4
 8013f92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f96:	e280      	b.n	801449a <UART_SetConfig+0x7ae>
 8013f98:	2308      	movs	r3, #8
 8013f9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013f9e:	e27c      	b.n	801449a <UART_SetConfig+0x7ae>
 8013fa0:	2310      	movs	r3, #16
 8013fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fa6:	e278      	b.n	801449a <UART_SetConfig+0x7ae>
 8013fa8:	2320      	movs	r3, #32
 8013faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fae:	e274      	b.n	801449a <UART_SetConfig+0x7ae>
 8013fb0:	2340      	movs	r3, #64	; 0x40
 8013fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fb6:	e270      	b.n	801449a <UART_SetConfig+0x7ae>
 8013fb8:	2380      	movs	r3, #128	; 0x80
 8013fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013fbe:	e26c      	b.n	801449a <UART_SetConfig+0x7ae>
 8013fc0:	697b      	ldr	r3, [r7, #20]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	4a1b      	ldr	r2, [pc, #108]	; (8014034 <UART_SetConfig+0x348>)
 8013fc6:	4293      	cmp	r3, r2
 8013fc8:	d142      	bne.n	8014050 <UART_SetConfig+0x364>
 8013fca:	4b16      	ldr	r3, [pc, #88]	; (8014024 <UART_SetConfig+0x338>)
 8013fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013fce:	f003 0307 	and.w	r3, r3, #7
 8013fd2:	2b05      	cmp	r3, #5
 8013fd4:	d838      	bhi.n	8014048 <UART_SetConfig+0x35c>
 8013fd6:	a201      	add	r2, pc, #4	; (adr r2, 8013fdc <UART_SetConfig+0x2f0>)
 8013fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fdc:	08013ff5 	.word	0x08013ff5
 8013fe0:	08013ffd 	.word	0x08013ffd
 8013fe4:	08014005 	.word	0x08014005
 8013fe8:	0801400d 	.word	0x0801400d
 8013fec:	08014039 	.word	0x08014039
 8013ff0:	08014041 	.word	0x08014041
 8013ff4:	2300      	movs	r3, #0
 8013ff6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013ffa:	e24e      	b.n	801449a <UART_SetConfig+0x7ae>
 8013ffc:	2304      	movs	r3, #4
 8013ffe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014002:	e24a      	b.n	801449a <UART_SetConfig+0x7ae>
 8014004:	2308      	movs	r3, #8
 8014006:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801400a:	e246      	b.n	801449a <UART_SetConfig+0x7ae>
 801400c:	2310      	movs	r3, #16
 801400e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014012:	e242      	b.n	801449a <UART_SetConfig+0x7ae>
 8014014:	cfff69f3 	.word	0xcfff69f3
 8014018:	58000c00 	.word	0x58000c00
 801401c:	11fff4ff 	.word	0x11fff4ff
 8014020:	40011000 	.word	0x40011000
 8014024:	58024400 	.word	0x58024400
 8014028:	40004400 	.word	0x40004400
 801402c:	40004800 	.word	0x40004800
 8014030:	40004c00 	.word	0x40004c00
 8014034:	40005000 	.word	0x40005000
 8014038:	2320      	movs	r3, #32
 801403a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801403e:	e22c      	b.n	801449a <UART_SetConfig+0x7ae>
 8014040:	2340      	movs	r3, #64	; 0x40
 8014042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014046:	e228      	b.n	801449a <UART_SetConfig+0x7ae>
 8014048:	2380      	movs	r3, #128	; 0x80
 801404a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801404e:	e224      	b.n	801449a <UART_SetConfig+0x7ae>
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	4ab1      	ldr	r2, [pc, #708]	; (801431c <UART_SetConfig+0x630>)
 8014056:	4293      	cmp	r3, r2
 8014058:	d176      	bne.n	8014148 <UART_SetConfig+0x45c>
 801405a:	4bb1      	ldr	r3, [pc, #708]	; (8014320 <UART_SetConfig+0x634>)
 801405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801405e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014062:	2b28      	cmp	r3, #40	; 0x28
 8014064:	d86c      	bhi.n	8014140 <UART_SetConfig+0x454>
 8014066:	a201      	add	r2, pc, #4	; (adr r2, 801406c <UART_SetConfig+0x380>)
 8014068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801406c:	08014111 	.word	0x08014111
 8014070:	08014141 	.word	0x08014141
 8014074:	08014141 	.word	0x08014141
 8014078:	08014141 	.word	0x08014141
 801407c:	08014141 	.word	0x08014141
 8014080:	08014141 	.word	0x08014141
 8014084:	08014141 	.word	0x08014141
 8014088:	08014141 	.word	0x08014141
 801408c:	08014119 	.word	0x08014119
 8014090:	08014141 	.word	0x08014141
 8014094:	08014141 	.word	0x08014141
 8014098:	08014141 	.word	0x08014141
 801409c:	08014141 	.word	0x08014141
 80140a0:	08014141 	.word	0x08014141
 80140a4:	08014141 	.word	0x08014141
 80140a8:	08014141 	.word	0x08014141
 80140ac:	08014121 	.word	0x08014121
 80140b0:	08014141 	.word	0x08014141
 80140b4:	08014141 	.word	0x08014141
 80140b8:	08014141 	.word	0x08014141
 80140bc:	08014141 	.word	0x08014141
 80140c0:	08014141 	.word	0x08014141
 80140c4:	08014141 	.word	0x08014141
 80140c8:	08014141 	.word	0x08014141
 80140cc:	08014129 	.word	0x08014129
 80140d0:	08014141 	.word	0x08014141
 80140d4:	08014141 	.word	0x08014141
 80140d8:	08014141 	.word	0x08014141
 80140dc:	08014141 	.word	0x08014141
 80140e0:	08014141 	.word	0x08014141
 80140e4:	08014141 	.word	0x08014141
 80140e8:	08014141 	.word	0x08014141
 80140ec:	08014131 	.word	0x08014131
 80140f0:	08014141 	.word	0x08014141
 80140f4:	08014141 	.word	0x08014141
 80140f8:	08014141 	.word	0x08014141
 80140fc:	08014141 	.word	0x08014141
 8014100:	08014141 	.word	0x08014141
 8014104:	08014141 	.word	0x08014141
 8014108:	08014141 	.word	0x08014141
 801410c:	08014139 	.word	0x08014139
 8014110:	2301      	movs	r3, #1
 8014112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014116:	e1c0      	b.n	801449a <UART_SetConfig+0x7ae>
 8014118:	2304      	movs	r3, #4
 801411a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801411e:	e1bc      	b.n	801449a <UART_SetConfig+0x7ae>
 8014120:	2308      	movs	r3, #8
 8014122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014126:	e1b8      	b.n	801449a <UART_SetConfig+0x7ae>
 8014128:	2310      	movs	r3, #16
 801412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801412e:	e1b4      	b.n	801449a <UART_SetConfig+0x7ae>
 8014130:	2320      	movs	r3, #32
 8014132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014136:	e1b0      	b.n	801449a <UART_SetConfig+0x7ae>
 8014138:	2340      	movs	r3, #64	; 0x40
 801413a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801413e:	e1ac      	b.n	801449a <UART_SetConfig+0x7ae>
 8014140:	2380      	movs	r3, #128	; 0x80
 8014142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014146:	e1a8      	b.n	801449a <UART_SetConfig+0x7ae>
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	4a75      	ldr	r2, [pc, #468]	; (8014324 <UART_SetConfig+0x638>)
 801414e:	4293      	cmp	r3, r2
 8014150:	d130      	bne.n	80141b4 <UART_SetConfig+0x4c8>
 8014152:	4b73      	ldr	r3, [pc, #460]	; (8014320 <UART_SetConfig+0x634>)
 8014154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014156:	f003 0307 	and.w	r3, r3, #7
 801415a:	2b05      	cmp	r3, #5
 801415c:	d826      	bhi.n	80141ac <UART_SetConfig+0x4c0>
 801415e:	a201      	add	r2, pc, #4	; (adr r2, 8014164 <UART_SetConfig+0x478>)
 8014160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014164:	0801417d 	.word	0x0801417d
 8014168:	08014185 	.word	0x08014185
 801416c:	0801418d 	.word	0x0801418d
 8014170:	08014195 	.word	0x08014195
 8014174:	0801419d 	.word	0x0801419d
 8014178:	080141a5 	.word	0x080141a5
 801417c:	2300      	movs	r3, #0
 801417e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014182:	e18a      	b.n	801449a <UART_SetConfig+0x7ae>
 8014184:	2304      	movs	r3, #4
 8014186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801418a:	e186      	b.n	801449a <UART_SetConfig+0x7ae>
 801418c:	2308      	movs	r3, #8
 801418e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014192:	e182      	b.n	801449a <UART_SetConfig+0x7ae>
 8014194:	2310      	movs	r3, #16
 8014196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801419a:	e17e      	b.n	801449a <UART_SetConfig+0x7ae>
 801419c:	2320      	movs	r3, #32
 801419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141a2:	e17a      	b.n	801449a <UART_SetConfig+0x7ae>
 80141a4:	2340      	movs	r3, #64	; 0x40
 80141a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141aa:	e176      	b.n	801449a <UART_SetConfig+0x7ae>
 80141ac:	2380      	movs	r3, #128	; 0x80
 80141ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141b2:	e172      	b.n	801449a <UART_SetConfig+0x7ae>
 80141b4:	697b      	ldr	r3, [r7, #20]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	4a5b      	ldr	r2, [pc, #364]	; (8014328 <UART_SetConfig+0x63c>)
 80141ba:	4293      	cmp	r3, r2
 80141bc:	d130      	bne.n	8014220 <UART_SetConfig+0x534>
 80141be:	4b58      	ldr	r3, [pc, #352]	; (8014320 <UART_SetConfig+0x634>)
 80141c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80141c2:	f003 0307 	and.w	r3, r3, #7
 80141c6:	2b05      	cmp	r3, #5
 80141c8:	d826      	bhi.n	8014218 <UART_SetConfig+0x52c>
 80141ca:	a201      	add	r2, pc, #4	; (adr r2, 80141d0 <UART_SetConfig+0x4e4>)
 80141cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141d0:	080141e9 	.word	0x080141e9
 80141d4:	080141f1 	.word	0x080141f1
 80141d8:	080141f9 	.word	0x080141f9
 80141dc:	08014201 	.word	0x08014201
 80141e0:	08014209 	.word	0x08014209
 80141e4:	08014211 	.word	0x08014211
 80141e8:	2300      	movs	r3, #0
 80141ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141ee:	e154      	b.n	801449a <UART_SetConfig+0x7ae>
 80141f0:	2304      	movs	r3, #4
 80141f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141f6:	e150      	b.n	801449a <UART_SetConfig+0x7ae>
 80141f8:	2308      	movs	r3, #8
 80141fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80141fe:	e14c      	b.n	801449a <UART_SetConfig+0x7ae>
 8014200:	2310      	movs	r3, #16
 8014202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014206:	e148      	b.n	801449a <UART_SetConfig+0x7ae>
 8014208:	2320      	movs	r3, #32
 801420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801420e:	e144      	b.n	801449a <UART_SetConfig+0x7ae>
 8014210:	2340      	movs	r3, #64	; 0x40
 8014212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014216:	e140      	b.n	801449a <UART_SetConfig+0x7ae>
 8014218:	2380      	movs	r3, #128	; 0x80
 801421a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801421e:	e13c      	b.n	801449a <UART_SetConfig+0x7ae>
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4a41      	ldr	r2, [pc, #260]	; (801432c <UART_SetConfig+0x640>)
 8014226:	4293      	cmp	r3, r2
 8014228:	f040 8082 	bne.w	8014330 <UART_SetConfig+0x644>
 801422c:	4b3c      	ldr	r3, [pc, #240]	; (8014320 <UART_SetConfig+0x634>)
 801422e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014230:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014234:	2b28      	cmp	r3, #40	; 0x28
 8014236:	d86d      	bhi.n	8014314 <UART_SetConfig+0x628>
 8014238:	a201      	add	r2, pc, #4	; (adr r2, 8014240 <UART_SetConfig+0x554>)
 801423a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801423e:	bf00      	nop
 8014240:	080142e5 	.word	0x080142e5
 8014244:	08014315 	.word	0x08014315
 8014248:	08014315 	.word	0x08014315
 801424c:	08014315 	.word	0x08014315
 8014250:	08014315 	.word	0x08014315
 8014254:	08014315 	.word	0x08014315
 8014258:	08014315 	.word	0x08014315
 801425c:	08014315 	.word	0x08014315
 8014260:	080142ed 	.word	0x080142ed
 8014264:	08014315 	.word	0x08014315
 8014268:	08014315 	.word	0x08014315
 801426c:	08014315 	.word	0x08014315
 8014270:	08014315 	.word	0x08014315
 8014274:	08014315 	.word	0x08014315
 8014278:	08014315 	.word	0x08014315
 801427c:	08014315 	.word	0x08014315
 8014280:	080142f5 	.word	0x080142f5
 8014284:	08014315 	.word	0x08014315
 8014288:	08014315 	.word	0x08014315
 801428c:	08014315 	.word	0x08014315
 8014290:	08014315 	.word	0x08014315
 8014294:	08014315 	.word	0x08014315
 8014298:	08014315 	.word	0x08014315
 801429c:	08014315 	.word	0x08014315
 80142a0:	080142fd 	.word	0x080142fd
 80142a4:	08014315 	.word	0x08014315
 80142a8:	08014315 	.word	0x08014315
 80142ac:	08014315 	.word	0x08014315
 80142b0:	08014315 	.word	0x08014315
 80142b4:	08014315 	.word	0x08014315
 80142b8:	08014315 	.word	0x08014315
 80142bc:	08014315 	.word	0x08014315
 80142c0:	08014305 	.word	0x08014305
 80142c4:	08014315 	.word	0x08014315
 80142c8:	08014315 	.word	0x08014315
 80142cc:	08014315 	.word	0x08014315
 80142d0:	08014315 	.word	0x08014315
 80142d4:	08014315 	.word	0x08014315
 80142d8:	08014315 	.word	0x08014315
 80142dc:	08014315 	.word	0x08014315
 80142e0:	0801430d 	.word	0x0801430d
 80142e4:	2301      	movs	r3, #1
 80142e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142ea:	e0d6      	b.n	801449a <UART_SetConfig+0x7ae>
 80142ec:	2304      	movs	r3, #4
 80142ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142f2:	e0d2      	b.n	801449a <UART_SetConfig+0x7ae>
 80142f4:	2308      	movs	r3, #8
 80142f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80142fa:	e0ce      	b.n	801449a <UART_SetConfig+0x7ae>
 80142fc:	2310      	movs	r3, #16
 80142fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014302:	e0ca      	b.n	801449a <UART_SetConfig+0x7ae>
 8014304:	2320      	movs	r3, #32
 8014306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801430a:	e0c6      	b.n	801449a <UART_SetConfig+0x7ae>
 801430c:	2340      	movs	r3, #64	; 0x40
 801430e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014312:	e0c2      	b.n	801449a <UART_SetConfig+0x7ae>
 8014314:	2380      	movs	r3, #128	; 0x80
 8014316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801431a:	e0be      	b.n	801449a <UART_SetConfig+0x7ae>
 801431c:	40011400 	.word	0x40011400
 8014320:	58024400 	.word	0x58024400
 8014324:	40007800 	.word	0x40007800
 8014328:	40007c00 	.word	0x40007c00
 801432c:	40011800 	.word	0x40011800
 8014330:	697b      	ldr	r3, [r7, #20]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	4aad      	ldr	r2, [pc, #692]	; (80145ec <UART_SetConfig+0x900>)
 8014336:	4293      	cmp	r3, r2
 8014338:	d176      	bne.n	8014428 <UART_SetConfig+0x73c>
 801433a:	4bad      	ldr	r3, [pc, #692]	; (80145f0 <UART_SetConfig+0x904>)
 801433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801433e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014342:	2b28      	cmp	r3, #40	; 0x28
 8014344:	d86c      	bhi.n	8014420 <UART_SetConfig+0x734>
 8014346:	a201      	add	r2, pc, #4	; (adr r2, 801434c <UART_SetConfig+0x660>)
 8014348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801434c:	080143f1 	.word	0x080143f1
 8014350:	08014421 	.word	0x08014421
 8014354:	08014421 	.word	0x08014421
 8014358:	08014421 	.word	0x08014421
 801435c:	08014421 	.word	0x08014421
 8014360:	08014421 	.word	0x08014421
 8014364:	08014421 	.word	0x08014421
 8014368:	08014421 	.word	0x08014421
 801436c:	080143f9 	.word	0x080143f9
 8014370:	08014421 	.word	0x08014421
 8014374:	08014421 	.word	0x08014421
 8014378:	08014421 	.word	0x08014421
 801437c:	08014421 	.word	0x08014421
 8014380:	08014421 	.word	0x08014421
 8014384:	08014421 	.word	0x08014421
 8014388:	08014421 	.word	0x08014421
 801438c:	08014401 	.word	0x08014401
 8014390:	08014421 	.word	0x08014421
 8014394:	08014421 	.word	0x08014421
 8014398:	08014421 	.word	0x08014421
 801439c:	08014421 	.word	0x08014421
 80143a0:	08014421 	.word	0x08014421
 80143a4:	08014421 	.word	0x08014421
 80143a8:	08014421 	.word	0x08014421
 80143ac:	08014409 	.word	0x08014409
 80143b0:	08014421 	.word	0x08014421
 80143b4:	08014421 	.word	0x08014421
 80143b8:	08014421 	.word	0x08014421
 80143bc:	08014421 	.word	0x08014421
 80143c0:	08014421 	.word	0x08014421
 80143c4:	08014421 	.word	0x08014421
 80143c8:	08014421 	.word	0x08014421
 80143cc:	08014411 	.word	0x08014411
 80143d0:	08014421 	.word	0x08014421
 80143d4:	08014421 	.word	0x08014421
 80143d8:	08014421 	.word	0x08014421
 80143dc:	08014421 	.word	0x08014421
 80143e0:	08014421 	.word	0x08014421
 80143e4:	08014421 	.word	0x08014421
 80143e8:	08014421 	.word	0x08014421
 80143ec:	08014419 	.word	0x08014419
 80143f0:	2301      	movs	r3, #1
 80143f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143f6:	e050      	b.n	801449a <UART_SetConfig+0x7ae>
 80143f8:	2304      	movs	r3, #4
 80143fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80143fe:	e04c      	b.n	801449a <UART_SetConfig+0x7ae>
 8014400:	2308      	movs	r3, #8
 8014402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014406:	e048      	b.n	801449a <UART_SetConfig+0x7ae>
 8014408:	2310      	movs	r3, #16
 801440a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801440e:	e044      	b.n	801449a <UART_SetConfig+0x7ae>
 8014410:	2320      	movs	r3, #32
 8014412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014416:	e040      	b.n	801449a <UART_SetConfig+0x7ae>
 8014418:	2340      	movs	r3, #64	; 0x40
 801441a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801441e:	e03c      	b.n	801449a <UART_SetConfig+0x7ae>
 8014420:	2380      	movs	r3, #128	; 0x80
 8014422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014426:	e038      	b.n	801449a <UART_SetConfig+0x7ae>
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	4a71      	ldr	r2, [pc, #452]	; (80145f4 <UART_SetConfig+0x908>)
 801442e:	4293      	cmp	r3, r2
 8014430:	d130      	bne.n	8014494 <UART_SetConfig+0x7a8>
 8014432:	4b6f      	ldr	r3, [pc, #444]	; (80145f0 <UART_SetConfig+0x904>)
 8014434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014436:	f003 0307 	and.w	r3, r3, #7
 801443a:	2b05      	cmp	r3, #5
 801443c:	d826      	bhi.n	801448c <UART_SetConfig+0x7a0>
 801443e:	a201      	add	r2, pc, #4	; (adr r2, 8014444 <UART_SetConfig+0x758>)
 8014440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014444:	0801445d 	.word	0x0801445d
 8014448:	08014465 	.word	0x08014465
 801444c:	0801446d 	.word	0x0801446d
 8014450:	08014475 	.word	0x08014475
 8014454:	0801447d 	.word	0x0801447d
 8014458:	08014485 	.word	0x08014485
 801445c:	2302      	movs	r3, #2
 801445e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014462:	e01a      	b.n	801449a <UART_SetConfig+0x7ae>
 8014464:	2304      	movs	r3, #4
 8014466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801446a:	e016      	b.n	801449a <UART_SetConfig+0x7ae>
 801446c:	2308      	movs	r3, #8
 801446e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014472:	e012      	b.n	801449a <UART_SetConfig+0x7ae>
 8014474:	2310      	movs	r3, #16
 8014476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801447a:	e00e      	b.n	801449a <UART_SetConfig+0x7ae>
 801447c:	2320      	movs	r3, #32
 801447e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014482:	e00a      	b.n	801449a <UART_SetConfig+0x7ae>
 8014484:	2340      	movs	r3, #64	; 0x40
 8014486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801448a:	e006      	b.n	801449a <UART_SetConfig+0x7ae>
 801448c:	2380      	movs	r3, #128	; 0x80
 801448e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8014492:	e002      	b.n	801449a <UART_SetConfig+0x7ae>
 8014494:	2380      	movs	r3, #128	; 0x80
 8014496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	4a55      	ldr	r2, [pc, #340]	; (80145f4 <UART_SetConfig+0x908>)
 80144a0:	4293      	cmp	r3, r2
 80144a2:	f040 80f8 	bne.w	8014696 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80144a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80144aa:	2b20      	cmp	r3, #32
 80144ac:	dc46      	bgt.n	801453c <UART_SetConfig+0x850>
 80144ae:	2b02      	cmp	r3, #2
 80144b0:	db75      	blt.n	801459e <UART_SetConfig+0x8b2>
 80144b2:	3b02      	subs	r3, #2
 80144b4:	2b1e      	cmp	r3, #30
 80144b6:	d872      	bhi.n	801459e <UART_SetConfig+0x8b2>
 80144b8:	a201      	add	r2, pc, #4	; (adr r2, 80144c0 <UART_SetConfig+0x7d4>)
 80144ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80144be:	bf00      	nop
 80144c0:	08014543 	.word	0x08014543
 80144c4:	0801459f 	.word	0x0801459f
 80144c8:	0801454b 	.word	0x0801454b
 80144cc:	0801459f 	.word	0x0801459f
 80144d0:	0801459f 	.word	0x0801459f
 80144d4:	0801459f 	.word	0x0801459f
 80144d8:	0801455b 	.word	0x0801455b
 80144dc:	0801459f 	.word	0x0801459f
 80144e0:	0801459f 	.word	0x0801459f
 80144e4:	0801459f 	.word	0x0801459f
 80144e8:	0801459f 	.word	0x0801459f
 80144ec:	0801459f 	.word	0x0801459f
 80144f0:	0801459f 	.word	0x0801459f
 80144f4:	0801459f 	.word	0x0801459f
 80144f8:	0801456b 	.word	0x0801456b
 80144fc:	0801459f 	.word	0x0801459f
 8014500:	0801459f 	.word	0x0801459f
 8014504:	0801459f 	.word	0x0801459f
 8014508:	0801459f 	.word	0x0801459f
 801450c:	0801459f 	.word	0x0801459f
 8014510:	0801459f 	.word	0x0801459f
 8014514:	0801459f 	.word	0x0801459f
 8014518:	0801459f 	.word	0x0801459f
 801451c:	0801459f 	.word	0x0801459f
 8014520:	0801459f 	.word	0x0801459f
 8014524:	0801459f 	.word	0x0801459f
 8014528:	0801459f 	.word	0x0801459f
 801452c:	0801459f 	.word	0x0801459f
 8014530:	0801459f 	.word	0x0801459f
 8014534:	0801459f 	.word	0x0801459f
 8014538:	08014591 	.word	0x08014591
 801453c:	2b40      	cmp	r3, #64	; 0x40
 801453e:	d02a      	beq.n	8014596 <UART_SetConfig+0x8aa>
 8014540:	e02d      	b.n	801459e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8014542:	f7fe fd25 	bl	8012f90 <HAL_RCCEx_GetD3PCLK1Freq>
 8014546:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014548:	e02f      	b.n	80145aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801454a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801454e:	4618      	mov	r0, r3
 8014550:	f7fe fd34 	bl	8012fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8014554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014558:	e027      	b.n	80145aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801455a:	f107 0318 	add.w	r3, r7, #24
 801455e:	4618      	mov	r0, r3
 8014560:	f7fe fe80 	bl	8013264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8014564:	69fb      	ldr	r3, [r7, #28]
 8014566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014568:	e01f      	b.n	80145aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801456a:	4b21      	ldr	r3, [pc, #132]	; (80145f0 <UART_SetConfig+0x904>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	f003 0320 	and.w	r3, r3, #32
 8014572:	2b00      	cmp	r3, #0
 8014574:	d009      	beq.n	801458a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8014576:	4b1e      	ldr	r3, [pc, #120]	; (80145f0 <UART_SetConfig+0x904>)
 8014578:	681b      	ldr	r3, [r3, #0]
 801457a:	08db      	lsrs	r3, r3, #3
 801457c:	f003 0303 	and.w	r3, r3, #3
 8014580:	4a1d      	ldr	r2, [pc, #116]	; (80145f8 <UART_SetConfig+0x90c>)
 8014582:	fa22 f303 	lsr.w	r3, r2, r3
 8014586:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014588:	e00f      	b.n	80145aa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801458a:	4b1b      	ldr	r3, [pc, #108]	; (80145f8 <UART_SetConfig+0x90c>)
 801458c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801458e:	e00c      	b.n	80145aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014590:	4b1a      	ldr	r3, [pc, #104]	; (80145fc <UART_SetConfig+0x910>)
 8014592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014594:	e009      	b.n	80145aa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801459a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801459c:	e005      	b.n	80145aa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801459e:	2300      	movs	r3, #0
 80145a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80145a2:	2301      	movs	r3, #1
 80145a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80145a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80145aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ac:	2b00      	cmp	r3, #0
 80145ae:	f000 81ee 	beq.w	801498e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145b6:	4a12      	ldr	r2, [pc, #72]	; (8014600 <UART_SetConfig+0x914>)
 80145b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80145bc:	461a      	mov	r2, r3
 80145be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80145c4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80145c6:	697b      	ldr	r3, [r7, #20]
 80145c8:	685a      	ldr	r2, [r3, #4]
 80145ca:	4613      	mov	r3, r2
 80145cc:	005b      	lsls	r3, r3, #1
 80145ce:	4413      	add	r3, r2
 80145d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d305      	bcc.n	80145e2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	685b      	ldr	r3, [r3, #4]
 80145da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80145dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145de:	429a      	cmp	r2, r3
 80145e0:	d910      	bls.n	8014604 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80145e2:	2301      	movs	r3, #1
 80145e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80145e8:	e1d1      	b.n	801498e <UART_SetConfig+0xca2>
 80145ea:	bf00      	nop
 80145ec:	40011c00 	.word	0x40011c00
 80145f0:	58024400 	.word	0x58024400
 80145f4:	58000c00 	.word	0x58000c00
 80145f8:	03d09000 	.word	0x03d09000
 80145fc:	003d0900 	.word	0x003d0900
 8014600:	08019140 	.word	0x08019140
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8014604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014606:	2200      	movs	r2, #0
 8014608:	60bb      	str	r3, [r7, #8]
 801460a:	60fa      	str	r2, [r7, #12]
 801460c:	697b      	ldr	r3, [r7, #20]
 801460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014610:	4ac0      	ldr	r2, [pc, #768]	; (8014914 <UART_SetConfig+0xc28>)
 8014612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014616:	b29b      	uxth	r3, r3
 8014618:	2200      	movs	r2, #0
 801461a:	603b      	str	r3, [r7, #0]
 801461c:	607a      	str	r2, [r7, #4]
 801461e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014622:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8014626:	f7ec f8e7 	bl	80007f8 <__aeabi_uldivmod>
 801462a:	4602      	mov	r2, r0
 801462c:	460b      	mov	r3, r1
 801462e:	4610      	mov	r0, r2
 8014630:	4619      	mov	r1, r3
 8014632:	f04f 0200 	mov.w	r2, #0
 8014636:	f04f 0300 	mov.w	r3, #0
 801463a:	020b      	lsls	r3, r1, #8
 801463c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8014640:	0202      	lsls	r2, r0, #8
 8014642:	6979      	ldr	r1, [r7, #20]
 8014644:	6849      	ldr	r1, [r1, #4]
 8014646:	0849      	lsrs	r1, r1, #1
 8014648:	2000      	movs	r0, #0
 801464a:	460c      	mov	r4, r1
 801464c:	4605      	mov	r5, r0
 801464e:	eb12 0804 	adds.w	r8, r2, r4
 8014652:	eb43 0905 	adc.w	r9, r3, r5
 8014656:	697b      	ldr	r3, [r7, #20]
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	2200      	movs	r2, #0
 801465c:	469a      	mov	sl, r3
 801465e:	4693      	mov	fp, r2
 8014660:	4652      	mov	r2, sl
 8014662:	465b      	mov	r3, fp
 8014664:	4640      	mov	r0, r8
 8014666:	4649      	mov	r1, r9
 8014668:	f7ec f8c6 	bl	80007f8 <__aeabi_uldivmod>
 801466c:	4602      	mov	r2, r0
 801466e:	460b      	mov	r3, r1
 8014670:	4613      	mov	r3, r2
 8014672:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014676:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801467a:	d308      	bcc.n	801468e <UART_SetConfig+0x9a2>
 801467c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801467e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014682:	d204      	bcs.n	801468e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801468a:	60da      	str	r2, [r3, #12]
 801468c:	e17f      	b.n	801498e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801468e:	2301      	movs	r3, #1
 8014690:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8014694:	e17b      	b.n	801498e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	69db      	ldr	r3, [r3, #28]
 801469a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801469e:	f040 80bd 	bne.w	801481c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80146a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80146a6:	2b20      	cmp	r3, #32
 80146a8:	dc48      	bgt.n	801473c <UART_SetConfig+0xa50>
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	db7b      	blt.n	80147a6 <UART_SetConfig+0xaba>
 80146ae:	2b20      	cmp	r3, #32
 80146b0:	d879      	bhi.n	80147a6 <UART_SetConfig+0xaba>
 80146b2:	a201      	add	r2, pc, #4	; (adr r2, 80146b8 <UART_SetConfig+0x9cc>)
 80146b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146b8:	08014743 	.word	0x08014743
 80146bc:	0801474b 	.word	0x0801474b
 80146c0:	080147a7 	.word	0x080147a7
 80146c4:	080147a7 	.word	0x080147a7
 80146c8:	08014753 	.word	0x08014753
 80146cc:	080147a7 	.word	0x080147a7
 80146d0:	080147a7 	.word	0x080147a7
 80146d4:	080147a7 	.word	0x080147a7
 80146d8:	08014763 	.word	0x08014763
 80146dc:	080147a7 	.word	0x080147a7
 80146e0:	080147a7 	.word	0x080147a7
 80146e4:	080147a7 	.word	0x080147a7
 80146e8:	080147a7 	.word	0x080147a7
 80146ec:	080147a7 	.word	0x080147a7
 80146f0:	080147a7 	.word	0x080147a7
 80146f4:	080147a7 	.word	0x080147a7
 80146f8:	08014773 	.word	0x08014773
 80146fc:	080147a7 	.word	0x080147a7
 8014700:	080147a7 	.word	0x080147a7
 8014704:	080147a7 	.word	0x080147a7
 8014708:	080147a7 	.word	0x080147a7
 801470c:	080147a7 	.word	0x080147a7
 8014710:	080147a7 	.word	0x080147a7
 8014714:	080147a7 	.word	0x080147a7
 8014718:	080147a7 	.word	0x080147a7
 801471c:	080147a7 	.word	0x080147a7
 8014720:	080147a7 	.word	0x080147a7
 8014724:	080147a7 	.word	0x080147a7
 8014728:	080147a7 	.word	0x080147a7
 801472c:	080147a7 	.word	0x080147a7
 8014730:	080147a7 	.word	0x080147a7
 8014734:	080147a7 	.word	0x080147a7
 8014738:	08014799 	.word	0x08014799
 801473c:	2b40      	cmp	r3, #64	; 0x40
 801473e:	d02e      	beq.n	801479e <UART_SetConfig+0xab2>
 8014740:	e031      	b.n	80147a6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014742:	f7fd fa59 	bl	8011bf8 <HAL_RCC_GetPCLK1Freq>
 8014746:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014748:	e033      	b.n	80147b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801474a:	f7fd fa6b 	bl	8011c24 <HAL_RCC_GetPCLK2Freq>
 801474e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8014750:	e02f      	b.n	80147b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8014752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014756:	4618      	mov	r0, r3
 8014758:	f7fe fc30 	bl	8012fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801475c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801475e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014760:	e027      	b.n	80147b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8014762:	f107 0318 	add.w	r3, r7, #24
 8014766:	4618      	mov	r0, r3
 8014768:	f7fe fd7c 	bl	8013264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801476c:	69fb      	ldr	r3, [r7, #28]
 801476e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014770:	e01f      	b.n	80147b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014772:	4b69      	ldr	r3, [pc, #420]	; (8014918 <UART_SetConfig+0xc2c>)
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f003 0320 	and.w	r3, r3, #32
 801477a:	2b00      	cmp	r3, #0
 801477c:	d009      	beq.n	8014792 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801477e:	4b66      	ldr	r3, [pc, #408]	; (8014918 <UART_SetConfig+0xc2c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	08db      	lsrs	r3, r3, #3
 8014784:	f003 0303 	and.w	r3, r3, #3
 8014788:	4a64      	ldr	r2, [pc, #400]	; (801491c <UART_SetConfig+0xc30>)
 801478a:	fa22 f303 	lsr.w	r3, r2, r3
 801478e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014790:	e00f      	b.n	80147b2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8014792:	4b62      	ldr	r3, [pc, #392]	; (801491c <UART_SetConfig+0xc30>)
 8014794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014796:	e00c      	b.n	80147b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8014798:	4b61      	ldr	r3, [pc, #388]	; (8014920 <UART_SetConfig+0xc34>)
 801479a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801479c:	e009      	b.n	80147b2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801479e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80147a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80147a4:	e005      	b.n	80147b2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80147a6:	2300      	movs	r3, #0
 80147a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80147aa:	2301      	movs	r3, #1
 80147ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80147b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80147b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	f000 80ea 	beq.w	801498e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147be:	4a55      	ldr	r2, [pc, #340]	; (8014914 <UART_SetConfig+0xc28>)
 80147c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80147c4:	461a      	mov	r2, r3
 80147c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80147c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80147cc:	005a      	lsls	r2, r3, #1
 80147ce:	697b      	ldr	r3, [r7, #20]
 80147d0:	685b      	ldr	r3, [r3, #4]
 80147d2:	085b      	lsrs	r3, r3, #1
 80147d4:	441a      	add	r2, r3
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	fbb2 f3f3 	udiv	r3, r2, r3
 80147de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80147e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e2:	2b0f      	cmp	r3, #15
 80147e4:	d916      	bls.n	8014814 <UART_SetConfig+0xb28>
 80147e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80147ec:	d212      	bcs.n	8014814 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80147ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f0:	b29b      	uxth	r3, r3
 80147f2:	f023 030f 	bic.w	r3, r3, #15
 80147f6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80147f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147fa:	085b      	lsrs	r3, r3, #1
 80147fc:	b29b      	uxth	r3, r3
 80147fe:	f003 0307 	and.w	r3, r3, #7
 8014802:	b29a      	uxth	r2, r3
 8014804:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8014806:	4313      	orrs	r3, r2
 8014808:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8014810:	60da      	str	r2, [r3, #12]
 8014812:	e0bc      	b.n	801498e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014814:	2301      	movs	r3, #1
 8014816:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801481a:	e0b8      	b.n	801498e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801481c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8014820:	2b20      	cmp	r3, #32
 8014822:	dc4b      	bgt.n	80148bc <UART_SetConfig+0xbd0>
 8014824:	2b00      	cmp	r3, #0
 8014826:	f2c0 8087 	blt.w	8014938 <UART_SetConfig+0xc4c>
 801482a:	2b20      	cmp	r3, #32
 801482c:	f200 8084 	bhi.w	8014938 <UART_SetConfig+0xc4c>
 8014830:	a201      	add	r2, pc, #4	; (adr r2, 8014838 <UART_SetConfig+0xb4c>)
 8014832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014836:	bf00      	nop
 8014838:	080148c3 	.word	0x080148c3
 801483c:	080148cb 	.word	0x080148cb
 8014840:	08014939 	.word	0x08014939
 8014844:	08014939 	.word	0x08014939
 8014848:	080148d3 	.word	0x080148d3
 801484c:	08014939 	.word	0x08014939
 8014850:	08014939 	.word	0x08014939
 8014854:	08014939 	.word	0x08014939
 8014858:	080148e3 	.word	0x080148e3
 801485c:	08014939 	.word	0x08014939
 8014860:	08014939 	.word	0x08014939
 8014864:	08014939 	.word	0x08014939
 8014868:	08014939 	.word	0x08014939
 801486c:	08014939 	.word	0x08014939
 8014870:	08014939 	.word	0x08014939
 8014874:	08014939 	.word	0x08014939
 8014878:	080148f3 	.word	0x080148f3
 801487c:	08014939 	.word	0x08014939
 8014880:	08014939 	.word	0x08014939
 8014884:	08014939 	.word	0x08014939
 8014888:	08014939 	.word	0x08014939
 801488c:	08014939 	.word	0x08014939
 8014890:	08014939 	.word	0x08014939
 8014894:	08014939 	.word	0x08014939
 8014898:	08014939 	.word	0x08014939
 801489c:	08014939 	.word	0x08014939
 80148a0:	08014939 	.word	0x08014939
 80148a4:	08014939 	.word	0x08014939
 80148a8:	08014939 	.word	0x08014939
 80148ac:	08014939 	.word	0x08014939
 80148b0:	08014939 	.word	0x08014939
 80148b4:	08014939 	.word	0x08014939
 80148b8:	0801492b 	.word	0x0801492b
 80148bc:	2b40      	cmp	r3, #64	; 0x40
 80148be:	d037      	beq.n	8014930 <UART_SetConfig+0xc44>
 80148c0:	e03a      	b.n	8014938 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80148c2:	f7fd f999 	bl	8011bf8 <HAL_RCC_GetPCLK1Freq>
 80148c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80148c8:	e03c      	b.n	8014944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80148ca:	f7fd f9ab 	bl	8011c24 <HAL_RCC_GetPCLK2Freq>
 80148ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80148d0:	e038      	b.n	8014944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80148d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7fe fb70 	bl	8012fbc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80148dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80148e0:	e030      	b.n	8014944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80148e2:	f107 0318 	add.w	r3, r7, #24
 80148e6:	4618      	mov	r0, r3
 80148e8:	f7fe fcbc 	bl	8013264 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80148f0:	e028      	b.n	8014944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80148f2:	4b09      	ldr	r3, [pc, #36]	; (8014918 <UART_SetConfig+0xc2c>)
 80148f4:	681b      	ldr	r3, [r3, #0]
 80148f6:	f003 0320 	and.w	r3, r3, #32
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d012      	beq.n	8014924 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80148fe:	4b06      	ldr	r3, [pc, #24]	; (8014918 <UART_SetConfig+0xc2c>)
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	08db      	lsrs	r3, r3, #3
 8014904:	f003 0303 	and.w	r3, r3, #3
 8014908:	4a04      	ldr	r2, [pc, #16]	; (801491c <UART_SetConfig+0xc30>)
 801490a:	fa22 f303 	lsr.w	r3, r2, r3
 801490e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8014910:	e018      	b.n	8014944 <UART_SetConfig+0xc58>
 8014912:	bf00      	nop
 8014914:	08019140 	.word	0x08019140
 8014918:	58024400 	.word	0x58024400
 801491c:	03d09000 	.word	0x03d09000
 8014920:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8014924:	4b24      	ldr	r3, [pc, #144]	; (80149b8 <UART_SetConfig+0xccc>)
 8014926:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014928:	e00c      	b.n	8014944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801492a:	4b24      	ldr	r3, [pc, #144]	; (80149bc <UART_SetConfig+0xcd0>)
 801492c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801492e:	e009      	b.n	8014944 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014934:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8014936:	e005      	b.n	8014944 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8014938:	2300      	movs	r3, #0
 801493a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801493c:	2301      	movs	r3, #1
 801493e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8014942:	bf00      	nop
    }

    if (pclk != 0U)
 8014944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014946:	2b00      	cmp	r3, #0
 8014948:	d021      	beq.n	801498e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801494a:	697b      	ldr	r3, [r7, #20]
 801494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801494e:	4a1c      	ldr	r2, [pc, #112]	; (80149c0 <UART_SetConfig+0xcd4>)
 8014950:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014954:	461a      	mov	r2, r3
 8014956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014958:	fbb3 f2f2 	udiv	r2, r3, r2
 801495c:	697b      	ldr	r3, [r7, #20]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	085b      	lsrs	r3, r3, #1
 8014962:	441a      	add	r2, r3
 8014964:	697b      	ldr	r3, [r7, #20]
 8014966:	685b      	ldr	r3, [r3, #4]
 8014968:	fbb2 f3f3 	udiv	r3, r2, r3
 801496c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014970:	2b0f      	cmp	r3, #15
 8014972:	d909      	bls.n	8014988 <UART_SetConfig+0xc9c>
 8014974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801497a:	d205      	bcs.n	8014988 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801497c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497e:	b29a      	uxth	r2, r3
 8014980:	697b      	ldr	r3, [r7, #20]
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	60da      	str	r2, [r3, #12]
 8014986:	e002      	b.n	801498e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8014988:	2301      	movs	r3, #1
 801498a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801498e:	697b      	ldr	r3, [r7, #20]
 8014990:	2201      	movs	r2, #1
 8014992:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	2201      	movs	r2, #1
 801499a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801499e:	697b      	ldr	r3, [r7, #20]
 80149a0:	2200      	movs	r2, #0
 80149a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80149a4:	697b      	ldr	r3, [r7, #20]
 80149a6:	2200      	movs	r2, #0
 80149a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80149aa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	3748      	adds	r7, #72	; 0x48
 80149b2:	46bd      	mov	sp, r7
 80149b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80149b8:	03d09000 	.word	0x03d09000
 80149bc:	003d0900 	.word	0x003d0900
 80149c0:	08019140 	.word	0x08019140

080149c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80149c4:	b480      	push	{r7}
 80149c6:	b083      	sub	sp, #12
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149d0:	f003 0301 	and.w	r3, r3, #1
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d00a      	beq.n	80149ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	685b      	ldr	r3, [r3, #4]
 80149de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	430a      	orrs	r2, r1
 80149ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149f2:	f003 0302 	and.w	r3, r3, #2
 80149f6:	2b00      	cmp	r3, #0
 80149f8:	d00a      	beq.n	8014a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	430a      	orrs	r2, r1
 8014a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a14:	f003 0304 	and.w	r3, r3, #4
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d00a      	beq.n	8014a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	681b      	ldr	r3, [r3, #0]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	430a      	orrs	r2, r1
 8014a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a36:	f003 0308 	and.w	r3, r3, #8
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00a      	beq.n	8014a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	681b      	ldr	r3, [r3, #0]
 8014a50:	430a      	orrs	r2, r1
 8014a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a58:	f003 0310 	and.w	r3, r3, #16
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d00a      	beq.n	8014a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	689b      	ldr	r3, [r3, #8]
 8014a66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	430a      	orrs	r2, r1
 8014a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a7a:	f003 0320 	and.w	r3, r3, #32
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d00a      	beq.n	8014a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	681b      	ldr	r3, [r3, #0]
 8014a86:	689b      	ldr	r3, [r3, #8]
 8014a88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	681b      	ldr	r3, [r3, #0]
 8014a94:	430a      	orrs	r2, r1
 8014a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d01a      	beq.n	8014ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	430a      	orrs	r2, r1
 8014ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014ac2:	d10a      	bne.n	8014ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	430a      	orrs	r2, r1
 8014ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d00a      	beq.n	8014afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	681b      	ldr	r3, [r3, #0]
 8014aea:	685b      	ldr	r3, [r3, #4]
 8014aec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	430a      	orrs	r2, r1
 8014afa:	605a      	str	r2, [r3, #4]
  }
}
 8014afc:	bf00      	nop
 8014afe:	370c      	adds	r7, #12
 8014b00:	46bd      	mov	sp, r7
 8014b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b06:	4770      	bx	lr

08014b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b098      	sub	sp, #96	; 0x60
 8014b0c:	af02      	add	r7, sp, #8
 8014b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	2200      	movs	r2, #0
 8014b14:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8014b18:	f7fb f9ca 	bl	800feb0 <HAL_GetTick>
 8014b1c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	f003 0308 	and.w	r3, r3, #8
 8014b28:	2b08      	cmp	r3, #8
 8014b2a:	d12f      	bne.n	8014b8c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014b30:	9300      	str	r3, [sp, #0]
 8014b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b34:	2200      	movs	r2, #0
 8014b36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014b3a:	6878      	ldr	r0, [r7, #4]
 8014b3c:	f000 f88e 	bl	8014c5c <UART_WaitOnFlagUntilTimeout>
 8014b40:	4603      	mov	r3, r0
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d022      	beq.n	8014b8c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b4e:	e853 3f00 	ldrex	r3, [r3]
 8014b52:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8014b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014b5a:	653b      	str	r3, [r7, #80]	; 0x50
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	461a      	mov	r2, r3
 8014b62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014b64:	647b      	str	r3, [r7, #68]	; 0x44
 8014b66:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014b68:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8014b6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014b6c:	e841 2300 	strex	r3, r2, [r1]
 8014b70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8014b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d1e6      	bne.n	8014b46 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	2220      	movs	r2, #32
 8014b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	2200      	movs	r2, #0
 8014b84:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014b88:	2303      	movs	r3, #3
 8014b8a:	e063      	b.n	8014c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	681b      	ldr	r3, [r3, #0]
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f003 0304 	and.w	r3, r3, #4
 8014b96:	2b04      	cmp	r3, #4
 8014b98:	d149      	bne.n	8014c2e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014b9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8014b9e:	9300      	str	r3, [sp, #0]
 8014ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f000 f857 	bl	8014c5c <UART_WaitOnFlagUntilTimeout>
 8014bae:	4603      	mov	r3, r0
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d03c      	beq.n	8014c2e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bbc:	e853 3f00 	ldrex	r3, [r3]
 8014bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8014bc2:	6a3b      	ldr	r3, [r7, #32]
 8014bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	461a      	mov	r2, r3
 8014bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8014bd4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014bd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bda:	e841 2300 	strex	r3, r2, [r1]
 8014bde:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8014be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014be2:	2b00      	cmp	r3, #0
 8014be4:	d1e6      	bne.n	8014bb4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014be6:	687b      	ldr	r3, [r7, #4]
 8014be8:	681b      	ldr	r3, [r3, #0]
 8014bea:	3308      	adds	r3, #8
 8014bec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	e853 3f00 	ldrex	r3, [r3]
 8014bf4:	60fb      	str	r3, [r7, #12]
   return(result);
 8014bf6:	68fb      	ldr	r3, [r7, #12]
 8014bf8:	f023 0301 	bic.w	r3, r3, #1
 8014bfc:	64bb      	str	r3, [r7, #72]	; 0x48
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	3308      	adds	r3, #8
 8014c04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014c06:	61fa      	str	r2, [r7, #28]
 8014c08:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014c0a:	69b9      	ldr	r1, [r7, #24]
 8014c0c:	69fa      	ldr	r2, [r7, #28]
 8014c0e:	e841 2300 	strex	r3, r2, [r1]
 8014c12:	617b      	str	r3, [r7, #20]
   return(result);
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d1e5      	bne.n	8014be6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	2220      	movs	r2, #32
 8014c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	2200      	movs	r2, #0
 8014c26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014c2a:	2303      	movs	r3, #3
 8014c2c:	e012      	b.n	8014c54 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	2220      	movs	r2, #32
 8014c32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	2220      	movs	r2, #32
 8014c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	2200      	movs	r2, #0
 8014c42:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2200      	movs	r2, #0
 8014c48:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014c52:	2300      	movs	r3, #0
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	3758      	adds	r7, #88	; 0x58
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	bd80      	pop	{r7, pc}

08014c5c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014c5c:	b580      	push	{r7, lr}
 8014c5e:	b084      	sub	sp, #16
 8014c60:	af00      	add	r7, sp, #0
 8014c62:	60f8      	str	r0, [r7, #12]
 8014c64:	60b9      	str	r1, [r7, #8]
 8014c66:	603b      	str	r3, [r7, #0]
 8014c68:	4613      	mov	r3, r2
 8014c6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014c6c:	e049      	b.n	8014d02 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014c6e:	69bb      	ldr	r3, [r7, #24]
 8014c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c74:	d045      	beq.n	8014d02 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8014c76:	f7fb f91b 	bl	800feb0 <HAL_GetTick>
 8014c7a:	4602      	mov	r2, r0
 8014c7c:	683b      	ldr	r3, [r7, #0]
 8014c7e:	1ad3      	subs	r3, r2, r3
 8014c80:	69ba      	ldr	r2, [r7, #24]
 8014c82:	429a      	cmp	r2, r3
 8014c84:	d302      	bcc.n	8014c8c <UART_WaitOnFlagUntilTimeout+0x30>
 8014c86:	69bb      	ldr	r3, [r7, #24]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d101      	bne.n	8014c90 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8014c8c:	2303      	movs	r3, #3
 8014c8e:	e048      	b.n	8014d22 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	f003 0304 	and.w	r3, r3, #4
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d031      	beq.n	8014d02 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	681b      	ldr	r3, [r3, #0]
 8014ca2:	69db      	ldr	r3, [r3, #28]
 8014ca4:	f003 0308 	and.w	r3, r3, #8
 8014ca8:	2b08      	cmp	r3, #8
 8014caa:	d110      	bne.n	8014cce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	2208      	movs	r2, #8
 8014cb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8014cb4:	68f8      	ldr	r0, [r7, #12]
 8014cb6:	f000 f839 	bl	8014d2c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	2208      	movs	r2, #8
 8014cbe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8014cca:	2301      	movs	r3, #1
 8014ccc:	e029      	b.n	8014d22 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	69db      	ldr	r3, [r3, #28]
 8014cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014cdc:	d111      	bne.n	8014d02 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014ce8:	68f8      	ldr	r0, [r7, #12]
 8014cea:	f000 f81f 	bl	8014d2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	2220      	movs	r2, #32
 8014cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8014cf6:	68fb      	ldr	r3, [r7, #12]
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8014cfe:	2303      	movs	r3, #3
 8014d00:	e00f      	b.n	8014d22 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	69da      	ldr	r2, [r3, #28]
 8014d08:	68bb      	ldr	r3, [r7, #8]
 8014d0a:	4013      	ands	r3, r2
 8014d0c:	68ba      	ldr	r2, [r7, #8]
 8014d0e:	429a      	cmp	r2, r3
 8014d10:	bf0c      	ite	eq
 8014d12:	2301      	moveq	r3, #1
 8014d14:	2300      	movne	r3, #0
 8014d16:	b2db      	uxtb	r3, r3
 8014d18:	461a      	mov	r2, r3
 8014d1a:	79fb      	ldrb	r3, [r7, #7]
 8014d1c:	429a      	cmp	r2, r3
 8014d1e:	d0a6      	beq.n	8014c6e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8014d20:	2300      	movs	r3, #0
}
 8014d22:	4618      	mov	r0, r3
 8014d24:	3710      	adds	r7, #16
 8014d26:	46bd      	mov	sp, r7
 8014d28:	bd80      	pop	{r7, pc}
	...

08014d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b095      	sub	sp, #84	; 0x54
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014d3c:	e853 3f00 	ldrex	r3, [r3]
 8014d40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8014d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8014d48:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	461a      	mov	r2, r3
 8014d50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d52:	643b      	str	r3, [r7, #64]	; 0x40
 8014d54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014d58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8014d5a:	e841 2300 	strex	r3, r2, [r1]
 8014d5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8014d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d1e6      	bne.n	8014d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	3308      	adds	r3, #8
 8014d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014d6e:	6a3b      	ldr	r3, [r7, #32]
 8014d70:	e853 3f00 	ldrex	r3, [r3]
 8014d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8014d76:	69fa      	ldr	r2, [r7, #28]
 8014d78:	4b1e      	ldr	r3, [pc, #120]	; (8014df4 <UART_EndRxTransfer+0xc8>)
 8014d7a:	4013      	ands	r3, r2
 8014d7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	3308      	adds	r3, #8
 8014d84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014d86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8014d88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014d8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014d8e:	e841 2300 	strex	r3, r2, [r1]
 8014d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8014d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d1e5      	bne.n	8014d66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	d118      	bne.n	8014dd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	681b      	ldr	r3, [r3, #0]
 8014da6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	e853 3f00 	ldrex	r3, [r3]
 8014dae:	60bb      	str	r3, [r7, #8]
   return(result);
 8014db0:	68bb      	ldr	r3, [r7, #8]
 8014db2:	f023 0310 	bic.w	r3, r3, #16
 8014db6:	647b      	str	r3, [r7, #68]	; 0x44
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	461a      	mov	r2, r3
 8014dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014dc0:	61bb      	str	r3, [r7, #24]
 8014dc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8014dc4:	6979      	ldr	r1, [r7, #20]
 8014dc6:	69ba      	ldr	r2, [r7, #24]
 8014dc8:	e841 2300 	strex	r3, r2, [r1]
 8014dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8014dce:	693b      	ldr	r3, [r7, #16]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d1e6      	bne.n	8014da2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2220      	movs	r2, #32
 8014dd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	2200      	movs	r2, #0
 8014de0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2200      	movs	r2, #0
 8014de6:	675a      	str	r2, [r3, #116]	; 0x74
}
 8014de8:	bf00      	nop
 8014dea:	3754      	adds	r7, #84	; 0x54
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr
 8014df4:	effffffe 	.word	0xeffffffe

08014df8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8014df8:	b480      	push	{r7}
 8014dfa:	b085      	sub	sp, #20
 8014dfc:	af00      	add	r7, sp, #0
 8014dfe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014e06:	2b01      	cmp	r3, #1
 8014e08:	d101      	bne.n	8014e0e <HAL_UARTEx_DisableFifoMode+0x16>
 8014e0a:	2302      	movs	r3, #2
 8014e0c:	e027      	b.n	8014e5e <HAL_UARTEx_DisableFifoMode+0x66>
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	2201      	movs	r2, #1
 8014e12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	2224      	movs	r2, #36	; 0x24
 8014e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	f022 0201 	bic.w	r2, r2, #1
 8014e34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8014e3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	2200      	movs	r2, #0
 8014e42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	68fa      	ldr	r2, [r7, #12]
 8014e4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2220      	movs	r2, #32
 8014e50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	2200      	movs	r2, #0
 8014e58:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014e5c:	2300      	movs	r3, #0
}
 8014e5e:	4618      	mov	r0, r3
 8014e60:	3714      	adds	r7, #20
 8014e62:	46bd      	mov	sp, r7
 8014e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e68:	4770      	bx	lr

08014e6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014e6a:	b580      	push	{r7, lr}
 8014e6c:	b084      	sub	sp, #16
 8014e6e:	af00      	add	r7, sp, #0
 8014e70:	6078      	str	r0, [r7, #4]
 8014e72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014e7a:	2b01      	cmp	r3, #1
 8014e7c:	d101      	bne.n	8014e82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8014e7e:	2302      	movs	r3, #2
 8014e80:	e02d      	b.n	8014ede <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2201      	movs	r2, #1
 8014e86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2224      	movs	r2, #36	; 0x24
 8014e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	681b      	ldr	r3, [r3, #0]
 8014e9e:	681a      	ldr	r2, [r3, #0]
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	f022 0201 	bic.w	r2, r2, #1
 8014ea8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	681b      	ldr	r3, [r3, #0]
 8014eae:	689b      	ldr	r3, [r3, #8]
 8014eb0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	683a      	ldr	r2, [r7, #0]
 8014eba:	430a      	orrs	r2, r1
 8014ebc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f000 f850 	bl	8014f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	68fa      	ldr	r2, [r7, #12]
 8014eca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2220      	movs	r2, #32
 8014ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014edc:	2300      	movs	r3, #0
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3710      	adds	r7, #16
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}

08014ee6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b084      	sub	sp, #16
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
 8014eee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d101      	bne.n	8014efe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8014efa:	2302      	movs	r3, #2
 8014efc:	e02d      	b.n	8014f5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	2201      	movs	r2, #1
 8014f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2224      	movs	r2, #36	; 0x24
 8014f0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	681a      	ldr	r2, [r3, #0]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	f022 0201 	bic.w	r2, r2, #1
 8014f24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	689b      	ldr	r3, [r3, #8]
 8014f2c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	683a      	ldr	r2, [r7, #0]
 8014f36:	430a      	orrs	r2, r1
 8014f38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	f000 f812 	bl	8014f64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	68fa      	ldr	r2, [r7, #12]
 8014f46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2220      	movs	r2, #32
 8014f4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2200      	movs	r2, #0
 8014f54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8014f58:	2300      	movs	r3, #0
}
 8014f5a:	4618      	mov	r0, r3
 8014f5c:	3710      	adds	r7, #16
 8014f5e:	46bd      	mov	sp, r7
 8014f60:	bd80      	pop	{r7, pc}
	...

08014f64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8014f64:	b480      	push	{r7}
 8014f66:	b085      	sub	sp, #20
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d108      	bne.n	8014f86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2201      	movs	r2, #1
 8014f78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	2201      	movs	r2, #1
 8014f80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8014f84:	e031      	b.n	8014fea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8014f86:	2310      	movs	r3, #16
 8014f88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8014f8a:	2310      	movs	r3, #16
 8014f8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	681b      	ldr	r3, [r3, #0]
 8014f92:	689b      	ldr	r3, [r3, #8]
 8014f94:	0e5b      	lsrs	r3, r3, #25
 8014f96:	b2db      	uxtb	r3, r3
 8014f98:	f003 0307 	and.w	r3, r3, #7
 8014f9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	681b      	ldr	r3, [r3, #0]
 8014fa2:	689b      	ldr	r3, [r3, #8]
 8014fa4:	0f5b      	lsrs	r3, r3, #29
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	f003 0307 	and.w	r3, r3, #7
 8014fac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014fae:	7bbb      	ldrb	r3, [r7, #14]
 8014fb0:	7b3a      	ldrb	r2, [r7, #12]
 8014fb2:	4911      	ldr	r1, [pc, #68]	; (8014ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8014fb4:	5c8a      	ldrb	r2, [r1, r2]
 8014fb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8014fba:	7b3a      	ldrb	r2, [r7, #12]
 8014fbc:	490f      	ldr	r1, [pc, #60]	; (8014ffc <UARTEx_SetNbDataToProcess+0x98>)
 8014fbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8014fc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014fcc:	7bfb      	ldrb	r3, [r7, #15]
 8014fce:	7b7a      	ldrb	r2, [r7, #13]
 8014fd0:	4909      	ldr	r1, [pc, #36]	; (8014ff8 <UARTEx_SetNbDataToProcess+0x94>)
 8014fd2:	5c8a      	ldrb	r2, [r1, r2]
 8014fd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8014fd8:	7b7a      	ldrb	r2, [r7, #13]
 8014fda:	4908      	ldr	r1, [pc, #32]	; (8014ffc <UARTEx_SetNbDataToProcess+0x98>)
 8014fdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8014fde:	fb93 f3f2 	sdiv	r3, r3, r2
 8014fe2:	b29a      	uxth	r2, r3
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8014fea:	bf00      	nop
 8014fec:	3714      	adds	r7, #20
 8014fee:	46bd      	mov	sp, r7
 8014ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ff4:	4770      	bx	lr
 8014ff6:	bf00      	nop
 8014ff8:	08019158 	.word	0x08019158
 8014ffc:	08019160 	.word	0x08019160

08015000 <__assert_func>:
 8015000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015002:	4614      	mov	r4, r2
 8015004:	461a      	mov	r2, r3
 8015006:	4b09      	ldr	r3, [pc, #36]	; (801502c <__assert_func+0x2c>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	4605      	mov	r5, r0
 801500c:	68d8      	ldr	r0, [r3, #12]
 801500e:	b14c      	cbz	r4, 8015024 <__assert_func+0x24>
 8015010:	4b07      	ldr	r3, [pc, #28]	; (8015030 <__assert_func+0x30>)
 8015012:	9100      	str	r1, [sp, #0]
 8015014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015018:	4906      	ldr	r1, [pc, #24]	; (8015034 <__assert_func+0x34>)
 801501a:	462b      	mov	r3, r5
 801501c:	f000 fa76 	bl	801550c <fiprintf>
 8015020:	f000 fc0e 	bl	8015840 <abort>
 8015024:	4b04      	ldr	r3, [pc, #16]	; (8015038 <__assert_func+0x38>)
 8015026:	461c      	mov	r4, r3
 8015028:	e7f3      	b.n	8015012 <__assert_func+0x12>
 801502a:	bf00      	nop
 801502c:	2400030c 	.word	0x2400030c
 8015030:	08019168 	.word	0x08019168
 8015034:	08019175 	.word	0x08019175
 8015038:	080191a3 	.word	0x080191a3

0801503c <atoi>:
 801503c:	220a      	movs	r2, #10
 801503e:	2100      	movs	r1, #0
 8015040:	f000 b9c8 	b.w	80153d4 <strtol>

08015044 <calloc>:
 8015044:	4b02      	ldr	r3, [pc, #8]	; (8015050 <calloc+0xc>)
 8015046:	460a      	mov	r2, r1
 8015048:	4601      	mov	r1, r0
 801504a:	6818      	ldr	r0, [r3, #0]
 801504c:	f000 b802 	b.w	8015054 <_calloc_r>
 8015050:	2400030c 	.word	0x2400030c

08015054 <_calloc_r>:
 8015054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015056:	fba1 2402 	umull	r2, r4, r1, r2
 801505a:	b94c      	cbnz	r4, 8015070 <_calloc_r+0x1c>
 801505c:	4611      	mov	r1, r2
 801505e:	9201      	str	r2, [sp, #4]
 8015060:	f000 f83e 	bl	80150e0 <_malloc_r>
 8015064:	9a01      	ldr	r2, [sp, #4]
 8015066:	4605      	mov	r5, r0
 8015068:	b930      	cbnz	r0, 8015078 <_calloc_r+0x24>
 801506a:	4628      	mov	r0, r5
 801506c:	b003      	add	sp, #12
 801506e:	bd30      	pop	{r4, r5, pc}
 8015070:	220c      	movs	r2, #12
 8015072:	6002      	str	r2, [r0, #0]
 8015074:	2500      	movs	r5, #0
 8015076:	e7f8      	b.n	801506a <_calloc_r+0x16>
 8015078:	4621      	mov	r1, r4
 801507a:	f000 faec 	bl	8015656 <memset>
 801507e:	e7f4      	b.n	801506a <_calloc_r+0x16>

08015080 <malloc>:
 8015080:	4b02      	ldr	r3, [pc, #8]	; (801508c <malloc+0xc>)
 8015082:	4601      	mov	r1, r0
 8015084:	6818      	ldr	r0, [r3, #0]
 8015086:	f000 b82b 	b.w	80150e0 <_malloc_r>
 801508a:	bf00      	nop
 801508c:	2400030c 	.word	0x2400030c

08015090 <free>:
 8015090:	4b02      	ldr	r3, [pc, #8]	; (801509c <free+0xc>)
 8015092:	4601      	mov	r1, r0
 8015094:	6818      	ldr	r0, [r3, #0]
 8015096:	f000 bbdb 	b.w	8015850 <_free_r>
 801509a:	bf00      	nop
 801509c:	2400030c 	.word	0x2400030c

080150a0 <sbrk_aligned>:
 80150a0:	b570      	push	{r4, r5, r6, lr}
 80150a2:	4e0e      	ldr	r6, [pc, #56]	; (80150dc <sbrk_aligned+0x3c>)
 80150a4:	460c      	mov	r4, r1
 80150a6:	6831      	ldr	r1, [r6, #0]
 80150a8:	4605      	mov	r5, r0
 80150aa:	b911      	cbnz	r1, 80150b2 <sbrk_aligned+0x12>
 80150ac:	f000 fb64 	bl	8015778 <_sbrk_r>
 80150b0:	6030      	str	r0, [r6, #0]
 80150b2:	4621      	mov	r1, r4
 80150b4:	4628      	mov	r0, r5
 80150b6:	f000 fb5f 	bl	8015778 <_sbrk_r>
 80150ba:	1c43      	adds	r3, r0, #1
 80150bc:	d00a      	beq.n	80150d4 <sbrk_aligned+0x34>
 80150be:	1cc4      	adds	r4, r0, #3
 80150c0:	f024 0403 	bic.w	r4, r4, #3
 80150c4:	42a0      	cmp	r0, r4
 80150c6:	d007      	beq.n	80150d8 <sbrk_aligned+0x38>
 80150c8:	1a21      	subs	r1, r4, r0
 80150ca:	4628      	mov	r0, r5
 80150cc:	f000 fb54 	bl	8015778 <_sbrk_r>
 80150d0:	3001      	adds	r0, #1
 80150d2:	d101      	bne.n	80150d8 <sbrk_aligned+0x38>
 80150d4:	f04f 34ff 	mov.w	r4, #4294967295
 80150d8:	4620      	mov	r0, r4
 80150da:	bd70      	pop	{r4, r5, r6, pc}
 80150dc:	2400364c 	.word	0x2400364c

080150e0 <_malloc_r>:
 80150e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150e4:	1ccd      	adds	r5, r1, #3
 80150e6:	f025 0503 	bic.w	r5, r5, #3
 80150ea:	3508      	adds	r5, #8
 80150ec:	2d0c      	cmp	r5, #12
 80150ee:	bf38      	it	cc
 80150f0:	250c      	movcc	r5, #12
 80150f2:	2d00      	cmp	r5, #0
 80150f4:	4607      	mov	r7, r0
 80150f6:	db01      	blt.n	80150fc <_malloc_r+0x1c>
 80150f8:	42a9      	cmp	r1, r5
 80150fa:	d905      	bls.n	8015108 <_malloc_r+0x28>
 80150fc:	230c      	movs	r3, #12
 80150fe:	603b      	str	r3, [r7, #0]
 8015100:	2600      	movs	r6, #0
 8015102:	4630      	mov	r0, r6
 8015104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015108:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80151dc <_malloc_r+0xfc>
 801510c:	f000 f868 	bl	80151e0 <__malloc_lock>
 8015110:	f8d8 3000 	ldr.w	r3, [r8]
 8015114:	461c      	mov	r4, r3
 8015116:	bb5c      	cbnz	r4, 8015170 <_malloc_r+0x90>
 8015118:	4629      	mov	r1, r5
 801511a:	4638      	mov	r0, r7
 801511c:	f7ff ffc0 	bl	80150a0 <sbrk_aligned>
 8015120:	1c43      	adds	r3, r0, #1
 8015122:	4604      	mov	r4, r0
 8015124:	d155      	bne.n	80151d2 <_malloc_r+0xf2>
 8015126:	f8d8 4000 	ldr.w	r4, [r8]
 801512a:	4626      	mov	r6, r4
 801512c:	2e00      	cmp	r6, #0
 801512e:	d145      	bne.n	80151bc <_malloc_r+0xdc>
 8015130:	2c00      	cmp	r4, #0
 8015132:	d048      	beq.n	80151c6 <_malloc_r+0xe6>
 8015134:	6823      	ldr	r3, [r4, #0]
 8015136:	4631      	mov	r1, r6
 8015138:	4638      	mov	r0, r7
 801513a:	eb04 0903 	add.w	r9, r4, r3
 801513e:	f000 fb1b 	bl	8015778 <_sbrk_r>
 8015142:	4581      	cmp	r9, r0
 8015144:	d13f      	bne.n	80151c6 <_malloc_r+0xe6>
 8015146:	6821      	ldr	r1, [r4, #0]
 8015148:	1a6d      	subs	r5, r5, r1
 801514a:	4629      	mov	r1, r5
 801514c:	4638      	mov	r0, r7
 801514e:	f7ff ffa7 	bl	80150a0 <sbrk_aligned>
 8015152:	3001      	adds	r0, #1
 8015154:	d037      	beq.n	80151c6 <_malloc_r+0xe6>
 8015156:	6823      	ldr	r3, [r4, #0]
 8015158:	442b      	add	r3, r5
 801515a:	6023      	str	r3, [r4, #0]
 801515c:	f8d8 3000 	ldr.w	r3, [r8]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d038      	beq.n	80151d6 <_malloc_r+0xf6>
 8015164:	685a      	ldr	r2, [r3, #4]
 8015166:	42a2      	cmp	r2, r4
 8015168:	d12b      	bne.n	80151c2 <_malloc_r+0xe2>
 801516a:	2200      	movs	r2, #0
 801516c:	605a      	str	r2, [r3, #4]
 801516e:	e00f      	b.n	8015190 <_malloc_r+0xb0>
 8015170:	6822      	ldr	r2, [r4, #0]
 8015172:	1b52      	subs	r2, r2, r5
 8015174:	d41f      	bmi.n	80151b6 <_malloc_r+0xd6>
 8015176:	2a0b      	cmp	r2, #11
 8015178:	d917      	bls.n	80151aa <_malloc_r+0xca>
 801517a:	1961      	adds	r1, r4, r5
 801517c:	42a3      	cmp	r3, r4
 801517e:	6025      	str	r5, [r4, #0]
 8015180:	bf18      	it	ne
 8015182:	6059      	strne	r1, [r3, #4]
 8015184:	6863      	ldr	r3, [r4, #4]
 8015186:	bf08      	it	eq
 8015188:	f8c8 1000 	streq.w	r1, [r8]
 801518c:	5162      	str	r2, [r4, r5]
 801518e:	604b      	str	r3, [r1, #4]
 8015190:	4638      	mov	r0, r7
 8015192:	f104 060b 	add.w	r6, r4, #11
 8015196:	f000 f829 	bl	80151ec <__malloc_unlock>
 801519a:	f026 0607 	bic.w	r6, r6, #7
 801519e:	1d23      	adds	r3, r4, #4
 80151a0:	1af2      	subs	r2, r6, r3
 80151a2:	d0ae      	beq.n	8015102 <_malloc_r+0x22>
 80151a4:	1b9b      	subs	r3, r3, r6
 80151a6:	50a3      	str	r3, [r4, r2]
 80151a8:	e7ab      	b.n	8015102 <_malloc_r+0x22>
 80151aa:	42a3      	cmp	r3, r4
 80151ac:	6862      	ldr	r2, [r4, #4]
 80151ae:	d1dd      	bne.n	801516c <_malloc_r+0x8c>
 80151b0:	f8c8 2000 	str.w	r2, [r8]
 80151b4:	e7ec      	b.n	8015190 <_malloc_r+0xb0>
 80151b6:	4623      	mov	r3, r4
 80151b8:	6864      	ldr	r4, [r4, #4]
 80151ba:	e7ac      	b.n	8015116 <_malloc_r+0x36>
 80151bc:	4634      	mov	r4, r6
 80151be:	6876      	ldr	r6, [r6, #4]
 80151c0:	e7b4      	b.n	801512c <_malloc_r+0x4c>
 80151c2:	4613      	mov	r3, r2
 80151c4:	e7cc      	b.n	8015160 <_malloc_r+0x80>
 80151c6:	230c      	movs	r3, #12
 80151c8:	603b      	str	r3, [r7, #0]
 80151ca:	4638      	mov	r0, r7
 80151cc:	f000 f80e 	bl	80151ec <__malloc_unlock>
 80151d0:	e797      	b.n	8015102 <_malloc_r+0x22>
 80151d2:	6025      	str	r5, [r4, #0]
 80151d4:	e7dc      	b.n	8015190 <_malloc_r+0xb0>
 80151d6:	605b      	str	r3, [r3, #4]
 80151d8:	deff      	udf	#255	; 0xff
 80151da:	bf00      	nop
 80151dc:	24003648 	.word	0x24003648

080151e0 <__malloc_lock>:
 80151e0:	4801      	ldr	r0, [pc, #4]	; (80151e8 <__malloc_lock+0x8>)
 80151e2:	f000 bb15 	b.w	8015810 <__retarget_lock_acquire_recursive>
 80151e6:	bf00      	nop
 80151e8:	24003790 	.word	0x24003790

080151ec <__malloc_unlock>:
 80151ec:	4801      	ldr	r0, [pc, #4]	; (80151f4 <__malloc_unlock+0x8>)
 80151ee:	f000 bb10 	b.w	8015812 <__retarget_lock_release_recursive>
 80151f2:	bf00      	nop
 80151f4:	24003790 	.word	0x24003790

080151f8 <srand>:
 80151f8:	b538      	push	{r3, r4, r5, lr}
 80151fa:	4b10      	ldr	r3, [pc, #64]	; (801523c <srand+0x44>)
 80151fc:	681d      	ldr	r5, [r3, #0]
 80151fe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015200:	4604      	mov	r4, r0
 8015202:	b9b3      	cbnz	r3, 8015232 <srand+0x3a>
 8015204:	2018      	movs	r0, #24
 8015206:	f7ff ff3b 	bl	8015080 <malloc>
 801520a:	4602      	mov	r2, r0
 801520c:	6328      	str	r0, [r5, #48]	; 0x30
 801520e:	b920      	cbnz	r0, 801521a <srand+0x22>
 8015210:	4b0b      	ldr	r3, [pc, #44]	; (8015240 <srand+0x48>)
 8015212:	480c      	ldr	r0, [pc, #48]	; (8015244 <srand+0x4c>)
 8015214:	2146      	movs	r1, #70	; 0x46
 8015216:	f7ff fef3 	bl	8015000 <__assert_func>
 801521a:	490b      	ldr	r1, [pc, #44]	; (8015248 <srand+0x50>)
 801521c:	4b0b      	ldr	r3, [pc, #44]	; (801524c <srand+0x54>)
 801521e:	e9c0 1300 	strd	r1, r3, [r0]
 8015222:	4b0b      	ldr	r3, [pc, #44]	; (8015250 <srand+0x58>)
 8015224:	6083      	str	r3, [r0, #8]
 8015226:	230b      	movs	r3, #11
 8015228:	8183      	strh	r3, [r0, #12]
 801522a:	2100      	movs	r1, #0
 801522c:	2001      	movs	r0, #1
 801522e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8015232:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8015234:	2200      	movs	r2, #0
 8015236:	611c      	str	r4, [r3, #16]
 8015238:	615a      	str	r2, [r3, #20]
 801523a:	bd38      	pop	{r3, r4, r5, pc}
 801523c:	2400030c 	.word	0x2400030c
 8015240:	080191a4 	.word	0x080191a4
 8015244:	080191bb 	.word	0x080191bb
 8015248:	abcd330e 	.word	0xabcd330e
 801524c:	e66d1234 	.word	0xe66d1234
 8015250:	0005deec 	.word	0x0005deec

08015254 <rand>:
 8015254:	4b16      	ldr	r3, [pc, #88]	; (80152b0 <rand+0x5c>)
 8015256:	b510      	push	{r4, lr}
 8015258:	681c      	ldr	r4, [r3, #0]
 801525a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801525c:	b9b3      	cbnz	r3, 801528c <rand+0x38>
 801525e:	2018      	movs	r0, #24
 8015260:	f7ff ff0e 	bl	8015080 <malloc>
 8015264:	4602      	mov	r2, r0
 8015266:	6320      	str	r0, [r4, #48]	; 0x30
 8015268:	b920      	cbnz	r0, 8015274 <rand+0x20>
 801526a:	4b12      	ldr	r3, [pc, #72]	; (80152b4 <rand+0x60>)
 801526c:	4812      	ldr	r0, [pc, #72]	; (80152b8 <rand+0x64>)
 801526e:	2152      	movs	r1, #82	; 0x52
 8015270:	f7ff fec6 	bl	8015000 <__assert_func>
 8015274:	4911      	ldr	r1, [pc, #68]	; (80152bc <rand+0x68>)
 8015276:	4b12      	ldr	r3, [pc, #72]	; (80152c0 <rand+0x6c>)
 8015278:	e9c0 1300 	strd	r1, r3, [r0]
 801527c:	4b11      	ldr	r3, [pc, #68]	; (80152c4 <rand+0x70>)
 801527e:	6083      	str	r3, [r0, #8]
 8015280:	230b      	movs	r3, #11
 8015282:	8183      	strh	r3, [r0, #12]
 8015284:	2100      	movs	r1, #0
 8015286:	2001      	movs	r0, #1
 8015288:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801528c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801528e:	480e      	ldr	r0, [pc, #56]	; (80152c8 <rand+0x74>)
 8015290:	690b      	ldr	r3, [r1, #16]
 8015292:	694c      	ldr	r4, [r1, #20]
 8015294:	4a0d      	ldr	r2, [pc, #52]	; (80152cc <rand+0x78>)
 8015296:	4358      	muls	r0, r3
 8015298:	fb02 0004 	mla	r0, r2, r4, r0
 801529c:	fba3 3202 	umull	r3, r2, r3, r2
 80152a0:	3301      	adds	r3, #1
 80152a2:	eb40 0002 	adc.w	r0, r0, r2
 80152a6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80152aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80152ae:	bd10      	pop	{r4, pc}
 80152b0:	2400030c 	.word	0x2400030c
 80152b4:	080191a4 	.word	0x080191a4
 80152b8:	080191bb 	.word	0x080191bb
 80152bc:	abcd330e 	.word	0xabcd330e
 80152c0:	e66d1234 	.word	0xe66d1234
 80152c4:	0005deec 	.word	0x0005deec
 80152c8:	5851f42d 	.word	0x5851f42d
 80152cc:	4c957f2d 	.word	0x4c957f2d

080152d0 <_strtol_l.constprop.0>:
 80152d0:	2b01      	cmp	r3, #1
 80152d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152d6:	d001      	beq.n	80152dc <_strtol_l.constprop.0+0xc>
 80152d8:	2b24      	cmp	r3, #36	; 0x24
 80152da:	d906      	bls.n	80152ea <_strtol_l.constprop.0+0x1a>
 80152dc:	f000 fa6e 	bl	80157bc <__errno>
 80152e0:	2316      	movs	r3, #22
 80152e2:	6003      	str	r3, [r0, #0]
 80152e4:	2000      	movs	r0, #0
 80152e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152ea:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80153d0 <_strtol_l.constprop.0+0x100>
 80152ee:	460d      	mov	r5, r1
 80152f0:	462e      	mov	r6, r5
 80152f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80152f6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80152fa:	f017 0708 	ands.w	r7, r7, #8
 80152fe:	d1f7      	bne.n	80152f0 <_strtol_l.constprop.0+0x20>
 8015300:	2c2d      	cmp	r4, #45	; 0x2d
 8015302:	d132      	bne.n	801536a <_strtol_l.constprop.0+0x9a>
 8015304:	782c      	ldrb	r4, [r5, #0]
 8015306:	2701      	movs	r7, #1
 8015308:	1cb5      	adds	r5, r6, #2
 801530a:	2b00      	cmp	r3, #0
 801530c:	d05b      	beq.n	80153c6 <_strtol_l.constprop.0+0xf6>
 801530e:	2b10      	cmp	r3, #16
 8015310:	d109      	bne.n	8015326 <_strtol_l.constprop.0+0x56>
 8015312:	2c30      	cmp	r4, #48	; 0x30
 8015314:	d107      	bne.n	8015326 <_strtol_l.constprop.0+0x56>
 8015316:	782c      	ldrb	r4, [r5, #0]
 8015318:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801531c:	2c58      	cmp	r4, #88	; 0x58
 801531e:	d14d      	bne.n	80153bc <_strtol_l.constprop.0+0xec>
 8015320:	786c      	ldrb	r4, [r5, #1]
 8015322:	2310      	movs	r3, #16
 8015324:	3502      	adds	r5, #2
 8015326:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801532a:	f108 38ff 	add.w	r8, r8, #4294967295
 801532e:	f04f 0e00 	mov.w	lr, #0
 8015332:	fbb8 f9f3 	udiv	r9, r8, r3
 8015336:	4676      	mov	r6, lr
 8015338:	fb03 8a19 	mls	sl, r3, r9, r8
 801533c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8015340:	f1bc 0f09 	cmp.w	ip, #9
 8015344:	d816      	bhi.n	8015374 <_strtol_l.constprop.0+0xa4>
 8015346:	4664      	mov	r4, ip
 8015348:	42a3      	cmp	r3, r4
 801534a:	dd24      	ble.n	8015396 <_strtol_l.constprop.0+0xc6>
 801534c:	f1be 3fff 	cmp.w	lr, #4294967295
 8015350:	d008      	beq.n	8015364 <_strtol_l.constprop.0+0x94>
 8015352:	45b1      	cmp	r9, r6
 8015354:	d31c      	bcc.n	8015390 <_strtol_l.constprop.0+0xc0>
 8015356:	d101      	bne.n	801535c <_strtol_l.constprop.0+0x8c>
 8015358:	45a2      	cmp	sl, r4
 801535a:	db19      	blt.n	8015390 <_strtol_l.constprop.0+0xc0>
 801535c:	fb06 4603 	mla	r6, r6, r3, r4
 8015360:	f04f 0e01 	mov.w	lr, #1
 8015364:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015368:	e7e8      	b.n	801533c <_strtol_l.constprop.0+0x6c>
 801536a:	2c2b      	cmp	r4, #43	; 0x2b
 801536c:	bf04      	itt	eq
 801536e:	782c      	ldrbeq	r4, [r5, #0]
 8015370:	1cb5      	addeq	r5, r6, #2
 8015372:	e7ca      	b.n	801530a <_strtol_l.constprop.0+0x3a>
 8015374:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8015378:	f1bc 0f19 	cmp.w	ip, #25
 801537c:	d801      	bhi.n	8015382 <_strtol_l.constprop.0+0xb2>
 801537e:	3c37      	subs	r4, #55	; 0x37
 8015380:	e7e2      	b.n	8015348 <_strtol_l.constprop.0+0x78>
 8015382:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8015386:	f1bc 0f19 	cmp.w	ip, #25
 801538a:	d804      	bhi.n	8015396 <_strtol_l.constprop.0+0xc6>
 801538c:	3c57      	subs	r4, #87	; 0x57
 801538e:	e7db      	b.n	8015348 <_strtol_l.constprop.0+0x78>
 8015390:	f04f 3eff 	mov.w	lr, #4294967295
 8015394:	e7e6      	b.n	8015364 <_strtol_l.constprop.0+0x94>
 8015396:	f1be 3fff 	cmp.w	lr, #4294967295
 801539a:	d105      	bne.n	80153a8 <_strtol_l.constprop.0+0xd8>
 801539c:	2322      	movs	r3, #34	; 0x22
 801539e:	6003      	str	r3, [r0, #0]
 80153a0:	4646      	mov	r6, r8
 80153a2:	b942      	cbnz	r2, 80153b6 <_strtol_l.constprop.0+0xe6>
 80153a4:	4630      	mov	r0, r6
 80153a6:	e79e      	b.n	80152e6 <_strtol_l.constprop.0+0x16>
 80153a8:	b107      	cbz	r7, 80153ac <_strtol_l.constprop.0+0xdc>
 80153aa:	4276      	negs	r6, r6
 80153ac:	2a00      	cmp	r2, #0
 80153ae:	d0f9      	beq.n	80153a4 <_strtol_l.constprop.0+0xd4>
 80153b0:	f1be 0f00 	cmp.w	lr, #0
 80153b4:	d000      	beq.n	80153b8 <_strtol_l.constprop.0+0xe8>
 80153b6:	1e69      	subs	r1, r5, #1
 80153b8:	6011      	str	r1, [r2, #0]
 80153ba:	e7f3      	b.n	80153a4 <_strtol_l.constprop.0+0xd4>
 80153bc:	2430      	movs	r4, #48	; 0x30
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d1b1      	bne.n	8015326 <_strtol_l.constprop.0+0x56>
 80153c2:	2308      	movs	r3, #8
 80153c4:	e7af      	b.n	8015326 <_strtol_l.constprop.0+0x56>
 80153c6:	2c30      	cmp	r4, #48	; 0x30
 80153c8:	d0a5      	beq.n	8015316 <_strtol_l.constprop.0+0x46>
 80153ca:	230a      	movs	r3, #10
 80153cc:	e7ab      	b.n	8015326 <_strtol_l.constprop.0+0x56>
 80153ce:	bf00      	nop
 80153d0:	08019214 	.word	0x08019214

080153d4 <strtol>:
 80153d4:	4613      	mov	r3, r2
 80153d6:	460a      	mov	r2, r1
 80153d8:	4601      	mov	r1, r0
 80153da:	4802      	ldr	r0, [pc, #8]	; (80153e4 <strtol+0x10>)
 80153dc:	6800      	ldr	r0, [r0, #0]
 80153de:	f7ff bf77 	b.w	80152d0 <_strtol_l.constprop.0>
 80153e2:	bf00      	nop
 80153e4:	2400030c 	.word	0x2400030c

080153e8 <std>:
 80153e8:	2300      	movs	r3, #0
 80153ea:	b510      	push	{r4, lr}
 80153ec:	4604      	mov	r4, r0
 80153ee:	e9c0 3300 	strd	r3, r3, [r0]
 80153f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80153f6:	6083      	str	r3, [r0, #8]
 80153f8:	8181      	strh	r1, [r0, #12]
 80153fa:	6643      	str	r3, [r0, #100]	; 0x64
 80153fc:	81c2      	strh	r2, [r0, #14]
 80153fe:	6183      	str	r3, [r0, #24]
 8015400:	4619      	mov	r1, r3
 8015402:	2208      	movs	r2, #8
 8015404:	305c      	adds	r0, #92	; 0x5c
 8015406:	f000 f926 	bl	8015656 <memset>
 801540a:	4b05      	ldr	r3, [pc, #20]	; (8015420 <std+0x38>)
 801540c:	6263      	str	r3, [r4, #36]	; 0x24
 801540e:	4b05      	ldr	r3, [pc, #20]	; (8015424 <std+0x3c>)
 8015410:	62a3      	str	r3, [r4, #40]	; 0x28
 8015412:	4b05      	ldr	r3, [pc, #20]	; (8015428 <std+0x40>)
 8015414:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015416:	4b05      	ldr	r3, [pc, #20]	; (801542c <std+0x44>)
 8015418:	6224      	str	r4, [r4, #32]
 801541a:	6323      	str	r3, [r4, #48]	; 0x30
 801541c:	bd10      	pop	{r4, pc}
 801541e:	bf00      	nop
 8015420:	0801557d 	.word	0x0801557d
 8015424:	0801559f 	.word	0x0801559f
 8015428:	080155d7 	.word	0x080155d7
 801542c:	080155fb 	.word	0x080155fb

08015430 <stdio_exit_handler>:
 8015430:	4a02      	ldr	r2, [pc, #8]	; (801543c <stdio_exit_handler+0xc>)
 8015432:	4903      	ldr	r1, [pc, #12]	; (8015440 <stdio_exit_handler+0x10>)
 8015434:	4803      	ldr	r0, [pc, #12]	; (8015444 <stdio_exit_handler+0x14>)
 8015436:	f000 b87b 	b.w	8015530 <_fwalk_sglue>
 801543a:	bf00      	nop
 801543c:	240002b4 	.word	0x240002b4
 8015440:	08015f9d 	.word	0x08015f9d
 8015444:	240002c0 	.word	0x240002c0

08015448 <cleanup_stdio>:
 8015448:	6841      	ldr	r1, [r0, #4]
 801544a:	4b0c      	ldr	r3, [pc, #48]	; (801547c <cleanup_stdio+0x34>)
 801544c:	4299      	cmp	r1, r3
 801544e:	b510      	push	{r4, lr}
 8015450:	4604      	mov	r4, r0
 8015452:	d001      	beq.n	8015458 <cleanup_stdio+0x10>
 8015454:	f000 fda2 	bl	8015f9c <_fflush_r>
 8015458:	68a1      	ldr	r1, [r4, #8]
 801545a:	4b09      	ldr	r3, [pc, #36]	; (8015480 <cleanup_stdio+0x38>)
 801545c:	4299      	cmp	r1, r3
 801545e:	d002      	beq.n	8015466 <cleanup_stdio+0x1e>
 8015460:	4620      	mov	r0, r4
 8015462:	f000 fd9b 	bl	8015f9c <_fflush_r>
 8015466:	68e1      	ldr	r1, [r4, #12]
 8015468:	4b06      	ldr	r3, [pc, #24]	; (8015484 <cleanup_stdio+0x3c>)
 801546a:	4299      	cmp	r1, r3
 801546c:	d004      	beq.n	8015478 <cleanup_stdio+0x30>
 801546e:	4620      	mov	r0, r4
 8015470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015474:	f000 bd92 	b.w	8015f9c <_fflush_r>
 8015478:	bd10      	pop	{r4, pc}
 801547a:	bf00      	nop
 801547c:	24003650 	.word	0x24003650
 8015480:	240036b8 	.word	0x240036b8
 8015484:	24003720 	.word	0x24003720

08015488 <global_stdio_init.part.0>:
 8015488:	b510      	push	{r4, lr}
 801548a:	4b0b      	ldr	r3, [pc, #44]	; (80154b8 <global_stdio_init.part.0+0x30>)
 801548c:	4c0b      	ldr	r4, [pc, #44]	; (80154bc <global_stdio_init.part.0+0x34>)
 801548e:	4a0c      	ldr	r2, [pc, #48]	; (80154c0 <global_stdio_init.part.0+0x38>)
 8015490:	601a      	str	r2, [r3, #0]
 8015492:	4620      	mov	r0, r4
 8015494:	2200      	movs	r2, #0
 8015496:	2104      	movs	r1, #4
 8015498:	f7ff ffa6 	bl	80153e8 <std>
 801549c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80154a0:	2201      	movs	r2, #1
 80154a2:	2109      	movs	r1, #9
 80154a4:	f7ff ffa0 	bl	80153e8 <std>
 80154a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80154ac:	2202      	movs	r2, #2
 80154ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154b2:	2112      	movs	r1, #18
 80154b4:	f7ff bf98 	b.w	80153e8 <std>
 80154b8:	24003788 	.word	0x24003788
 80154bc:	24003650 	.word	0x24003650
 80154c0:	08015431 	.word	0x08015431

080154c4 <__sfp_lock_acquire>:
 80154c4:	4801      	ldr	r0, [pc, #4]	; (80154cc <__sfp_lock_acquire+0x8>)
 80154c6:	f000 b9a3 	b.w	8015810 <__retarget_lock_acquire_recursive>
 80154ca:	bf00      	nop
 80154cc:	24003791 	.word	0x24003791

080154d0 <__sfp_lock_release>:
 80154d0:	4801      	ldr	r0, [pc, #4]	; (80154d8 <__sfp_lock_release+0x8>)
 80154d2:	f000 b99e 	b.w	8015812 <__retarget_lock_release_recursive>
 80154d6:	bf00      	nop
 80154d8:	24003791 	.word	0x24003791

080154dc <__sinit>:
 80154dc:	b510      	push	{r4, lr}
 80154de:	4604      	mov	r4, r0
 80154e0:	f7ff fff0 	bl	80154c4 <__sfp_lock_acquire>
 80154e4:	6a23      	ldr	r3, [r4, #32]
 80154e6:	b11b      	cbz	r3, 80154f0 <__sinit+0x14>
 80154e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80154ec:	f7ff bff0 	b.w	80154d0 <__sfp_lock_release>
 80154f0:	4b04      	ldr	r3, [pc, #16]	; (8015504 <__sinit+0x28>)
 80154f2:	6223      	str	r3, [r4, #32]
 80154f4:	4b04      	ldr	r3, [pc, #16]	; (8015508 <__sinit+0x2c>)
 80154f6:	681b      	ldr	r3, [r3, #0]
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	d1f5      	bne.n	80154e8 <__sinit+0xc>
 80154fc:	f7ff ffc4 	bl	8015488 <global_stdio_init.part.0>
 8015500:	e7f2      	b.n	80154e8 <__sinit+0xc>
 8015502:	bf00      	nop
 8015504:	08015449 	.word	0x08015449
 8015508:	24003788 	.word	0x24003788

0801550c <fiprintf>:
 801550c:	b40e      	push	{r1, r2, r3}
 801550e:	b503      	push	{r0, r1, lr}
 8015510:	4601      	mov	r1, r0
 8015512:	ab03      	add	r3, sp, #12
 8015514:	4805      	ldr	r0, [pc, #20]	; (801552c <fiprintf+0x20>)
 8015516:	f853 2b04 	ldr.w	r2, [r3], #4
 801551a:	6800      	ldr	r0, [r0, #0]
 801551c:	9301      	str	r3, [sp, #4]
 801551e:	f000 fa0d 	bl	801593c <_vfiprintf_r>
 8015522:	b002      	add	sp, #8
 8015524:	f85d eb04 	ldr.w	lr, [sp], #4
 8015528:	b003      	add	sp, #12
 801552a:	4770      	bx	lr
 801552c:	2400030c 	.word	0x2400030c

08015530 <_fwalk_sglue>:
 8015530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015534:	4607      	mov	r7, r0
 8015536:	4688      	mov	r8, r1
 8015538:	4614      	mov	r4, r2
 801553a:	2600      	movs	r6, #0
 801553c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8015540:	f1b9 0901 	subs.w	r9, r9, #1
 8015544:	d505      	bpl.n	8015552 <_fwalk_sglue+0x22>
 8015546:	6824      	ldr	r4, [r4, #0]
 8015548:	2c00      	cmp	r4, #0
 801554a:	d1f7      	bne.n	801553c <_fwalk_sglue+0xc>
 801554c:	4630      	mov	r0, r6
 801554e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015552:	89ab      	ldrh	r3, [r5, #12]
 8015554:	2b01      	cmp	r3, #1
 8015556:	d907      	bls.n	8015568 <_fwalk_sglue+0x38>
 8015558:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801555c:	3301      	adds	r3, #1
 801555e:	d003      	beq.n	8015568 <_fwalk_sglue+0x38>
 8015560:	4629      	mov	r1, r5
 8015562:	4638      	mov	r0, r7
 8015564:	47c0      	blx	r8
 8015566:	4306      	orrs	r6, r0
 8015568:	3568      	adds	r5, #104	; 0x68
 801556a:	e7e9      	b.n	8015540 <_fwalk_sglue+0x10>

0801556c <putchar>:
 801556c:	4b02      	ldr	r3, [pc, #8]	; (8015578 <putchar+0xc>)
 801556e:	4601      	mov	r1, r0
 8015570:	6818      	ldr	r0, [r3, #0]
 8015572:	6882      	ldr	r2, [r0, #8]
 8015574:	f000 bd3a 	b.w	8015fec <_putc_r>
 8015578:	2400030c 	.word	0x2400030c

0801557c <__sread>:
 801557c:	b510      	push	{r4, lr}
 801557e:	460c      	mov	r4, r1
 8015580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015584:	f000 f8e6 	bl	8015754 <_read_r>
 8015588:	2800      	cmp	r0, #0
 801558a:	bfab      	itete	ge
 801558c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801558e:	89a3      	ldrhlt	r3, [r4, #12]
 8015590:	181b      	addge	r3, r3, r0
 8015592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8015596:	bfac      	ite	ge
 8015598:	6563      	strge	r3, [r4, #84]	; 0x54
 801559a:	81a3      	strhlt	r3, [r4, #12]
 801559c:	bd10      	pop	{r4, pc}

0801559e <__swrite>:
 801559e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155a2:	461f      	mov	r7, r3
 80155a4:	898b      	ldrh	r3, [r1, #12]
 80155a6:	05db      	lsls	r3, r3, #23
 80155a8:	4605      	mov	r5, r0
 80155aa:	460c      	mov	r4, r1
 80155ac:	4616      	mov	r6, r2
 80155ae:	d505      	bpl.n	80155bc <__swrite+0x1e>
 80155b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155b4:	2302      	movs	r3, #2
 80155b6:	2200      	movs	r2, #0
 80155b8:	f000 f8ba 	bl	8015730 <_lseek_r>
 80155bc:	89a3      	ldrh	r3, [r4, #12]
 80155be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80155c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80155c6:	81a3      	strh	r3, [r4, #12]
 80155c8:	4632      	mov	r2, r6
 80155ca:	463b      	mov	r3, r7
 80155cc:	4628      	mov	r0, r5
 80155ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155d2:	f000 b8e1 	b.w	8015798 <_write_r>

080155d6 <__sseek>:
 80155d6:	b510      	push	{r4, lr}
 80155d8:	460c      	mov	r4, r1
 80155da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155de:	f000 f8a7 	bl	8015730 <_lseek_r>
 80155e2:	1c43      	adds	r3, r0, #1
 80155e4:	89a3      	ldrh	r3, [r4, #12]
 80155e6:	bf15      	itete	ne
 80155e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80155ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80155ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80155f2:	81a3      	strheq	r3, [r4, #12]
 80155f4:	bf18      	it	ne
 80155f6:	81a3      	strhne	r3, [r4, #12]
 80155f8:	bd10      	pop	{r4, pc}

080155fa <__sclose>:
 80155fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80155fe:	f000 b887 	b.w	8015710 <_close_r>

08015602 <memcmp>:
 8015602:	b510      	push	{r4, lr}
 8015604:	3901      	subs	r1, #1
 8015606:	4402      	add	r2, r0
 8015608:	4290      	cmp	r0, r2
 801560a:	d101      	bne.n	8015610 <memcmp+0xe>
 801560c:	2000      	movs	r0, #0
 801560e:	e005      	b.n	801561c <memcmp+0x1a>
 8015610:	7803      	ldrb	r3, [r0, #0]
 8015612:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015616:	42a3      	cmp	r3, r4
 8015618:	d001      	beq.n	801561e <memcmp+0x1c>
 801561a:	1b18      	subs	r0, r3, r4
 801561c:	bd10      	pop	{r4, pc}
 801561e:	3001      	adds	r0, #1
 8015620:	e7f2      	b.n	8015608 <memcmp+0x6>

08015622 <memmove>:
 8015622:	4288      	cmp	r0, r1
 8015624:	b510      	push	{r4, lr}
 8015626:	eb01 0402 	add.w	r4, r1, r2
 801562a:	d902      	bls.n	8015632 <memmove+0x10>
 801562c:	4284      	cmp	r4, r0
 801562e:	4623      	mov	r3, r4
 8015630:	d807      	bhi.n	8015642 <memmove+0x20>
 8015632:	1e43      	subs	r3, r0, #1
 8015634:	42a1      	cmp	r1, r4
 8015636:	d008      	beq.n	801564a <memmove+0x28>
 8015638:	f811 2b01 	ldrb.w	r2, [r1], #1
 801563c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015640:	e7f8      	b.n	8015634 <memmove+0x12>
 8015642:	4402      	add	r2, r0
 8015644:	4601      	mov	r1, r0
 8015646:	428a      	cmp	r2, r1
 8015648:	d100      	bne.n	801564c <memmove+0x2a>
 801564a:	bd10      	pop	{r4, pc}
 801564c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015650:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015654:	e7f7      	b.n	8015646 <memmove+0x24>

08015656 <memset>:
 8015656:	4402      	add	r2, r0
 8015658:	4603      	mov	r3, r0
 801565a:	4293      	cmp	r3, r2
 801565c:	d100      	bne.n	8015660 <memset+0xa>
 801565e:	4770      	bx	lr
 8015660:	f803 1b01 	strb.w	r1, [r3], #1
 8015664:	e7f9      	b.n	801565a <memset+0x4>

08015666 <strchr>:
 8015666:	b2c9      	uxtb	r1, r1
 8015668:	4603      	mov	r3, r0
 801566a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801566e:	b11a      	cbz	r2, 8015678 <strchr+0x12>
 8015670:	428a      	cmp	r2, r1
 8015672:	d1f9      	bne.n	8015668 <strchr+0x2>
 8015674:	4618      	mov	r0, r3
 8015676:	4770      	bx	lr
 8015678:	2900      	cmp	r1, #0
 801567a:	bf18      	it	ne
 801567c:	2300      	movne	r3, #0
 801567e:	e7f9      	b.n	8015674 <strchr+0xe>

08015680 <strdup>:
 8015680:	4b02      	ldr	r3, [pc, #8]	; (801568c <strdup+0xc>)
 8015682:	4601      	mov	r1, r0
 8015684:	6818      	ldr	r0, [r3, #0]
 8015686:	f000 b803 	b.w	8015690 <_strdup_r>
 801568a:	bf00      	nop
 801568c:	2400030c 	.word	0x2400030c

08015690 <_strdup_r>:
 8015690:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015692:	4604      	mov	r4, r0
 8015694:	4608      	mov	r0, r1
 8015696:	460d      	mov	r5, r1
 8015698:	f7ea fe9a 	bl	80003d0 <strlen>
 801569c:	1c42      	adds	r2, r0, #1
 801569e:	4611      	mov	r1, r2
 80156a0:	4620      	mov	r0, r4
 80156a2:	9201      	str	r2, [sp, #4]
 80156a4:	f7ff fd1c 	bl	80150e0 <_malloc_r>
 80156a8:	4604      	mov	r4, r0
 80156aa:	b118      	cbz	r0, 80156b4 <_strdup_r+0x24>
 80156ac:	9a01      	ldr	r2, [sp, #4]
 80156ae:	4629      	mov	r1, r5
 80156b0:	f000 f8b8 	bl	8015824 <memcpy>
 80156b4:	4620      	mov	r0, r4
 80156b6:	b003      	add	sp, #12
 80156b8:	bd30      	pop	{r4, r5, pc}

080156ba <strncmp>:
 80156ba:	b510      	push	{r4, lr}
 80156bc:	b16a      	cbz	r2, 80156da <strncmp+0x20>
 80156be:	3901      	subs	r1, #1
 80156c0:	1884      	adds	r4, r0, r2
 80156c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80156c6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80156ca:	429a      	cmp	r2, r3
 80156cc:	d103      	bne.n	80156d6 <strncmp+0x1c>
 80156ce:	42a0      	cmp	r0, r4
 80156d0:	d001      	beq.n	80156d6 <strncmp+0x1c>
 80156d2:	2a00      	cmp	r2, #0
 80156d4:	d1f5      	bne.n	80156c2 <strncmp+0x8>
 80156d6:	1ad0      	subs	r0, r2, r3
 80156d8:	bd10      	pop	{r4, pc}
 80156da:	4610      	mov	r0, r2
 80156dc:	e7fc      	b.n	80156d8 <strncmp+0x1e>

080156de <strrchr>:
 80156de:	b513      	push	{r0, r1, r4, lr}
 80156e0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80156e4:	4603      	mov	r3, r0
 80156e6:	d110      	bne.n	801570a <strrchr+0x2c>
 80156e8:	b002      	add	sp, #8
 80156ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80156ee:	f7ff bfba 	b.w	8015666 <strchr>
 80156f2:	1c43      	adds	r3, r0, #1
 80156f4:	4604      	mov	r4, r0
 80156f6:	4618      	mov	r0, r3
 80156f8:	9101      	str	r1, [sp, #4]
 80156fa:	f7ff ffb4 	bl	8015666 <strchr>
 80156fe:	9901      	ldr	r1, [sp, #4]
 8015700:	2800      	cmp	r0, #0
 8015702:	d1f6      	bne.n	80156f2 <strrchr+0x14>
 8015704:	4620      	mov	r0, r4
 8015706:	b002      	add	sp, #8
 8015708:	bd10      	pop	{r4, pc}
 801570a:	2400      	movs	r4, #0
 801570c:	e7f3      	b.n	80156f6 <strrchr+0x18>
	...

08015710 <_close_r>:
 8015710:	b538      	push	{r3, r4, r5, lr}
 8015712:	4d06      	ldr	r5, [pc, #24]	; (801572c <_close_r+0x1c>)
 8015714:	2300      	movs	r3, #0
 8015716:	4604      	mov	r4, r0
 8015718:	4608      	mov	r0, r1
 801571a:	602b      	str	r3, [r5, #0]
 801571c:	f7fa fa36 	bl	800fb8c <_close>
 8015720:	1c43      	adds	r3, r0, #1
 8015722:	d102      	bne.n	801572a <_close_r+0x1a>
 8015724:	682b      	ldr	r3, [r5, #0]
 8015726:	b103      	cbz	r3, 801572a <_close_r+0x1a>
 8015728:	6023      	str	r3, [r4, #0]
 801572a:	bd38      	pop	{r3, r4, r5, pc}
 801572c:	2400378c 	.word	0x2400378c

08015730 <_lseek_r>:
 8015730:	b538      	push	{r3, r4, r5, lr}
 8015732:	4d07      	ldr	r5, [pc, #28]	; (8015750 <_lseek_r+0x20>)
 8015734:	4604      	mov	r4, r0
 8015736:	4608      	mov	r0, r1
 8015738:	4611      	mov	r1, r2
 801573a:	2200      	movs	r2, #0
 801573c:	602a      	str	r2, [r5, #0]
 801573e:	461a      	mov	r2, r3
 8015740:	f7fa fa4b 	bl	800fbda <_lseek>
 8015744:	1c43      	adds	r3, r0, #1
 8015746:	d102      	bne.n	801574e <_lseek_r+0x1e>
 8015748:	682b      	ldr	r3, [r5, #0]
 801574a:	b103      	cbz	r3, 801574e <_lseek_r+0x1e>
 801574c:	6023      	str	r3, [r4, #0]
 801574e:	bd38      	pop	{r3, r4, r5, pc}
 8015750:	2400378c 	.word	0x2400378c

08015754 <_read_r>:
 8015754:	b538      	push	{r3, r4, r5, lr}
 8015756:	4d07      	ldr	r5, [pc, #28]	; (8015774 <_read_r+0x20>)
 8015758:	4604      	mov	r4, r0
 801575a:	4608      	mov	r0, r1
 801575c:	4611      	mov	r1, r2
 801575e:	2200      	movs	r2, #0
 8015760:	602a      	str	r2, [r5, #0]
 8015762:	461a      	mov	r2, r3
 8015764:	f7fa f9dc 	bl	800fb20 <_read>
 8015768:	1c43      	adds	r3, r0, #1
 801576a:	d102      	bne.n	8015772 <_read_r+0x1e>
 801576c:	682b      	ldr	r3, [r5, #0]
 801576e:	b103      	cbz	r3, 8015772 <_read_r+0x1e>
 8015770:	6023      	str	r3, [r4, #0]
 8015772:	bd38      	pop	{r3, r4, r5, pc}
 8015774:	2400378c 	.word	0x2400378c

08015778 <_sbrk_r>:
 8015778:	b538      	push	{r3, r4, r5, lr}
 801577a:	4d06      	ldr	r5, [pc, #24]	; (8015794 <_sbrk_r+0x1c>)
 801577c:	2300      	movs	r3, #0
 801577e:	4604      	mov	r4, r0
 8015780:	4608      	mov	r0, r1
 8015782:	602b      	str	r3, [r5, #0]
 8015784:	f7fa fa36 	bl	800fbf4 <_sbrk>
 8015788:	1c43      	adds	r3, r0, #1
 801578a:	d102      	bne.n	8015792 <_sbrk_r+0x1a>
 801578c:	682b      	ldr	r3, [r5, #0]
 801578e:	b103      	cbz	r3, 8015792 <_sbrk_r+0x1a>
 8015790:	6023      	str	r3, [r4, #0]
 8015792:	bd38      	pop	{r3, r4, r5, pc}
 8015794:	2400378c 	.word	0x2400378c

08015798 <_write_r>:
 8015798:	b538      	push	{r3, r4, r5, lr}
 801579a:	4d07      	ldr	r5, [pc, #28]	; (80157b8 <_write_r+0x20>)
 801579c:	4604      	mov	r4, r0
 801579e:	4608      	mov	r0, r1
 80157a0:	4611      	mov	r1, r2
 80157a2:	2200      	movs	r2, #0
 80157a4:	602a      	str	r2, [r5, #0]
 80157a6:	461a      	mov	r2, r3
 80157a8:	f7fa f9d8 	bl	800fb5c <_write>
 80157ac:	1c43      	adds	r3, r0, #1
 80157ae:	d102      	bne.n	80157b6 <_write_r+0x1e>
 80157b0:	682b      	ldr	r3, [r5, #0]
 80157b2:	b103      	cbz	r3, 80157b6 <_write_r+0x1e>
 80157b4:	6023      	str	r3, [r4, #0]
 80157b6:	bd38      	pop	{r3, r4, r5, pc}
 80157b8:	2400378c 	.word	0x2400378c

080157bc <__errno>:
 80157bc:	4b01      	ldr	r3, [pc, #4]	; (80157c4 <__errno+0x8>)
 80157be:	6818      	ldr	r0, [r3, #0]
 80157c0:	4770      	bx	lr
 80157c2:	bf00      	nop
 80157c4:	2400030c 	.word	0x2400030c

080157c8 <__libc_init_array>:
 80157c8:	b570      	push	{r4, r5, r6, lr}
 80157ca:	4d0d      	ldr	r5, [pc, #52]	; (8015800 <__libc_init_array+0x38>)
 80157cc:	4c0d      	ldr	r4, [pc, #52]	; (8015804 <__libc_init_array+0x3c>)
 80157ce:	1b64      	subs	r4, r4, r5
 80157d0:	10a4      	asrs	r4, r4, #2
 80157d2:	2600      	movs	r6, #0
 80157d4:	42a6      	cmp	r6, r4
 80157d6:	d109      	bne.n	80157ec <__libc_init_array+0x24>
 80157d8:	4d0b      	ldr	r5, [pc, #44]	; (8015808 <__libc_init_array+0x40>)
 80157da:	4c0c      	ldr	r4, [pc, #48]	; (801580c <__libc_init_array+0x44>)
 80157dc:	f000 fd98 	bl	8016310 <_init>
 80157e0:	1b64      	subs	r4, r4, r5
 80157e2:	10a4      	asrs	r4, r4, #2
 80157e4:	2600      	movs	r6, #0
 80157e6:	42a6      	cmp	r6, r4
 80157e8:	d105      	bne.n	80157f6 <__libc_init_array+0x2e>
 80157ea:	bd70      	pop	{r4, r5, r6, pc}
 80157ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80157f0:	4798      	blx	r3
 80157f2:	3601      	adds	r6, #1
 80157f4:	e7ee      	b.n	80157d4 <__libc_init_array+0xc>
 80157f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80157fa:	4798      	blx	r3
 80157fc:	3601      	adds	r6, #1
 80157fe:	e7f2      	b.n	80157e6 <__libc_init_array+0x1e>
 8015800:	08019350 	.word	0x08019350
 8015804:	08019350 	.word	0x08019350
 8015808:	08019350 	.word	0x08019350
 801580c:	08019354 	.word	0x08019354

08015810 <__retarget_lock_acquire_recursive>:
 8015810:	4770      	bx	lr

08015812 <__retarget_lock_release_recursive>:
 8015812:	4770      	bx	lr

08015814 <strcpy>:
 8015814:	4603      	mov	r3, r0
 8015816:	f811 2b01 	ldrb.w	r2, [r1], #1
 801581a:	f803 2b01 	strb.w	r2, [r3], #1
 801581e:	2a00      	cmp	r2, #0
 8015820:	d1f9      	bne.n	8015816 <strcpy+0x2>
 8015822:	4770      	bx	lr

08015824 <memcpy>:
 8015824:	440a      	add	r2, r1
 8015826:	4291      	cmp	r1, r2
 8015828:	f100 33ff 	add.w	r3, r0, #4294967295
 801582c:	d100      	bne.n	8015830 <memcpy+0xc>
 801582e:	4770      	bx	lr
 8015830:	b510      	push	{r4, lr}
 8015832:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015836:	f803 4f01 	strb.w	r4, [r3, #1]!
 801583a:	4291      	cmp	r1, r2
 801583c:	d1f9      	bne.n	8015832 <memcpy+0xe>
 801583e:	bd10      	pop	{r4, pc}

08015840 <abort>:
 8015840:	b508      	push	{r3, lr}
 8015842:	2006      	movs	r0, #6
 8015844:	f000 fcc4 	bl	80161d0 <raise>
 8015848:	2001      	movs	r0, #1
 801584a:	f7fa f95f 	bl	800fb0c <_exit>
	...

08015850 <_free_r>:
 8015850:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015852:	2900      	cmp	r1, #0
 8015854:	d044      	beq.n	80158e0 <_free_r+0x90>
 8015856:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801585a:	9001      	str	r0, [sp, #4]
 801585c:	2b00      	cmp	r3, #0
 801585e:	f1a1 0404 	sub.w	r4, r1, #4
 8015862:	bfb8      	it	lt
 8015864:	18e4      	addlt	r4, r4, r3
 8015866:	f7ff fcbb 	bl	80151e0 <__malloc_lock>
 801586a:	4a1e      	ldr	r2, [pc, #120]	; (80158e4 <_free_r+0x94>)
 801586c:	9801      	ldr	r0, [sp, #4]
 801586e:	6813      	ldr	r3, [r2, #0]
 8015870:	b933      	cbnz	r3, 8015880 <_free_r+0x30>
 8015872:	6063      	str	r3, [r4, #4]
 8015874:	6014      	str	r4, [r2, #0]
 8015876:	b003      	add	sp, #12
 8015878:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801587c:	f7ff bcb6 	b.w	80151ec <__malloc_unlock>
 8015880:	42a3      	cmp	r3, r4
 8015882:	d908      	bls.n	8015896 <_free_r+0x46>
 8015884:	6825      	ldr	r5, [r4, #0]
 8015886:	1961      	adds	r1, r4, r5
 8015888:	428b      	cmp	r3, r1
 801588a:	bf01      	itttt	eq
 801588c:	6819      	ldreq	r1, [r3, #0]
 801588e:	685b      	ldreq	r3, [r3, #4]
 8015890:	1949      	addeq	r1, r1, r5
 8015892:	6021      	streq	r1, [r4, #0]
 8015894:	e7ed      	b.n	8015872 <_free_r+0x22>
 8015896:	461a      	mov	r2, r3
 8015898:	685b      	ldr	r3, [r3, #4]
 801589a:	b10b      	cbz	r3, 80158a0 <_free_r+0x50>
 801589c:	42a3      	cmp	r3, r4
 801589e:	d9fa      	bls.n	8015896 <_free_r+0x46>
 80158a0:	6811      	ldr	r1, [r2, #0]
 80158a2:	1855      	adds	r5, r2, r1
 80158a4:	42a5      	cmp	r5, r4
 80158a6:	d10b      	bne.n	80158c0 <_free_r+0x70>
 80158a8:	6824      	ldr	r4, [r4, #0]
 80158aa:	4421      	add	r1, r4
 80158ac:	1854      	adds	r4, r2, r1
 80158ae:	42a3      	cmp	r3, r4
 80158b0:	6011      	str	r1, [r2, #0]
 80158b2:	d1e0      	bne.n	8015876 <_free_r+0x26>
 80158b4:	681c      	ldr	r4, [r3, #0]
 80158b6:	685b      	ldr	r3, [r3, #4]
 80158b8:	6053      	str	r3, [r2, #4]
 80158ba:	440c      	add	r4, r1
 80158bc:	6014      	str	r4, [r2, #0]
 80158be:	e7da      	b.n	8015876 <_free_r+0x26>
 80158c0:	d902      	bls.n	80158c8 <_free_r+0x78>
 80158c2:	230c      	movs	r3, #12
 80158c4:	6003      	str	r3, [r0, #0]
 80158c6:	e7d6      	b.n	8015876 <_free_r+0x26>
 80158c8:	6825      	ldr	r5, [r4, #0]
 80158ca:	1961      	adds	r1, r4, r5
 80158cc:	428b      	cmp	r3, r1
 80158ce:	bf04      	itt	eq
 80158d0:	6819      	ldreq	r1, [r3, #0]
 80158d2:	685b      	ldreq	r3, [r3, #4]
 80158d4:	6063      	str	r3, [r4, #4]
 80158d6:	bf04      	itt	eq
 80158d8:	1949      	addeq	r1, r1, r5
 80158da:	6021      	streq	r1, [r4, #0]
 80158dc:	6054      	str	r4, [r2, #4]
 80158de:	e7ca      	b.n	8015876 <_free_r+0x26>
 80158e0:	b003      	add	sp, #12
 80158e2:	bd30      	pop	{r4, r5, pc}
 80158e4:	24003648 	.word	0x24003648

080158e8 <__sfputc_r>:
 80158e8:	6893      	ldr	r3, [r2, #8]
 80158ea:	3b01      	subs	r3, #1
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	b410      	push	{r4}
 80158f0:	6093      	str	r3, [r2, #8]
 80158f2:	da08      	bge.n	8015906 <__sfputc_r+0x1e>
 80158f4:	6994      	ldr	r4, [r2, #24]
 80158f6:	42a3      	cmp	r3, r4
 80158f8:	db01      	blt.n	80158fe <__sfputc_r+0x16>
 80158fa:	290a      	cmp	r1, #10
 80158fc:	d103      	bne.n	8015906 <__sfputc_r+0x1e>
 80158fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015902:	f000 bba7 	b.w	8016054 <__swbuf_r>
 8015906:	6813      	ldr	r3, [r2, #0]
 8015908:	1c58      	adds	r0, r3, #1
 801590a:	6010      	str	r0, [r2, #0]
 801590c:	7019      	strb	r1, [r3, #0]
 801590e:	4608      	mov	r0, r1
 8015910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015914:	4770      	bx	lr

08015916 <__sfputs_r>:
 8015916:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015918:	4606      	mov	r6, r0
 801591a:	460f      	mov	r7, r1
 801591c:	4614      	mov	r4, r2
 801591e:	18d5      	adds	r5, r2, r3
 8015920:	42ac      	cmp	r4, r5
 8015922:	d101      	bne.n	8015928 <__sfputs_r+0x12>
 8015924:	2000      	movs	r0, #0
 8015926:	e007      	b.n	8015938 <__sfputs_r+0x22>
 8015928:	f814 1b01 	ldrb.w	r1, [r4], #1
 801592c:	463a      	mov	r2, r7
 801592e:	4630      	mov	r0, r6
 8015930:	f7ff ffda 	bl	80158e8 <__sfputc_r>
 8015934:	1c43      	adds	r3, r0, #1
 8015936:	d1f3      	bne.n	8015920 <__sfputs_r+0xa>
 8015938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801593c <_vfiprintf_r>:
 801593c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015940:	460d      	mov	r5, r1
 8015942:	b09d      	sub	sp, #116	; 0x74
 8015944:	4614      	mov	r4, r2
 8015946:	4698      	mov	r8, r3
 8015948:	4606      	mov	r6, r0
 801594a:	b118      	cbz	r0, 8015954 <_vfiprintf_r+0x18>
 801594c:	6a03      	ldr	r3, [r0, #32]
 801594e:	b90b      	cbnz	r3, 8015954 <_vfiprintf_r+0x18>
 8015950:	f7ff fdc4 	bl	80154dc <__sinit>
 8015954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015956:	07d9      	lsls	r1, r3, #31
 8015958:	d405      	bmi.n	8015966 <_vfiprintf_r+0x2a>
 801595a:	89ab      	ldrh	r3, [r5, #12]
 801595c:	059a      	lsls	r2, r3, #22
 801595e:	d402      	bmi.n	8015966 <_vfiprintf_r+0x2a>
 8015960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015962:	f7ff ff55 	bl	8015810 <__retarget_lock_acquire_recursive>
 8015966:	89ab      	ldrh	r3, [r5, #12]
 8015968:	071b      	lsls	r3, r3, #28
 801596a:	d501      	bpl.n	8015970 <_vfiprintf_r+0x34>
 801596c:	692b      	ldr	r3, [r5, #16]
 801596e:	b99b      	cbnz	r3, 8015998 <_vfiprintf_r+0x5c>
 8015970:	4629      	mov	r1, r5
 8015972:	4630      	mov	r0, r6
 8015974:	f000 fbac 	bl	80160d0 <__swsetup_r>
 8015978:	b170      	cbz	r0, 8015998 <_vfiprintf_r+0x5c>
 801597a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801597c:	07dc      	lsls	r4, r3, #31
 801597e:	d504      	bpl.n	801598a <_vfiprintf_r+0x4e>
 8015980:	f04f 30ff 	mov.w	r0, #4294967295
 8015984:	b01d      	add	sp, #116	; 0x74
 8015986:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801598a:	89ab      	ldrh	r3, [r5, #12]
 801598c:	0598      	lsls	r0, r3, #22
 801598e:	d4f7      	bmi.n	8015980 <_vfiprintf_r+0x44>
 8015990:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015992:	f7ff ff3e 	bl	8015812 <__retarget_lock_release_recursive>
 8015996:	e7f3      	b.n	8015980 <_vfiprintf_r+0x44>
 8015998:	2300      	movs	r3, #0
 801599a:	9309      	str	r3, [sp, #36]	; 0x24
 801599c:	2320      	movs	r3, #32
 801599e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80159a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80159a6:	2330      	movs	r3, #48	; 0x30
 80159a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015b5c <_vfiprintf_r+0x220>
 80159ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80159b0:	f04f 0901 	mov.w	r9, #1
 80159b4:	4623      	mov	r3, r4
 80159b6:	469a      	mov	sl, r3
 80159b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80159bc:	b10a      	cbz	r2, 80159c2 <_vfiprintf_r+0x86>
 80159be:	2a25      	cmp	r2, #37	; 0x25
 80159c0:	d1f9      	bne.n	80159b6 <_vfiprintf_r+0x7a>
 80159c2:	ebba 0b04 	subs.w	fp, sl, r4
 80159c6:	d00b      	beq.n	80159e0 <_vfiprintf_r+0xa4>
 80159c8:	465b      	mov	r3, fp
 80159ca:	4622      	mov	r2, r4
 80159cc:	4629      	mov	r1, r5
 80159ce:	4630      	mov	r0, r6
 80159d0:	f7ff ffa1 	bl	8015916 <__sfputs_r>
 80159d4:	3001      	adds	r0, #1
 80159d6:	f000 80a9 	beq.w	8015b2c <_vfiprintf_r+0x1f0>
 80159da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80159dc:	445a      	add	r2, fp
 80159de:	9209      	str	r2, [sp, #36]	; 0x24
 80159e0:	f89a 3000 	ldrb.w	r3, [sl]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	f000 80a1 	beq.w	8015b2c <_vfiprintf_r+0x1f0>
 80159ea:	2300      	movs	r3, #0
 80159ec:	f04f 32ff 	mov.w	r2, #4294967295
 80159f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80159f4:	f10a 0a01 	add.w	sl, sl, #1
 80159f8:	9304      	str	r3, [sp, #16]
 80159fa:	9307      	str	r3, [sp, #28]
 80159fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015a00:	931a      	str	r3, [sp, #104]	; 0x68
 8015a02:	4654      	mov	r4, sl
 8015a04:	2205      	movs	r2, #5
 8015a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015a0a:	4854      	ldr	r0, [pc, #336]	; (8015b5c <_vfiprintf_r+0x220>)
 8015a0c:	f7ea fc90 	bl	8000330 <memchr>
 8015a10:	9a04      	ldr	r2, [sp, #16]
 8015a12:	b9d8      	cbnz	r0, 8015a4c <_vfiprintf_r+0x110>
 8015a14:	06d1      	lsls	r1, r2, #27
 8015a16:	bf44      	itt	mi
 8015a18:	2320      	movmi	r3, #32
 8015a1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a1e:	0713      	lsls	r3, r2, #28
 8015a20:	bf44      	itt	mi
 8015a22:	232b      	movmi	r3, #43	; 0x2b
 8015a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015a28:	f89a 3000 	ldrb.w	r3, [sl]
 8015a2c:	2b2a      	cmp	r3, #42	; 0x2a
 8015a2e:	d015      	beq.n	8015a5c <_vfiprintf_r+0x120>
 8015a30:	9a07      	ldr	r2, [sp, #28]
 8015a32:	4654      	mov	r4, sl
 8015a34:	2000      	movs	r0, #0
 8015a36:	f04f 0c0a 	mov.w	ip, #10
 8015a3a:	4621      	mov	r1, r4
 8015a3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015a40:	3b30      	subs	r3, #48	; 0x30
 8015a42:	2b09      	cmp	r3, #9
 8015a44:	d94d      	bls.n	8015ae2 <_vfiprintf_r+0x1a6>
 8015a46:	b1b0      	cbz	r0, 8015a76 <_vfiprintf_r+0x13a>
 8015a48:	9207      	str	r2, [sp, #28]
 8015a4a:	e014      	b.n	8015a76 <_vfiprintf_r+0x13a>
 8015a4c:	eba0 0308 	sub.w	r3, r0, r8
 8015a50:	fa09 f303 	lsl.w	r3, r9, r3
 8015a54:	4313      	orrs	r3, r2
 8015a56:	9304      	str	r3, [sp, #16]
 8015a58:	46a2      	mov	sl, r4
 8015a5a:	e7d2      	b.n	8015a02 <_vfiprintf_r+0xc6>
 8015a5c:	9b03      	ldr	r3, [sp, #12]
 8015a5e:	1d19      	adds	r1, r3, #4
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	9103      	str	r1, [sp, #12]
 8015a64:	2b00      	cmp	r3, #0
 8015a66:	bfbb      	ittet	lt
 8015a68:	425b      	neglt	r3, r3
 8015a6a:	f042 0202 	orrlt.w	r2, r2, #2
 8015a6e:	9307      	strge	r3, [sp, #28]
 8015a70:	9307      	strlt	r3, [sp, #28]
 8015a72:	bfb8      	it	lt
 8015a74:	9204      	strlt	r2, [sp, #16]
 8015a76:	7823      	ldrb	r3, [r4, #0]
 8015a78:	2b2e      	cmp	r3, #46	; 0x2e
 8015a7a:	d10c      	bne.n	8015a96 <_vfiprintf_r+0x15a>
 8015a7c:	7863      	ldrb	r3, [r4, #1]
 8015a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8015a80:	d134      	bne.n	8015aec <_vfiprintf_r+0x1b0>
 8015a82:	9b03      	ldr	r3, [sp, #12]
 8015a84:	1d1a      	adds	r2, r3, #4
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	9203      	str	r2, [sp, #12]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	bfb8      	it	lt
 8015a8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8015a92:	3402      	adds	r4, #2
 8015a94:	9305      	str	r3, [sp, #20]
 8015a96:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015b6c <_vfiprintf_r+0x230>
 8015a9a:	7821      	ldrb	r1, [r4, #0]
 8015a9c:	2203      	movs	r2, #3
 8015a9e:	4650      	mov	r0, sl
 8015aa0:	f7ea fc46 	bl	8000330 <memchr>
 8015aa4:	b138      	cbz	r0, 8015ab6 <_vfiprintf_r+0x17a>
 8015aa6:	9b04      	ldr	r3, [sp, #16]
 8015aa8:	eba0 000a 	sub.w	r0, r0, sl
 8015aac:	2240      	movs	r2, #64	; 0x40
 8015aae:	4082      	lsls	r2, r0
 8015ab0:	4313      	orrs	r3, r2
 8015ab2:	3401      	adds	r4, #1
 8015ab4:	9304      	str	r3, [sp, #16]
 8015ab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015aba:	4829      	ldr	r0, [pc, #164]	; (8015b60 <_vfiprintf_r+0x224>)
 8015abc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ac0:	2206      	movs	r2, #6
 8015ac2:	f7ea fc35 	bl	8000330 <memchr>
 8015ac6:	2800      	cmp	r0, #0
 8015ac8:	d03f      	beq.n	8015b4a <_vfiprintf_r+0x20e>
 8015aca:	4b26      	ldr	r3, [pc, #152]	; (8015b64 <_vfiprintf_r+0x228>)
 8015acc:	bb1b      	cbnz	r3, 8015b16 <_vfiprintf_r+0x1da>
 8015ace:	9b03      	ldr	r3, [sp, #12]
 8015ad0:	3307      	adds	r3, #7
 8015ad2:	f023 0307 	bic.w	r3, r3, #7
 8015ad6:	3308      	adds	r3, #8
 8015ad8:	9303      	str	r3, [sp, #12]
 8015ada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015adc:	443b      	add	r3, r7
 8015ade:	9309      	str	r3, [sp, #36]	; 0x24
 8015ae0:	e768      	b.n	80159b4 <_vfiprintf_r+0x78>
 8015ae2:	fb0c 3202 	mla	r2, ip, r2, r3
 8015ae6:	460c      	mov	r4, r1
 8015ae8:	2001      	movs	r0, #1
 8015aea:	e7a6      	b.n	8015a3a <_vfiprintf_r+0xfe>
 8015aec:	2300      	movs	r3, #0
 8015aee:	3401      	adds	r4, #1
 8015af0:	9305      	str	r3, [sp, #20]
 8015af2:	4619      	mov	r1, r3
 8015af4:	f04f 0c0a 	mov.w	ip, #10
 8015af8:	4620      	mov	r0, r4
 8015afa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015afe:	3a30      	subs	r2, #48	; 0x30
 8015b00:	2a09      	cmp	r2, #9
 8015b02:	d903      	bls.n	8015b0c <_vfiprintf_r+0x1d0>
 8015b04:	2b00      	cmp	r3, #0
 8015b06:	d0c6      	beq.n	8015a96 <_vfiprintf_r+0x15a>
 8015b08:	9105      	str	r1, [sp, #20]
 8015b0a:	e7c4      	b.n	8015a96 <_vfiprintf_r+0x15a>
 8015b0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8015b10:	4604      	mov	r4, r0
 8015b12:	2301      	movs	r3, #1
 8015b14:	e7f0      	b.n	8015af8 <_vfiprintf_r+0x1bc>
 8015b16:	ab03      	add	r3, sp, #12
 8015b18:	9300      	str	r3, [sp, #0]
 8015b1a:	462a      	mov	r2, r5
 8015b1c:	4b12      	ldr	r3, [pc, #72]	; (8015b68 <_vfiprintf_r+0x22c>)
 8015b1e:	a904      	add	r1, sp, #16
 8015b20:	4630      	mov	r0, r6
 8015b22:	f3af 8000 	nop.w
 8015b26:	4607      	mov	r7, r0
 8015b28:	1c78      	adds	r0, r7, #1
 8015b2a:	d1d6      	bne.n	8015ada <_vfiprintf_r+0x19e>
 8015b2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b2e:	07d9      	lsls	r1, r3, #31
 8015b30:	d405      	bmi.n	8015b3e <_vfiprintf_r+0x202>
 8015b32:	89ab      	ldrh	r3, [r5, #12]
 8015b34:	059a      	lsls	r2, r3, #22
 8015b36:	d402      	bmi.n	8015b3e <_vfiprintf_r+0x202>
 8015b38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b3a:	f7ff fe6a 	bl	8015812 <__retarget_lock_release_recursive>
 8015b3e:	89ab      	ldrh	r3, [r5, #12]
 8015b40:	065b      	lsls	r3, r3, #25
 8015b42:	f53f af1d 	bmi.w	8015980 <_vfiprintf_r+0x44>
 8015b46:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015b48:	e71c      	b.n	8015984 <_vfiprintf_r+0x48>
 8015b4a:	ab03      	add	r3, sp, #12
 8015b4c:	9300      	str	r3, [sp, #0]
 8015b4e:	462a      	mov	r2, r5
 8015b50:	4b05      	ldr	r3, [pc, #20]	; (8015b68 <_vfiprintf_r+0x22c>)
 8015b52:	a904      	add	r1, sp, #16
 8015b54:	4630      	mov	r0, r6
 8015b56:	f000 f879 	bl	8015c4c <_printf_i>
 8015b5a:	e7e4      	b.n	8015b26 <_vfiprintf_r+0x1ea>
 8015b5c:	08019314 	.word	0x08019314
 8015b60:	0801931e 	.word	0x0801931e
 8015b64:	00000000 	.word	0x00000000
 8015b68:	08015917 	.word	0x08015917
 8015b6c:	0801931a 	.word	0x0801931a

08015b70 <_printf_common>:
 8015b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015b74:	4616      	mov	r6, r2
 8015b76:	4699      	mov	r9, r3
 8015b78:	688a      	ldr	r2, [r1, #8]
 8015b7a:	690b      	ldr	r3, [r1, #16]
 8015b7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015b80:	4293      	cmp	r3, r2
 8015b82:	bfb8      	it	lt
 8015b84:	4613      	movlt	r3, r2
 8015b86:	6033      	str	r3, [r6, #0]
 8015b88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015b8c:	4607      	mov	r7, r0
 8015b8e:	460c      	mov	r4, r1
 8015b90:	b10a      	cbz	r2, 8015b96 <_printf_common+0x26>
 8015b92:	3301      	adds	r3, #1
 8015b94:	6033      	str	r3, [r6, #0]
 8015b96:	6823      	ldr	r3, [r4, #0]
 8015b98:	0699      	lsls	r1, r3, #26
 8015b9a:	bf42      	ittt	mi
 8015b9c:	6833      	ldrmi	r3, [r6, #0]
 8015b9e:	3302      	addmi	r3, #2
 8015ba0:	6033      	strmi	r3, [r6, #0]
 8015ba2:	6825      	ldr	r5, [r4, #0]
 8015ba4:	f015 0506 	ands.w	r5, r5, #6
 8015ba8:	d106      	bne.n	8015bb8 <_printf_common+0x48>
 8015baa:	f104 0a19 	add.w	sl, r4, #25
 8015bae:	68e3      	ldr	r3, [r4, #12]
 8015bb0:	6832      	ldr	r2, [r6, #0]
 8015bb2:	1a9b      	subs	r3, r3, r2
 8015bb4:	42ab      	cmp	r3, r5
 8015bb6:	dc26      	bgt.n	8015c06 <_printf_common+0x96>
 8015bb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015bbc:	1e13      	subs	r3, r2, #0
 8015bbe:	6822      	ldr	r2, [r4, #0]
 8015bc0:	bf18      	it	ne
 8015bc2:	2301      	movne	r3, #1
 8015bc4:	0692      	lsls	r2, r2, #26
 8015bc6:	d42b      	bmi.n	8015c20 <_printf_common+0xb0>
 8015bc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015bcc:	4649      	mov	r1, r9
 8015bce:	4638      	mov	r0, r7
 8015bd0:	47c0      	blx	r8
 8015bd2:	3001      	adds	r0, #1
 8015bd4:	d01e      	beq.n	8015c14 <_printf_common+0xa4>
 8015bd6:	6823      	ldr	r3, [r4, #0]
 8015bd8:	6922      	ldr	r2, [r4, #16]
 8015bda:	f003 0306 	and.w	r3, r3, #6
 8015bde:	2b04      	cmp	r3, #4
 8015be0:	bf02      	ittt	eq
 8015be2:	68e5      	ldreq	r5, [r4, #12]
 8015be4:	6833      	ldreq	r3, [r6, #0]
 8015be6:	1aed      	subeq	r5, r5, r3
 8015be8:	68a3      	ldr	r3, [r4, #8]
 8015bea:	bf0c      	ite	eq
 8015bec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015bf0:	2500      	movne	r5, #0
 8015bf2:	4293      	cmp	r3, r2
 8015bf4:	bfc4      	itt	gt
 8015bf6:	1a9b      	subgt	r3, r3, r2
 8015bf8:	18ed      	addgt	r5, r5, r3
 8015bfa:	2600      	movs	r6, #0
 8015bfc:	341a      	adds	r4, #26
 8015bfe:	42b5      	cmp	r5, r6
 8015c00:	d11a      	bne.n	8015c38 <_printf_common+0xc8>
 8015c02:	2000      	movs	r0, #0
 8015c04:	e008      	b.n	8015c18 <_printf_common+0xa8>
 8015c06:	2301      	movs	r3, #1
 8015c08:	4652      	mov	r2, sl
 8015c0a:	4649      	mov	r1, r9
 8015c0c:	4638      	mov	r0, r7
 8015c0e:	47c0      	blx	r8
 8015c10:	3001      	adds	r0, #1
 8015c12:	d103      	bne.n	8015c1c <_printf_common+0xac>
 8015c14:	f04f 30ff 	mov.w	r0, #4294967295
 8015c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c1c:	3501      	adds	r5, #1
 8015c1e:	e7c6      	b.n	8015bae <_printf_common+0x3e>
 8015c20:	18e1      	adds	r1, r4, r3
 8015c22:	1c5a      	adds	r2, r3, #1
 8015c24:	2030      	movs	r0, #48	; 0x30
 8015c26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015c2a:	4422      	add	r2, r4
 8015c2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015c30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015c34:	3302      	adds	r3, #2
 8015c36:	e7c7      	b.n	8015bc8 <_printf_common+0x58>
 8015c38:	2301      	movs	r3, #1
 8015c3a:	4622      	mov	r2, r4
 8015c3c:	4649      	mov	r1, r9
 8015c3e:	4638      	mov	r0, r7
 8015c40:	47c0      	blx	r8
 8015c42:	3001      	adds	r0, #1
 8015c44:	d0e6      	beq.n	8015c14 <_printf_common+0xa4>
 8015c46:	3601      	adds	r6, #1
 8015c48:	e7d9      	b.n	8015bfe <_printf_common+0x8e>
	...

08015c4c <_printf_i>:
 8015c4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015c50:	7e0f      	ldrb	r7, [r1, #24]
 8015c52:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015c54:	2f78      	cmp	r7, #120	; 0x78
 8015c56:	4691      	mov	r9, r2
 8015c58:	4680      	mov	r8, r0
 8015c5a:	460c      	mov	r4, r1
 8015c5c:	469a      	mov	sl, r3
 8015c5e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015c62:	d807      	bhi.n	8015c74 <_printf_i+0x28>
 8015c64:	2f62      	cmp	r7, #98	; 0x62
 8015c66:	d80a      	bhi.n	8015c7e <_printf_i+0x32>
 8015c68:	2f00      	cmp	r7, #0
 8015c6a:	f000 80d4 	beq.w	8015e16 <_printf_i+0x1ca>
 8015c6e:	2f58      	cmp	r7, #88	; 0x58
 8015c70:	f000 80c0 	beq.w	8015df4 <_printf_i+0x1a8>
 8015c74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015c78:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015c7c:	e03a      	b.n	8015cf4 <_printf_i+0xa8>
 8015c7e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015c82:	2b15      	cmp	r3, #21
 8015c84:	d8f6      	bhi.n	8015c74 <_printf_i+0x28>
 8015c86:	a101      	add	r1, pc, #4	; (adr r1, 8015c8c <_printf_i+0x40>)
 8015c88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015c8c:	08015ce5 	.word	0x08015ce5
 8015c90:	08015cf9 	.word	0x08015cf9
 8015c94:	08015c75 	.word	0x08015c75
 8015c98:	08015c75 	.word	0x08015c75
 8015c9c:	08015c75 	.word	0x08015c75
 8015ca0:	08015c75 	.word	0x08015c75
 8015ca4:	08015cf9 	.word	0x08015cf9
 8015ca8:	08015c75 	.word	0x08015c75
 8015cac:	08015c75 	.word	0x08015c75
 8015cb0:	08015c75 	.word	0x08015c75
 8015cb4:	08015c75 	.word	0x08015c75
 8015cb8:	08015dfd 	.word	0x08015dfd
 8015cbc:	08015d25 	.word	0x08015d25
 8015cc0:	08015db7 	.word	0x08015db7
 8015cc4:	08015c75 	.word	0x08015c75
 8015cc8:	08015c75 	.word	0x08015c75
 8015ccc:	08015e1f 	.word	0x08015e1f
 8015cd0:	08015c75 	.word	0x08015c75
 8015cd4:	08015d25 	.word	0x08015d25
 8015cd8:	08015c75 	.word	0x08015c75
 8015cdc:	08015c75 	.word	0x08015c75
 8015ce0:	08015dbf 	.word	0x08015dbf
 8015ce4:	682b      	ldr	r3, [r5, #0]
 8015ce6:	1d1a      	adds	r2, r3, #4
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	602a      	str	r2, [r5, #0]
 8015cec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015cf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015cf4:	2301      	movs	r3, #1
 8015cf6:	e09f      	b.n	8015e38 <_printf_i+0x1ec>
 8015cf8:	6820      	ldr	r0, [r4, #0]
 8015cfa:	682b      	ldr	r3, [r5, #0]
 8015cfc:	0607      	lsls	r7, r0, #24
 8015cfe:	f103 0104 	add.w	r1, r3, #4
 8015d02:	6029      	str	r1, [r5, #0]
 8015d04:	d501      	bpl.n	8015d0a <_printf_i+0xbe>
 8015d06:	681e      	ldr	r6, [r3, #0]
 8015d08:	e003      	b.n	8015d12 <_printf_i+0xc6>
 8015d0a:	0646      	lsls	r6, r0, #25
 8015d0c:	d5fb      	bpl.n	8015d06 <_printf_i+0xba>
 8015d0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015d12:	2e00      	cmp	r6, #0
 8015d14:	da03      	bge.n	8015d1e <_printf_i+0xd2>
 8015d16:	232d      	movs	r3, #45	; 0x2d
 8015d18:	4276      	negs	r6, r6
 8015d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015d1e:	485a      	ldr	r0, [pc, #360]	; (8015e88 <_printf_i+0x23c>)
 8015d20:	230a      	movs	r3, #10
 8015d22:	e012      	b.n	8015d4a <_printf_i+0xfe>
 8015d24:	682b      	ldr	r3, [r5, #0]
 8015d26:	6820      	ldr	r0, [r4, #0]
 8015d28:	1d19      	adds	r1, r3, #4
 8015d2a:	6029      	str	r1, [r5, #0]
 8015d2c:	0605      	lsls	r5, r0, #24
 8015d2e:	d501      	bpl.n	8015d34 <_printf_i+0xe8>
 8015d30:	681e      	ldr	r6, [r3, #0]
 8015d32:	e002      	b.n	8015d3a <_printf_i+0xee>
 8015d34:	0641      	lsls	r1, r0, #25
 8015d36:	d5fb      	bpl.n	8015d30 <_printf_i+0xe4>
 8015d38:	881e      	ldrh	r6, [r3, #0]
 8015d3a:	4853      	ldr	r0, [pc, #332]	; (8015e88 <_printf_i+0x23c>)
 8015d3c:	2f6f      	cmp	r7, #111	; 0x6f
 8015d3e:	bf0c      	ite	eq
 8015d40:	2308      	moveq	r3, #8
 8015d42:	230a      	movne	r3, #10
 8015d44:	2100      	movs	r1, #0
 8015d46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015d4a:	6865      	ldr	r5, [r4, #4]
 8015d4c:	60a5      	str	r5, [r4, #8]
 8015d4e:	2d00      	cmp	r5, #0
 8015d50:	bfa2      	ittt	ge
 8015d52:	6821      	ldrge	r1, [r4, #0]
 8015d54:	f021 0104 	bicge.w	r1, r1, #4
 8015d58:	6021      	strge	r1, [r4, #0]
 8015d5a:	b90e      	cbnz	r6, 8015d60 <_printf_i+0x114>
 8015d5c:	2d00      	cmp	r5, #0
 8015d5e:	d04b      	beq.n	8015df8 <_printf_i+0x1ac>
 8015d60:	4615      	mov	r5, r2
 8015d62:	fbb6 f1f3 	udiv	r1, r6, r3
 8015d66:	fb03 6711 	mls	r7, r3, r1, r6
 8015d6a:	5dc7      	ldrb	r7, [r0, r7]
 8015d6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015d70:	4637      	mov	r7, r6
 8015d72:	42bb      	cmp	r3, r7
 8015d74:	460e      	mov	r6, r1
 8015d76:	d9f4      	bls.n	8015d62 <_printf_i+0x116>
 8015d78:	2b08      	cmp	r3, #8
 8015d7a:	d10b      	bne.n	8015d94 <_printf_i+0x148>
 8015d7c:	6823      	ldr	r3, [r4, #0]
 8015d7e:	07de      	lsls	r6, r3, #31
 8015d80:	d508      	bpl.n	8015d94 <_printf_i+0x148>
 8015d82:	6923      	ldr	r3, [r4, #16]
 8015d84:	6861      	ldr	r1, [r4, #4]
 8015d86:	4299      	cmp	r1, r3
 8015d88:	bfde      	ittt	le
 8015d8a:	2330      	movle	r3, #48	; 0x30
 8015d8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015d90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015d94:	1b52      	subs	r2, r2, r5
 8015d96:	6122      	str	r2, [r4, #16]
 8015d98:	f8cd a000 	str.w	sl, [sp]
 8015d9c:	464b      	mov	r3, r9
 8015d9e:	aa03      	add	r2, sp, #12
 8015da0:	4621      	mov	r1, r4
 8015da2:	4640      	mov	r0, r8
 8015da4:	f7ff fee4 	bl	8015b70 <_printf_common>
 8015da8:	3001      	adds	r0, #1
 8015daa:	d14a      	bne.n	8015e42 <_printf_i+0x1f6>
 8015dac:	f04f 30ff 	mov.w	r0, #4294967295
 8015db0:	b004      	add	sp, #16
 8015db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015db6:	6823      	ldr	r3, [r4, #0]
 8015db8:	f043 0320 	orr.w	r3, r3, #32
 8015dbc:	6023      	str	r3, [r4, #0]
 8015dbe:	4833      	ldr	r0, [pc, #204]	; (8015e8c <_printf_i+0x240>)
 8015dc0:	2778      	movs	r7, #120	; 0x78
 8015dc2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015dc6:	6823      	ldr	r3, [r4, #0]
 8015dc8:	6829      	ldr	r1, [r5, #0]
 8015dca:	061f      	lsls	r7, r3, #24
 8015dcc:	f851 6b04 	ldr.w	r6, [r1], #4
 8015dd0:	d402      	bmi.n	8015dd8 <_printf_i+0x18c>
 8015dd2:	065f      	lsls	r7, r3, #25
 8015dd4:	bf48      	it	mi
 8015dd6:	b2b6      	uxthmi	r6, r6
 8015dd8:	07df      	lsls	r7, r3, #31
 8015dda:	bf48      	it	mi
 8015ddc:	f043 0320 	orrmi.w	r3, r3, #32
 8015de0:	6029      	str	r1, [r5, #0]
 8015de2:	bf48      	it	mi
 8015de4:	6023      	strmi	r3, [r4, #0]
 8015de6:	b91e      	cbnz	r6, 8015df0 <_printf_i+0x1a4>
 8015de8:	6823      	ldr	r3, [r4, #0]
 8015dea:	f023 0320 	bic.w	r3, r3, #32
 8015dee:	6023      	str	r3, [r4, #0]
 8015df0:	2310      	movs	r3, #16
 8015df2:	e7a7      	b.n	8015d44 <_printf_i+0xf8>
 8015df4:	4824      	ldr	r0, [pc, #144]	; (8015e88 <_printf_i+0x23c>)
 8015df6:	e7e4      	b.n	8015dc2 <_printf_i+0x176>
 8015df8:	4615      	mov	r5, r2
 8015dfa:	e7bd      	b.n	8015d78 <_printf_i+0x12c>
 8015dfc:	682b      	ldr	r3, [r5, #0]
 8015dfe:	6826      	ldr	r6, [r4, #0]
 8015e00:	6961      	ldr	r1, [r4, #20]
 8015e02:	1d18      	adds	r0, r3, #4
 8015e04:	6028      	str	r0, [r5, #0]
 8015e06:	0635      	lsls	r5, r6, #24
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	d501      	bpl.n	8015e10 <_printf_i+0x1c4>
 8015e0c:	6019      	str	r1, [r3, #0]
 8015e0e:	e002      	b.n	8015e16 <_printf_i+0x1ca>
 8015e10:	0670      	lsls	r0, r6, #25
 8015e12:	d5fb      	bpl.n	8015e0c <_printf_i+0x1c0>
 8015e14:	8019      	strh	r1, [r3, #0]
 8015e16:	2300      	movs	r3, #0
 8015e18:	6123      	str	r3, [r4, #16]
 8015e1a:	4615      	mov	r5, r2
 8015e1c:	e7bc      	b.n	8015d98 <_printf_i+0x14c>
 8015e1e:	682b      	ldr	r3, [r5, #0]
 8015e20:	1d1a      	adds	r2, r3, #4
 8015e22:	602a      	str	r2, [r5, #0]
 8015e24:	681d      	ldr	r5, [r3, #0]
 8015e26:	6862      	ldr	r2, [r4, #4]
 8015e28:	2100      	movs	r1, #0
 8015e2a:	4628      	mov	r0, r5
 8015e2c:	f7ea fa80 	bl	8000330 <memchr>
 8015e30:	b108      	cbz	r0, 8015e36 <_printf_i+0x1ea>
 8015e32:	1b40      	subs	r0, r0, r5
 8015e34:	6060      	str	r0, [r4, #4]
 8015e36:	6863      	ldr	r3, [r4, #4]
 8015e38:	6123      	str	r3, [r4, #16]
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015e40:	e7aa      	b.n	8015d98 <_printf_i+0x14c>
 8015e42:	6923      	ldr	r3, [r4, #16]
 8015e44:	462a      	mov	r2, r5
 8015e46:	4649      	mov	r1, r9
 8015e48:	4640      	mov	r0, r8
 8015e4a:	47d0      	blx	sl
 8015e4c:	3001      	adds	r0, #1
 8015e4e:	d0ad      	beq.n	8015dac <_printf_i+0x160>
 8015e50:	6823      	ldr	r3, [r4, #0]
 8015e52:	079b      	lsls	r3, r3, #30
 8015e54:	d413      	bmi.n	8015e7e <_printf_i+0x232>
 8015e56:	68e0      	ldr	r0, [r4, #12]
 8015e58:	9b03      	ldr	r3, [sp, #12]
 8015e5a:	4298      	cmp	r0, r3
 8015e5c:	bfb8      	it	lt
 8015e5e:	4618      	movlt	r0, r3
 8015e60:	e7a6      	b.n	8015db0 <_printf_i+0x164>
 8015e62:	2301      	movs	r3, #1
 8015e64:	4632      	mov	r2, r6
 8015e66:	4649      	mov	r1, r9
 8015e68:	4640      	mov	r0, r8
 8015e6a:	47d0      	blx	sl
 8015e6c:	3001      	adds	r0, #1
 8015e6e:	d09d      	beq.n	8015dac <_printf_i+0x160>
 8015e70:	3501      	adds	r5, #1
 8015e72:	68e3      	ldr	r3, [r4, #12]
 8015e74:	9903      	ldr	r1, [sp, #12]
 8015e76:	1a5b      	subs	r3, r3, r1
 8015e78:	42ab      	cmp	r3, r5
 8015e7a:	dcf2      	bgt.n	8015e62 <_printf_i+0x216>
 8015e7c:	e7eb      	b.n	8015e56 <_printf_i+0x20a>
 8015e7e:	2500      	movs	r5, #0
 8015e80:	f104 0619 	add.w	r6, r4, #25
 8015e84:	e7f5      	b.n	8015e72 <_printf_i+0x226>
 8015e86:	bf00      	nop
 8015e88:	08019325 	.word	0x08019325
 8015e8c:	08019336 	.word	0x08019336

08015e90 <__sflush_r>:
 8015e90:	898a      	ldrh	r2, [r1, #12]
 8015e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e96:	4605      	mov	r5, r0
 8015e98:	0710      	lsls	r0, r2, #28
 8015e9a:	460c      	mov	r4, r1
 8015e9c:	d458      	bmi.n	8015f50 <__sflush_r+0xc0>
 8015e9e:	684b      	ldr	r3, [r1, #4]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	dc05      	bgt.n	8015eb0 <__sflush_r+0x20>
 8015ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	dc02      	bgt.n	8015eb0 <__sflush_r+0x20>
 8015eaa:	2000      	movs	r0, #0
 8015eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015eb2:	2e00      	cmp	r6, #0
 8015eb4:	d0f9      	beq.n	8015eaa <__sflush_r+0x1a>
 8015eb6:	2300      	movs	r3, #0
 8015eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015ebc:	682f      	ldr	r7, [r5, #0]
 8015ebe:	6a21      	ldr	r1, [r4, #32]
 8015ec0:	602b      	str	r3, [r5, #0]
 8015ec2:	d032      	beq.n	8015f2a <__sflush_r+0x9a>
 8015ec4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015ec6:	89a3      	ldrh	r3, [r4, #12]
 8015ec8:	075a      	lsls	r2, r3, #29
 8015eca:	d505      	bpl.n	8015ed8 <__sflush_r+0x48>
 8015ecc:	6863      	ldr	r3, [r4, #4]
 8015ece:	1ac0      	subs	r0, r0, r3
 8015ed0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015ed2:	b10b      	cbz	r3, 8015ed8 <__sflush_r+0x48>
 8015ed4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015ed6:	1ac0      	subs	r0, r0, r3
 8015ed8:	2300      	movs	r3, #0
 8015eda:	4602      	mov	r2, r0
 8015edc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015ede:	6a21      	ldr	r1, [r4, #32]
 8015ee0:	4628      	mov	r0, r5
 8015ee2:	47b0      	blx	r6
 8015ee4:	1c43      	adds	r3, r0, #1
 8015ee6:	89a3      	ldrh	r3, [r4, #12]
 8015ee8:	d106      	bne.n	8015ef8 <__sflush_r+0x68>
 8015eea:	6829      	ldr	r1, [r5, #0]
 8015eec:	291d      	cmp	r1, #29
 8015eee:	d82b      	bhi.n	8015f48 <__sflush_r+0xb8>
 8015ef0:	4a29      	ldr	r2, [pc, #164]	; (8015f98 <__sflush_r+0x108>)
 8015ef2:	410a      	asrs	r2, r1
 8015ef4:	07d6      	lsls	r6, r2, #31
 8015ef6:	d427      	bmi.n	8015f48 <__sflush_r+0xb8>
 8015ef8:	2200      	movs	r2, #0
 8015efa:	6062      	str	r2, [r4, #4]
 8015efc:	04d9      	lsls	r1, r3, #19
 8015efe:	6922      	ldr	r2, [r4, #16]
 8015f00:	6022      	str	r2, [r4, #0]
 8015f02:	d504      	bpl.n	8015f0e <__sflush_r+0x7e>
 8015f04:	1c42      	adds	r2, r0, #1
 8015f06:	d101      	bne.n	8015f0c <__sflush_r+0x7c>
 8015f08:	682b      	ldr	r3, [r5, #0]
 8015f0a:	b903      	cbnz	r3, 8015f0e <__sflush_r+0x7e>
 8015f0c:	6560      	str	r0, [r4, #84]	; 0x54
 8015f0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f10:	602f      	str	r7, [r5, #0]
 8015f12:	2900      	cmp	r1, #0
 8015f14:	d0c9      	beq.n	8015eaa <__sflush_r+0x1a>
 8015f16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015f1a:	4299      	cmp	r1, r3
 8015f1c:	d002      	beq.n	8015f24 <__sflush_r+0x94>
 8015f1e:	4628      	mov	r0, r5
 8015f20:	f7ff fc96 	bl	8015850 <_free_r>
 8015f24:	2000      	movs	r0, #0
 8015f26:	6360      	str	r0, [r4, #52]	; 0x34
 8015f28:	e7c0      	b.n	8015eac <__sflush_r+0x1c>
 8015f2a:	2301      	movs	r3, #1
 8015f2c:	4628      	mov	r0, r5
 8015f2e:	47b0      	blx	r6
 8015f30:	1c41      	adds	r1, r0, #1
 8015f32:	d1c8      	bne.n	8015ec6 <__sflush_r+0x36>
 8015f34:	682b      	ldr	r3, [r5, #0]
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d0c5      	beq.n	8015ec6 <__sflush_r+0x36>
 8015f3a:	2b1d      	cmp	r3, #29
 8015f3c:	d001      	beq.n	8015f42 <__sflush_r+0xb2>
 8015f3e:	2b16      	cmp	r3, #22
 8015f40:	d101      	bne.n	8015f46 <__sflush_r+0xb6>
 8015f42:	602f      	str	r7, [r5, #0]
 8015f44:	e7b1      	b.n	8015eaa <__sflush_r+0x1a>
 8015f46:	89a3      	ldrh	r3, [r4, #12]
 8015f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f4c:	81a3      	strh	r3, [r4, #12]
 8015f4e:	e7ad      	b.n	8015eac <__sflush_r+0x1c>
 8015f50:	690f      	ldr	r7, [r1, #16]
 8015f52:	2f00      	cmp	r7, #0
 8015f54:	d0a9      	beq.n	8015eaa <__sflush_r+0x1a>
 8015f56:	0793      	lsls	r3, r2, #30
 8015f58:	680e      	ldr	r6, [r1, #0]
 8015f5a:	bf08      	it	eq
 8015f5c:	694b      	ldreq	r3, [r1, #20]
 8015f5e:	600f      	str	r7, [r1, #0]
 8015f60:	bf18      	it	ne
 8015f62:	2300      	movne	r3, #0
 8015f64:	eba6 0807 	sub.w	r8, r6, r7
 8015f68:	608b      	str	r3, [r1, #8]
 8015f6a:	f1b8 0f00 	cmp.w	r8, #0
 8015f6e:	dd9c      	ble.n	8015eaa <__sflush_r+0x1a>
 8015f70:	6a21      	ldr	r1, [r4, #32]
 8015f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015f74:	4643      	mov	r3, r8
 8015f76:	463a      	mov	r2, r7
 8015f78:	4628      	mov	r0, r5
 8015f7a:	47b0      	blx	r6
 8015f7c:	2800      	cmp	r0, #0
 8015f7e:	dc06      	bgt.n	8015f8e <__sflush_r+0xfe>
 8015f80:	89a3      	ldrh	r3, [r4, #12]
 8015f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f86:	81a3      	strh	r3, [r4, #12]
 8015f88:	f04f 30ff 	mov.w	r0, #4294967295
 8015f8c:	e78e      	b.n	8015eac <__sflush_r+0x1c>
 8015f8e:	4407      	add	r7, r0
 8015f90:	eba8 0800 	sub.w	r8, r8, r0
 8015f94:	e7e9      	b.n	8015f6a <__sflush_r+0xda>
 8015f96:	bf00      	nop
 8015f98:	dfbffffe 	.word	0xdfbffffe

08015f9c <_fflush_r>:
 8015f9c:	b538      	push	{r3, r4, r5, lr}
 8015f9e:	690b      	ldr	r3, [r1, #16]
 8015fa0:	4605      	mov	r5, r0
 8015fa2:	460c      	mov	r4, r1
 8015fa4:	b913      	cbnz	r3, 8015fac <_fflush_r+0x10>
 8015fa6:	2500      	movs	r5, #0
 8015fa8:	4628      	mov	r0, r5
 8015faa:	bd38      	pop	{r3, r4, r5, pc}
 8015fac:	b118      	cbz	r0, 8015fb6 <_fflush_r+0x1a>
 8015fae:	6a03      	ldr	r3, [r0, #32]
 8015fb0:	b90b      	cbnz	r3, 8015fb6 <_fflush_r+0x1a>
 8015fb2:	f7ff fa93 	bl	80154dc <__sinit>
 8015fb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d0f3      	beq.n	8015fa6 <_fflush_r+0xa>
 8015fbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015fc0:	07d0      	lsls	r0, r2, #31
 8015fc2:	d404      	bmi.n	8015fce <_fflush_r+0x32>
 8015fc4:	0599      	lsls	r1, r3, #22
 8015fc6:	d402      	bmi.n	8015fce <_fflush_r+0x32>
 8015fc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015fca:	f7ff fc21 	bl	8015810 <__retarget_lock_acquire_recursive>
 8015fce:	4628      	mov	r0, r5
 8015fd0:	4621      	mov	r1, r4
 8015fd2:	f7ff ff5d 	bl	8015e90 <__sflush_r>
 8015fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015fd8:	07da      	lsls	r2, r3, #31
 8015fda:	4605      	mov	r5, r0
 8015fdc:	d4e4      	bmi.n	8015fa8 <_fflush_r+0xc>
 8015fde:	89a3      	ldrh	r3, [r4, #12]
 8015fe0:	059b      	lsls	r3, r3, #22
 8015fe2:	d4e1      	bmi.n	8015fa8 <_fflush_r+0xc>
 8015fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015fe6:	f7ff fc14 	bl	8015812 <__retarget_lock_release_recursive>
 8015fea:	e7dd      	b.n	8015fa8 <_fflush_r+0xc>

08015fec <_putc_r>:
 8015fec:	b570      	push	{r4, r5, r6, lr}
 8015fee:	460d      	mov	r5, r1
 8015ff0:	4614      	mov	r4, r2
 8015ff2:	4606      	mov	r6, r0
 8015ff4:	b118      	cbz	r0, 8015ffe <_putc_r+0x12>
 8015ff6:	6a03      	ldr	r3, [r0, #32]
 8015ff8:	b90b      	cbnz	r3, 8015ffe <_putc_r+0x12>
 8015ffa:	f7ff fa6f 	bl	80154dc <__sinit>
 8015ffe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016000:	07d8      	lsls	r0, r3, #31
 8016002:	d405      	bmi.n	8016010 <_putc_r+0x24>
 8016004:	89a3      	ldrh	r3, [r4, #12]
 8016006:	0599      	lsls	r1, r3, #22
 8016008:	d402      	bmi.n	8016010 <_putc_r+0x24>
 801600a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801600c:	f7ff fc00 	bl	8015810 <__retarget_lock_acquire_recursive>
 8016010:	68a3      	ldr	r3, [r4, #8]
 8016012:	3b01      	subs	r3, #1
 8016014:	2b00      	cmp	r3, #0
 8016016:	60a3      	str	r3, [r4, #8]
 8016018:	da05      	bge.n	8016026 <_putc_r+0x3a>
 801601a:	69a2      	ldr	r2, [r4, #24]
 801601c:	4293      	cmp	r3, r2
 801601e:	db12      	blt.n	8016046 <_putc_r+0x5a>
 8016020:	b2eb      	uxtb	r3, r5
 8016022:	2b0a      	cmp	r3, #10
 8016024:	d00f      	beq.n	8016046 <_putc_r+0x5a>
 8016026:	6823      	ldr	r3, [r4, #0]
 8016028:	1c5a      	adds	r2, r3, #1
 801602a:	6022      	str	r2, [r4, #0]
 801602c:	701d      	strb	r5, [r3, #0]
 801602e:	b2ed      	uxtb	r5, r5
 8016030:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016032:	07da      	lsls	r2, r3, #31
 8016034:	d405      	bmi.n	8016042 <_putc_r+0x56>
 8016036:	89a3      	ldrh	r3, [r4, #12]
 8016038:	059b      	lsls	r3, r3, #22
 801603a:	d402      	bmi.n	8016042 <_putc_r+0x56>
 801603c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801603e:	f7ff fbe8 	bl	8015812 <__retarget_lock_release_recursive>
 8016042:	4628      	mov	r0, r5
 8016044:	bd70      	pop	{r4, r5, r6, pc}
 8016046:	4629      	mov	r1, r5
 8016048:	4622      	mov	r2, r4
 801604a:	4630      	mov	r0, r6
 801604c:	f000 f802 	bl	8016054 <__swbuf_r>
 8016050:	4605      	mov	r5, r0
 8016052:	e7ed      	b.n	8016030 <_putc_r+0x44>

08016054 <__swbuf_r>:
 8016054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016056:	460e      	mov	r6, r1
 8016058:	4614      	mov	r4, r2
 801605a:	4605      	mov	r5, r0
 801605c:	b118      	cbz	r0, 8016066 <__swbuf_r+0x12>
 801605e:	6a03      	ldr	r3, [r0, #32]
 8016060:	b90b      	cbnz	r3, 8016066 <__swbuf_r+0x12>
 8016062:	f7ff fa3b 	bl	80154dc <__sinit>
 8016066:	69a3      	ldr	r3, [r4, #24]
 8016068:	60a3      	str	r3, [r4, #8]
 801606a:	89a3      	ldrh	r3, [r4, #12]
 801606c:	071a      	lsls	r2, r3, #28
 801606e:	d525      	bpl.n	80160bc <__swbuf_r+0x68>
 8016070:	6923      	ldr	r3, [r4, #16]
 8016072:	b31b      	cbz	r3, 80160bc <__swbuf_r+0x68>
 8016074:	6823      	ldr	r3, [r4, #0]
 8016076:	6922      	ldr	r2, [r4, #16]
 8016078:	1a98      	subs	r0, r3, r2
 801607a:	6963      	ldr	r3, [r4, #20]
 801607c:	b2f6      	uxtb	r6, r6
 801607e:	4283      	cmp	r3, r0
 8016080:	4637      	mov	r7, r6
 8016082:	dc04      	bgt.n	801608e <__swbuf_r+0x3a>
 8016084:	4621      	mov	r1, r4
 8016086:	4628      	mov	r0, r5
 8016088:	f7ff ff88 	bl	8015f9c <_fflush_r>
 801608c:	b9e0      	cbnz	r0, 80160c8 <__swbuf_r+0x74>
 801608e:	68a3      	ldr	r3, [r4, #8]
 8016090:	3b01      	subs	r3, #1
 8016092:	60a3      	str	r3, [r4, #8]
 8016094:	6823      	ldr	r3, [r4, #0]
 8016096:	1c5a      	adds	r2, r3, #1
 8016098:	6022      	str	r2, [r4, #0]
 801609a:	701e      	strb	r6, [r3, #0]
 801609c:	6962      	ldr	r2, [r4, #20]
 801609e:	1c43      	adds	r3, r0, #1
 80160a0:	429a      	cmp	r2, r3
 80160a2:	d004      	beq.n	80160ae <__swbuf_r+0x5a>
 80160a4:	89a3      	ldrh	r3, [r4, #12]
 80160a6:	07db      	lsls	r3, r3, #31
 80160a8:	d506      	bpl.n	80160b8 <__swbuf_r+0x64>
 80160aa:	2e0a      	cmp	r6, #10
 80160ac:	d104      	bne.n	80160b8 <__swbuf_r+0x64>
 80160ae:	4621      	mov	r1, r4
 80160b0:	4628      	mov	r0, r5
 80160b2:	f7ff ff73 	bl	8015f9c <_fflush_r>
 80160b6:	b938      	cbnz	r0, 80160c8 <__swbuf_r+0x74>
 80160b8:	4638      	mov	r0, r7
 80160ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80160bc:	4621      	mov	r1, r4
 80160be:	4628      	mov	r0, r5
 80160c0:	f000 f806 	bl	80160d0 <__swsetup_r>
 80160c4:	2800      	cmp	r0, #0
 80160c6:	d0d5      	beq.n	8016074 <__swbuf_r+0x20>
 80160c8:	f04f 37ff 	mov.w	r7, #4294967295
 80160cc:	e7f4      	b.n	80160b8 <__swbuf_r+0x64>
	...

080160d0 <__swsetup_r>:
 80160d0:	b538      	push	{r3, r4, r5, lr}
 80160d2:	4b2a      	ldr	r3, [pc, #168]	; (801617c <__swsetup_r+0xac>)
 80160d4:	4605      	mov	r5, r0
 80160d6:	6818      	ldr	r0, [r3, #0]
 80160d8:	460c      	mov	r4, r1
 80160da:	b118      	cbz	r0, 80160e4 <__swsetup_r+0x14>
 80160dc:	6a03      	ldr	r3, [r0, #32]
 80160de:	b90b      	cbnz	r3, 80160e4 <__swsetup_r+0x14>
 80160e0:	f7ff f9fc 	bl	80154dc <__sinit>
 80160e4:	89a3      	ldrh	r3, [r4, #12]
 80160e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160ea:	0718      	lsls	r0, r3, #28
 80160ec:	d422      	bmi.n	8016134 <__swsetup_r+0x64>
 80160ee:	06d9      	lsls	r1, r3, #27
 80160f0:	d407      	bmi.n	8016102 <__swsetup_r+0x32>
 80160f2:	2309      	movs	r3, #9
 80160f4:	602b      	str	r3, [r5, #0]
 80160f6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80160fa:	81a3      	strh	r3, [r4, #12]
 80160fc:	f04f 30ff 	mov.w	r0, #4294967295
 8016100:	e034      	b.n	801616c <__swsetup_r+0x9c>
 8016102:	0758      	lsls	r0, r3, #29
 8016104:	d512      	bpl.n	801612c <__swsetup_r+0x5c>
 8016106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016108:	b141      	cbz	r1, 801611c <__swsetup_r+0x4c>
 801610a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801610e:	4299      	cmp	r1, r3
 8016110:	d002      	beq.n	8016118 <__swsetup_r+0x48>
 8016112:	4628      	mov	r0, r5
 8016114:	f7ff fb9c 	bl	8015850 <_free_r>
 8016118:	2300      	movs	r3, #0
 801611a:	6363      	str	r3, [r4, #52]	; 0x34
 801611c:	89a3      	ldrh	r3, [r4, #12]
 801611e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016122:	81a3      	strh	r3, [r4, #12]
 8016124:	2300      	movs	r3, #0
 8016126:	6063      	str	r3, [r4, #4]
 8016128:	6923      	ldr	r3, [r4, #16]
 801612a:	6023      	str	r3, [r4, #0]
 801612c:	89a3      	ldrh	r3, [r4, #12]
 801612e:	f043 0308 	orr.w	r3, r3, #8
 8016132:	81a3      	strh	r3, [r4, #12]
 8016134:	6923      	ldr	r3, [r4, #16]
 8016136:	b94b      	cbnz	r3, 801614c <__swsetup_r+0x7c>
 8016138:	89a3      	ldrh	r3, [r4, #12]
 801613a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801613e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016142:	d003      	beq.n	801614c <__swsetup_r+0x7c>
 8016144:	4621      	mov	r1, r4
 8016146:	4628      	mov	r0, r5
 8016148:	f000 f884 	bl	8016254 <__smakebuf_r>
 801614c:	89a0      	ldrh	r0, [r4, #12]
 801614e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016152:	f010 0301 	ands.w	r3, r0, #1
 8016156:	d00a      	beq.n	801616e <__swsetup_r+0x9e>
 8016158:	2300      	movs	r3, #0
 801615a:	60a3      	str	r3, [r4, #8]
 801615c:	6963      	ldr	r3, [r4, #20]
 801615e:	425b      	negs	r3, r3
 8016160:	61a3      	str	r3, [r4, #24]
 8016162:	6923      	ldr	r3, [r4, #16]
 8016164:	b943      	cbnz	r3, 8016178 <__swsetup_r+0xa8>
 8016166:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801616a:	d1c4      	bne.n	80160f6 <__swsetup_r+0x26>
 801616c:	bd38      	pop	{r3, r4, r5, pc}
 801616e:	0781      	lsls	r1, r0, #30
 8016170:	bf58      	it	pl
 8016172:	6963      	ldrpl	r3, [r4, #20]
 8016174:	60a3      	str	r3, [r4, #8]
 8016176:	e7f4      	b.n	8016162 <__swsetup_r+0x92>
 8016178:	2000      	movs	r0, #0
 801617a:	e7f7      	b.n	801616c <__swsetup_r+0x9c>
 801617c:	2400030c 	.word	0x2400030c

08016180 <_raise_r>:
 8016180:	291f      	cmp	r1, #31
 8016182:	b538      	push	{r3, r4, r5, lr}
 8016184:	4604      	mov	r4, r0
 8016186:	460d      	mov	r5, r1
 8016188:	d904      	bls.n	8016194 <_raise_r+0x14>
 801618a:	2316      	movs	r3, #22
 801618c:	6003      	str	r3, [r0, #0]
 801618e:	f04f 30ff 	mov.w	r0, #4294967295
 8016192:	bd38      	pop	{r3, r4, r5, pc}
 8016194:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016196:	b112      	cbz	r2, 801619e <_raise_r+0x1e>
 8016198:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801619c:	b94b      	cbnz	r3, 80161b2 <_raise_r+0x32>
 801619e:	4620      	mov	r0, r4
 80161a0:	f000 f830 	bl	8016204 <_getpid_r>
 80161a4:	462a      	mov	r2, r5
 80161a6:	4601      	mov	r1, r0
 80161a8:	4620      	mov	r0, r4
 80161aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80161ae:	f000 b817 	b.w	80161e0 <_kill_r>
 80161b2:	2b01      	cmp	r3, #1
 80161b4:	d00a      	beq.n	80161cc <_raise_r+0x4c>
 80161b6:	1c59      	adds	r1, r3, #1
 80161b8:	d103      	bne.n	80161c2 <_raise_r+0x42>
 80161ba:	2316      	movs	r3, #22
 80161bc:	6003      	str	r3, [r0, #0]
 80161be:	2001      	movs	r0, #1
 80161c0:	e7e7      	b.n	8016192 <_raise_r+0x12>
 80161c2:	2400      	movs	r4, #0
 80161c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80161c8:	4628      	mov	r0, r5
 80161ca:	4798      	blx	r3
 80161cc:	2000      	movs	r0, #0
 80161ce:	e7e0      	b.n	8016192 <_raise_r+0x12>

080161d0 <raise>:
 80161d0:	4b02      	ldr	r3, [pc, #8]	; (80161dc <raise+0xc>)
 80161d2:	4601      	mov	r1, r0
 80161d4:	6818      	ldr	r0, [r3, #0]
 80161d6:	f7ff bfd3 	b.w	8016180 <_raise_r>
 80161da:	bf00      	nop
 80161dc:	2400030c 	.word	0x2400030c

080161e0 <_kill_r>:
 80161e0:	b538      	push	{r3, r4, r5, lr}
 80161e2:	4d07      	ldr	r5, [pc, #28]	; (8016200 <_kill_r+0x20>)
 80161e4:	2300      	movs	r3, #0
 80161e6:	4604      	mov	r4, r0
 80161e8:	4608      	mov	r0, r1
 80161ea:	4611      	mov	r1, r2
 80161ec:	602b      	str	r3, [r5, #0]
 80161ee:	f7f9 fc7d 	bl	800faec <_kill>
 80161f2:	1c43      	adds	r3, r0, #1
 80161f4:	d102      	bne.n	80161fc <_kill_r+0x1c>
 80161f6:	682b      	ldr	r3, [r5, #0]
 80161f8:	b103      	cbz	r3, 80161fc <_kill_r+0x1c>
 80161fa:	6023      	str	r3, [r4, #0]
 80161fc:	bd38      	pop	{r3, r4, r5, pc}
 80161fe:	bf00      	nop
 8016200:	2400378c 	.word	0x2400378c

08016204 <_getpid_r>:
 8016204:	f7f9 bc6a 	b.w	800fadc <_getpid>

08016208 <__swhatbuf_r>:
 8016208:	b570      	push	{r4, r5, r6, lr}
 801620a:	460c      	mov	r4, r1
 801620c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016210:	2900      	cmp	r1, #0
 8016212:	b096      	sub	sp, #88	; 0x58
 8016214:	4615      	mov	r5, r2
 8016216:	461e      	mov	r6, r3
 8016218:	da0d      	bge.n	8016236 <__swhatbuf_r+0x2e>
 801621a:	89a3      	ldrh	r3, [r4, #12]
 801621c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016220:	f04f 0100 	mov.w	r1, #0
 8016224:	bf0c      	ite	eq
 8016226:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801622a:	2340      	movne	r3, #64	; 0x40
 801622c:	2000      	movs	r0, #0
 801622e:	6031      	str	r1, [r6, #0]
 8016230:	602b      	str	r3, [r5, #0]
 8016232:	b016      	add	sp, #88	; 0x58
 8016234:	bd70      	pop	{r4, r5, r6, pc}
 8016236:	466a      	mov	r2, sp
 8016238:	f000 f848 	bl	80162cc <_fstat_r>
 801623c:	2800      	cmp	r0, #0
 801623e:	dbec      	blt.n	801621a <__swhatbuf_r+0x12>
 8016240:	9901      	ldr	r1, [sp, #4]
 8016242:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016246:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801624a:	4259      	negs	r1, r3
 801624c:	4159      	adcs	r1, r3
 801624e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016252:	e7eb      	b.n	801622c <__swhatbuf_r+0x24>

08016254 <__smakebuf_r>:
 8016254:	898b      	ldrh	r3, [r1, #12]
 8016256:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016258:	079d      	lsls	r5, r3, #30
 801625a:	4606      	mov	r6, r0
 801625c:	460c      	mov	r4, r1
 801625e:	d507      	bpl.n	8016270 <__smakebuf_r+0x1c>
 8016260:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016264:	6023      	str	r3, [r4, #0]
 8016266:	6123      	str	r3, [r4, #16]
 8016268:	2301      	movs	r3, #1
 801626a:	6163      	str	r3, [r4, #20]
 801626c:	b002      	add	sp, #8
 801626e:	bd70      	pop	{r4, r5, r6, pc}
 8016270:	ab01      	add	r3, sp, #4
 8016272:	466a      	mov	r2, sp
 8016274:	f7ff ffc8 	bl	8016208 <__swhatbuf_r>
 8016278:	9900      	ldr	r1, [sp, #0]
 801627a:	4605      	mov	r5, r0
 801627c:	4630      	mov	r0, r6
 801627e:	f7fe ff2f 	bl	80150e0 <_malloc_r>
 8016282:	b948      	cbnz	r0, 8016298 <__smakebuf_r+0x44>
 8016284:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016288:	059a      	lsls	r2, r3, #22
 801628a:	d4ef      	bmi.n	801626c <__smakebuf_r+0x18>
 801628c:	f023 0303 	bic.w	r3, r3, #3
 8016290:	f043 0302 	orr.w	r3, r3, #2
 8016294:	81a3      	strh	r3, [r4, #12]
 8016296:	e7e3      	b.n	8016260 <__smakebuf_r+0xc>
 8016298:	89a3      	ldrh	r3, [r4, #12]
 801629a:	6020      	str	r0, [r4, #0]
 801629c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80162a0:	81a3      	strh	r3, [r4, #12]
 80162a2:	9b00      	ldr	r3, [sp, #0]
 80162a4:	6163      	str	r3, [r4, #20]
 80162a6:	9b01      	ldr	r3, [sp, #4]
 80162a8:	6120      	str	r0, [r4, #16]
 80162aa:	b15b      	cbz	r3, 80162c4 <__smakebuf_r+0x70>
 80162ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80162b0:	4630      	mov	r0, r6
 80162b2:	f000 f81d 	bl	80162f0 <_isatty_r>
 80162b6:	b128      	cbz	r0, 80162c4 <__smakebuf_r+0x70>
 80162b8:	89a3      	ldrh	r3, [r4, #12]
 80162ba:	f023 0303 	bic.w	r3, r3, #3
 80162be:	f043 0301 	orr.w	r3, r3, #1
 80162c2:	81a3      	strh	r3, [r4, #12]
 80162c4:	89a3      	ldrh	r3, [r4, #12]
 80162c6:	431d      	orrs	r5, r3
 80162c8:	81a5      	strh	r5, [r4, #12]
 80162ca:	e7cf      	b.n	801626c <__smakebuf_r+0x18>

080162cc <_fstat_r>:
 80162cc:	b538      	push	{r3, r4, r5, lr}
 80162ce:	4d07      	ldr	r5, [pc, #28]	; (80162ec <_fstat_r+0x20>)
 80162d0:	2300      	movs	r3, #0
 80162d2:	4604      	mov	r4, r0
 80162d4:	4608      	mov	r0, r1
 80162d6:	4611      	mov	r1, r2
 80162d8:	602b      	str	r3, [r5, #0]
 80162da:	f7f9 fc63 	bl	800fba4 <_fstat>
 80162de:	1c43      	adds	r3, r0, #1
 80162e0:	d102      	bne.n	80162e8 <_fstat_r+0x1c>
 80162e2:	682b      	ldr	r3, [r5, #0]
 80162e4:	b103      	cbz	r3, 80162e8 <_fstat_r+0x1c>
 80162e6:	6023      	str	r3, [r4, #0]
 80162e8:	bd38      	pop	{r3, r4, r5, pc}
 80162ea:	bf00      	nop
 80162ec:	2400378c 	.word	0x2400378c

080162f0 <_isatty_r>:
 80162f0:	b538      	push	{r3, r4, r5, lr}
 80162f2:	4d06      	ldr	r5, [pc, #24]	; (801630c <_isatty_r+0x1c>)
 80162f4:	2300      	movs	r3, #0
 80162f6:	4604      	mov	r4, r0
 80162f8:	4608      	mov	r0, r1
 80162fa:	602b      	str	r3, [r5, #0]
 80162fc:	f7f9 fc62 	bl	800fbc4 <_isatty>
 8016300:	1c43      	adds	r3, r0, #1
 8016302:	d102      	bne.n	801630a <_isatty_r+0x1a>
 8016304:	682b      	ldr	r3, [r5, #0]
 8016306:	b103      	cbz	r3, 801630a <_isatty_r+0x1a>
 8016308:	6023      	str	r3, [r4, #0]
 801630a:	bd38      	pop	{r3, r4, r5, pc}
 801630c:	2400378c 	.word	0x2400378c

08016310 <_init>:
 8016310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016312:	bf00      	nop
 8016314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016316:	bc08      	pop	{r3}
 8016318:	469e      	mov	lr, r3
 801631a:	4770      	bx	lr

0801631c <_fini>:
 801631c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801631e:	bf00      	nop
 8016320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016322:	bc08      	pop	{r3}
 8016324:	469e      	mov	lr, r3
 8016326:	4770      	bx	lr
